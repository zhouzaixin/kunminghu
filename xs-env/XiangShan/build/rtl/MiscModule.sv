// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MiscModule(
  input         clock,
  input  [63:0] io_src_0,
  input  [63:0] io_src_1,
  input  [8:0]  io_func,
  input         io_regEnable,
  output [63:0] io_out
);

  reg  [63:0]      io_out_r;
  wire [15:0][3:0] _GEN =
    {{io_src_0[63:60]},
     {io_src_0[59:56]},
     {io_src_0[55:52]},
     {io_src_0[51:48]},
     {io_src_0[47:44]},
     {io_src_0[43:40]},
     {io_src_0[39:36]},
     {io_src_0[35:32]},
     {io_src_0[31:28]},
     {io_src_0[27:24]},
     {io_src_0[23:20]},
     {io_src_0[19:16]},
     {io_src_0[15:12]},
     {io_src_0[11:8]},
     {io_src_0[7:4]},
     {io_src_0[3:0]}};
  wire [7:0][7:0]  _GEN_0 =
    {{io_src_0[63:56]},
     {io_src_0[55:48]},
     {io_src_0[47:40]},
     {io_src_0[39:32]},
     {io_src_0[31:24]},
     {io_src_0[23:16]},
     {io_src_0[15:8]},
     {io_src_0[7:0]}};
  always @(posedge clock) begin
    if (io_regEnable)
      io_out_r <=
        io_func[0]
          ? {(|(io_src_1[63:59])) ? 8'h0 : _GEN_0[io_src_1[58:56]],
             (|(io_src_1[55:51])) ? 8'h0 : _GEN_0[io_src_1[50:48]],
             (|(io_src_1[47:43])) ? 8'h0 : _GEN_0[io_src_1[42:40]],
             (|(io_src_1[39:35])) ? 8'h0 : _GEN_0[io_src_1[34:32]],
             (|(io_src_1[31:27])) ? 8'h0 : _GEN_0[io_src_1[26:24]],
             (|(io_src_1[23:19])) ? 8'h0 : _GEN_0[io_src_1[18:16]],
             (|(io_src_1[15:11])) ? 8'h0 : _GEN_0[io_src_1[10:8]],
             (|(io_src_1[7:3])) ? 8'h0 : _GEN_0[io_src_1[2:0]]}
          : {_GEN[io_src_1[63:60]],
             _GEN[io_src_1[59:56]],
             _GEN[io_src_1[55:52]],
             _GEN[io_src_1[51:48]],
             _GEN[io_src_1[47:44]],
             _GEN[io_src_1[43:40]],
             _GEN[io_src_1[39:36]],
             _GEN[io_src_1[35:32]],
             _GEN[io_src_1[31:28]],
             _GEN[io_src_1[27:24]],
             _GEN[io_src_1[23:20]],
             _GEN[io_src_1[19:16]],
             _GEN[io_src_1[15:12]],
             _GEN[io_src_1[11:8]],
             _GEN[io_src_1[7:4]],
             _GEN[io_src_1[3:0]]};
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        io_out_r = {_RANDOM[1'h0], _RANDOM[1'h1]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = io_out_r;
endmodule

