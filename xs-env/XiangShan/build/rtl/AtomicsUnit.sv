// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AtomicsUnit(
  input          clock,
  input          reset,
  output         io_in_ready,
  input          io_in_valid,
  input  [8:0]   io_in_bits_uop_fuOpType,
  input          io_in_bits_uop_rfWen,
  input  [7:0]   io_in_bits_uop_pdest,
  input          io_in_bits_uop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_robIdx_value,
  input          io_in_bits_uop_sqIdx_flag,
  input  [5:0]   io_in_bits_uop_sqIdx_value,
  input  [63:0]  io_in_bits_src_0,
  input          io_storeDataIn_0_valid,
  input  [8:0]   io_storeDataIn_0_bits_uop_fuOpType,
  input  [63:0]  io_storeDataIn_0_bits_data,
  input          io_storeDataIn_1_valid,
  input  [8:0]   io_storeDataIn_1_bits_uop_fuOpType,
  input  [63:0]  io_storeDataIn_1_bits_data,
  output         io_out_valid,
  output         io_out_bits_uop_exceptionVec_3,
  output         io_out_bits_uop_exceptionVec_4,
  output         io_out_bits_uop_exceptionVec_5,
  output         io_out_bits_uop_exceptionVec_6,
  output         io_out_bits_uop_exceptionVec_7,
  output         io_out_bits_uop_exceptionVec_13,
  output         io_out_bits_uop_exceptionVec_15,
  output         io_out_bits_uop_exceptionVec_21,
  output         io_out_bits_uop_exceptionVec_23,
  output [3:0]   io_out_bits_uop_trigger,
  output         io_out_bits_uop_rfWen,
  output [7:0]   io_out_bits_uop_pdest,
  output         io_out_bits_uop_robIdx_flag,
  output [7:0]   io_out_bits_uop_robIdx_value,
  output [63:0]  io_out_bits_data,
  input          io_dcache_req_ready,
  output         io_dcache_req_valid,
  output [4:0]   io_dcache_req_bits_cmd,
  output [49:0]  io_dcache_req_bits_vaddr,
  output [47:0]  io_dcache_req_bits_addr,
  output [2:0]   io_dcache_req_bits_word_idx,
  output [127:0] io_dcache_req_bits_amo_data,
  output [15:0]  io_dcache_req_bits_amo_mask,
  output [127:0] io_dcache_req_bits_amo_cmp,
  input          io_dcache_resp_valid,
  input  [127:0] io_dcache_resp_bits_data,
  input          io_dcache_resp_bits_miss,
  input          io_dcache_resp_bits_replay,
  input          io_dcache_resp_bits_error,
  input          io_dcache_block_lr,
  output         io_dtlb_req_valid,
  output [49:0]  io_dtlb_req_bits_vaddr,
  output [63:0]  io_dtlb_req_bits_fullva,
  output [2:0]   io_dtlb_req_bits_cmd,
  output         io_dtlb_req_bits_debug_robIdx_flag,
  output [7:0]   io_dtlb_req_bits_debug_robIdx_value,
  input          io_dtlb_resp_valid,
  input  [47:0]  io_dtlb_resp_bits_paddr_0,
  input  [63:0]  io_dtlb_resp_bits_gpaddr_0,
  input  [63:0]  io_dtlb_resp_bits_fullva,
  input  [1:0]   io_dtlb_resp_bits_pbmt_0,
  input          io_dtlb_resp_bits_miss,
  input          io_dtlb_resp_bits_isForVSnonLeafPTE,
  input          io_dtlb_resp_bits_excp_0_gpf_ld,
  input          io_dtlb_resp_bits_excp_0_gpf_st,
  input          io_dtlb_resp_bits_excp_0_pf_ld,
  input          io_dtlb_resp_bits_excp_0_pf_st,
  input          io_dtlb_resp_bits_excp_0_af_ld,
  input          io_dtlb_resp_bits_excp_0_af_st,
  input          io_pmpResp_ld,
  input          io_pmpResp_st,
  input          io_pmpResp_mmio,
  output         io_flush_sbuffer_valid,
  input          io_flush_sbuffer_empty,
  output         io_feedbackSlow_valid,
  output         io_feedbackSlow_bits_sqIdx_flag,
  output [5:0]   io_feedbackSlow_bits_sqIdx_value,
  input          io_redirect_valid,
  output         io_exceptionInfo_valid,
  output [63:0]  io_exceptionInfo_bits_vaddr,
  output [63:0]  io_exceptionInfo_bits_gpaddr,
  output         io_exceptionInfo_bits_isForVSnonLeafPTE,
  input          io_csrCtrl_cache_error_enable,
  input          io_csrCtrl_mem_trigger_tUpdate_valid,
  input  [1:0]   io_csrCtrl_mem_trigger_tUpdate_bits_addr,
  input  [1:0]   io_csrCtrl_mem_trigger_tUpdate_bits_tdata_matchType,
  input          io_csrCtrl_mem_trigger_tUpdate_bits_tdata_select,
  input  [3:0]   io_csrCtrl_mem_trigger_tUpdate_bits_tdata_action,
  input          io_csrCtrl_mem_trigger_tUpdate_bits_tdata_chain,
  input          io_csrCtrl_mem_trigger_tUpdate_bits_tdata_store,
  input          io_csrCtrl_mem_trigger_tUpdate_bits_tdata_load,
  input  [63:0]  io_csrCtrl_mem_trigger_tUpdate_bits_tdata_tdata2,
  input          io_csrCtrl_mem_trigger_tEnableVec_0,
  input          io_csrCtrl_mem_trigger_tEnableVec_1,
  input          io_csrCtrl_mem_trigger_tEnableVec_2,
  input          io_csrCtrl_mem_trigger_tEnableVec_3,
  input          io_csrCtrl_mem_trigger_debugMode,
  input          io_csrCtrl_mem_trigger_triggerCanRaiseBpExp
);

  wire [4:0]   _io_dcache_req_bits_cmd_T_73;
  wire         io_in_ready_0;
  reg  [3:0]   state;
  reg          out_valid;
  reg          data_valid;
  reg  [8:0]   uop_fuOpType;
  reg          uop_rfWen;
  reg          uop_robIdx_flag;
  reg  [7:0]   uop_robIdx_value;
  wire         isLr = uop_fuOpType == 9'h2 | uop_fuOpType == 9'h3;
  wire         isSc = uop_fuOpType == 9'h6 | uop_fuOpType == 9'h7;
  wire         isAMOCAS = uop_fuOpType[5:2] == 4'hB;
  reg  [7:0]   pdest1;
  reg  [7:0]   pdest2;
  reg          pdest1Valid;
  reg          pdest2Valid;
  reg  [63:0]  rs1;
  reg  [63:0]  rs2_l;
  reg  [63:0]  rs2_h;
  reg  [63:0]  rd_l;
  reg  [63:0]  rd_h;
  wire [63:0]  _rs2_T = isAMOCAS ? rs2_l : rd_l;
  reg  [2:0]   stdCnt;
  reg          exceptionVec_3;
  reg          exceptionVec_4;
  reg          exceptionVec_5;
  reg          exceptionVec_6;
  reg          exceptionVec_7;
  reg          exceptionVec_13;
  reg          exceptionVec_15;
  reg          exceptionVec_21;
  reg          exceptionVec_23;
  reg  [3:0]   trigger;
  reg          atom_override_xtval;
  reg          have_sent_first_tlb_req;
  reg  [47:0]  paddr;
  reg  [63:0]  gpaddr;
  reg          isForVSnonLeafPTE;
  reg  [127:0] resp_data;
  wire         _io_in_ready_T = state == 4'h0;
  wire         _GEN = io_in_ready_0 & io_in_valid;
  wire         _GEN_0 = _io_in_ready_T & _GEN;
  wire         _GEN_1 = io_in_bits_uop_fuOpType[8:6] == 3'h0;
  wire         _GEN_2 = _GEN & _GEN_1;
  wire         _GEN_3 = io_in_bits_uop_fuOpType[8:6] == 3'h2;
  reg  [1:0]   tdata_0_matchType;
  reg          tdata_0_select;
  reg          tdata_0_timing;
  reg  [3:0]   tdata_0_action;
  reg          tdata_0_chain;
  reg          tdata_0_store;
  reg          tdata_0_load;
  reg  [63:0]  tdata_0_tdata2;
  reg  [1:0]   tdata_1_matchType;
  reg          tdata_1_select;
  reg          tdata_1_timing;
  reg  [3:0]   tdata_1_action;
  reg          tdata_1_chain;
  reg          tdata_1_store;
  reg          tdata_1_load;
  reg  [63:0]  tdata_1_tdata2;
  reg  [1:0]   tdata_2_matchType;
  reg          tdata_2_select;
  reg          tdata_2_timing;
  reg  [3:0]   tdata_2_action;
  reg          tdata_2_chain;
  reg          tdata_2_store;
  reg          tdata_2_load;
  reg  [63:0]  tdata_2_tdata2;
  reg  [1:0]   tdata_3_matchType;
  reg          tdata_3_select;
  reg          tdata_3_timing;
  reg  [3:0]   tdata_3_action;
  reg          tdata_3_chain;
  reg          tdata_3_store;
  reg          tdata_3_load;
  reg  [63:0]  tdata_3_tdata2;
  reg          tEnableVec_0;
  reg          tEnableVec_1;
  reg          tEnableVec_2;
  reg          tEnableVec_3;
  reg          backendTriggerCanFireVec_0;
  reg          backendTriggerCanFireVec_1;
  reg          backendTriggerCanFireVec_2;
  reg          backendTriggerCanFireVec_3;
  wire         _io_in_ready_T_1 = uop_fuOpType == 9'h2C;
  wire         io_dtlb_req_valid_0 = state == 4'h1;
  wire         _GEN_4 = io_dtlb_resp_valid & have_sent_first_tlb_req;
  wire         _GEN_5 = io_dtlb_req_valid_0 & _GEN_4;
  reg  [1:0]   pbmtReg;
  wire         _io_dcache_req_valid_T_3 = state == 4'h4;
  reg  [127:0] dcache_resp_data;
  reg          dcache_resp_error;
  wire         _GEN_6 = state == 4'h5 & io_dcache_resp_valid;
  wire         _GEN_7 = state == 4'h6;
  wire         _io_out_bits_data_T = state == 4'h8;
  reg          io_feedbackSlow_valid_last_REG;
  reg          io_feedbackSlow_valid_last_REG_1;
  reg          io_feedbackSlow_bits_sqIdx_r_flag;
  reg  [5:0]   io_feedbackSlow_bits_sqIdx_r_value;
  assign io_in_ready_0 =
    _io_in_ready_T | _io_in_ready_T_1 & (~pdest2Valid | ~pdest1Valid);
  wire         io_out_valid_0 =
    out_valid & (_io_out_bits_data_T ? pdest2Valid : pdest1Valid);
  wire         io_dcache_req_valid_0 =
    (_io_dcache_req_bits_cmd_T_73 == 5'h6 ? ~io_dcache_block_lr : data_valid)
    & _io_dcache_req_valid_T_3;
  wire [4:0]   _io_dcache_req_bits_cmd_T_60 =
    {1'h0,
     {uop_fuOpType == 9'hE,
      (uop_fuOpType == 9'h2 ? 3'h6 : 3'h0) | {3{uop_fuOpType == 9'h6}}
        | {uop_fuOpType == 9'hA, 2'h0}} | (uop_fuOpType == 9'h12 ? 4'h9 : 4'h0)
       | (uop_fuOpType == 9'h16 ? 4'hB : 4'h0) | (uop_fuOpType == 9'h1A ? 4'hA : 4'h0)
       | (uop_fuOpType == 9'h1E ? 4'hC : 4'h0) | (uop_fuOpType == 9'h22 ? 4'hD : 4'h0)
       | (uop_fuOpType == 9'h26 ? 4'hE : 4'h0) | {4{uop_fuOpType == 9'h2A}}}
    | (uop_fuOpType == 9'h2E ? 5'h1A : 5'h0);
  assign _io_dcache_req_bits_cmd_T_73 =
    {_io_dcache_req_bits_cmd_T_60[4],
     {_io_dcache_req_bits_cmd_T_60[3] | uop_fuOpType == 9'hF,
      _io_dcache_req_bits_cmd_T_60[2:0] | (uop_fuOpType == 9'h3 ? 3'h6 : 3'h0)
        | {3{uop_fuOpType == 9'h7}} | {uop_fuOpType == 9'hB, 2'h0}}
       | (uop_fuOpType == 9'h13 ? 4'h9 : 4'h0) | (uop_fuOpType == 9'h17 ? 4'hB : 4'h0)
       | (uop_fuOpType == 9'h1B ? 4'hA : 4'h0) | (uop_fuOpType == 9'h1F ? 4'hC : 4'h0)
       | (uop_fuOpType == 9'h23 ? 4'hD : 4'h0) | (uop_fuOpType == 9'h27 ? 4'hE : 4'h0)
       | {4{uop_fuOpType == 9'h2B}}} | (uop_fuOpType == 9'h2F ? 5'h1B : 5'h0)
    | (uop_fuOpType == 9'h2C ? 5'h18 : 5'h0);
  wire [10:0]  _io_dcache_req_bits_amo_mask_T_6 =
    uop_fuOpType[1:0] == 2'h2 ? 11'hF << paddr[2:0] : 11'h0;
  wire         _GEN_8 = io_dtlb_req_valid_0 & _GEN_4 & ~io_dtlb_resp_bits_miss;
  wire         _GEN_9 = state == 4'h3;
  wire         _GEN_10 =
    _io_dcache_req_valid_T_3 & io_dcache_req_ready & io_dcache_req_valid_0;
  wire         _load_hit_0_res_T = tdata_0_matchType == 2'h0;
  wire         _load_hit_0_res_T_2 = tdata_0_matchType == 2'h2;
  wire         _load_hit_1_res_T = tdata_1_matchType == 2'h0;
  wire         _load_hit_1_res_T_2 = tdata_1_matchType == 2'h2;
  wire         _load_hit_2_res_T = tdata_2_matchType == 2'h0;
  wire         _load_hit_2_res_T_2 = tdata_2_matchType == 2'h2;
  wire         _load_hit_3_res_T = tdata_3_matchType == 2'h0;
  wire         _load_hit_3_res_T_2 = tdata_3_matchType == 2'h2;
  wire         backendTriggerHitVec_0 =
    ~tdata_0_select & ~io_csrCtrl_mem_trigger_debugMode & ~isLr
    & ((&tdata_0_matchType)
         ? rs1[49:0] < tdata_0_tdata2[49:0]
         : _load_hit_0_res_T_2
             ? rs1[49:0] >= tdata_0_tdata2[49:0]
             : _load_hit_0_res_T & rs1[49:0] == tdata_0_tdata2[49:0]) & tEnableVec_0
    & tdata_0_store | ~tdata_0_select & ~io_csrCtrl_mem_trigger_debugMode & ~isSc
    & ((&tdata_0_matchType)
         ? rs1[49:0] < tdata_0_tdata2[49:0]
         : _load_hit_0_res_T_2
             ? rs1[49:0] >= tdata_0_tdata2[49:0]
             : _load_hit_0_res_T & rs1[49:0] == tdata_0_tdata2[49:0]) & tEnableVec_0
    & tdata_0_load;
  wire         backendTriggerHitVec_1 =
    ~tdata_1_select & ~io_csrCtrl_mem_trigger_debugMode & ~isLr
    & ((&tdata_1_matchType)
         ? rs1[49:0] < tdata_1_tdata2[49:0]
         : _load_hit_1_res_T_2
             ? rs1[49:0] >= tdata_1_tdata2[49:0]
             : _load_hit_1_res_T & rs1[49:0] == tdata_1_tdata2[49:0]) & tEnableVec_1
    & tdata_1_store | ~tdata_1_select & ~io_csrCtrl_mem_trigger_debugMode & ~isSc
    & ((&tdata_1_matchType)
         ? rs1[49:0] < tdata_1_tdata2[49:0]
         : _load_hit_1_res_T_2
             ? rs1[49:0] >= tdata_1_tdata2[49:0]
             : _load_hit_1_res_T & rs1[49:0] == tdata_1_tdata2[49:0]) & tEnableVec_1
    & tdata_1_load;
  wire         backendTriggerHitVec_2 =
    ~tdata_2_select & ~io_csrCtrl_mem_trigger_debugMode & ~isLr
    & ((&tdata_2_matchType)
         ? rs1[49:0] < tdata_2_tdata2[49:0]
         : _load_hit_2_res_T_2
             ? rs1[49:0] >= tdata_2_tdata2[49:0]
             : _load_hit_2_res_T & rs1[49:0] == tdata_2_tdata2[49:0]) & tEnableVec_2
    & tdata_2_store | ~tdata_2_select & ~io_csrCtrl_mem_trigger_debugMode & ~isSc
    & ((&tdata_2_matchType)
         ? rs1[49:0] < tdata_2_tdata2[49:0]
         : _load_hit_2_res_T_2
             ? rs1[49:0] >= tdata_2_tdata2[49:0]
             : _load_hit_2_res_T & rs1[49:0] == tdata_2_tdata2[49:0]) & tEnableVec_2
    & tdata_2_load;
  wire [3:0]   _hasTriggerFire_T =
    {backendTriggerCanFireVec_3,
     backendTriggerCanFireVec_2,
     backendTriggerCanFireVec_1,
     backendTriggerCanFireVec_0};
  wire [2:0]   triggerFireOH_enc =
    backendTriggerCanFireVec_0
      ? 3'h1
      : backendTriggerCanFireVec_1 ? 3'h2 : {backendTriggerCanFireVec_2, 2'h0};
  wire [3:0]   triggerFireAction =
    triggerFireOH_enc[0]
      ? tdata_0_action
      : triggerFireOH_enc[1]
          ? tdata_1_action
          : triggerFireOH_enc[2] ? tdata_2_action : tdata_3_action;
  wire [3:0]   triggerAction =
    (|_hasTriggerFire_T) & triggerFireAction == 4'h0
    & io_csrCtrl_mem_trigger_triggerCanRaiseBpExp
      ? 4'h0
      : (|_hasTriggerFire_T) & triggerFireAction == 4'h1 ? 4'h1 : 4'hF;
  wire         triggerBreakpoint = triggerAction == 4'h0;
  wire         addrAligned =
    uop_fuOpType[1:0] == 2'h2 & rs1[1:0] == 2'h0 | (&(uop_fuOpType[1:0]))
    & rs1[2:0] == 3'h0 | ~(|(uop_fuOpType[1:0])) & rs1[3:0] == 4'h0;
  wire         _GEN_11 = ~addrAligned | triggerAction == 4'h1 | triggerBreakpoint;
  wire         _GEN_12 = io_dtlb_req_valid_0 & _GEN_4 & ~io_dtlb_resp_bits_miss & _GEN_11;
  wire         _GEN_13 = state == 4'h2;
  wire         exception_pa_mmio_nc = io_pmpResp_mmio | pbmtReg == 2'h2 | pbmtReg == 2'h1;
  wire         _GEN_14 =
    exceptionVec_15 | exceptionVec_13 | exceptionVec_23 | exceptionVec_21 | exceptionVec_7
    | exceptionVec_5 | io_pmpResp_st | io_pmpResp_ld | exception_pa_mmio_nc;
  wire         _GEN_15 = _GEN_14 | _GEN_12;
  wire         _GEN_16 = state == 4'h7 & io_out_valid_0;
  wire         _GEN_17 = ~_GEN_16 | _io_in_ready_T_1;
  wire         _GEN_18 = _io_out_bits_data_T & io_out_valid_0;
  wire [3:0]   _GEN_19 = _GEN_11 ? 4'h7 : 4'h2;
  wire [3:0]   _GEN_20 = _GEN_14 ? 4'h7 : io_flush_sbuffer_empty ? 4'h4 : 4'h3;
  wire [3:0]   _GEN_21 = {1'h0, _GEN_14, 2'h3};
  wire         _exceptionVec_7_T_1 = io_pmpResp_ld | exception_pa_mmio_nc;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      state <= 4'h0;
      out_valid <= 1'h0;
      data_valid <= 1'h0;
      pdest1Valid <= 1'h0;
      pdest2Valid <= 1'h0;
      stdCnt <= 3'h0;
      exceptionVec_3 <= 1'h0;
      exceptionVec_4 <= 1'h0;
      exceptionVec_5 <= 1'h0;
      exceptionVec_6 <= 1'h0;
      exceptionVec_7 <= 1'h0;
      exceptionVec_13 <= 1'h0;
      exceptionVec_15 <= 1'h0;
      exceptionVec_21 <= 1'h0;
      exceptionVec_23 <= 1'h0;
      trigger <= 4'hF;
      atom_override_xtval <= 1'h0;
      have_sent_first_tlb_req <= 1'h0;
      tEnableVec_0 <= 1'h0;
      tEnableVec_1 <= 1'h0;
      tEnableVec_2 <= 1'h0;
      tEnableVec_3 <= 1'h0;
      backendTriggerCanFireVec_0 <= 1'h0;
      backendTriggerCanFireVec_1 <= 1'h0;
      backendTriggerCanFireVec_2 <= 1'h0;
      backendTriggerCanFireVec_3 <= 1'h0;
      io_feedbackSlow_valid_last_REG <= 1'h0;
      io_feedbackSlow_valid_last_REG_1 <= 1'h0;
    end
    else begin
      if (_GEN_18)
        state <= 4'h0;
      else if (_GEN_16)
        state <= {_io_in_ready_T_1, 3'h0};
      else if (_GEN_7)
        state <= 4'h7;
      else if (_GEN_6) begin
        if (io_dcache_resp_bits_miss) begin
          if (io_dcache_resp_bits_replay)
            state <= 4'h4;
          else if (_GEN_10)
            state <= 4'h5;
          else if (_GEN_9) begin
            if (io_flush_sbuffer_empty)
              state <= 4'h4;
            else if (_GEN_13)
              state <= _GEN_21;
            else if (_GEN_8)
              state <= _GEN_19;
            else if (_GEN_0)
              state <= 4'h1;
          end
          else if (_GEN_13)
            state <= _GEN_20;
          else if (_GEN_8)
            state <= _GEN_19;
          else if (_GEN_0)
            state <= 4'h1;
        end
        else
          state <= 4'h6;
      end
      else if (_GEN_10)
        state <= 4'h5;
      else if (_GEN_9) begin
        if (io_flush_sbuffer_empty)
          state <= 4'h4;
        else if (_GEN_13)
          state <= _GEN_21;
        else if (_GEN_8)
          state <= _GEN_19;
        else if (_GEN_0)
          state <= 4'h1;
      end
      else if (_GEN_13)
        state <= _GEN_20;
      else if (_GEN_8)
        state <= _GEN_19;
      else if (_GEN_0)
        state <= 4'h1;
      out_valid <=
        ~_GEN_18
        & (_GEN_16
             ? _io_in_ready_T_1
             : _GEN_7 | (_GEN_13 ? _GEN_15 | out_valid : _GEN_12 | out_valid));
      data_valid <=
        ~_GEN_18 & _GEN_17
        & (data_valid
             ? data_valid
             : (|state)
               & (uop_fuOpType == 9'h2C & stdCnt == 3'h4
                  | (uop_fuOpType == 9'h2E | uop_fuOpType == 9'h2F) & stdCnt == 3'h2
                  | ~isAMOCAS & stdCnt == 3'h1));
      pdest1Valid <= ~_GEN_18 & _GEN_17 & (_GEN_2 | pdest1Valid);
      pdest2Valid <= ~_GEN_18 & _GEN_17 & (_GEN & ~_GEN_1 & _GEN_3 | pdest2Valid);
      if (_GEN_18 | ~_GEN_17)
        stdCnt <= 3'h0;
      else
        stdCnt <=
          3'(stdCnt
             + {1'h0,
                2'({1'h0, io_storeDataIn_0_valid} + {1'h0, io_storeDataIn_1_valid})});
      if (_GEN_5) begin
        exceptionVec_3 <= triggerBreakpoint;
        exceptionVec_4 <= ~addrAligned & isLr;
        exceptionVec_6 <= ~addrAligned & ~isLr;
        exceptionVec_13 <= io_dtlb_resp_bits_excp_0_pf_ld;
        exceptionVec_15 <= io_dtlb_resp_bits_excp_0_pf_st;
        exceptionVec_21 <= io_dtlb_resp_bits_excp_0_gpf_ld;
        exceptionVec_23 <= io_dtlb_resp_bits_excp_0_gpf_st;
        trigger <= triggerAction;
      end
      if (_GEN_7 & dcache_resp_error & io_csrCtrl_cache_error_enable) begin
        exceptionVec_5 <= isLr;
        exceptionVec_7 <= ~isLr;
      end
      else if (_GEN_13) begin
        exceptionVec_5 <= exceptionVec_5 | _exceptionVec_7_T_1 & isLr;
        exceptionVec_7 <= exceptionVec_7 | io_pmpResp_st | _exceptionVec_7_T_1 & ~isLr;
      end
      else if (_GEN_5) begin
        exceptionVec_5 <= io_dtlb_resp_bits_excp_0_af_ld;
        exceptionVec_7 <= io_dtlb_resp_bits_excp_0_af_st;
      end
      atom_override_xtval <=
        ~io_redirect_valid
        & (_GEN_13 ? _GEN_15 | atom_override_xtval : _GEN_12 | atom_override_xtval);
      have_sent_first_tlb_req <= io_dtlb_req_valid_0 | ~_GEN_0 & have_sent_first_tlb_req;
      tEnableVec_0 <= io_csrCtrl_mem_trigger_tEnableVec_0;
      tEnableVec_1 <= io_csrCtrl_mem_trigger_tEnableVec_1;
      tEnableVec_2 <= io_csrCtrl_mem_trigger_tEnableVec_2;
      tEnableVec_3 <= io_csrCtrl_mem_trigger_tEnableVec_3;
      backendTriggerCanFireVec_0 <= backendTriggerHitVec_0 & ~tdata_0_chain;
      backendTriggerCanFireVec_1 <=
        (tdata_0_chain & backendTriggerHitVec_0 | ~tdata_0_chain)
        & (tdata_0_chain & ~tdata_1_chain & tdata_0_timing == tdata_1_timing
           | ~tdata_0_chain) & backendTriggerHitVec_1 & ~tdata_1_chain;
      backendTriggerCanFireVec_2 <=
        (tdata_1_chain & backendTriggerHitVec_1 | ~tdata_1_chain)
        & (tdata_1_chain & ~tdata_2_chain & tdata_1_timing == tdata_2_timing
           | ~tdata_1_chain) & backendTriggerHitVec_2 & ~tdata_2_chain;
      backendTriggerCanFireVec_3 <=
        (tdata_2_chain & backendTriggerHitVec_2 | ~tdata_2_chain)
        & (tdata_2_chain & ~tdata_3_chain & tdata_2_timing == tdata_3_timing
           | ~tdata_2_chain)
        & (~tdata_3_select & ~io_csrCtrl_mem_trigger_debugMode & ~isLr
           & ((&tdata_3_matchType)
                ? rs1[49:0] < tdata_3_tdata2[49:0]
                : _load_hit_3_res_T_2
                    ? rs1[49:0] >= tdata_3_tdata2[49:0]
                    : _load_hit_3_res_T & rs1[49:0] == tdata_3_tdata2[49:0])
           & tEnableVec_3 & tdata_3_store | ~tdata_3_select
           & ~io_csrCtrl_mem_trigger_debugMode & ~isSc
           & ((&tdata_3_matchType)
                ? rs1[49:0] < tdata_3_tdata2[49:0]
                : _load_hit_3_res_T_2
                    ? rs1[49:0] >= tdata_3_tdata2[49:0]
                    : _load_hit_3_res_T & rs1[49:0] == tdata_3_tdata2[49:0])
           & tEnableVec_3 & tdata_3_load) & ~tdata_3_chain;
      io_feedbackSlow_valid_last_REG <= io_in_valid;
      io_feedbackSlow_valid_last_REG_1 <= io_feedbackSlow_valid_last_REG;
    end
  end // always @(posedge, posedge)
  wire [127:0] rdataSel =
    paddr[2:0] == 3'h0 ? dcache_resp_data : {32'h0, dcache_resp_data[127:32]};
  wire         _GEN_22 =
    io_csrCtrl_mem_trigger_tUpdate_valid
    & io_csrCtrl_mem_trigger_tUpdate_bits_addr == 2'h0;
  wire         _GEN_23 =
    io_csrCtrl_mem_trigger_tUpdate_valid
    & io_csrCtrl_mem_trigger_tUpdate_bits_addr == 2'h1;
  wire         _GEN_24 =
    io_csrCtrl_mem_trigger_tUpdate_valid
    & io_csrCtrl_mem_trigger_tUpdate_bits_addr == 2'h2;
  wire         _GEN_25 =
    io_csrCtrl_mem_trigger_tUpdate_valid & (&io_csrCtrl_mem_trigger_tUpdate_bits_addr);
  always @(posedge clock) begin
    if (_GEN_0) begin
      uop_fuOpType <= io_in_bits_uop_fuOpType;
      uop_rfWen <= io_in_bits_uop_rfWen;
      uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      uop_robIdx_value <= io_in_bits_uop_robIdx_value;
    end
    if (_GEN_2)
      pdest1 <= io_in_bits_uop_pdest;
    if (~_GEN | _GEN_1 | ~_GEN_3) begin
    end
    else
      pdest2 <= io_in_bits_uop_pdest;
    if (_GEN_5) begin
      rs1 <= io_dtlb_resp_bits_fullva;
      paddr <= io_dtlb_resp_bits_paddr_0;
      gpaddr <= io_dtlb_resp_bits_gpaddr_0;
      isForVSnonLeafPTE <= io_dtlb_resp_bits_isForVSnonLeafPTE;
    end
    else if (_GEN_0)
      rs1 <= io_in_bits_src_0;
    if (io_storeDataIn_1_valid & io_storeDataIn_1_bits_uop_fuOpType[8:6] == 3'h1)
      rs2_l <= io_storeDataIn_1_bits_data;
    else if (io_storeDataIn_0_valid & io_storeDataIn_0_bits_uop_fuOpType[8:6] == 3'h1)
      rs2_l <= io_storeDataIn_0_bits_data;
    if (io_storeDataIn_1_valid & io_storeDataIn_1_bits_uop_fuOpType[8:6] == 3'h3)
      rs2_h <= io_storeDataIn_1_bits_data;
    else if (io_storeDataIn_0_valid & io_storeDataIn_0_bits_uop_fuOpType[8:6] == 3'h3)
      rs2_h <= io_storeDataIn_0_bits_data;
    if (io_storeDataIn_1_valid & io_storeDataIn_1_bits_uop_fuOpType[8:6] == 3'h0)
      rd_l <= io_storeDataIn_1_bits_data;
    else if (io_storeDataIn_0_valid & io_storeDataIn_0_bits_uop_fuOpType[8:6] == 3'h0)
      rd_l <= io_storeDataIn_0_bits_data;
    if (io_storeDataIn_1_valid & io_storeDataIn_1_bits_uop_fuOpType[8:6] == 3'h2)
      rd_h <= io_storeDataIn_1_bits_data;
    else if (io_storeDataIn_0_valid & io_storeDataIn_0_bits_uop_fuOpType[8:6] == 3'h2)
      rd_h <= io_storeDataIn_0_bits_data;
    if (_GEN_7)
      resp_data <=
        isSc
          ? dcache_resp_data
          : (uop_fuOpType[1:0] == 2'h2 ? {{96{rdataSel[31]}}, rdataSel[31:0]} : 128'h0)
            | ((&(uop_fuOpType[1:0])) ? {{64{rdataSel[63]}}, rdataSel[63:0]} : 128'h0)
            | ((|(uop_fuOpType[1:0])) ? 128'h0 : rdataSel);
    if (_GEN_22) begin
      tdata_0_matchType <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_matchType;
      tdata_0_select <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_select;
      tdata_0_action <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_action;
      tdata_0_chain <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_chain;
      tdata_0_store <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_store;
      tdata_0_load <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_load;
      tdata_0_tdata2 <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_tdata2;
    end
    tdata_0_timing <= ~_GEN_22 & tdata_0_timing;
    if (_GEN_23) begin
      tdata_1_matchType <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_matchType;
      tdata_1_select <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_select;
      tdata_1_action <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_action;
      tdata_1_chain <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_chain;
      tdata_1_store <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_store;
      tdata_1_load <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_load;
      tdata_1_tdata2 <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_tdata2;
    end
    tdata_1_timing <= ~_GEN_23 & tdata_1_timing;
    if (_GEN_24) begin
      tdata_2_matchType <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_matchType;
      tdata_2_select <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_select;
      tdata_2_action <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_action;
      tdata_2_chain <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_chain;
      tdata_2_store <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_store;
      tdata_2_load <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_load;
      tdata_2_tdata2 <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_tdata2;
    end
    tdata_2_timing <= ~_GEN_24 & tdata_2_timing;
    if (_GEN_25) begin
      tdata_3_matchType <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_matchType;
      tdata_3_select <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_select;
      tdata_3_action <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_action;
      tdata_3_chain <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_chain;
      tdata_3_store <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_store;
      tdata_3_load <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_load;
      tdata_3_tdata2 <= io_csrCtrl_mem_trigger_tUpdate_bits_tdata_tdata2;
    end
    tdata_3_timing <= ~_GEN_25 & tdata_3_timing;
    if (io_dtlb_resp_valid & ~io_dtlb_resp_bits_miss)
      pbmtReg <= io_dtlb_resp_bits_pbmt_0;
    if (~_GEN_6 | io_dcache_resp_bits_miss) begin
    end
    else begin
      dcache_resp_data <= io_dcache_resp_bits_data;
      dcache_resp_error <= io_dcache_resp_bits_error;
    end
    if (io_in_valid) begin
      io_feedbackSlow_bits_sqIdx_r_flag <= io_in_bits_uop_sqIdx_flag;
      io_feedbackSlow_bits_sqIdx_r_value <= io_in_bits_uop_sqIdx_value;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:74];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [6:0] i = 7'h0; i < 7'h4B; i += 7'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[7'h0][3:0];
        out_valid = _RANDOM[7'h0][4];
        data_valid = _RANDOM[7'h0][5];
        uop_fuOpType = _RANDOM[7'h6][24:16];
        uop_rfWen = _RANDOM[7'h6][25];
        uop_robIdx_flag = _RANDOM[7'h12][18];
        uop_robIdx_value = _RANDOM[7'h12][26:19];
        pdest1 = _RANDOM[7'h26][26:19];
        pdest2 = {_RANDOM[7'h26][31:27], _RANDOM[7'h27][2:0]};
        pdest1Valid = _RANDOM[7'h27][3];
        pdest2Valid = _RANDOM[7'h27][4];
        rs1 = {_RANDOM[7'h27][31:5], _RANDOM[7'h28], _RANDOM[7'h29][4:0]};
        rs2_l = {_RANDOM[7'h29][31:5], _RANDOM[7'h2A], _RANDOM[7'h2B][4:0]};
        rs2_h = {_RANDOM[7'h2B][31:5], _RANDOM[7'h2C], _RANDOM[7'h2D][4:0]};
        rd_l = {_RANDOM[7'h2D][31:5], _RANDOM[7'h2E], _RANDOM[7'h2F][4:0]};
        rd_h = {_RANDOM[7'h2F][31:5], _RANDOM[7'h30], _RANDOM[7'h31][4:0]};
        stdCnt = _RANDOM[7'h31][7:5];
        exceptionVec_3 = _RANDOM[7'h31][11];
        exceptionVec_4 = _RANDOM[7'h31][12];
        exceptionVec_5 = _RANDOM[7'h31][13];
        exceptionVec_6 = _RANDOM[7'h31][14];
        exceptionVec_7 = _RANDOM[7'h31][15];
        exceptionVec_13 = _RANDOM[7'h31][21];
        exceptionVec_15 = _RANDOM[7'h31][23];
        exceptionVec_21 = _RANDOM[7'h31][29];
        exceptionVec_23 = _RANDOM[7'h31][31];
        trigger = _RANDOM[7'h32][3:0];
        atom_override_xtval = _RANDOM[7'h32][4];
        have_sent_first_tlb_req = _RANDOM[7'h32][5];
        paddr = {_RANDOM[7'h32][31:6], _RANDOM[7'h33][21:0]};
        gpaddr = {_RANDOM[7'h33][31:22], _RANDOM[7'h34], _RANDOM[7'h35][21:0]};
        isForVSnonLeafPTE = _RANDOM[7'h35][23];
        resp_data =
          {_RANDOM[7'h35][31:24],
           _RANDOM[7'h36],
           _RANDOM[7'h37],
           _RANDOM[7'h38],
           _RANDOM[7'h39][23:0]};
        tdata_0_matchType = _RANDOM[7'h39][26:25];
        tdata_0_select = _RANDOM[7'h39][27];
        tdata_0_timing = _RANDOM[7'h39][28];
        tdata_0_action = {_RANDOM[7'h39][31:29], _RANDOM[7'h3A][0]};
        tdata_0_chain = _RANDOM[7'h3A][1];
        tdata_0_store = _RANDOM[7'h3A][3];
        tdata_0_load = _RANDOM[7'h3A][4];
        tdata_0_tdata2 = {_RANDOM[7'h3A][31:5], _RANDOM[7'h3B], _RANDOM[7'h3C][4:0]};
        tdata_1_matchType = _RANDOM[7'h3C][6:5];
        tdata_1_select = _RANDOM[7'h3C][7];
        tdata_1_timing = _RANDOM[7'h3C][8];
        tdata_1_action = _RANDOM[7'h3C][12:9];
        tdata_1_chain = _RANDOM[7'h3C][13];
        tdata_1_store = _RANDOM[7'h3C][15];
        tdata_1_load = _RANDOM[7'h3C][16];
        tdata_1_tdata2 = {_RANDOM[7'h3C][31:17], _RANDOM[7'h3D], _RANDOM[7'h3E][16:0]};
        tdata_2_matchType = _RANDOM[7'h3E][18:17];
        tdata_2_select = _RANDOM[7'h3E][19];
        tdata_2_timing = _RANDOM[7'h3E][20];
        tdata_2_action = _RANDOM[7'h3E][24:21];
        tdata_2_chain = _RANDOM[7'h3E][25];
        tdata_2_store = _RANDOM[7'h3E][27];
        tdata_2_load = _RANDOM[7'h3E][28];
        tdata_2_tdata2 = {_RANDOM[7'h3E][31:29], _RANDOM[7'h3F], _RANDOM[7'h40][28:0]};
        tdata_3_matchType = _RANDOM[7'h40][30:29];
        tdata_3_select = _RANDOM[7'h40][31];
        tdata_3_timing = _RANDOM[7'h41][0];
        tdata_3_action = _RANDOM[7'h41][4:1];
        tdata_3_chain = _RANDOM[7'h41][5];
        tdata_3_store = _RANDOM[7'h41][7];
        tdata_3_load = _RANDOM[7'h41][8];
        tdata_3_tdata2 = {_RANDOM[7'h41][31:9], _RANDOM[7'h42], _RANDOM[7'h43][8:0]};
        tEnableVec_0 = _RANDOM[7'h43][9];
        tEnableVec_1 = _RANDOM[7'h43][10];
        tEnableVec_2 = _RANDOM[7'h43][11];
        tEnableVec_3 = _RANDOM[7'h43][12];
        backendTriggerCanFireVec_0 = _RANDOM[7'h43][13];
        backendTriggerCanFireVec_1 = _RANDOM[7'h43][14];
        backendTriggerCanFireVec_2 = _RANDOM[7'h43][15];
        backendTriggerCanFireVec_3 = _RANDOM[7'h43][16];
        pbmtReg = _RANDOM[7'h45][18:17];
        dcache_resp_data =
          {_RANDOM[7'h45][31:19],
           _RANDOM[7'h46],
           _RANDOM[7'h47],
           _RANDOM[7'h48],
           _RANDOM[7'h49][18:0]};
        dcache_resp_error = _RANDOM[7'h49][25];
        io_feedbackSlow_valid_last_REG = _RANDOM[7'h49][26];
        io_feedbackSlow_valid_last_REG_1 = _RANDOM[7'h49][27];
        io_feedbackSlow_bits_sqIdx_r_flag = _RANDOM[7'h4A][5];
        io_feedbackSlow_bits_sqIdx_r_value = _RANDOM[7'h4A][11:6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        state = 4'h0;
        out_valid = 1'h0;
        data_valid = 1'h0;
        pdest1Valid = 1'h0;
        pdest2Valid = 1'h0;
        stdCnt = 3'h0;
        exceptionVec_3 = 1'h0;
        exceptionVec_4 = 1'h0;
        exceptionVec_5 = 1'h0;
        exceptionVec_6 = 1'h0;
        exceptionVec_7 = 1'h0;
        exceptionVec_13 = 1'h0;
        exceptionVec_15 = 1'h0;
        exceptionVec_21 = 1'h0;
        exceptionVec_23 = 1'h0;
        trigger = 4'hF;
        atom_override_xtval = 1'h0;
        have_sent_first_tlb_req = 1'h0;
        tEnableVec_0 = 1'h0;
        tEnableVec_1 = 1'h0;
        tEnableVec_2 = 1'h0;
        tEnableVec_3 = 1'h0;
        backendTriggerCanFireVec_0 = 1'h0;
        backendTriggerCanFireVec_1 = 1'h0;
        backendTriggerCanFireVec_2 = 1'h0;
        backendTriggerCanFireVec_3 = 1'h0;
        io_feedbackSlow_valid_last_REG = 1'h0;
        io_feedbackSlow_valid_last_REG_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = io_out_valid_0;
  assign io_out_bits_uop_exceptionVec_3 = exceptionVec_3;
  assign io_out_bits_uop_exceptionVec_4 = exceptionVec_4;
  assign io_out_bits_uop_exceptionVec_5 = exceptionVec_5;
  assign io_out_bits_uop_exceptionVec_6 = exceptionVec_6;
  assign io_out_bits_uop_exceptionVec_7 = exceptionVec_7;
  assign io_out_bits_uop_exceptionVec_13 = exceptionVec_13;
  assign io_out_bits_uop_exceptionVec_15 = exceptionVec_15;
  assign io_out_bits_uop_exceptionVec_21 = exceptionVec_21;
  assign io_out_bits_uop_exceptionVec_23 = exceptionVec_23;
  assign io_out_bits_uop_trigger = trigger;
  assign io_out_bits_uop_rfWen = uop_rfWen;
  assign io_out_bits_uop_pdest = _io_out_bits_data_T ? pdest2 : pdest1;
  assign io_out_bits_uop_robIdx_flag = uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = uop_robIdx_value;
  assign io_out_bits_data = _io_out_bits_data_T ? resp_data[127:64] : resp_data[63:0];
  assign io_dcache_req_valid = io_dcache_req_valid_0;
  assign io_dcache_req_bits_cmd = _io_dcache_req_bits_cmd_T_73;
  assign io_dcache_req_bits_vaddr = {rs1[49:6], 6'h0};
  assign io_dcache_req_bits_addr = {paddr[47:6], 6'h0};
  assign io_dcache_req_bits_word_idx = paddr[5:3];
  assign io_dcache_req_bits_amo_data =
    (uop_fuOpType[1:0] == 2'h2 ? {2{{2{_rs2_T[31:0]}}}} : 128'h0)
    | ((&(uop_fuOpType[1:0])) ? {2{_rs2_T}} : 128'h0)
    | ((|(uop_fuOpType[1:0])) ? 128'h0 : {rs2_h, _rs2_T});
  assign io_dcache_req_bits_amo_mask =
    {5'h0,
     _io_dcache_req_bits_amo_mask_T_6[10:8],
     _io_dcache_req_bits_amo_mask_T_6[7:0] | {8{&(uop_fuOpType[1:0])}}}
    | {16{~(|(uop_fuOpType[1:0]))}};
  assign io_dcache_req_bits_amo_cmp =
    (uop_fuOpType[1:0] == 2'h2 ? {2{{2{rd_l[31:0]}}}} : 128'h0)
    | ((&(uop_fuOpType[1:0])) ? {2{rd_l}} : 128'h0)
    | ((|(uop_fuOpType[1:0])) ? 128'h0 : {rd_h, rd_l});
  assign io_dtlb_req_valid = io_dtlb_req_valid_0;
  assign io_dtlb_req_bits_vaddr = rs1[49:0];
  assign io_dtlb_req_bits_fullva = rs1;
  assign io_dtlb_req_bits_cmd = {2'h2, ~isLr};
  assign io_dtlb_req_bits_debug_robIdx_flag = uop_robIdx_flag;
  assign io_dtlb_req_bits_debug_robIdx_value = uop_robIdx_value;
  assign io_flush_sbuffer_valid = ~io_flush_sbuffer_empty & io_dtlb_req_valid_0;
  assign io_feedbackSlow_valid = io_feedbackSlow_valid_last_REG_1;
  assign io_feedbackSlow_bits_sqIdx_flag = io_feedbackSlow_bits_sqIdx_r_flag;
  assign io_feedbackSlow_bits_sqIdx_value = io_feedbackSlow_bits_sqIdx_r_value;
  assign io_exceptionInfo_valid = atom_override_xtval;
  assign io_exceptionInfo_bits_vaddr = rs1;
  assign io_exceptionInfo_bits_gpaddr = gpaddr;
  assign io_exceptionInfo_bits_isForVSnonLeafPTE = isForVSnonLeafPTE;
endmodule

