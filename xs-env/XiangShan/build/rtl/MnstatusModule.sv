// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MnstatusModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_NMIE,
  output        regOut_MNPV,
  output [1:0]  regOut_MNPP,
  input         trapToMN_mnstatus_valid,
  input         trapToMN_mnstatus_bits_NMIE,
  input         trapToMN_mnstatus_bits_MNPV,
  input  [1:0]  trapToMN_mnstatus_bits_MNPP,
  input         retFromMN_mnstatus_valid,
  input         retFromMN_mnstatus_bits_NMIE,
  input         retFromMN_mnstatus_bits_MNPV,
  input  [1:0]  retFromMN_mnstatus_bits_MNPP
);

  reg        reg_NMIE;
  reg        reg_MNPV;
  reg  [1:0] reg_MNPP;
  wire       _GEN = trapToMN_mnstatus_valid | retFromMN_mnstatus_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_NMIE <= 1'h1;
      reg_MNPV <= 1'h0;
      reg_MNPP <= 2'h0;
    end
    else begin
      if (w_wen | _GEN) begin
        reg_NMIE <=
          trapToMN_mnstatus_valid & trapToMN_mnstatus_bits_NMIE | retFromMN_mnstatus_valid
          & retFromMN_mnstatus_bits_NMIE | w_wen & w_wdata[3];
        reg_MNPV <=
          trapToMN_mnstatus_valid & trapToMN_mnstatus_bits_MNPV | retFromMN_mnstatus_valid
          & retFromMN_mnstatus_bits_MNPV | w_wen & w_wdata[7];
      end
      if (w_wen & (|{&(w_wdata[12:11]), w_wdata[12:11] == 2'h1, w_wdata[12:11] == 2'h0})
          | _GEN)
        reg_MNPP <=
          (trapToMN_mnstatus_valid ? trapToMN_mnstatus_bits_MNPP : 2'h0)
          | (retFromMN_mnstatus_valid ? retFromMN_mnstatus_bits_MNPP : 2'h0)
          | (w_wen ? w_wdata[12:11] : 2'h0);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_NMIE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_MNPV = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_MNPP = _RANDOM[/*Zero width*/ 1'b0][4:3];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_NMIE = 1'h1;
        reg_MNPV = 1'h0;
        reg_MNPP = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata = {51'h0, reg_MNPP, 3'h0, reg_MNPV, 3'h0, reg_NMIE, 3'h0};
  assign regOut_NMIE = reg_NMIE;
  assign regOut_MNPV = reg_MNPV;
  assign regOut_MNPP = reg_MNPP;
endmodule

