// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SinkA_4(
  input          clock,
  input          reset,
  output         io_a_ready,
  input          io_a_valid,
  input  [3:0]   io_a_bits_opcode,
  input  [2:0]   io_a_bits_param,
  input  [2:0]   io_a_bits_size,
  input  [10:0]  io_a_bits_source,
  input  [47:0]  io_a_bits_address,
  input  [3:0]   io_a_bits_user_reqSource,
  input  [31:0]  io_a_bits_mask,
  input  [255:0] io_a_bits_data,
  input          io_a_bits_corrupt,
  input          io_alloc_ready,
  output         io_alloc_valid,
  output [2:0]   io_alloc_bits_opcode,
  output [2:0]   io_alloc_bits_param,
  output [2:0]   io_alloc_bits_size,
  output [10:0]  io_alloc_bits_source,
  output [10:0]  io_alloc_bits_set,
  output [30:0]  io_alloc_bits_tag,
  output [5:0]   io_alloc_bits_off,
  output [31:0]  io_alloc_bits_mask,
  output [3:0]   io_alloc_bits_bufIdx,
  output         io_alloc_bits_isPrefetch,
  output [3:0]   io_alloc_bits_reqSource,
  output         io_d_pb_pop_ready,
  input          io_d_pb_pop_valid,
  input  [3:0]   io_d_pb_pop_bits_bufIdx,
  input          io_d_pb_pop_bits_count,
  input          io_d_pb_pop_bits_last,
  output [255:0] io_d_pb_beat_data,
  output [31:0]  io_d_pb_beat_mask,
  output         io_d_pb_beat_corrupt,
  output         io_a_pb_pop_ready,
  input          io_a_pb_pop_valid,
  input  [3:0]   io_a_pb_pop_bits_bufIdx,
  input          io_a_pb_pop_bits_count,
  input          io_a_pb_pop_bits_last,
  output [255:0] io_a_pb_beat_data,
  output [31:0]  io_a_pb_beat_mask
);

  wire              io_a_ready_0;
  wire              _insertIdxReg_T = io_a_ready_0 & io_a_valid;
  wire [12:0]       _r_beats1_decode_T = 13'h3F << io_a_bits_size;
  wire              r_beats1 = ~(io_a_bits_opcode[2]) & ~(_r_beats1_decode_T[5]);
  reg               r_counter;
  wire              _r_counter1_T = 1'(r_counter - 1'h1);
  wire              count = r_beats1 & ~_r_counter1_T;
  reg  [255:0]      putBuffer_0_0_data;
  reg  [31:0]       putBuffer_0_0_mask;
  reg               putBuffer_0_0_corrupt;
  reg  [255:0]      putBuffer_0_1_data;
  reg  [31:0]       putBuffer_0_1_mask;
  reg               putBuffer_0_1_corrupt;
  reg  [255:0]      putBuffer_1_0_data;
  reg  [31:0]       putBuffer_1_0_mask;
  reg               putBuffer_1_0_corrupt;
  reg  [255:0]      putBuffer_1_1_data;
  reg  [31:0]       putBuffer_1_1_mask;
  reg               putBuffer_1_1_corrupt;
  reg  [255:0]      putBuffer_2_0_data;
  reg  [31:0]       putBuffer_2_0_mask;
  reg               putBuffer_2_0_corrupt;
  reg  [255:0]      putBuffer_2_1_data;
  reg  [31:0]       putBuffer_2_1_mask;
  reg               putBuffer_2_1_corrupt;
  reg  [255:0]      putBuffer_3_0_data;
  reg  [31:0]       putBuffer_3_0_mask;
  reg               putBuffer_3_0_corrupt;
  reg  [255:0]      putBuffer_3_1_data;
  reg  [31:0]       putBuffer_3_1_mask;
  reg               putBuffer_3_1_corrupt;
  reg  [255:0]      putBuffer_4_0_data;
  reg  [31:0]       putBuffer_4_0_mask;
  reg               putBuffer_4_0_corrupt;
  reg  [255:0]      putBuffer_4_1_data;
  reg  [31:0]       putBuffer_4_1_mask;
  reg               putBuffer_4_1_corrupt;
  reg  [255:0]      putBuffer_5_0_data;
  reg  [31:0]       putBuffer_5_0_mask;
  reg               putBuffer_5_0_corrupt;
  reg  [255:0]      putBuffer_5_1_data;
  reg  [31:0]       putBuffer_5_1_mask;
  reg               putBuffer_5_1_corrupt;
  reg  [255:0]      putBuffer_6_0_data;
  reg  [31:0]       putBuffer_6_0_mask;
  reg               putBuffer_6_0_corrupt;
  reg  [255:0]      putBuffer_6_1_data;
  reg  [31:0]       putBuffer_6_1_mask;
  reg               putBuffer_6_1_corrupt;
  reg               beatVals_0_0;
  reg               beatVals_0_1;
  reg               beatVals_1_0;
  reg               beatVals_1_1;
  reg               beatVals_2_0;
  reg               beatVals_2_1;
  reg               beatVals_3_0;
  reg               beatVals_3_1;
  reg               beatVals_4_0;
  reg               beatVals_4_1;
  reg               beatVals_5_0;
  reg               beatVals_5_1;
  reg               beatVals_6_0;
  reg               beatVals_6_1;
  wire [1:0]        _bufVals_T = {beatVals_0_1, beatVals_0_0};
  wire [1:0]        _bufVals_T_2 = {beatVals_1_1, beatVals_1_0};
  wire [1:0]        _bufVals_T_4 = {beatVals_2_1, beatVals_2_0};
  wire [1:0]        _bufVals_T_6 = {beatVals_3_1, beatVals_3_0};
  wire [1:0]        _bufVals_T_8 = {beatVals_4_1, beatVals_4_0};
  wire [1:0]        _bufVals_T_10 = {beatVals_5_1, beatVals_5_0};
  wire              noSpace =
    (&{|{beatVals_6_1, beatVals_6_0},
       |_bufVals_T_10,
       |_bufVals_T_8,
       |_bufVals_T_6,
       |_bufVals_T_4,
       |_bufVals_T_2,
       |_bufVals_T}) & ~(io_a_bits_opcode[2]);
  wire [5:0]        _insertIdx_T =
    ~{|_bufVals_T_10,
      |_bufVals_T_8,
      |_bufVals_T_6,
      |_bufVals_T_4,
      |_bufVals_T_2,
      |_bufVals_T};
  wire [2:0]        insertIdx =
    _insertIdx_T[0]
      ? 3'h0
      : _insertIdx_T[1]
          ? 3'h1
          : _insertIdx_T[2]
              ? 3'h2
              : _insertIdx_T[3]
                  ? 3'h3
                  : _insertIdx_T[4] ? 3'h4 : _insertIdx_T[5] ? 3'h5 : 3'h6;
  reg  [2:0]        insertIdxReg;
  wire              _GEN = _insertIdxReg_T & ~(io_a_bits_opcode[2]);
  wire              _GEN_0 = insertIdx == 3'h0;
  wire              _GEN_1 = _GEN_0 & ~count;
  wire              _GEN_2 = _GEN_0 & count;
  wire              _GEN_3 = insertIdx == 3'h1;
  wire              _GEN_4 = _GEN_3 & ~count;
  wire              _GEN_5 = _GEN_3 & count;
  wire              _GEN_6 = insertIdx == 3'h2;
  wire              _GEN_7 = _GEN_6 & ~count;
  wire              _GEN_8 = _GEN_6 & count;
  wire              _GEN_9 = insertIdx == 3'h3;
  wire              _GEN_10 = _GEN_9 & ~count;
  wire              _GEN_11 = _GEN_9 & count;
  wire              _GEN_12 = insertIdx == 3'h4;
  wire              _GEN_13 = _GEN_12 & ~count;
  wire              _GEN_14 = _GEN_12 & count;
  wire              _GEN_15 = insertIdx == 3'h5;
  wire              _GEN_16 = _GEN_15 & ~count;
  wire              _GEN_17 = _GEN_15 & count;
  wire              _GEN_18 = insertIdx == 3'h6;
  wire              _GEN_19 = _GEN_18 & ~count;
  wire              _GEN_20 = _GEN_18 & count;
  wire              _GEN_21 = insertIdxReg == 3'h0;
  wire              _GEN_22 = _GEN_21 & ~count;
  wire              _GEN_23 = _GEN_21 & count;
  wire              _GEN_24 = insertIdxReg == 3'h1;
  wire              _GEN_25 = _GEN_24 & ~count;
  wire              _GEN_26 = _GEN_24 & count;
  wire              _GEN_27 = insertIdxReg == 3'h2;
  wire              _GEN_28 = _GEN_27 & ~count;
  wire              _GEN_29 = _GEN_27 & count;
  wire              _GEN_30 = insertIdxReg == 3'h3;
  wire              _GEN_31 = _GEN_30 & ~count;
  wire              _GEN_32 = _GEN_30 & count;
  wire              _GEN_33 = insertIdxReg == 3'h4;
  wire              _GEN_34 = _GEN_33 & ~count;
  wire              _GEN_35 = _GEN_33 & count;
  wire              _GEN_36 = insertIdxReg == 3'h5;
  wire              _GEN_37 = _GEN_36 & ~count;
  wire              _GEN_38 = _GEN_36 & count;
  wire              _GEN_39 = insertIdxReg == 3'h6;
  wire              _GEN_40 = _GEN_39 & ~count;
  wire              _GEN_41 = _GEN_39 & count;
  reg  [11:0]       bufferLeakCnt;
  assign io_a_ready_0 = r_counter | io_alloc_ready & ~noSpace;
  wire [7:0]        _GEN_42 =
    {{beatVals_0_0},
     {beatVals_6_0},
     {beatVals_5_0},
     {beatVals_4_0},
     {beatVals_3_0},
     {beatVals_2_0},
     {beatVals_1_0},
     {beatVals_0_0}};
  wire [7:0]        _GEN_43 =
    {{beatVals_0_1},
     {beatVals_6_1},
     {beatVals_5_1},
     {beatVals_4_1},
     {beatVals_3_1},
     {beatVals_2_1},
     {beatVals_1_1},
     {beatVals_0_1}};
  wire              io_d_pb_pop_ready_0 =
    io_d_pb_pop_bits_count
      ? _GEN_43[io_d_pb_pop_bits_bufIdx[2:0]]
      : _GEN_42[io_d_pb_pop_bits_bufIdx[2:0]];
  wire              _io_d_pb_beat_T_1 = io_d_pb_pop_ready_0 & io_d_pb_pop_valid;
  reg  [255:0]      io_d_pb_beat_r_data;
  reg  [31:0]       io_d_pb_beat_r_mask;
  reg               io_d_pb_beat_r_corrupt;
  wire              io_a_pb_pop_ready_0 =
    io_a_pb_pop_bits_count
      ? _GEN_43[io_a_pb_pop_bits_bufIdx[2:0]]
      : _GEN_42[io_a_pb_pop_bits_bufIdx[2:0]];
  wire              _io_a_pb_beat_T_1 = io_a_pb_pop_ready_0 & io_a_pb_pop_valid;
  reg  [255:0]      io_a_pb_beat_r_data;
  reg  [31:0]       io_a_pb_beat_r_mask;
  wire              _GEN_44 =
    _GEN ? (r_counter ? _GEN_22 | beatVals_0_0 : _GEN_1 | beatVals_0_0) : beatVals_0_0;
  wire              _GEN_45 =
    _GEN ? (r_counter ? _GEN_23 | beatVals_0_1 : _GEN_2 | beatVals_0_1) : beatVals_0_1;
  wire              _GEN_46 =
    _GEN ? (r_counter ? _GEN_25 | beatVals_1_0 : _GEN_4 | beatVals_1_0) : beatVals_1_0;
  wire              _GEN_47 =
    _GEN ? (r_counter ? _GEN_26 | beatVals_1_1 : _GEN_5 | beatVals_1_1) : beatVals_1_1;
  wire              _GEN_48 =
    _GEN ? (r_counter ? _GEN_28 | beatVals_2_0 : _GEN_7 | beatVals_2_0) : beatVals_2_0;
  wire              _GEN_49 =
    _GEN ? (r_counter ? _GEN_29 | beatVals_2_1 : _GEN_8 | beatVals_2_1) : beatVals_2_1;
  wire              _GEN_50 =
    _GEN ? (r_counter ? _GEN_31 | beatVals_3_0 : _GEN_10 | beatVals_3_0) : beatVals_3_0;
  wire              _GEN_51 =
    _GEN ? (r_counter ? _GEN_32 | beatVals_3_1 : _GEN_11 | beatVals_3_1) : beatVals_3_1;
  wire              _GEN_52 =
    _GEN ? (r_counter ? _GEN_34 | beatVals_4_0 : _GEN_13 | beatVals_4_0) : beatVals_4_0;
  wire              _GEN_53 =
    _GEN ? (r_counter ? _GEN_35 | beatVals_4_1 : _GEN_14 | beatVals_4_1) : beatVals_4_1;
  wire              _GEN_54 =
    _GEN ? (r_counter ? _GEN_37 | beatVals_5_0 : _GEN_16 | beatVals_5_0) : beatVals_5_0;
  wire              _GEN_55 =
    _GEN ? (r_counter ? _GEN_38 | beatVals_5_1 : _GEN_17 | beatVals_5_1) : beatVals_5_1;
  wire              _GEN_56 =
    _GEN ? (r_counter ? _GEN_40 | beatVals_6_0 : _GEN_19 | beatVals_6_0) : beatVals_6_0;
  wire              _GEN_57 =
    _GEN ? (r_counter ? _GEN_41 | beatVals_6_1 : _GEN_20 | beatVals_6_1) : beatVals_6_1;
  wire              _GEN_58 = _io_d_pb_beat_T_1 & io_d_pb_pop_bits_last;
  wire              _GEN_59 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h0;
  wire              _GEN_60 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h1;
  wire              _GEN_61 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h2;
  wire              _GEN_62 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h3;
  wire              _GEN_63 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h4;
  wire              _GEN_64 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h5;
  wire              _GEN_65 = _GEN_58 & io_d_pb_pop_bits_bufIdx[2:0] == 3'h6;
  wire              _GEN_66 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h0 | _GEN_59;
  wire              _GEN_67 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h1 | _GEN_60;
  wire              _GEN_68 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h2 | _GEN_61;
  wire              _GEN_69 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h3 | _GEN_62;
  wire              _GEN_70 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h4 | _GEN_63;
  wire              _GEN_71 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h5 | _GEN_64;
  wire              _GEN_72 = io_a_pb_pop_bits_bufIdx[2:0] == 3'h6 | _GEN_65;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 1'h0;
      beatVals_0_0 <= 1'h0;
      beatVals_0_1 <= 1'h0;
      beatVals_1_0 <= 1'h0;
      beatVals_1_1 <= 1'h0;
      beatVals_2_0 <= 1'h0;
      beatVals_2_1 <= 1'h0;
      beatVals_3_0 <= 1'h0;
      beatVals_3_1 <= 1'h0;
      beatVals_4_0 <= 1'h0;
      beatVals_4_1 <= 1'h0;
      beatVals_5_0 <= 1'h0;
      beatVals_5_1 <= 1'h0;
      beatVals_6_0 <= 1'h0;
      beatVals_6_1 <= 1'h0;
      bufferLeakCnt <= 12'h0;
    end
    else begin
      if (_insertIdxReg_T) begin
        if (r_counter)
          r_counter <= _r_counter1_T;
        else
          r_counter <= r_beats1;
      end
      if (_io_a_pb_beat_T_1 & io_a_pb_pop_bits_last) begin
        beatVals_0_0 <= ~_GEN_66 & _GEN_44;
        beatVals_0_1 <= ~_GEN_66 & _GEN_45;
        beatVals_1_0 <= ~_GEN_67 & _GEN_46;
        beatVals_1_1 <= ~_GEN_67 & _GEN_47;
        beatVals_2_0 <= ~_GEN_68 & _GEN_48;
        beatVals_2_1 <= ~_GEN_68 & _GEN_49;
        beatVals_3_0 <= ~_GEN_69 & _GEN_50;
        beatVals_3_1 <= ~_GEN_69 & _GEN_51;
        beatVals_4_0 <= ~_GEN_70 & _GEN_52;
        beatVals_4_1 <= ~_GEN_70 & _GEN_53;
        beatVals_5_0 <= ~_GEN_71 & _GEN_54;
        beatVals_5_1 <= ~_GEN_71 & _GEN_55;
        beatVals_6_0 <= ~_GEN_72 & _GEN_56;
        beatVals_6_1 <= ~_GEN_72 & _GEN_57;
      end
      else begin
        beatVals_0_0 <= ~_GEN_59 & _GEN_44;
        beatVals_0_1 <= ~_GEN_59 & _GEN_45;
        beatVals_1_0 <= ~_GEN_60 & _GEN_46;
        beatVals_1_1 <= ~_GEN_60 & _GEN_47;
        beatVals_2_0 <= ~_GEN_61 & _GEN_48;
        beatVals_2_1 <= ~_GEN_61 & _GEN_49;
        beatVals_3_0 <= ~_GEN_62 & _GEN_50;
        beatVals_3_1 <= ~_GEN_62 & _GEN_51;
        beatVals_4_0 <= ~_GEN_63 & _GEN_52;
        beatVals_4_1 <= ~_GEN_63 & _GEN_53;
        beatVals_5_0 <= ~_GEN_64 & _GEN_54;
        beatVals_5_1 <= ~_GEN_64 & _GEN_55;
        beatVals_6_0 <= ~_GEN_65 & _GEN_56;
        beatVals_6_1 <= ~_GEN_65 & _GEN_57;
      end
      if (|_bufVals_T)
        bufferLeakCnt <= 12'(bufferLeakCnt + 12'h1);
      else
        bufferLeakCnt <= 12'h0;
    end
  end // always @(posedge, posedge)
  wire [7:0]        _GEN_73 =
    {{putBuffer_0_1_corrupt},
     {putBuffer_6_1_corrupt},
     {putBuffer_5_1_corrupt},
     {putBuffer_4_1_corrupt},
     {putBuffer_3_1_corrupt},
     {putBuffer_2_1_corrupt},
     {putBuffer_1_1_corrupt},
     {putBuffer_0_1_corrupt}};
  wire [7:0]        _GEN_74 =
    {{putBuffer_0_0_corrupt},
     {putBuffer_6_0_corrupt},
     {putBuffer_5_0_corrupt},
     {putBuffer_4_0_corrupt},
     {putBuffer_3_0_corrupt},
     {putBuffer_2_0_corrupt},
     {putBuffer_1_0_corrupt},
     {putBuffer_0_0_corrupt}};
  wire [7:0][255:0] _GEN_75 =
    {{putBuffer_0_0_data},
     {putBuffer_6_0_data},
     {putBuffer_5_0_data},
     {putBuffer_4_0_data},
     {putBuffer_3_0_data},
     {putBuffer_2_0_data},
     {putBuffer_1_0_data},
     {putBuffer_0_0_data}};
  wire [7:0][31:0]  _GEN_76 =
    {{putBuffer_0_0_mask},
     {putBuffer_6_0_mask},
     {putBuffer_5_0_mask},
     {putBuffer_4_0_mask},
     {putBuffer_3_0_mask},
     {putBuffer_2_0_mask},
     {putBuffer_1_0_mask},
     {putBuffer_0_0_mask}};
  wire [7:0][255:0] _GEN_77 =
    {{putBuffer_0_1_data},
     {putBuffer_6_1_data},
     {putBuffer_5_1_data},
     {putBuffer_4_1_data},
     {putBuffer_3_1_data},
     {putBuffer_2_1_data},
     {putBuffer_1_1_data},
     {putBuffer_0_1_data}};
  wire [7:0][31:0]  _GEN_78 =
    {{putBuffer_0_1_mask},
     {putBuffer_6_1_mask},
     {putBuffer_5_1_mask},
     {putBuffer_4_1_mask},
     {putBuffer_3_1_mask},
     {putBuffer_2_1_mask},
     {putBuffer_1_1_mask},
     {putBuffer_0_1_mask}};
  always @(posedge clock) begin
    if (_GEN & (r_counter ? _GEN_22 : _GEN_1)) begin
      putBuffer_0_0_data <= io_a_bits_data;
      putBuffer_0_0_mask <= io_a_bits_mask;
      putBuffer_0_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_23 : _GEN_2)) begin
      putBuffer_0_1_data <= io_a_bits_data;
      putBuffer_0_1_mask <= io_a_bits_mask;
      putBuffer_0_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_25 : _GEN_4)) begin
      putBuffer_1_0_data <= io_a_bits_data;
      putBuffer_1_0_mask <= io_a_bits_mask;
      putBuffer_1_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_26 : _GEN_5)) begin
      putBuffer_1_1_data <= io_a_bits_data;
      putBuffer_1_1_mask <= io_a_bits_mask;
      putBuffer_1_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_28 : _GEN_7)) begin
      putBuffer_2_0_data <= io_a_bits_data;
      putBuffer_2_0_mask <= io_a_bits_mask;
      putBuffer_2_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_29 : _GEN_8)) begin
      putBuffer_2_1_data <= io_a_bits_data;
      putBuffer_2_1_mask <= io_a_bits_mask;
      putBuffer_2_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_31 : _GEN_10)) begin
      putBuffer_3_0_data <= io_a_bits_data;
      putBuffer_3_0_mask <= io_a_bits_mask;
      putBuffer_3_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_32 : _GEN_11)) begin
      putBuffer_3_1_data <= io_a_bits_data;
      putBuffer_3_1_mask <= io_a_bits_mask;
      putBuffer_3_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_34 : _GEN_13)) begin
      putBuffer_4_0_data <= io_a_bits_data;
      putBuffer_4_0_mask <= io_a_bits_mask;
      putBuffer_4_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_35 : _GEN_14)) begin
      putBuffer_4_1_data <= io_a_bits_data;
      putBuffer_4_1_mask <= io_a_bits_mask;
      putBuffer_4_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_37 : _GEN_16)) begin
      putBuffer_5_0_data <= io_a_bits_data;
      putBuffer_5_0_mask <= io_a_bits_mask;
      putBuffer_5_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_38 : _GEN_17)) begin
      putBuffer_5_1_data <= io_a_bits_data;
      putBuffer_5_1_mask <= io_a_bits_mask;
      putBuffer_5_1_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_40 : _GEN_19)) begin
      putBuffer_6_0_data <= io_a_bits_data;
      putBuffer_6_0_mask <= io_a_bits_mask;
      putBuffer_6_0_corrupt <= io_a_bits_corrupt;
    end
    if (_GEN & (r_counter ? _GEN_41 : _GEN_20)) begin
      putBuffer_6_1_data <= io_a_bits_data;
      putBuffer_6_1_mask <= io_a_bits_mask;
      putBuffer_6_1_corrupt <= io_a_bits_corrupt;
    end
    if (_insertIdxReg_T & ~r_counter)
      insertIdxReg <= insertIdx;
    if (_io_d_pb_beat_T_1) begin
      io_d_pb_beat_r_data <=
        io_d_pb_pop_bits_count
          ? _GEN_77[io_d_pb_pop_bits_bufIdx[2:0]]
          : _GEN_75[io_d_pb_pop_bits_bufIdx[2:0]];
      io_d_pb_beat_r_mask <=
        io_d_pb_pop_bits_count
          ? _GEN_78[io_d_pb_pop_bits_bufIdx[2:0]]
          : _GEN_76[io_d_pb_pop_bits_bufIdx[2:0]];
      io_d_pb_beat_r_corrupt <=
        io_d_pb_pop_bits_count
          ? _GEN_73[io_d_pb_pop_bits_bufIdx[2:0]]
          : _GEN_74[io_d_pb_pop_bits_bufIdx[2:0]];
    end
    if (_io_a_pb_beat_T_1) begin
      io_a_pb_beat_r_data <=
        io_a_pb_pop_bits_count
          ? _GEN_77[io_a_pb_pop_bits_bufIdx[2:0]]
          : _GEN_75[io_a_pb_pop_bits_bufIdx[2:0]];
      io_a_pb_beat_r_mask <=
        io_a_pb_pop_bits_count
          ? _GEN_78[io_a_pb_pop_bits_bufIdx[2:0]]
          : _GEN_76[io_a_pb_pop_bits_bufIdx[2:0]];
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:145];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [7:0] i = 8'h0; i < 8'h92; i += 8'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        r_counter = _RANDOM[8'h0][0];
        putBuffer_0_0_data =
          {_RANDOM[8'h0][31:1],
           _RANDOM[8'h1],
           _RANDOM[8'h2],
           _RANDOM[8'h3],
           _RANDOM[8'h4],
           _RANDOM[8'h5],
           _RANDOM[8'h6],
           _RANDOM[8'h7],
           _RANDOM[8'h8][0]};
        putBuffer_0_0_mask = {_RANDOM[8'h8][31:1], _RANDOM[8'h9][0]};
        putBuffer_0_0_corrupt = _RANDOM[8'h9][1];
        putBuffer_0_1_data =
          {_RANDOM[8'h9][31:2],
           _RANDOM[8'hA],
           _RANDOM[8'hB],
           _RANDOM[8'hC],
           _RANDOM[8'hD],
           _RANDOM[8'hE],
           _RANDOM[8'hF],
           _RANDOM[8'h10],
           _RANDOM[8'h11][1:0]};
        putBuffer_0_1_mask = {_RANDOM[8'h11][31:2], _RANDOM[8'h12][1:0]};
        putBuffer_0_1_corrupt = _RANDOM[8'h12][2];
        putBuffer_1_0_data =
          {_RANDOM[8'h12][31:3],
           _RANDOM[8'h13],
           _RANDOM[8'h14],
           _RANDOM[8'h15],
           _RANDOM[8'h16],
           _RANDOM[8'h17],
           _RANDOM[8'h18],
           _RANDOM[8'h19],
           _RANDOM[8'h1A][2:0]};
        putBuffer_1_0_mask = {_RANDOM[8'h1A][31:3], _RANDOM[8'h1B][2:0]};
        putBuffer_1_0_corrupt = _RANDOM[8'h1B][3];
        putBuffer_1_1_data =
          {_RANDOM[8'h1B][31:4],
           _RANDOM[8'h1C],
           _RANDOM[8'h1D],
           _RANDOM[8'h1E],
           _RANDOM[8'h1F],
           _RANDOM[8'h20],
           _RANDOM[8'h21],
           _RANDOM[8'h22],
           _RANDOM[8'h23][3:0]};
        putBuffer_1_1_mask = {_RANDOM[8'h23][31:4], _RANDOM[8'h24][3:0]};
        putBuffer_1_1_corrupt = _RANDOM[8'h24][4];
        putBuffer_2_0_data =
          {_RANDOM[8'h24][31:5],
           _RANDOM[8'h25],
           _RANDOM[8'h26],
           _RANDOM[8'h27],
           _RANDOM[8'h28],
           _RANDOM[8'h29],
           _RANDOM[8'h2A],
           _RANDOM[8'h2B],
           _RANDOM[8'h2C][4:0]};
        putBuffer_2_0_mask = {_RANDOM[8'h2C][31:5], _RANDOM[8'h2D][4:0]};
        putBuffer_2_0_corrupt = _RANDOM[8'h2D][5];
        putBuffer_2_1_data =
          {_RANDOM[8'h2D][31:6],
           _RANDOM[8'h2E],
           _RANDOM[8'h2F],
           _RANDOM[8'h30],
           _RANDOM[8'h31],
           _RANDOM[8'h32],
           _RANDOM[8'h33],
           _RANDOM[8'h34],
           _RANDOM[8'h35][5:0]};
        putBuffer_2_1_mask = {_RANDOM[8'h35][31:6], _RANDOM[8'h36][5:0]};
        putBuffer_2_1_corrupt = _RANDOM[8'h36][6];
        putBuffer_3_0_data =
          {_RANDOM[8'h36][31:7],
           _RANDOM[8'h37],
           _RANDOM[8'h38],
           _RANDOM[8'h39],
           _RANDOM[8'h3A],
           _RANDOM[8'h3B],
           _RANDOM[8'h3C],
           _RANDOM[8'h3D],
           _RANDOM[8'h3E][6:0]};
        putBuffer_3_0_mask = {_RANDOM[8'h3E][31:7], _RANDOM[8'h3F][6:0]};
        putBuffer_3_0_corrupt = _RANDOM[8'h3F][7];
        putBuffer_3_1_data =
          {_RANDOM[8'h3F][31:8],
           _RANDOM[8'h40],
           _RANDOM[8'h41],
           _RANDOM[8'h42],
           _RANDOM[8'h43],
           _RANDOM[8'h44],
           _RANDOM[8'h45],
           _RANDOM[8'h46],
           _RANDOM[8'h47][7:0]};
        putBuffer_3_1_mask = {_RANDOM[8'h47][31:8], _RANDOM[8'h48][7:0]};
        putBuffer_3_1_corrupt = _RANDOM[8'h48][8];
        putBuffer_4_0_data =
          {_RANDOM[8'h48][31:9],
           _RANDOM[8'h49],
           _RANDOM[8'h4A],
           _RANDOM[8'h4B],
           _RANDOM[8'h4C],
           _RANDOM[8'h4D],
           _RANDOM[8'h4E],
           _RANDOM[8'h4F],
           _RANDOM[8'h50][8:0]};
        putBuffer_4_0_mask = {_RANDOM[8'h50][31:9], _RANDOM[8'h51][8:0]};
        putBuffer_4_0_corrupt = _RANDOM[8'h51][9];
        putBuffer_4_1_data =
          {_RANDOM[8'h51][31:10],
           _RANDOM[8'h52],
           _RANDOM[8'h53],
           _RANDOM[8'h54],
           _RANDOM[8'h55],
           _RANDOM[8'h56],
           _RANDOM[8'h57],
           _RANDOM[8'h58],
           _RANDOM[8'h59][9:0]};
        putBuffer_4_1_mask = {_RANDOM[8'h59][31:10], _RANDOM[8'h5A][9:0]};
        putBuffer_4_1_corrupt = _RANDOM[8'h5A][10];
        putBuffer_5_0_data =
          {_RANDOM[8'h5A][31:11],
           _RANDOM[8'h5B],
           _RANDOM[8'h5C],
           _RANDOM[8'h5D],
           _RANDOM[8'h5E],
           _RANDOM[8'h5F],
           _RANDOM[8'h60],
           _RANDOM[8'h61],
           _RANDOM[8'h62][10:0]};
        putBuffer_5_0_mask = {_RANDOM[8'h62][31:11], _RANDOM[8'h63][10:0]};
        putBuffer_5_0_corrupt = _RANDOM[8'h63][11];
        putBuffer_5_1_data =
          {_RANDOM[8'h63][31:12],
           _RANDOM[8'h64],
           _RANDOM[8'h65],
           _RANDOM[8'h66],
           _RANDOM[8'h67],
           _RANDOM[8'h68],
           _RANDOM[8'h69],
           _RANDOM[8'h6A],
           _RANDOM[8'h6B][11:0]};
        putBuffer_5_1_mask = {_RANDOM[8'h6B][31:12], _RANDOM[8'h6C][11:0]};
        putBuffer_5_1_corrupt = _RANDOM[8'h6C][12];
        putBuffer_6_0_data =
          {_RANDOM[8'h6C][31:13],
           _RANDOM[8'h6D],
           _RANDOM[8'h6E],
           _RANDOM[8'h6F],
           _RANDOM[8'h70],
           _RANDOM[8'h71],
           _RANDOM[8'h72],
           _RANDOM[8'h73],
           _RANDOM[8'h74][12:0]};
        putBuffer_6_0_mask = {_RANDOM[8'h74][31:13], _RANDOM[8'h75][12:0]};
        putBuffer_6_0_corrupt = _RANDOM[8'h75][13];
        putBuffer_6_1_data =
          {_RANDOM[8'h75][31:14],
           _RANDOM[8'h76],
           _RANDOM[8'h77],
           _RANDOM[8'h78],
           _RANDOM[8'h79],
           _RANDOM[8'h7A],
           _RANDOM[8'h7B],
           _RANDOM[8'h7C],
           _RANDOM[8'h7D][13:0]};
        putBuffer_6_1_mask = {_RANDOM[8'h7D][31:14], _RANDOM[8'h7E][13:0]};
        putBuffer_6_1_corrupt = _RANDOM[8'h7E][14];
        beatVals_0_0 = _RANDOM[8'h7E][15];
        beatVals_0_1 = _RANDOM[8'h7E][16];
        beatVals_1_0 = _RANDOM[8'h7E][17];
        beatVals_1_1 = _RANDOM[8'h7E][18];
        beatVals_2_0 = _RANDOM[8'h7E][19];
        beatVals_2_1 = _RANDOM[8'h7E][20];
        beatVals_3_0 = _RANDOM[8'h7E][21];
        beatVals_3_1 = _RANDOM[8'h7E][22];
        beatVals_4_0 = _RANDOM[8'h7E][23];
        beatVals_4_1 = _RANDOM[8'h7E][24];
        beatVals_5_0 = _RANDOM[8'h7E][25];
        beatVals_5_1 = _RANDOM[8'h7E][26];
        beatVals_6_0 = _RANDOM[8'h7E][27];
        beatVals_6_1 = _RANDOM[8'h7E][28];
        insertIdxReg = _RANDOM[8'h7E][31:29];
        bufferLeakCnt = _RANDOM[8'h7F][11:0];
        io_d_pb_beat_r_data =
          {_RANDOM[8'h7F][31:12],
           _RANDOM[8'h80],
           _RANDOM[8'h81],
           _RANDOM[8'h82],
           _RANDOM[8'h83],
           _RANDOM[8'h84],
           _RANDOM[8'h85],
           _RANDOM[8'h86],
           _RANDOM[8'h87][11:0]};
        io_d_pb_beat_r_mask = {_RANDOM[8'h87][31:12], _RANDOM[8'h88][11:0]};
        io_d_pb_beat_r_corrupt = _RANDOM[8'h88][12];
        io_a_pb_beat_r_data =
          {_RANDOM[8'h88][31:13],
           _RANDOM[8'h89],
           _RANDOM[8'h8A],
           _RANDOM[8'h8B],
           _RANDOM[8'h8C],
           _RANDOM[8'h8D],
           _RANDOM[8'h8E],
           _RANDOM[8'h8F],
           _RANDOM[8'h90][12:0]};
        io_a_pb_beat_r_mask = {_RANDOM[8'h90][31:13], _RANDOM[8'h91][12:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 1'h0;
        beatVals_0_0 = 1'h0;
        beatVals_0_1 = 1'h0;
        beatVals_1_0 = 1'h0;
        beatVals_1_1 = 1'h0;
        beatVals_2_0 = 1'h0;
        beatVals_2_1 = 1'h0;
        beatVals_3_0 = 1'h0;
        beatVals_3_1 = 1'h0;
        beatVals_4_0 = 1'h0;
        beatVals_4_1 = 1'h0;
        beatVals_5_0 = 1'h0;
        beatVals_5_1 = 1'h0;
        beatVals_6_0 = 1'h0;
        beatVals_6_1 = 1'h0;
        bufferLeakCnt = 12'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_a_ready = io_a_ready_0;
  assign io_alloc_valid = io_a_valid & ~r_counter & ~noSpace;
  assign io_alloc_bits_opcode = io_a_bits_opcode[2:0];
  assign io_alloc_bits_param = io_a_bits_param;
  assign io_alloc_bits_size = io_a_bits_size;
  assign io_alloc_bits_source = io_a_bits_source;
  assign io_alloc_bits_set = io_a_bits_address[16:6];
  assign io_alloc_bits_tag = io_a_bits_address[47:17];
  assign io_alloc_bits_off = io_a_bits_address[5:0];
  assign io_alloc_bits_mask = io_a_bits_mask;
  assign io_alloc_bits_bufIdx = {1'h0, insertIdx};
  assign io_alloc_bits_isPrefetch = io_a_bits_opcode == 4'h5;
  assign io_alloc_bits_reqSource = io_a_bits_user_reqSource;
  assign io_d_pb_pop_ready = io_d_pb_pop_ready_0;
  assign io_d_pb_beat_data = io_d_pb_beat_r_data;
  assign io_d_pb_beat_mask = io_d_pb_beat_r_mask;
  assign io_d_pb_beat_corrupt = io_d_pb_beat_r_corrupt;
  assign io_a_pb_pop_ready = io_a_pb_pop_ready_0;
  assign io_a_pb_beat_data = io_a_pb_beat_r_data;
  assign io_a_pb_beat_mask = io_a_pb_beat_r_mask;
endmodule

