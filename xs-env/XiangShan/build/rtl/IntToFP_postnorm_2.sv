// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IntToFP_postnorm_2(
  input  [62:0] io_in_norm_int,
  input  [5:0]  io_in_lzc,
  input         io_in_is_zero,
  input         io_in_sign,
  input  [2:0]  io_rm,
  output [15:0] io_result,
  output [4:0]  io_fflags
);

  wire [9:0]  _rounder_io_out;
  wire        _rounder_io_inexact;
  wire        _rounder_io_cout;
  wire [10:0] fp_exp =
    io_in_is_zero
      ? 11'h0
      : 11'(11'(11'h4E - {5'h0, io_in_lzc}) + {10'h0, _rounder_io_cout});
  wire        of = fp_exp > 11'h1E;
  RoundingUnit_2 rounder (
    .io_in       (io_in_norm_int[62:53]),
    .io_roundIn  (io_in_norm_int[52]),
    .io_stickyIn (|(io_in_norm_int[51:0])),
    .io_signIn   (io_in_sign),
    .io_rm       (io_rm),
    .io_out      (_rounder_io_out),
    .io_inexact  (_rounder_io_inexact),
    .io_cout     (_rounder_io_cout)
  );
  assign io_result =
    {io_in_sign,
     of
       ? (io_rm == 3'h1 | io_in_sign & io_rm == 3'h3 | ~io_in_sign & io_rm == 3'h2
            ? 15'h7BFF
            : 15'h7C00)
       : {fp_exp[4:0], _rounder_io_out}};
  assign io_fflags = {2'h0, of, 1'h0, of | _rounder_io_inexact};
endmodule

