// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [3:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [2:0]  auto_in_a_bits_source,
  input  [47:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [3:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [2:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_7_a_ready,
  output        auto_out_7_a_valid,
  output [3:0]  auto_out_7_a_bits_opcode,
  output [1:0]  auto_out_7_a_bits_size,
  output [2:0]  auto_out_7_a_bits_source,
  output [29:0] auto_out_7_a_bits_address,
  output [7:0]  auto_out_7_a_bits_mask,
  output [63:0] auto_out_7_a_bits_data,
  output        auto_out_7_d_ready,
  input         auto_out_7_d_valid,
  input  [3:0]  auto_out_7_d_bits_opcode,
  input  [1:0]  auto_out_7_d_bits_size,
  input  [2:0]  auto_out_7_d_bits_source,
  input  [63:0] auto_out_7_d_bits_data,
  input         auto_out_6_a_ready,
  output        auto_out_6_a_valid,
  output [3:0]  auto_out_6_a_bits_opcode,
  output [2:0]  auto_out_6_a_bits_param,
  output [1:0]  auto_out_6_a_bits_size,
  output [2:0]  auto_out_6_a_bits_source,
  output [29:0] auto_out_6_a_bits_address,
  output [7:0]  auto_out_6_a_bits_mask,
  output [63:0] auto_out_6_a_bits_data,
  output        auto_out_6_a_bits_corrupt,
  output        auto_out_6_d_ready,
  input         auto_out_6_d_valid,
  input  [3:0]  auto_out_6_d_bits_opcode,
  input  [1:0]  auto_out_6_d_bits_param,
  input  [1:0]  auto_out_6_d_bits_size,
  input  [2:0]  auto_out_6_d_bits_source,
  input         auto_out_6_d_bits_sink,
  input         auto_out_6_d_bits_denied,
  input  [63:0] auto_out_6_d_bits_data,
  input         auto_out_6_d_bits_corrupt,
  input         auto_out_5_a_ready,
  output        auto_out_5_a_valid,
  output [3:0]  auto_out_5_a_bits_opcode,
  output [1:0]  auto_out_5_a_bits_size,
  output [2:0]  auto_out_5_a_bits_source,
  output [29:0] auto_out_5_a_bits_address,
  output [7:0]  auto_out_5_a_bits_mask,
  output [63:0] auto_out_5_a_bits_data,
  output        auto_out_5_d_ready,
  input         auto_out_5_d_valid,
  input  [3:0]  auto_out_5_d_bits_opcode,
  input  [1:0]  auto_out_5_d_bits_size,
  input  [2:0]  auto_out_5_d_bits_source,
  input  [63:0] auto_out_5_d_bits_data,
  input         auto_out_4_a_ready,
  output        auto_out_4_a_valid,
  output [3:0]  auto_out_4_a_bits_opcode,
  output [1:0]  auto_out_4_a_bits_size,
  output [2:0]  auto_out_4_a_bits_source,
  output [29:0] auto_out_4_a_bits_address,
  output [7:0]  auto_out_4_a_bits_mask,
  output [63:0] auto_out_4_a_bits_data,
  output        auto_out_4_d_ready,
  input         auto_out_4_d_valid,
  input  [3:0]  auto_out_4_d_bits_opcode,
  input  [1:0]  auto_out_4_d_bits_size,
  input  [2:0]  auto_out_4_d_bits_source,
  input  [63:0] auto_out_4_d_bits_data,
  input         auto_out_3_a_ready,
  output        auto_out_3_a_valid,
  output [3:0]  auto_out_3_a_bits_opcode,
  output [1:0]  auto_out_3_a_bits_size,
  output [2:0]  auto_out_3_a_bits_source,
  output [29:0] auto_out_3_a_bits_address,
  output [7:0]  auto_out_3_a_bits_mask,
  output [63:0] auto_out_3_a_bits_data,
  output        auto_out_3_d_ready,
  input         auto_out_3_d_valid,
  input  [3:0]  auto_out_3_d_bits_opcode,
  input  [1:0]  auto_out_3_d_bits_size,
  input  [2:0]  auto_out_3_d_bits_source,
  input  [63:0] auto_out_3_d_bits_data,
  input         auto_out_2_a_ready,
  output        auto_out_2_a_valid,
  output [3:0]  auto_out_2_a_bits_opcode,
  output [1:0]  auto_out_2_a_bits_size,
  output [2:0]  auto_out_2_a_bits_source,
  output [29:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_d_ready,
  input         auto_out_2_d_valid,
  input  [3:0]  auto_out_2_d_bits_opcode,
  input  [1:0]  auto_out_2_d_bits_size,
  input  [2:0]  auto_out_2_d_bits_source,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [3:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_param,
  output [2:0]  auto_out_1_a_bits_size,
  output [2:0]  auto_out_1_a_bits_source,
  output [30:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_a_bits_corrupt,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [3:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [2:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [3:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_param,
  output [2:0]  auto_out_0_a_bits_size,
  output [2:0]  auto_out_0_a_bits_source,
  output [47:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [3:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [2:0]  auto_out_0_d_bits_size,
  input  [2:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);

  wire        requestAIO_0_0 =
    {auto_in_a_bits_address[47:32], ~(auto_in_a_bits_address[31])} == 17'h0
    | {auto_in_a_bits_address[47:33], ~(auto_in_a_bits_address[32])} == 16'h0
    | {auto_in_a_bits_address[47:34], ~(auto_in_a_bits_address[33])} == 15'h0
    | {auto_in_a_bits_address[47:35], ~(auto_in_a_bits_address[34])} == 14'h0
    | {auto_in_a_bits_address[47:36], ~(auto_in_a_bits_address[35])} == 13'h0
    | {auto_in_a_bits_address[47:37], ~(auto_in_a_bits_address[36])} == 12'h0
    | {auto_in_a_bits_address[47:38], ~(auto_in_a_bits_address[37])} == 11'h0
    | {auto_in_a_bits_address[47:39], ~(auto_in_a_bits_address[38])} == 10'h0
    | {auto_in_a_bits_address[47:40], ~(auto_in_a_bits_address[39])} == 9'h0
    | {auto_in_a_bits_address[47:41], ~(auto_in_a_bits_address[40])} == 8'h0
    | {auto_in_a_bits_address[47:42], ~(auto_in_a_bits_address[41])} == 7'h0
    | {auto_in_a_bits_address[47:43], ~(auto_in_a_bits_address[42])} == 6'h0
    | {auto_in_a_bits_address[47:44], ~(auto_in_a_bits_address[43])} == 5'h0
    | {auto_in_a_bits_address[47:45], ~(auto_in_a_bits_address[44])} == 4'h0
    | {auto_in_a_bits_address[47:46], ~(auto_in_a_bits_address[45])} == 3'h0
    | {auto_in_a_bits_address[47], ~(auto_in_a_bits_address[46])} == 2'h0
    | auto_in_a_bits_address[47];
  wire [11:0] _GEN = auto_in_a_bits_address[29:18] ^ 12'hE01;
  wire [10:0] _GEN_0 = auto_in_a_bits_address[29:19] ^ 11'h701;
  wire [9:0]  _GEN_1 = auto_in_a_bits_address[29:20] ^ 10'h381;
  wire [8:0]  _GEN_2 = auto_in_a_bits_address[29:21] ^ 9'h1C1;
  wire [7:0]  _GEN_3 = auto_in_a_bits_address[29:22] ^ 8'hE1;
  wire [6:0]  _GEN_4 = auto_in_a_bits_address[29:23] ^ 7'h71;
  wire        requestAIO_0_1 =
    auto_in_a_bits_address[47:29] == 19'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:28] ^ 2'h2} == 20'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:27] ^ 3'h6} == 21'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h38011} == 36'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:13] ^ 17'h1C009} == 35'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:14] ^ 16'hE005} == 34'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:15] ^ 15'h7003} == 33'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:13] ^ 17'h1C011} == 35'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:14] ^ 16'hE009} == 34'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:15] ^ 15'h7005} == 33'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3803} == 32'h0
    | {auto_in_a_bits_address[47:30], _GEN[11:7], _GEN[5:0]} == 29'h0
    | {auto_in_a_bits_address[47:30], _GEN_0[10:6], _GEN_0[4:0]} == 28'h0
    | {auto_in_a_bits_address[47:30], _GEN_1[9:5], _GEN_1[3:0]} == 27'h0
    | {auto_in_a_bits_address[47:30], _GEN_2[8:4], _GEN_2[2:0]} == 26'h0
    | {auto_in_a_bits_address[47:30], _GEN_3[7:3], _GEN_3[1:0]} == 25'h0
    | {auto_in_a_bits_address[47:30], _GEN_4[6:2], _GEN_4[0]} == 24'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3901} == 32'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:17] ^ 13'h1C81} == 31'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h3A001} == 36'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:13] ^ 17'h1D001} == 35'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:14] ^ 16'hE801} == 34'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:15] ^ 15'h7401} == 33'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3A01} == 32'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:17] ^ 13'h1D01} == 31'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:18] ^ 12'hE81} == 30'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:19] ^ 11'h741} == 29'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:20] ^ 10'h3A1} == 28'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:21] ^ 9'h1D1} == 27'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:22] ^ 8'hE9} == 26'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:23] ^ 7'h75} == 25'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:24] ^ 6'h3B} == 24'h0
    | {auto_in_a_bits_address[47:31], ~(auto_in_a_bits_address[30])} == 18'h0;
  wire        requestAIO_0_2 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3800} == 32'h0;
  wire        requestAIO_0_3 =
    {auto_in_a_bits_address[47:30], ~(auto_in_a_bits_address[29:26])} == 22'h0;
  wire        requestAIO_0_4 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h3A000} == 36'h0;
  wire        requestAIO_0_5 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h38020} == 36'h0;
  wire        requestAIO_0_6 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h38021} == 36'h0;
  wire        requestAIO_0_7 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3900} == 32'h0;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire [7:0]  readys_valid =
    {auto_out_7_d_valid,
     auto_out_6_d_valid,
     auto_out_5_d_valid,
     auto_out_4_d_valid,
     auto_out_3_d_valid,
     auto_out_2_d_valid,
     auto_out_1_d_valid,
     auto_out_0_d_valid};
  reg  [7:0]  readys_mask;
  wire [7:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [13:0] _GEN_5 =
    {_readys_filter_T_1[6:0],
     auto_out_7_d_valid,
     auto_out_6_d_valid,
     auto_out_5_d_valid,
     auto_out_4_d_valid,
     auto_out_3_d_valid,
     auto_out_2_d_valid,
     auto_out_1_d_valid}
    | {_readys_filter_T_1,
       auto_out_7_d_valid,
       auto_out_6_d_valid,
       auto_out_5_d_valid,
       auto_out_4_d_valid,
       auto_out_3_d_valid,
       auto_out_2_d_valid};
  wire [12:0] _GEN_6 = _GEN_5[12:0] | {_readys_filter_T_1[7], _GEN_5[13:2]};
  wire [10:0] _GEN_7 = _GEN_6[10:0] | {_readys_filter_T_1[7], _GEN_5[13], _GEN_6[12:4]};
  wire [7:0]  readys_readys =
    ~({readys_mask[7],
       _readys_filter_T_1[7] | readys_mask[6],
       _GEN_5[13] | readys_mask[5],
       _GEN_6[12:11] | readys_mask[4:3],
       _GEN_7[10:8] | readys_mask[2:0]} & _GEN_7[7:0]);
  wire        winner_0 = readys_readys[0] & auto_out_0_d_valid;
  wire        winner_1 = readys_readys[1] & auto_out_1_d_valid;
  wire        winner_2 = readys_readys[2] & auto_out_2_d_valid;
  wire        winner_3 = readys_readys[3] & auto_out_3_d_valid;
  wire        winner_4 = readys_readys[4] & auto_out_4_d_valid;
  wire        winner_5 = readys_readys[5] & auto_out_5_d_valid;
  wire        winner_6 = readys_readys[6] & auto_out_6_d_valid;
  wire        winner_7 = readys_readys[7] & auto_out_7_d_valid;
  reg         state_0;
  reg         state_1;
  reg         state_2;
  reg         state_3;
  reg         state_4;
  reg         state_5;
  reg         state_6;
  reg         state_7;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        muxState_2 = idle ? winner_2 : state_2;
  wire        muxState_3 = idle ? winner_3 : state_3;
  wire        muxState_4 = idle ? winner_4 : state_4;
  wire        muxState_5 = idle ? winner_5 : state_5;
  wire        muxState_6 = idle ? winner_6 : state_6;
  wire        muxState_7 = idle ? winner_7 : state_7;
  wire        in_0_d_valid =
    idle
      ? auto_out_0_d_valid | auto_out_1_d_valid | auto_out_2_d_valid | auto_out_3_d_valid
        | auto_out_4_d_valid | auto_out_5_d_valid | auto_out_6_d_valid
        | auto_out_7_d_valid
      : state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid | state_2
        & auto_out_2_d_valid | state_3 & auto_out_3_d_valid | state_4 & auto_out_4_d_valid
        | state_5 & auto_out_5_d_valid | state_6 & auto_out_6_d_valid | state_7
        & auto_out_7_d_valid;
  wire [12:0] _beatsDO_decode_T = 13'h3F << auto_out_0_d_bits_size;
  wire [2:0]  maskedBeats_0 =
    winner_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T[5:3]) : 3'h0;
  wire [11:0] _beatsDO_decode_T_3 = 12'h1F << auto_out_1_d_bits_size;
  wire [7:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [7:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[6:0], 1'h0};
  wire [7:0]  _readys_mask_T_6 = _readys_mask_T_3 | {_readys_mask_T_3[5:0], 2'h0};
  wire        latch = idle & auto_in_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 3'h0;
      readys_mask <= 8'hFF;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h0;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          {maskedBeats_0[2],
           maskedBeats_0[1:0]
             | (winner_1 & auto_out_1_d_bits_opcode[0]
                  ? ~(_beatsDO_decode_T_3[4:3])
                  : 2'h0)};
      else
        beatsLeft <= 3'(beatsLeft - {2'h0, auto_in_d_ready & in_0_d_valid});
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_6 | {_readys_mask_T_6[3:0], 4'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
        state_4 <= winner_4;
        state_5 <= winner_5;
        state_6 <= winner_6;
        state_7 <= winner_7;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][2:0];
        readys_mask = _RANDOM[/*Zero width*/ 1'b0][10:3];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][11];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][12];
        state_2 = _RANDOM[/*Zero width*/ 1'b0][13];
        state_3 = _RANDOM[/*Zero width*/ 1'b0][14];
        state_4 = _RANDOM[/*Zero width*/ 1'b0][15];
        state_5 = _RANDOM[/*Zero width*/ 1'b0][16];
        state_6 = _RANDOM[/*Zero width*/ 1'b0][17];
        state_7 = _RANDOM[/*Zero width*/ 1'b0][18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 3'h0;
        readys_mask = 8'hFF;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        state_3 = 1'h0;
        state_4 = 1'h0;
        state_5 = 1'h0;
        state_6 = 1'h0;
        state_7 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready
    | requestAIO_0_2 & auto_out_2_a_ready | requestAIO_0_3 & auto_out_3_a_ready
    | requestAIO_0_4 & auto_out_4_a_ready | requestAIO_0_5 & auto_out_5_a_ready
    | requestAIO_0_6 & auto_out_6_a_ready | requestAIO_0_7 & auto_out_7_a_ready;
  assign auto_in_d_valid = in_0_d_valid;
  assign auto_in_d_bits_opcode =
    (muxState_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_2 ? auto_out_2_d_bits_opcode : 4'h0)
    | (muxState_3 ? auto_out_3_d_bits_opcode : 4'h0)
    | (muxState_4 ? auto_out_4_d_bits_opcode : 4'h0)
    | (muxState_5 ? auto_out_5_d_bits_opcode : 4'h0)
    | (muxState_6 ? auto_out_6_d_bits_opcode : 4'h0)
    | (muxState_7 ? auto_out_7_d_bits_opcode : 4'h0);
  assign auto_in_d_bits_param =
    (muxState_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_6 ? auto_out_6_d_bits_param : 2'h0);
  assign auto_in_d_bits_size =
    (muxState_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_2 ? {1'h0, auto_out_2_d_bits_size} : 3'h0)
    | (muxState_3 ? {1'h0, auto_out_3_d_bits_size} : 3'h0)
    | (muxState_4 ? {1'h0, auto_out_4_d_bits_size} : 3'h0)
    | (muxState_5 ? {1'h0, auto_out_5_d_bits_size} : 3'h0)
    | (muxState_6 ? {1'h0, auto_out_6_d_bits_size} : 3'h0)
    | (muxState_7 ? {1'h0, auto_out_7_d_bits_size} : 3'h0);
  assign auto_in_d_bits_source =
    (muxState_0 ? auto_out_0_d_bits_source : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_source : 3'h0)
    | (muxState_2 ? auto_out_2_d_bits_source : 3'h0)
    | (muxState_3 ? auto_out_3_d_bits_source : 3'h0)
    | (muxState_4 ? auto_out_4_d_bits_source : 3'h0)
    | (muxState_5 ? auto_out_5_d_bits_source : 3'h0)
    | (muxState_6 ? auto_out_6_d_bits_source : 3'h0)
    | (muxState_7 ? auto_out_7_d_bits_source : 3'h0);
  assign auto_in_d_bits_sink =
    muxState_0 & auto_out_0_d_bits_sink | muxState_1 & auto_out_1_d_bits_sink | muxState_6
    & auto_out_6_d_bits_sink;
  assign auto_in_d_bits_denied =
    muxState_0 & auto_out_0_d_bits_denied | muxState_1 & auto_out_1_d_bits_denied
    | muxState_6 & auto_out_6_d_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_5 ? auto_out_5_d_bits_data : 64'h0)
    | (muxState_6 ? auto_out_6_d_bits_data : 64'h0)
    | (muxState_7 ? auto_out_7_d_bits_data : 64'h0);
  assign auto_in_d_bits_corrupt =
    muxState_0 & auto_out_0_d_bits_corrupt | muxState_1 & auto_out_1_d_bits_corrupt
    | muxState_6 & auto_out_6_d_bits_corrupt;
  assign auto_out_7_a_valid = auto_in_a_valid & requestAIO_0_7;
  assign auto_out_7_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_7_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_7_a_bits_source = auto_in_a_bits_source;
  assign auto_out_7_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_7_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_7_a_bits_data = auto_in_a_bits_data;
  assign auto_out_7_d_ready = auto_in_d_ready & (idle ? readys_readys[7] : state_7);
  assign auto_out_6_a_valid = auto_in_a_valid & requestAIO_0_6;
  assign auto_out_6_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_6_a_bits_param = auto_in_a_bits_param;
  assign auto_out_6_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_6_a_bits_source = auto_in_a_bits_source;
  assign auto_out_6_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_6_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_6_a_bits_data = auto_in_a_bits_data;
  assign auto_out_6_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_6_d_ready = auto_in_d_ready & (idle ? readys_readys[6] : state_6);
  assign auto_out_5_a_valid = auto_in_a_valid & requestAIO_0_5;
  assign auto_out_5_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_5_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_5_a_bits_source = auto_in_a_bits_source;
  assign auto_out_5_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_5_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_5_a_bits_data = auto_in_a_bits_data;
  assign auto_out_5_d_ready = auto_in_d_ready & (idle ? readys_readys[5] : state_5);
  assign auto_out_4_a_valid = auto_in_a_valid & requestAIO_0_4;
  assign auto_out_4_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_4_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_4_a_bits_source = auto_in_a_bits_source;
  assign auto_out_4_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_4_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_4_a_bits_data = auto_in_a_bits_data;
  assign auto_out_4_d_ready = auto_in_d_ready & (idle ? readys_readys[4] : state_4);
  assign auto_out_3_a_valid = auto_in_a_valid & requestAIO_0_3;
  assign auto_out_3_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_3_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_3_a_bits_source = auto_in_a_bits_source;
  assign auto_out_3_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_3_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_3_a_bits_data = auto_in_a_bits_data;
  assign auto_out_3_d_ready = auto_in_d_ready & (idle ? readys_readys[3] : state_3);
  assign auto_out_2_a_valid = auto_in_a_valid & requestAIO_0_2;
  assign auto_out_2_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_2_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_2_a_bits_source = auto_in_a_bits_source;
  assign auto_out_2_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_2_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_2_a_bits_data = auto_in_a_bits_data;
  assign auto_out_2_d_ready = auto_in_d_ready & (idle ? readys_readys[2] : state_2);
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_param = auto_in_a_bits_param;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address[30:0];
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_1_d_ready = auto_in_d_ready & (idle ? readys_readys[1] : state_1);
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_param = auto_in_a_bits_param;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address;
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_0_d_ready = auto_in_d_ready & (idle ? readys_readys[0] : state_0);
endmodule

