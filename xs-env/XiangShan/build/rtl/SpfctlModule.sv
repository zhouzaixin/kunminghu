// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SpfctlModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_L2_PF_TP_ENABLE,
  output        regOut_L2_PF_VBOP_ENABLE,
  output        regOut_L2_PF_PBOP_ENABLE,
  output        regOut_L2_PF_RECV_ENABLE,
  output        regOut_L2_PF_STORE_ONLY,
  output        regOut_L1D_PF_ENABLE_STRIDE,
  output [5:0]  regOut_L1D_PF_ACTIVE_STRIDE,
  output [3:0]  regOut_L1D_PF_ACTIVE_THRESHOLD,
  output        regOut_L1D_PF_ENABLE_PHT,
  output        regOut_L1D_PF_ENABLE_AGT,
  output        regOut_L1D_PF_TRAIN_ON_HIT,
  output        regOut_L1D_PF_ENABLE,
  output        regOut_L2_PF_ENABLE,
  output        regOut_L1I_PF_ENABLE
);

  reg       reg_L2_PF_TP_ENABLE;
  reg       reg_L2_PF_VBOP_ENABLE;
  reg       reg_L2_PF_PBOP_ENABLE;
  reg       reg_L2_PF_RECV_ENABLE;
  reg       reg_L2_PF_STORE_ONLY;
  reg       reg_L1D_PF_ENABLE_STRIDE;
  reg [5:0] reg_L1D_PF_ACTIVE_STRIDE;
  reg [3:0] reg_L1D_PF_ACTIVE_THRESHOLD;
  reg       reg_L1D_PF_ENABLE_PHT;
  reg       reg_L1D_PF_ENABLE_AGT;
  reg       reg_L1D_PF_TRAIN_ON_HIT;
  reg       reg_L1D_PF_ENABLE;
  reg       reg_L2_PF_ENABLE;
  reg       reg_L1I_PF_ENABLE;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_L2_PF_TP_ENABLE <= 1'h1;
      reg_L2_PF_VBOP_ENABLE <= 1'h1;
      reg_L2_PF_PBOP_ENABLE <= 1'h1;
      reg_L2_PF_RECV_ENABLE <= 1'h1;
      reg_L2_PF_STORE_ONLY <= 1'h0;
      reg_L1D_PF_ENABLE_STRIDE <= 1'h1;
      reg_L1D_PF_ACTIVE_STRIDE <= 6'h1E;
      reg_L1D_PF_ACTIVE_THRESHOLD <= 4'hC;
      reg_L1D_PF_ENABLE_PHT <= 1'h1;
      reg_L1D_PF_ENABLE_AGT <= 1'h1;
      reg_L1D_PF_TRAIN_ON_HIT <= 1'h0;
      reg_L1D_PF_ENABLE <= 1'h1;
      reg_L2_PF_ENABLE <= 1'h1;
      reg_L1I_PF_ENABLE <= 1'h1;
    end
    else if (w_wen) begin
      reg_L2_PF_TP_ENABLE <= w_wdata[21];
      reg_L2_PF_VBOP_ENABLE <= w_wdata[20];
      reg_L2_PF_PBOP_ENABLE <= w_wdata[19];
      reg_L2_PF_RECV_ENABLE <= w_wdata[18];
      reg_L2_PF_STORE_ONLY <= w_wdata[17];
      reg_L1D_PF_ENABLE_STRIDE <= w_wdata[16];
      reg_L1D_PF_ACTIVE_STRIDE <= w_wdata[15:10];
      reg_L1D_PF_ACTIVE_THRESHOLD <= w_wdata[9:6];
      reg_L1D_PF_ENABLE_PHT <= w_wdata[5];
      reg_L1D_PF_ENABLE_AGT <= w_wdata[4];
      reg_L1D_PF_TRAIN_ON_HIT <= w_wdata[3];
      reg_L1D_PF_ENABLE <= w_wdata[2];
      reg_L2_PF_ENABLE <= w_wdata[1];
      reg_L1I_PF_ENABLE <= w_wdata[0];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_L2_PF_TP_ENABLE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_L2_PF_VBOP_ENABLE = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_L2_PF_PBOP_ENABLE = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_L2_PF_RECV_ENABLE = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_L2_PF_STORE_ONLY = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_L1D_PF_ENABLE_STRIDE = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_L1D_PF_ACTIVE_STRIDE = _RANDOM[/*Zero width*/ 1'b0][11:6];
        reg_L1D_PF_ACTIVE_THRESHOLD = _RANDOM[/*Zero width*/ 1'b0][15:12];
        reg_L1D_PF_ENABLE_PHT = _RANDOM[/*Zero width*/ 1'b0][16];
        reg_L1D_PF_ENABLE_AGT = _RANDOM[/*Zero width*/ 1'b0][17];
        reg_L1D_PF_TRAIN_ON_HIT = _RANDOM[/*Zero width*/ 1'b0][18];
        reg_L1D_PF_ENABLE = _RANDOM[/*Zero width*/ 1'b0][19];
        reg_L2_PF_ENABLE = _RANDOM[/*Zero width*/ 1'b0][20];
        reg_L1I_PF_ENABLE = _RANDOM[/*Zero width*/ 1'b0][21];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_L2_PF_TP_ENABLE = 1'h1;
        reg_L2_PF_VBOP_ENABLE = 1'h1;
        reg_L2_PF_PBOP_ENABLE = 1'h1;
        reg_L2_PF_RECV_ENABLE = 1'h1;
        reg_L2_PF_STORE_ONLY = 1'h0;
        reg_L1D_PF_ENABLE_STRIDE = 1'h1;
        reg_L1D_PF_ACTIVE_STRIDE = 6'h1E;
        reg_L1D_PF_ACTIVE_THRESHOLD = 4'hC;
        reg_L1D_PF_ENABLE_PHT = 1'h1;
        reg_L1D_PF_ENABLE_AGT = 1'h1;
        reg_L1D_PF_TRAIN_ON_HIT = 1'h0;
        reg_L1D_PF_ENABLE = 1'h1;
        reg_L2_PF_ENABLE = 1'h1;
        reg_L1I_PF_ENABLE = 1'h1;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {42'h0,
     reg_L2_PF_TP_ENABLE,
     reg_L2_PF_VBOP_ENABLE,
     reg_L2_PF_PBOP_ENABLE,
     reg_L2_PF_RECV_ENABLE,
     reg_L2_PF_STORE_ONLY,
     reg_L1D_PF_ENABLE_STRIDE,
     reg_L1D_PF_ACTIVE_STRIDE,
     reg_L1D_PF_ACTIVE_THRESHOLD,
     reg_L1D_PF_ENABLE_PHT,
     reg_L1D_PF_ENABLE_AGT,
     reg_L1D_PF_TRAIN_ON_HIT,
     reg_L1D_PF_ENABLE,
     reg_L2_PF_ENABLE,
     reg_L1I_PF_ENABLE};
  assign regOut_L2_PF_TP_ENABLE = reg_L2_PF_TP_ENABLE;
  assign regOut_L2_PF_VBOP_ENABLE = reg_L2_PF_VBOP_ENABLE;
  assign regOut_L2_PF_PBOP_ENABLE = reg_L2_PF_PBOP_ENABLE;
  assign regOut_L2_PF_RECV_ENABLE = reg_L2_PF_RECV_ENABLE;
  assign regOut_L2_PF_STORE_ONLY = reg_L2_PF_STORE_ONLY;
  assign regOut_L1D_PF_ENABLE_STRIDE = reg_L1D_PF_ENABLE_STRIDE;
  assign regOut_L1D_PF_ACTIVE_STRIDE = reg_L1D_PF_ACTIVE_STRIDE;
  assign regOut_L1D_PF_ACTIVE_THRESHOLD = reg_L1D_PF_ACTIVE_THRESHOLD;
  assign regOut_L1D_PF_ENABLE_PHT = reg_L1D_PF_ENABLE_PHT;
  assign regOut_L1D_PF_ENABLE_AGT = reg_L1D_PF_ENABLE_AGT;
  assign regOut_L1D_PF_TRAIN_ON_HIT = reg_L1D_PF_TRAIN_ON_HIT;
  assign regOut_L1D_PF_ENABLE = reg_L1D_PF_ENABLE;
  assign regOut_L2_PF_ENABLE = reg_L2_PF_ENABLE;
  assign regOut_L1I_PF_ENABLE = reg_L1I_PF_ENABLE;
endmodule

