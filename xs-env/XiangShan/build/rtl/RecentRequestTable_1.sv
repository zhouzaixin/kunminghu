// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RecentRequestTable_1(
  input         clock,
  input         reset,
  output        io_w_ready,
  input         io_w_valid,
  input  [49:0] io_w_bits,
  input         io_r_req_valid,
  input  [49:0] io_r_req_bits_addr,
  input  [9:0]  io_r_req_bits_testOffset,
  input  [6:0]  io_r_req_bits_ptr,
  output        io_r_resp_valid,
  output [6:0]  io_r_resp_bits_ptr,
  output        io_r_resp_bits_hit
);

  wire        _rrTable_io_r_req_ready;
  wire        _rrTable_io_r_resp_data_0_valid;
  wire [11:0] _rrTable_io_r_resp_data_0_tag;
  wire [25:0] _rAddr_T_5 =
    26'(io_r_req_bits_addr[25:0]
        - {{10{io_r_req_bits_testOffset[9]}}, io_r_req_bits_testOffset, 6'h0});
  reg         s1_valid;
  reg  [6:0]  s1_ptr;
  reg  [11:0] s1_hit_REG;
  reg         s2_valid;
  reg  [6:0]  io_r_resp_bits_ptr_r;
  reg         io_r_resp_bits_hit_r;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s2_valid <= 1'h0;
    end
    else begin
      s1_valid <= _rrTable_io_r_req_ready & io_r_req_valid;
      s2_valid <= s1_valid;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    s1_ptr <= io_r_req_bits_ptr;
    s1_hit_REG <= _rAddr_T_5[25:14];
    if (s1_valid) begin
      io_r_resp_bits_ptr_r <= s1_ptr;
      io_r_resp_bits_hit_r <=
        _rrTable_io_r_resp_data_0_valid & _rrTable_io_r_resp_data_0_tag == s1_hit_REG;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        s1_valid = _RANDOM[/*Zero width*/ 1'b0][1];
        s1_ptr = _RANDOM[/*Zero width*/ 1'b0][8:2];
        s1_hit_REG = _RANDOM[/*Zero width*/ 1'b0][20:9];
        s2_valid = _RANDOM[/*Zero width*/ 1'b0][21];
        io_r_resp_bits_ptr_r = _RANDOM[/*Zero width*/ 1'b0][28:22];
        io_r_resp_bits_hit_r = _RANDOM[/*Zero width*/ 1'b0][29];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s1_valid = 1'h0;
        s2_valid = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_115 rrTable (
    .clock                    (clock),
    .reset                    (reset),
    .io_r_req_ready           (_rrTable_io_r_req_ready),
    .io_r_req_valid           (io_r_req_valid),
    .io_r_req_bits_setIdx     (_rAddr_T_5[13:6] ^ _rAddr_T_5[21:14]),
    .io_r_resp_data_0_valid   (_rrTable_io_r_resp_data_0_valid),
    .io_r_resp_data_0_tag     (_rrTable_io_r_resp_data_0_tag),
    .io_w_req_valid           (io_w_valid & ~io_r_req_valid),
    .io_w_req_bits_setIdx     (io_w_bits[13:6] ^ io_w_bits[21:14]),
    .io_w_req_bits_data_0_tag (io_w_bits[25:14])
  );
  assign io_w_ready = ~io_r_req_valid;
  assign io_r_resp_valid = s2_valid;
  assign io_r_resp_bits_ptr = io_r_resp_bits_ptr_r;
  assign io_r_resp_bits_hit = io_r_resp_bits_hit_r;
endmodule

