// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_122(
  input        clock,
  input        reset,
  input        io_r_req_valid,
  input  [6:0] io_r_req_bits_setIdx,
  output       io_r_resp_data_0,
  output       io_r_resp_data_1,
  output       io_r_resp_data_2,
  output       io_r_resp_data_3,
  output       io_r_resp_data_4,
  output       io_r_resp_data_5,
  output       io_r_resp_data_6,
  output       io_r_resp_data_7,
  input        io_w_req_valid,
  input  [6:0] io_w_req_bits_setIdx,
  input        io_w_req_bits_data_0,
  input        io_w_req_bits_data_1,
  input        io_w_req_bits_data_2,
  input        io_w_req_bits_data_3,
  input        io_w_req_bits_data_4,
  input        io_w_req_bits_data_5,
  input        io_w_req_bits_data_6,
  input        io_w_req_bits_data_7,
  input  [7:0] io_w_req_bits_waymask
);

  wire [6:0] setIdx;
  wire       realRen;
  wire       wen;
  wire [7:0] _array_RW0_rdata;
  reg        _resetState;
  reg  [6:0] _resetSet;
  assign wen = io_w_req_valid | _resetState;
  assign realRen = io_r_req_valid & ~wen;
  assign setIdx = _resetState ? _resetSet : io_w_req_bits_setIdx;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      _resetState <= 1'h1;
      _resetSet <= 7'h0;
    end
    else begin
      _resetState <= ~(_resetState & (&_resetSet)) & _resetState;
      if (_resetState)
        _resetSet <= 7'(_resetSet + 7'h1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        _resetState = _RANDOM[/*Zero width*/ 1'b0][0];
        _resetSet = _RANDOM[/*Zero width*/ 1'b0][7:1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        _resetState = 1'h1;
        _resetSet = 7'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_15 array (
    .RW0_addr  (wen ? setIdx : io_r_req_bits_setIdx),
    .RW0_en    (realRen | wen),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata
      ({~_resetState & io_w_req_bits_data_7,
        ~_resetState & io_w_req_bits_data_6,
        ~_resetState & io_w_req_bits_data_5,
        ~_resetState & io_w_req_bits_data_4,
        ~_resetState & io_w_req_bits_data_3,
        ~_resetState & io_w_req_bits_data_2,
        ~_resetState & io_w_req_bits_data_1,
        ~_resetState & io_w_req_bits_data_0}),
    .RW0_rdata (_array_RW0_rdata),
    .RW0_wmask (_resetState ? 8'hFF : io_w_req_bits_waymask)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_r_req_valid | wen),
    .CK (clock),
    .Q  (/* unused */)
  );
  assign io_r_resp_data_0 = _array_RW0_rdata[0];
  assign io_r_resp_data_1 = _array_RW0_rdata[1];
  assign io_r_resp_data_2 = _array_RW0_rdata[2];
  assign io_r_resp_data_3 = _array_RW0_rdata[3];
  assign io_r_resp_data_4 = _array_RW0_rdata[4];
  assign io_r_resp_data_5 = _array_RW0_rdata[5];
  assign io_r_resp_data_6 = _array_RW0_rdata[6];
  assign io_r_resp_data_7 = _array_RW0_rdata[7];
endmodule

