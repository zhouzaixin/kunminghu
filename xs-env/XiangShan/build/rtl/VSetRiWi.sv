// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VSetRiWi(
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrl_robIdx_flag,
  input  [7:0]  io_in_bits_ctrl_robIdx_value,
  input  [7:0]  io_in_bits_ctrl_pdest,
  input         io_in_bits_ctrl_rfWen,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_rfWen,
  output [63:0] io_out_bits_res_data
);

  wire [7:0] _vsetModule_io_out_vconfig_vl;
  VsetModule vsetModule (
    .io_in_avl
      ((|(io_in_bits_ctrl_fuOpType[7:6]))
         ? io_in_bits_data_src_0
         : {59'h0, io_in_bits_data_src_1[14:10]}),
    .io_in_vtype_illegal
      (io_in_bits_ctrl_fuOpType[6] & io_in_bits_data_src_1[63]),
    .io_in_vtype_reserved
      (io_in_bits_ctrl_fuOpType[6]
         ? io_in_bits_data_src_1[62:8]
         : {52'h0,
            (|(io_in_bits_ctrl_fuOpType[7:6]))
              ? io_in_bits_data_src_1[10:8]
              : {1'h0, io_in_bits_data_src_1[9:8]}}),
    .io_in_vtype_vma
      (io_in_bits_ctrl_fuOpType[6]
         ? io_in_bits_data_src_1[7]
         : (|(io_in_bits_ctrl_fuOpType[7:6]))
             ? io_in_bits_data_src_1[7]
             : io_in_bits_data_src_1[7]),
    .io_in_vtype_vta
      (io_in_bits_ctrl_fuOpType[6]
         ? io_in_bits_data_src_1[6]
         : (|(io_in_bits_ctrl_fuOpType[7:6]))
             ? io_in_bits_data_src_1[6]
             : io_in_bits_data_src_1[6]),
    .io_in_vtype_vsew
      (io_in_bits_ctrl_fuOpType[6]
         ? io_in_bits_data_src_1[5:3]
         : (|(io_in_bits_ctrl_fuOpType[7:6]))
             ? io_in_bits_data_src_1[5:3]
             : io_in_bits_data_src_1[5:3]),
    .io_in_vtype_vlmul
      (io_in_bits_ctrl_fuOpType[6]
         ? io_in_bits_data_src_1[2:0]
         : (|(io_in_bits_ctrl_fuOpType[7:6]))
             ? io_in_bits_data_src_1[2:0]
             : io_in_bits_data_src_1[2:0]),
    .io_in_func                   (io_in_bits_ctrl_fuOpType),
    .io_out_vconfig_vtype_illegal (/* unused */),
    .io_out_vconfig_vtype_vma     (/* unused */),
    .io_out_vconfig_vtype_vta     (/* unused */),
    .io_out_vconfig_vtype_vsew    (/* unused */),
    .io_out_vconfig_vtype_vlmul   (/* unused */),
    .io_out_vconfig_vl            (_vsetModule_io_out_vconfig_vl),
    .io_out_vlmax                 (/* unused */)
  );
  assign io_out_valid = io_in_valid;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrl_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrl_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrl_pdest;
  assign io_out_bits_ctrl_rfWen = io_in_bits_ctrl_rfWen;
  assign io_out_bits_res_data = {56'h0, _vsetModule_io_out_vconfig_vl};
endmodule

