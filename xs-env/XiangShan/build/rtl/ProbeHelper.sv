// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ProbeHelper(
  input         clock,
  input         reset,
  input         io_dirResult_valid,
  input  [1:0]  io_dirResult_bits_clients_states_0_state,
  input         io_dirResult_bits_clients_states_0_hit,
  input         io_dirResult_bits_clients_tag_match,
  input  [33:0] io_dirResult_bits_clients_tag,
  input  [10:0] io_dirResult_bits_sourceId,
  input  [10:0] io_dirResult_bits_set,
  input  [2:0]  io_dirResult_bits_replacerInfo_channel,
  input  [2:0]  io_dirResult_bits_replacerInfo_opcode,
  input         io_probe_ready,
  output        io_probe_valid,
  output [2:0]  io_probe_bits_channel,
  output [2:0]  io_probe_bits_opcode,
  output [2:0]  io_probe_bits_param,
  output [2:0]  io_probe_bits_size,
  output [10:0] io_probe_bits_source,
  output [10:0] io_probe_bits_set,
  output [30:0] io_probe_bits_tag,
  output [5:0]  io_probe_bits_off,
  output [31:0] io_probe_bits_mask,
  output [3:0]  io_probe_bits_bufIdx,
  output        io_probe_bits_needHint,
  output        io_probe_bits_isPrefetch,
  output        io_probe_bits_isBop,
  output        io_probe_bits_preferCache,
  output        io_probe_bits_dirty,
  output        io_probe_bits_isHit,
  output        io_probe_bits_fromProbeHelper,
  output        io_probe_bits_fromCmoHelper,
  output        io_probe_bits_needProbeAckData,
  output [3:0]  io_probe_bits_reqSource,
  output        io_full
);

  wire [2:0] _queue_io_count;
  Queue5_MSHRRequest queue (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_valid
      (io_dirResult_bits_replacerInfo_channel == 3'h1
       & ((&io_dirResult_bits_replacerInfo_opcode)
          | io_dirResult_bits_replacerInfo_opcode == 3'h6) & io_dirResult_valid
       & ~io_dirResult_bits_clients_tag_match & ~io_dirResult_bits_clients_states_0_hit
       & (|io_dirResult_bits_clients_states_0_state)),
    .io_enq_bits_source           (io_dirResult_bits_sourceId),
    .io_enq_bits_set
      ({io_dirResult_bits_clients_tag[2:0], io_dirResult_bits_set[7:0]}),
    .io_enq_bits_tag              (io_dirResult_bits_clients_tag[33:3]),
    .io_deq_ready                 (io_probe_ready),
    .io_deq_valid                 (io_probe_valid),
    .io_deq_bits_channel          (io_probe_bits_channel),
    .io_deq_bits_opcode           (io_probe_bits_opcode),
    .io_deq_bits_param            (io_probe_bits_param),
    .io_deq_bits_size             (io_probe_bits_size),
    .io_deq_bits_source           (io_probe_bits_source),
    .io_deq_bits_set              (io_probe_bits_set),
    .io_deq_bits_tag              (io_probe_bits_tag),
    .io_deq_bits_off              (io_probe_bits_off),
    .io_deq_bits_mask             (io_probe_bits_mask),
    .io_deq_bits_bufIdx           (io_probe_bits_bufIdx),
    .io_deq_bits_needHint         (io_probe_bits_needHint),
    .io_deq_bits_isPrefetch       (io_probe_bits_isPrefetch),
    .io_deq_bits_isBop            (io_probe_bits_isBop),
    .io_deq_bits_preferCache      (io_probe_bits_preferCache),
    .io_deq_bits_dirty            (io_probe_bits_dirty),
    .io_deq_bits_isHit            (io_probe_bits_isHit),
    .io_deq_bits_fromProbeHelper  (io_probe_bits_fromProbeHelper),
    .io_deq_bits_fromCmoHelper    (io_probe_bits_fromCmoHelper),
    .io_deq_bits_needProbeAckData (io_probe_bits_needProbeAckData),
    .io_deq_bits_reqSource        (io_probe_bits_reqSource),
    .io_count                     (_queue_io_count)
  );
  assign io_full = _queue_io_count > 3'h2;
endmodule

