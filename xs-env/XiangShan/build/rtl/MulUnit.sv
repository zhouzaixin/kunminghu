// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MulUnit(
  input         clock,
  input         reset,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrlPipe_2_robIdx_flag,
  input  [7:0]  io_in_bits_ctrlPipe_2_robIdx_value,
  input  [7:0]  io_in_bits_ctrlPipe_2_pdest,
  input         io_in_bits_ctrlPipe_2_rfWen,
  input         io_in_bits_validPipe_0,
  input         io_in_bits_validPipe_1,
  input         io_in_bits_validPipe_2,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_rfWen,
  output [63:0] io_out_bits_res_data
);

  wire [129:0] _mulDataModule_io_result;
  reg          validVecThisFu_1;
  reg          validVecThisFu_2;
  wire         validVec_0 = io_in_bits_validPipe_0 & io_in_valid;
  wire         validVec_1 = io_in_bits_validPipe_1 & validVecThisFu_1;
  wire [2:0]   op = {io_in_bits_ctrl_fuOpType[3], io_in_bits_ctrl_fuOpType[1:0]};
  wire [64:0]  _mulDataModule_io_a_T_3 = {1'h0, io_in_bits_data_src_0};
  wire         _mulDataModule_io_b_T_5 = op == 3'h0;
  wire         _mulDataModule_io_b_T_6 = op == 3'h1;
  wire         _mulDataModule_io_b_T_7 = op == 3'h2;
  wire         _mulDataModule_io_b_T_8 = op == 3'h3;
  wire         _mulDataModule_io_b_T_9 = op == 3'h4;
  wire [64:0]  _mulDataModule_io_a_T_17 =
    (_mulDataModule_io_b_T_5 ? _mulDataModule_io_a_T_3 : 65'h0)
    | (_mulDataModule_io_b_T_6
         ? {io_in_bits_data_src_0[63], io_in_bits_data_src_0}
         : 65'h0)
    | (_mulDataModule_io_b_T_7
         ? {io_in_bits_data_src_0[63], io_in_bits_data_src_0}
         : 65'h0) | (_mulDataModule_io_b_T_8 ? _mulDataModule_io_a_T_3 : 65'h0);
  wire [64:0]  _mulDataModule_io_b_T_4 = {1'h0, io_in_bits_data_src_1};
  reg          r_isW;
  reg          r_isHi;
  reg          r_1_isW;
  reg          r_1_isHi;
  wire [63:0]  res =
    r_1_isHi ? _mulDataModule_io_result[127:64] : _mulDataModule_io_result[63:0];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVecThisFu_1 <= 1'h0;
      validVecThisFu_2 <= 1'h0;
    end
    else begin
      validVecThisFu_1 <= io_in_valid;
      validVecThisFu_2 <= validVecThisFu_1;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (validVec_0) begin
      r_isW <= io_in_bits_ctrl_fuOpType[2];
      r_isHi <= |(io_in_bits_ctrl_fuOpType[1:0]);
    end
    if (validVec_1) begin
      r_1_isW <= r_isW;
      r_1_isHi <= r_isHi;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:49];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h32; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validVecThisFu_1 = _RANDOM[6'h0][0];
        validVecThisFu_2 = _RANDOM[6'h0][1];
        r_isW = _RANDOM[6'h31][27];
        r_isHi = _RANDOM[6'h31][28];
        r_1_isW = _RANDOM[6'h31][30];
        r_1_isHi = _RANDOM[6'h31][31];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVecThisFu_1 = 1'h0;
        validVecThisFu_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ArrayMulDataModule mulDataModule (
    .clock           (clock),
    .io_a
      ({_mulDataModule_io_a_T_17[64:7],
        _mulDataModule_io_a_T_17[6:0]
          | (_mulDataModule_io_b_T_9 ? io_in_bits_data_src_0[6:0] : 7'h0)}),
    .io_b
      ((_mulDataModule_io_b_T_5 ? _mulDataModule_io_b_T_4 : 65'h0)
       | (_mulDataModule_io_b_T_6
            ? {io_in_bits_data_src_1[63], io_in_bits_data_src_1}
            : 65'h0) | (_mulDataModule_io_b_T_7 ? _mulDataModule_io_b_T_4 : 65'h0)
       | (_mulDataModule_io_b_T_8 ? _mulDataModule_io_b_T_4 : 65'h0)
       | (_mulDataModule_io_b_T_9 ? _mulDataModule_io_b_T_4 : 65'h0)),
    .io_regEnables_0 (validVec_0),
    .io_regEnables_1 (validVec_1),
    .io_result       (_mulDataModule_io_result)
  );
  assign io_out_valid = io_in_bits_validPipe_2 & validVecThisFu_2;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrlPipe_2_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrlPipe_2_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrlPipe_2_pdest;
  assign io_out_bits_ctrl_rfWen = io_in_bits_ctrlPipe_2_rfWen;
  assign io_out_bits_res_data = r_1_isW ? {{32{res[31]}}, res[31:0]} : res;
endmodule

