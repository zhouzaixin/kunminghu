// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RobEnqPtrWrapper(
  input        clock,
  input        reset,
  input        io_redirect_valid,
  input        io_redirect_bits_robIdx_flag,
  input  [7:0] io_redirect_bits_robIdx_value,
  input        io_redirect_bits_level,
  input        io_allowEnqueue,
  input        io_hasBlockBackward,
  input        io_enq_0,
  input        io_enq_1,
  input        io_enq_2,
  input        io_enq_3,
  input        io_enq_4,
  input        io_enq_5,
  output       io_out_0_flag,
  output [7:0] io_out_0_value,
  output [7:0] io_out_1_value,
  output [7:0] io_out_2_value,
  output [7:0] io_out_3_value,
  output [7:0] io_out_4_value,
  output [7:0] io_out_5_value
);

  reg        enqPtrVec_0_flag;
  reg  [7:0] enqPtrVec_0_value;
  reg  [7:0] enqPtrVec_1_value;
  reg  [7:0] enqPtrVec_2_value;
  reg  [7:0] enqPtrVec_3_value;
  reg  [7:0] enqPtrVec_4_value;
  reg  [7:0] enqPtrVec_5_value;
  wire [8:0] _GEN = {1'h0, io_redirect_bits_robIdx_value};
  wire [9:0] _enqPtrVec_0_diff_T_4 = 10'({2'h0, io_redirect_bits_robIdx_value} - 10'hA0);
  wire       enqPtrVec_0_reverse_flag = $signed(_enqPtrVec_0_diff_T_4) > -10'sh1;
  wire [8:0] enqPtrVec_0_new_value_1 = 9'(_GEN + 9'h1);
  wire [9:0] _enqPtrVec_0_diff_T_10 = 10'({1'h0, enqPtrVec_0_new_value_1} - 10'hA0);
  wire       enqPtrVec_0_reverse_flag_1 = $signed(_enqPtrVec_0_diff_T_10) > -10'sh1;
  wire [8:0] enqPtrVec_1_new_value = 9'(_GEN + 9'h1);
  wire [9:0] _enqPtrVec_1_diff_T_4 = 10'({1'h0, enqPtrVec_1_new_value} - 10'hA0);
  wire [8:0] enqPtrVec_1_new_value_1 = 9'(_GEN + 9'h2);
  wire [9:0] _enqPtrVec_1_diff_T_10 = 10'({1'h0, enqPtrVec_1_new_value_1} - 10'hA0);
  wire [8:0] enqPtrVec_2_new_value = 9'(_GEN + 9'h2);
  wire [9:0] _enqPtrVec_2_diff_T_4 = 10'({1'h0, enqPtrVec_2_new_value} - 10'hA0);
  wire [8:0] enqPtrVec_2_new_value_1 = 9'(_GEN + 9'h3);
  wire [9:0] _enqPtrVec_2_diff_T_10 = 10'({1'h0, enqPtrVec_2_new_value_1} - 10'hA0);
  wire [8:0] enqPtrVec_3_new_value = 9'(_GEN + 9'h3);
  wire [9:0] _enqPtrVec_3_diff_T_4 = 10'({1'h0, enqPtrVec_3_new_value} - 10'hA0);
  wire [8:0] enqPtrVec_3_new_value_1 = 9'(_GEN + 9'h4);
  wire [9:0] _enqPtrVec_3_diff_T_10 = 10'({1'h0, enqPtrVec_3_new_value_1} - 10'hA0);
  wire [8:0] enqPtrVec_4_new_value = 9'(_GEN + 9'h4);
  wire [9:0] _enqPtrVec_4_diff_T_4 = 10'({1'h0, enqPtrVec_4_new_value} - 10'hA0);
  wire [8:0] enqPtrVec_4_new_value_1 = 9'(_GEN + 9'h5);
  wire [9:0] _enqPtrVec_4_diff_T_10 = 10'({1'h0, enqPtrVec_4_new_value_1} - 10'hA0);
  wire [8:0] enqPtrVec_5_new_value = 9'(_GEN + 9'h5);
  wire [9:0] _enqPtrVec_5_diff_T_4 = 10'({1'h0, enqPtrVec_5_new_value} - 10'hA0);
  wire [8:0] enqPtrVec_5_new_value_1 = 9'(_GEN + 9'h6);
  wire [9:0] _enqPtrVec_5_diff_T_10 = 10'({1'h0, enqPtrVec_5_new_value_1} - 10'hA0);
  wire [8:0] _GEN_0 =
    {6'h0,
     io_allowEnqueue & ~io_hasBlockBackward
       ? 3'({1'h0, 2'({1'h0, io_enq_0} + 2'({1'h0, io_enq_1} + {1'h0, io_enq_2}))}
            + {1'h0, 2'({1'h0, io_enq_3} + 2'({1'h0, io_enq_4} + {1'h0, io_enq_5}))})
       : 3'h0};
  wire [8:0] enqPtrVec_0_new_value_2 = 9'({1'h0, enqPtrVec_0_value} + _GEN_0);
  wire [9:0] _enqPtrVec_0_diff_T_16 = 10'({1'h0, enqPtrVec_0_new_value_2} - 10'hA0);
  wire       enqPtrVec_0_reverse_flag_2 = $signed(_enqPtrVec_0_diff_T_16) > -10'sh1;
  wire [8:0] enqPtrVec_1_new_value_2 = 9'({1'h0, enqPtrVec_1_value} + _GEN_0);
  wire [9:0] _enqPtrVec_1_diff_T_16 = 10'({1'h0, enqPtrVec_1_new_value_2} - 10'hA0);
  wire [8:0] enqPtrVec_2_new_value_2 = 9'({1'h0, enqPtrVec_2_value} + _GEN_0);
  wire [9:0] _enqPtrVec_2_diff_T_16 = 10'({1'h0, enqPtrVec_2_new_value_2} - 10'hA0);
  wire [8:0] enqPtrVec_3_new_value_2 = 9'({1'h0, enqPtrVec_3_value} + _GEN_0);
  wire [9:0] _enqPtrVec_3_diff_T_16 = 10'({1'h0, enqPtrVec_3_new_value_2} - 10'hA0);
  wire [8:0] enqPtrVec_4_new_value_2 = 9'({1'h0, enqPtrVec_4_value} + _GEN_0);
  wire [9:0] _enqPtrVec_4_diff_T_16 = 10'({1'h0, enqPtrVec_4_new_value_2} - 10'hA0);
  wire [8:0] enqPtrVec_5_new_value_2 = 9'({1'h0, enqPtrVec_5_value} + _GEN_0);
  wire [9:0] _enqPtrVec_5_diff_T_16 = 10'({1'h0, enqPtrVec_5_new_value_2} - 10'hA0);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      enqPtrVec_0_flag <= 1'h0;
      enqPtrVec_0_value <= 8'h0;
      enqPtrVec_1_value <= 8'h1;
      enqPtrVec_2_value <= 8'h2;
      enqPtrVec_3_value <= 8'h3;
      enqPtrVec_4_value <= 8'h4;
      enqPtrVec_5_value <= 8'h5;
    end
    else if (io_redirect_valid) begin
      enqPtrVec_0_flag <=
        io_redirect_bits_level
          ? enqPtrVec_0_reverse_flag ^ io_redirect_bits_robIdx_flag
          : enqPtrVec_0_reverse_flag_1 ^ io_redirect_bits_robIdx_flag;
      enqPtrVec_0_value <=
        io_redirect_bits_level
          ? (enqPtrVec_0_reverse_flag
               ? _enqPtrVec_0_diff_T_4[7:0]
               : io_redirect_bits_robIdx_value)
          : enqPtrVec_0_reverse_flag_1
              ? _enqPtrVec_0_diff_T_10[7:0]
              : enqPtrVec_0_new_value_1[7:0];
      enqPtrVec_1_value <=
        io_redirect_bits_level
          ? ($signed(_enqPtrVec_1_diff_T_4) > -10'sh1
               ? _enqPtrVec_1_diff_T_4[7:0]
               : enqPtrVec_1_new_value[7:0])
          : $signed(_enqPtrVec_1_diff_T_10) > -10'sh1
              ? _enqPtrVec_1_diff_T_10[7:0]
              : enqPtrVec_1_new_value_1[7:0];
      enqPtrVec_2_value <=
        io_redirect_bits_level
          ? ($signed(_enqPtrVec_2_diff_T_4) > -10'sh1
               ? _enqPtrVec_2_diff_T_4[7:0]
               : enqPtrVec_2_new_value[7:0])
          : $signed(_enqPtrVec_2_diff_T_10) > -10'sh1
              ? _enqPtrVec_2_diff_T_10[7:0]
              : enqPtrVec_2_new_value_1[7:0];
      enqPtrVec_3_value <=
        io_redirect_bits_level
          ? ($signed(_enqPtrVec_3_diff_T_4) > -10'sh1
               ? _enqPtrVec_3_diff_T_4[7:0]
               : enqPtrVec_3_new_value[7:0])
          : $signed(_enqPtrVec_3_diff_T_10) > -10'sh1
              ? _enqPtrVec_3_diff_T_10[7:0]
              : enqPtrVec_3_new_value_1[7:0];
      enqPtrVec_4_value <=
        io_redirect_bits_level
          ? ($signed(_enqPtrVec_4_diff_T_4) > -10'sh1
               ? _enqPtrVec_4_diff_T_4[7:0]
               : enqPtrVec_4_new_value[7:0])
          : $signed(_enqPtrVec_4_diff_T_10) > -10'sh1
              ? _enqPtrVec_4_diff_T_10[7:0]
              : enqPtrVec_4_new_value_1[7:0];
      enqPtrVec_5_value <=
        io_redirect_bits_level
          ? ($signed(_enqPtrVec_5_diff_T_4) > -10'sh1
               ? _enqPtrVec_5_diff_T_4[7:0]
               : enqPtrVec_5_new_value[7:0])
          : $signed(_enqPtrVec_5_diff_T_10) > -10'sh1
              ? _enqPtrVec_5_diff_T_10[7:0]
              : enqPtrVec_5_new_value_1[7:0];
    end
    else begin
      enqPtrVec_0_flag <= enqPtrVec_0_reverse_flag_2 ^ enqPtrVec_0_flag;
      enqPtrVec_0_value <=
        enqPtrVec_0_reverse_flag_2
          ? _enqPtrVec_0_diff_T_16[7:0]
          : enqPtrVec_0_new_value_2[7:0];
      enqPtrVec_1_value <=
        $signed(_enqPtrVec_1_diff_T_16) > -10'sh1
          ? _enqPtrVec_1_diff_T_16[7:0]
          : enqPtrVec_1_new_value_2[7:0];
      enqPtrVec_2_value <=
        $signed(_enqPtrVec_2_diff_T_16) > -10'sh1
          ? _enqPtrVec_2_diff_T_16[7:0]
          : enqPtrVec_2_new_value_2[7:0];
      enqPtrVec_3_value <=
        $signed(_enqPtrVec_3_diff_T_16) > -10'sh1
          ? _enqPtrVec_3_diff_T_16[7:0]
          : enqPtrVec_3_new_value_2[7:0];
      enqPtrVec_4_value <=
        $signed(_enqPtrVec_4_diff_T_16) > -10'sh1
          ? _enqPtrVec_4_diff_T_16[7:0]
          : enqPtrVec_4_new_value_2[7:0];
      enqPtrVec_5_value <=
        $signed(_enqPtrVec_5_diff_T_16) > -10'sh1
          ? _enqPtrVec_5_diff_T_16[7:0]
          : enqPtrVec_5_new_value_2[7:0];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        enqPtrVec_0_flag = _RANDOM[1'h0][0];
        enqPtrVec_0_value = _RANDOM[1'h0][8:1];
        enqPtrVec_1_value = _RANDOM[1'h0][17:10];
        enqPtrVec_2_value = _RANDOM[1'h0][26:19];
        enqPtrVec_3_value = {_RANDOM[1'h0][31:28], _RANDOM[1'h1][3:0]};
        enqPtrVec_4_value = _RANDOM[1'h1][12:5];
        enqPtrVec_5_value = _RANDOM[1'h1][21:14];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        enqPtrVec_0_flag = 1'h0;
        enqPtrVec_0_value = 8'h0;
        enqPtrVec_1_value = 8'h1;
        enqPtrVec_2_value = 8'h2;
        enqPtrVec_3_value = 8'h3;
        enqPtrVec_4_value = 8'h4;
        enqPtrVec_5_value = 8'h5;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_0_flag = enqPtrVec_0_flag;
  assign io_out_0_value = enqPtrVec_0_value;
  assign io_out_1_value = enqPtrVec_1_value;
  assign io_out_2_value = enqPtrVec_2_value;
  assign io_out_3_value = enqPtrVec_3_value;
  assign io_out_4_value = enqPtrVec_4_value;
  assign io_out_5_value = enqPtrVec_5_value;
endmodule

