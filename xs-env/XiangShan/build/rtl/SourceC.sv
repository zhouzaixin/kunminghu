// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SourceC(
  input          clock,
  input          reset,
  output         io_in_ready,
  input          io_in_valid,
  input  [2:0]   io_in_bits_task_channel,
  input  [2:0]   io_in_bits_task_txChannel,
  input  [6:0]   io_in_bits_task_set,
  input  [32:0]  io_in_bits_task_tag,
  input  [5:0]   io_in_bits_task_off,
  input  [1:0]   io_in_bits_task_alias,
  input  [43:0]  io_in_bits_task_vaddr,
  input          io_in_bits_task_isKeyword,
  input  [3:0]   io_in_bits_task_opcode,
  input  [2:0]   io_in_bits_task_param,
  input  [2:0]   io_in_bits_task_size,
  input  [6:0]   io_in_bits_task_sourceId,
  input  [1:0]   io_in_bits_task_bufIdx,
  input          io_in_bits_task_needProbeAckData,
  input          io_in_bits_task_denied,
  input          io_in_bits_task_corrupt,
  input          io_in_bits_task_mshrTask,
  input  [7:0]   io_in_bits_task_mshrId,
  input          io_in_bits_task_aliasTask,
  input          io_in_bits_task_useProbeData,
  input          io_in_bits_task_mshrRetry,
  input          io_in_bits_task_readProbeDataDown,
  input          io_in_bits_task_fromL2pft,
  input          io_in_bits_task_needHint,
  input          io_in_bits_task_dirty,
  input  [2:0]   io_in_bits_task_way,
  input          io_in_bits_task_meta_dirty,
  input  [1:0]   io_in_bits_task_meta_state,
  input          io_in_bits_task_meta_clients,
  input  [1:0]   io_in_bits_task_meta_alias,
  input          io_in_bits_task_meta_prefetch,
  input  [2:0]   io_in_bits_task_meta_prefetchSrc,
  input          io_in_bits_task_meta_accessed,
  input          io_in_bits_task_meta_tagErr,
  input          io_in_bits_task_meta_dataErr,
  input          io_in_bits_task_metaWen,
  input          io_in_bits_task_tagWen,
  input          io_in_bits_task_dsWen,
  input  [7:0]   io_in_bits_task_wayMask,
  input          io_in_bits_task_replTask,
  input          io_in_bits_task_cmoTask,
  input  [3:0]   io_in_bits_task_reqSource,
  input          io_in_bits_task_mergeA,
  input  [5:0]   io_in_bits_task_aMergeTask_off,
  input  [1:0]   io_in_bits_task_aMergeTask_alias,
  input  [43:0]  io_in_bits_task_aMergeTask_vaddr,
  input          io_in_bits_task_aMergeTask_isKeyword,
  input  [2:0]   io_in_bits_task_aMergeTask_opcode,
  input  [2:0]   io_in_bits_task_aMergeTask_param,
  input  [6:0]   io_in_bits_task_aMergeTask_sourceId,
  input          io_in_bits_task_aMergeTask_meta_dirty,
  input  [1:0]   io_in_bits_task_aMergeTask_meta_state,
  input          io_in_bits_task_aMergeTask_meta_clients,
  input  [1:0]   io_in_bits_task_aMergeTask_meta_alias,
  input          io_in_bits_task_aMergeTask_meta_prefetch,
  input  [2:0]   io_in_bits_task_aMergeTask_meta_prefetchSrc,
  input          io_in_bits_task_aMergeTask_meta_accessed,
  input          io_in_bits_task_aMergeTask_meta_tagErr,
  input          io_in_bits_task_aMergeTask_meta_dataErr,
  input          io_in_bits_task_snpHitRelease,
  input          io_in_bits_task_snpHitReleaseToB,
  input          io_in_bits_task_snpHitReleaseWithData,
  input  [7:0]   io_in_bits_task_snpHitReleaseIdx,
  input  [1:0]   io_in_bits_task_snpHitReleaseState,
  input          io_in_bits_task_snpHitReleaseDirty,
  input  [511:0] io_in_bits_data_data,
  input          io_out_ready,
  output         io_out_valid,
  output [2:0]   io_out_bits_opcode,
  output [2:0]   io_out_bits_param,
  output [7:0]   io_out_bits_source,
  output [47:0]  io_out_bits_address,
  output [3:0]   io_out_bits_user_reqSource,
  output         io_out_bits_echo_blockisdirty,
  output [255:0] io_out_bits_data,
  input          io_pipeStatusVec_1_valid,
  input  [2:0]   io_pipeStatusVec_1_bits_channel,
  input          io_pipeStatusVec_2_valid,
  input  [2:0]   io_pipeStatusVec_2_bits_channel,
  input          io_pipeStatusVec_3_valid,
  input  [2:0]   io_pipeStatusVec_3_bits_channel,
  input          io_pipeStatusVec_4_valid,
  input  [2:0]   io_pipeStatusVec_4_bits_channel,
  output         io_toReqArb_blockSinkBReqEntrance,
  output         io_toReqArb_blockMSHRReqEntrance
);

  wire [1:0]   beatsOH;
  wire [255:0] _queueData1_io_deq_bits_data;
  wire [255:0] _queueData0_io_deq_bits_data;
  wire         _queue_io_deq_valid;
  wire [6:0]   _queue_io_deq_bits_set;
  wire [32:0]  _queue_io_deq_bits_tag;
  wire [5:0]   _queue_io_deq_bits_off;
  wire [3:0]   _queue_io_deq_bits_opcode;
  wire [2:0]   _queue_io_deq_bits_param;
  wire [7:0]   _queue_io_deq_bits_mshrId;
  wire         _queue_io_deq_bits_dirty;
  wire [3:0]   _queue_io_deq_bits_reqSource;
  wire [4:0]   _queue_io_count;
  wire [4:0]   _noSpaceForSinkBReq_T_27 =
    5'({2'h0,
        3'({1'h0,
            2'({1'h0,
                io_pipeStatusVec_1_valid
                  & (io_pipeStatusVec_1_bits_channel[0]
                     | io_pipeStatusVec_1_bits_channel[1])}
               + {1'h0,
                  io_pipeStatusVec_2_valid
                    & (io_pipeStatusVec_2_bits_channel[0]
                       | io_pipeStatusVec_2_bits_channel[1])})}
           + {1'h0,
              2'({1'h0,
                  io_pipeStatusVec_3_valid
                    & (io_pipeStatusVec_3_bits_channel[0]
                       | io_pipeStatusVec_3_bits_channel[1])}
                 + {1'h0,
                    io_pipeStatusVec_4_valid
                      & (io_pipeStatusVec_4_bits_channel[0]
                         | io_pipeStatusVec_4_bits_channel[1])})})} + _queue_io_count);
  reg          beatValids_0;
  reg          beatValids_1;
  assign beatsOH = {beatValids_1, beatValids_0};
  reg  [6:0]   taskR_task_set;
  reg  [32:0]  taskR_task_tag;
  reg  [5:0]   taskR_task_off;
  reg  [3:0]   taskR_task_opcode;
  reg  [2:0]   taskR_task_param;
  reg  [7:0]   taskR_task_mshrId;
  reg          taskR_task_dirty;
  reg  [3:0]   taskR_task_reqSource;
  reg  [511:0] taskR_data_data;
  wire [1:0]   _next_beatsOH_T = ~(beatValids_0 ? 2'h1 : {beatValids_1, 1'h0});
  wire         _GEN = _queue_io_deq_valid & ~(|beatsOH);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatValids_0 <= 1'h0;
      beatValids_1 <= 1'h0;
      taskR_task_set <= 7'h0;
      taskR_task_tag <= 33'h0;
      taskR_task_off <= 6'h0;
      taskR_task_opcode <= 4'h0;
      taskR_task_param <= 3'h0;
      taskR_task_mshrId <= 8'h0;
      taskR_task_dirty <= 1'h0;
      taskR_task_reqSource <= 4'h0;
      taskR_data_data <= 512'h0;
    end
    else begin
      if (io_out_ready & (|beatsOH)) begin
        beatValids_0 <= taskR_task_opcode[0] & beatValids_0 & _next_beatsOH_T[0];
        beatValids_1 <= taskR_task_opcode[0] & beatValids_1 & _next_beatsOH_T[1];
      end
      else begin
        beatValids_0 <= _GEN | beatValids_0;
        beatValids_1 <= _GEN | beatValids_1;
      end
      if (_GEN) begin
        taskR_task_set <= _queue_io_deq_bits_set;
        taskR_task_tag <= _queue_io_deq_bits_tag;
        taskR_task_off <= _queue_io_deq_bits_off;
        taskR_task_opcode <= _queue_io_deq_bits_opcode;
        taskR_task_param <= _queue_io_deq_bits_param;
        taskR_task_mshrId <= _queue_io_deq_bits_mshrId;
        taskR_task_dirty <= _queue_io_deq_bits_dirty;
        taskR_task_reqSource <= _queue_io_deq_bits_reqSource;
        taskR_data_data <= {_queueData1_io_deq_bits_data, _queueData0_io_deq_bits_data};
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:24];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h19; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        beatValids_0 = _RANDOM[5'h0][0];
        beatValids_1 = _RANDOM[5'h0][1];
        taskR_task_set = _RANDOM[5'h0][14:8];
        taskR_task_tag = {_RANDOM[5'h0][31:15], _RANDOM[5'h1][15:0]};
        taskR_task_off = _RANDOM[5'h1][21:16];
        taskR_task_opcode = _RANDOM[5'h3][8:5];
        taskR_task_param = _RANDOM[5'h3][11:9];
        taskR_task_mshrId = {_RANDOM[5'h3][31:28], _RANDOM[5'h4][3:0]};
        taskR_task_dirty = _RANDOM[5'h4][10];
        taskR_task_reqSource = _RANDOM[5'h5][11:8];
        taskR_data_data =
          {_RANDOM[5'h8][31:10],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11],
           _RANDOM[5'h12],
           _RANDOM[5'h13],
           _RANDOM[5'h14],
           _RANDOM[5'h15],
           _RANDOM[5'h16],
           _RANDOM[5'h17],
           _RANDOM[5'h18][9:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatValids_0 = 1'h0;
        beatValids_1 = 1'h0;
        taskR_task_set = 7'h0;
        taskR_task_tag = 33'h0;
        taskR_task_off = 6'h0;
        taskR_task_opcode = 4'h0;
        taskR_task_param = 3'h0;
        taskR_task_mshrId = 8'h0;
        taskR_task_dirty = 1'h0;
        taskR_task_reqSource = 4'h0;
        taskR_data_data = 512'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue16_TaskBundle queue (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_enq_ready                            (io_in_ready),
    .io_enq_valid                            (io_in_valid),
    .io_enq_bits_channel                     (io_in_bits_task_channel),
    .io_enq_bits_txChannel                   (io_in_bits_task_txChannel),
    .io_enq_bits_set                         (io_in_bits_task_set),
    .io_enq_bits_tag                         (io_in_bits_task_tag),
    .io_enq_bits_off                         (io_in_bits_task_off),
    .io_enq_bits_alias                       (io_in_bits_task_alias),
    .io_enq_bits_vaddr                       (io_in_bits_task_vaddr),
    .io_enq_bits_isKeyword                   (io_in_bits_task_isKeyword),
    .io_enq_bits_opcode                      (io_in_bits_task_opcode),
    .io_enq_bits_param                       (io_in_bits_task_param),
    .io_enq_bits_size                        (io_in_bits_task_size),
    .io_enq_bits_sourceId                    (io_in_bits_task_sourceId),
    .io_enq_bits_bufIdx                      (io_in_bits_task_bufIdx),
    .io_enq_bits_needProbeAckData            (io_in_bits_task_needProbeAckData),
    .io_enq_bits_denied                      (io_in_bits_task_denied),
    .io_enq_bits_corrupt                     (io_in_bits_task_corrupt),
    .io_enq_bits_mshrTask                    (io_in_bits_task_mshrTask),
    .io_enq_bits_mshrId                      (io_in_bits_task_mshrId),
    .io_enq_bits_aliasTask                   (io_in_bits_task_aliasTask),
    .io_enq_bits_useProbeData                (io_in_bits_task_useProbeData),
    .io_enq_bits_mshrRetry                   (io_in_bits_task_mshrRetry),
    .io_enq_bits_readProbeDataDown           (io_in_bits_task_readProbeDataDown),
    .io_enq_bits_fromL2pft                   (io_in_bits_task_fromL2pft),
    .io_enq_bits_needHint                    (io_in_bits_task_needHint),
    .io_enq_bits_dirty                       (io_in_bits_task_dirty),
    .io_enq_bits_way                         (io_in_bits_task_way),
    .io_enq_bits_meta_dirty                  (io_in_bits_task_meta_dirty),
    .io_enq_bits_meta_state                  (io_in_bits_task_meta_state),
    .io_enq_bits_meta_clients                (io_in_bits_task_meta_clients),
    .io_enq_bits_meta_alias                  (io_in_bits_task_meta_alias),
    .io_enq_bits_meta_prefetch               (io_in_bits_task_meta_prefetch),
    .io_enq_bits_meta_prefetchSrc            (io_in_bits_task_meta_prefetchSrc),
    .io_enq_bits_meta_accessed               (io_in_bits_task_meta_accessed),
    .io_enq_bits_meta_tagErr                 (io_in_bits_task_meta_tagErr),
    .io_enq_bits_meta_dataErr                (io_in_bits_task_meta_dataErr),
    .io_enq_bits_metaWen                     (io_in_bits_task_metaWen),
    .io_enq_bits_tagWen                      (io_in_bits_task_tagWen),
    .io_enq_bits_dsWen                       (io_in_bits_task_dsWen),
    .io_enq_bits_wayMask                     (io_in_bits_task_wayMask),
    .io_enq_bits_replTask                    (io_in_bits_task_replTask),
    .io_enq_bits_cmoTask                     (io_in_bits_task_cmoTask),
    .io_enq_bits_reqSource                   (io_in_bits_task_reqSource),
    .io_enq_bits_mergeA                      (io_in_bits_task_mergeA),
    .io_enq_bits_aMergeTask_off              (io_in_bits_task_aMergeTask_off),
    .io_enq_bits_aMergeTask_alias            (io_in_bits_task_aMergeTask_alias),
    .io_enq_bits_aMergeTask_vaddr            (io_in_bits_task_aMergeTask_vaddr),
    .io_enq_bits_aMergeTask_isKeyword        (io_in_bits_task_aMergeTask_isKeyword),
    .io_enq_bits_aMergeTask_opcode           (io_in_bits_task_aMergeTask_opcode),
    .io_enq_bits_aMergeTask_param            (io_in_bits_task_aMergeTask_param),
    .io_enq_bits_aMergeTask_sourceId         (io_in_bits_task_aMergeTask_sourceId),
    .io_enq_bits_aMergeTask_meta_dirty       (io_in_bits_task_aMergeTask_meta_dirty),
    .io_enq_bits_aMergeTask_meta_state       (io_in_bits_task_aMergeTask_meta_state),
    .io_enq_bits_aMergeTask_meta_clients     (io_in_bits_task_aMergeTask_meta_clients),
    .io_enq_bits_aMergeTask_meta_alias       (io_in_bits_task_aMergeTask_meta_alias),
    .io_enq_bits_aMergeTask_meta_prefetch    (io_in_bits_task_aMergeTask_meta_prefetch),
    .io_enq_bits_aMergeTask_meta_prefetchSrc
      (io_in_bits_task_aMergeTask_meta_prefetchSrc),
    .io_enq_bits_aMergeTask_meta_accessed    (io_in_bits_task_aMergeTask_meta_accessed),
    .io_enq_bits_aMergeTask_meta_tagErr      (io_in_bits_task_aMergeTask_meta_tagErr),
    .io_enq_bits_aMergeTask_meta_dataErr     (io_in_bits_task_aMergeTask_meta_dataErr),
    .io_enq_bits_snpHitRelease               (io_in_bits_task_snpHitRelease),
    .io_enq_bits_snpHitReleaseToB            (io_in_bits_task_snpHitReleaseToB),
    .io_enq_bits_snpHitReleaseWithData       (io_in_bits_task_snpHitReleaseWithData),
    .io_enq_bits_snpHitReleaseIdx            (io_in_bits_task_snpHitReleaseIdx),
    .io_enq_bits_snpHitReleaseState          (io_in_bits_task_snpHitReleaseState),
    .io_enq_bits_snpHitReleaseDirty          (io_in_bits_task_snpHitReleaseDirty),
    .io_deq_ready                            (~(|beatsOH)),
    .io_deq_valid                            (_queue_io_deq_valid),
    .io_deq_bits_set                         (_queue_io_deq_bits_set),
    .io_deq_bits_tag                         (_queue_io_deq_bits_tag),
    .io_deq_bits_off                         (_queue_io_deq_bits_off),
    .io_deq_bits_opcode                      (_queue_io_deq_bits_opcode),
    .io_deq_bits_param                       (_queue_io_deq_bits_param),
    .io_deq_bits_mshrId                      (_queue_io_deq_bits_mshrId),
    .io_deq_bits_dirty                       (_queue_io_deq_bits_dirty),
    .io_deq_bits_reqSource                   (_queue_io_deq_bits_reqSource),
    .io_count                                (_queue_io_count)
  );
  Queue16_DSBeat queueData0 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (io_in_valid),
    .io_enq_bits_data (io_in_bits_data_data[255:0]),
    .io_deq_ready     (~(|beatsOH)),
    .io_deq_bits_data (_queueData0_io_deq_bits_data)
  );
  Queue16_DSBeat queueData1 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (io_in_valid),
    .io_enq_bits_data (io_in_bits_data_data[511:256]),
    .io_deq_ready     (~(|beatsOH)),
    .io_deq_bits_data (_queueData1_io_deq_bits_data)
  );
  assign io_out_valid = |beatsOH;
  assign io_out_bits_opcode = taskR_task_opcode[2:0];
  assign io_out_bits_param = taskR_task_param;
  assign io_out_bits_source = taskR_task_mshrId;
  assign io_out_bits_address = {2'h0, taskR_task_tag, taskR_task_set, taskR_task_off};
  assign io_out_bits_user_reqSource = taskR_task_reqSource;
  assign io_out_bits_echo_blockisdirty = taskR_task_dirty;
  assign io_out_bits_data =
    beatValids_0 ? taskR_data_data[255:0] : taskR_data_data[511:256];
  assign io_toReqArb_blockSinkBReqEntrance = _noSpaceForSinkBReq_T_27[4];
  assign io_toReqArb_blockMSHRReqEntrance =
    5'({2'h0,
        3'({1'h0,
            2'({1'h0,
                io_pipeStatusVec_1_valid
                  & (io_pipeStatusVec_1_bits_channel[0]
                     | io_pipeStatusVec_1_bits_channel[1])}
               + {1'h0,
                  io_pipeStatusVec_2_valid
                    & (io_pipeStatusVec_2_bits_channel[0]
                       | io_pipeStatusVec_2_bits_channel[1])})}
           + {1'h0,
              2'({1'h0,
                  io_pipeStatusVec_3_valid
                    & (io_pipeStatusVec_3_bits_channel[0]
                       | io_pipeStatusVec_3_bits_channel[1])}
                 + {1'h0,
                    io_pipeStatusVec_4_valid
                      & (io_pipeStatusVec_4_bits_channel[0]
                         | io_pipeStatusVec_4_bits_channel[1])})})}
       + _queue_io_count) > 5'hE;
endmodule

