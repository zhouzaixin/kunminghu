// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Directory_Anon(
  input         clock,
  input         reset,
  output        io_read_ready,
  input         io_read_valid,
  input  [30:0] io_read_bits_tag,
  input  [10:0] io_read_bits_set,
  input  [2:0]  io_read_bits_replacerInfo_channel,
  input  [2:0]  io_read_bits_replacerInfo_opcode,
  output        io_resp_valid,
  output        io_resp_bits_hit,
  output [2:0]  io_resp_bits_way,
  output [30:0] io_resp_bits_tag,
  output        io_resp_bits_dir_dirty,
  output [1:0]  io_resp_bits_dir_state,
  output [1:0]  io_resp_bits_dir_clientStates_0,
  output        io_resp_bits_dir_prefetch,
  output        io_resp_bits_error,
  input         io_tag_w_valid,
  input  [30:0] io_tag_w_bits_tag,
  input  [10:0] io_tag_w_bits_set,
  input  [2:0]  io_tag_w_bits_way,
  input         io_dir_w_valid,
  input  [10:0] io_dir_w_bits_set,
  input  [2:0]  io_dir_w_bits_way,
  input         io_dir_w_bits_dir_dirty,
  input  [1:0]  io_dir_w_bits_dir_state,
  input  [1:0]  io_dir_w_bits_dir_clientStates_0,
  input         io_dir_w_bits_dir_prefetch
);

  wire [4:0]       _repl_state_replacer_sram_io_r_resp_data_0;
  wire [6:0]       _eccArray_io_r_resp_data_0;
  wire [6:0]       _eccArray_io_r_resp_data_1;
  wire [6:0]       _eccArray_io_r_resp_data_2;
  wire [6:0]       _eccArray_io_r_resp_data_3;
  wire [6:0]       _eccArray_io_r_resp_data_4;
  wire [6:0]       _eccArray_io_r_resp_data_5;
  wire [30:0]      _tagArray_io_r_resp_data_0;
  wire [30:0]      _tagArray_io_r_resp_data_1;
  wire [30:0]      _tagArray_io_r_resp_data_2;
  wire [30:0]      _tagArray_io_r_resp_data_3;
  wire [30:0]      _tagArray_io_r_resp_data_4;
  wire [30:0]      _tagArray_io_r_resp_data_5;
  wire             _metaArray_io_r_resp_data_0_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_0_state;
  wire [1:0]       _metaArray_io_r_resp_data_0_clientStates_0;
  wire             _metaArray_io_r_resp_data_0_prefetch;
  wire             _metaArray_io_r_resp_data_1_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_1_state;
  wire [1:0]       _metaArray_io_r_resp_data_1_clientStates_0;
  wire             _metaArray_io_r_resp_data_1_prefetch;
  wire             _metaArray_io_r_resp_data_2_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_2_state;
  wire [1:0]       _metaArray_io_r_resp_data_2_clientStates_0;
  wire             _metaArray_io_r_resp_data_2_prefetch;
  wire             _metaArray_io_r_resp_data_3_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_3_state;
  wire [1:0]       _metaArray_io_r_resp_data_3_clientStates_0;
  wire             _metaArray_io_r_resp_data_3_prefetch;
  wire             _metaArray_io_r_resp_data_4_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_4_state;
  wire [1:0]       _metaArray_io_r_resp_data_4_clientStates_0;
  wire             _metaArray_io_r_resp_data_4_prefetch;
  wire             _metaArray_io_r_resp_data_5_dirty;
  wire [1:0]       _metaArray_io_r_resp_data_5_state;
  wire [1:0]       _metaArray_io_r_resp_data_5_clientStates_0;
  wire             _metaArray_io_r_resp_data_5_prefetch;
  reg              resetFinish;
  reg  [10:0]      resetIdx;
  reg              replacer_wen;
  wire             io_read_ready_0 =
    ~io_tag_w_valid & ~io_dir_w_valid & ~replacer_wen & resetFinish;
  wire [30:0]      _syndromeUInt_T = io_tag_w_bits_tag & 31'h56AAAD5B;
  wire [30:0]      _syndromeUInt_T_3 = io_tag_w_bits_tag & 31'h1B33366D;
  wire [30:0]      _syndromeUInt_T_6 = io_tag_w_bits_tag & 31'h63C3C78E;
  wire [30:0]      _syndromeUInt_T_9 = io_tag_w_bits_tag & 31'h3FC07F0;
  wire [30:0]      _syndromeUInt_T_12 = io_tag_w_bits_tag & 31'h3FFF800;
  wire [30:0]      _syndromeUInt_T_15 = io_tag_w_bits_tag & 31'h7C000000;
  wire [6:0]       _GEN =
    {^{^_syndromeUInt_T_15,
       ^_syndromeUInt_T_12,
       ^_syndromeUInt_T_9,
       ^_syndromeUInt_T_6,
       ^_syndromeUInt_T_3,
       ^_syndromeUInt_T,
       io_tag_w_bits_tag},
     ^_syndromeUInt_T_15,
     ^_syndromeUInt_T_12,
     ^_syndromeUInt_T_9,
     ^_syndromeUInt_T_6,
     ^_syndromeUInt_T_3,
     ^_syndromeUInt_T};
  wire [7:0]       _GEN_0 = 8'h1 << io_tag_w_bits_way;
  wire             _metas_T = io_read_ready_0 & io_read_valid;
  reg  [30:0]      reqReg_tag;
  reg  [10:0]      reqReg_set;
  reg  [2:0]       reqReg_replacerInfo_channel;
  reg  [2:0]       reqReg_replacerInfo_opcode;
  reg              reqValidReg;
  reg              repl_state_repl_state_hold_REG;
  reg  [4:0]       repl_state_repl_state_hold_r;
  wire [4:0]       repl_state =
    repl_state_repl_state_hold_REG
      ? _repl_state_replacer_sram_io_r_resp_data_0
      : repl_state_repl_state_hold_r;
  reg  [4:0]       repl_state_REG;
  reg  [10:0]      repl_state_REG_1;
  wire             hitVec_1 =
    _tagArray_io_r_resp_data_1 == reqReg_tag & (|_metaArray_io_r_resp_data_1_state);
  wire             hitVec_2 =
    _tagArray_io_r_resp_data_2 == reqReg_tag & (|_metaArray_io_r_resp_data_2_state);
  wire             hitVec_3 =
    _tagArray_io_r_resp_data_3 == reqReg_tag & (|_metaArray_io_r_resp_data_3_state);
  wire             hitVec_4 =
    _tagArray_io_r_resp_data_4 == reqReg_tag & (|_metaArray_io_r_resp_data_4_state);
  wire             hitVec_5 =
    _tagArray_io_r_resp_data_5 == reqReg_tag & (|_metaArray_io_r_resp_data_5_state);
  wire [2:0]       replaceWay =
    {repl_state[4],
     repl_state[4]
       ? {1'h0, repl_state[3]}
       : {repl_state[2], repl_state[2] ? repl_state[1] : repl_state[0]}};
  wire             invalid_vec_0 = _metaArray_io_r_resp_data_0_state == 2'h0;
  wire             invalid_vec_1 = _metaArray_io_r_resp_data_1_state == 2'h0;
  wire             invalid_vec_2 = _metaArray_io_r_resp_data_2_state == 2'h0;
  wire             invalid_vec_3 = _metaArray_io_r_resp_data_3_state == 2'h0;
  wire             invalid_vec_4 = _metaArray_io_r_resp_data_4_state == 2'h0;
  wire [5:0]       _has_invalid_way_T =
    {invalid_vec_0,
     invalid_vec_1,
     invalid_vec_2,
     invalid_vec_3,
     invalid_vec_4,
     _metaArray_io_r_resp_data_5_state == 2'h0};
  wire             trunk_vec_0 = _metaArray_io_r_resp_data_0_state == 2'h2;
  wire             trunk_vec_1 = _metaArray_io_r_resp_data_1_state == 2'h2;
  wire             trunk_vec_2 = _metaArray_io_r_resp_data_2_state == 2'h2;
  wire             trunk_vec_3 = _metaArray_io_r_resp_data_3_state == 2'h2;
  wire             trunk_vec_4 = _metaArray_io_r_resp_data_4_state == 2'h2;
  wire [7:0][1:0]  _GEN_1 =
    {{_metaArray_io_r_resp_data_0_state},
     {_metaArray_io_r_resp_data_0_state},
     {_metaArray_io_r_resp_data_5_state},
     {_metaArray_io_r_resp_data_4_state},
     {_metaArray_io_r_resp_data_3_state},
     {_metaArray_io_r_resp_data_2_state},
     {_metaArray_io_r_resp_data_1_state},
     {_metaArray_io_r_resp_data_0_state}};
  wire [5:0]       _hit_s1_T =
    {_tagArray_io_r_resp_data_0 == reqReg_tag & (|_metaArray_io_r_resp_data_0_state),
     hitVec_1,
     hitVec_2,
     hitVec_3,
     hitVec_4,
     hitVec_5};
  wire [2:0]       way_s1 =
    (|_hit_s1_T)
      ? {|{hitVec_5, hitVec_4}, |{hitVec_3, hitVec_2}, hitVec_3 | hitVec_5 | hitVec_1}
      : (|_has_invalid_way_T)
        | (|{trunk_vec_0,
             trunk_vec_1,
             trunk_vec_2,
             trunk_vec_3,
             trunk_vec_4,
             _metaArray_io_r_resp_data_5_state == 2'h2})
          ? ((|_has_invalid_way_T)
               ? (invalid_vec_0 | invalid_vec_1 | invalid_vec_2
                    ? (invalid_vec_0 ? 3'h0 : invalid_vec_1 ? 3'h1 : 3'h2)
                    : invalid_vec_3 ? 3'h3 : {2'h2, ~invalid_vec_4})
               : _GEN_1[replaceWay] == 2'h2
                   ? replaceWay
                   : trunk_vec_0 | trunk_vec_1 | trunk_vec_2
                       ? (trunk_vec_0 ? 3'h0 : trunk_vec_1 ? 3'h1 : 3'h2)
                       : trunk_vec_3 ? 3'h3 : {2'h2, ~trunk_vec_4})
          : replaceWay;
  reg              hit_s2;
  reg  [2:0]       way_s2;
  reg              metaAll_s2_0_dirty;
  reg  [1:0]       metaAll_s2_0_state;
  reg  [1:0]       metaAll_s2_0_clientStates_0;
  reg              metaAll_s2_0_prefetch;
  reg              metaAll_s2_1_dirty;
  reg  [1:0]       metaAll_s2_1_state;
  reg  [1:0]       metaAll_s2_1_clientStates_0;
  reg              metaAll_s2_1_prefetch;
  reg              metaAll_s2_2_dirty;
  reg  [1:0]       metaAll_s2_2_state;
  reg  [1:0]       metaAll_s2_2_clientStates_0;
  reg              metaAll_s2_2_prefetch;
  reg              metaAll_s2_3_dirty;
  reg  [1:0]       metaAll_s2_3_state;
  reg  [1:0]       metaAll_s2_3_clientStates_0;
  reg              metaAll_s2_3_prefetch;
  reg              metaAll_s2_4_dirty;
  reg  [1:0]       metaAll_s2_4_state;
  reg  [1:0]       metaAll_s2_4_clientStates_0;
  reg              metaAll_s2_4_prefetch;
  reg              metaAll_s2_5_dirty;
  reg  [1:0]       metaAll_s2_5_state;
  reg  [1:0]       metaAll_s2_5_clientStates_0;
  reg              metaAll_s2_5_prefetch;
  reg  [30:0]      tagAll_s2_0;
  reg  [30:0]      tagAll_s2_1;
  reg  [30:0]      tagAll_s2_2;
  reg  [30:0]      tagAll_s2_3;
  reg  [30:0]      tagAll_s2_4;
  reg  [30:0]      tagAll_s2_5;
  reg              errorAll_s2_0;
  reg              errorAll_s2_1;
  reg              errorAll_s2_2;
  reg              errorAll_s2_3;
  reg              errorAll_s2_4;
  reg              errorAll_s2_5;
  wire [7:0]       _GEN_2 =
    {{metaAll_s2_0_dirty},
     {metaAll_s2_0_dirty},
     {metaAll_s2_5_dirty},
     {metaAll_s2_4_dirty},
     {metaAll_s2_3_dirty},
     {metaAll_s2_2_dirty},
     {metaAll_s2_1_dirty},
     {metaAll_s2_0_dirty}};
  wire [7:0][1:0]  _GEN_3 =
    {{metaAll_s2_0_state},
     {metaAll_s2_0_state},
     {metaAll_s2_5_state},
     {metaAll_s2_4_state},
     {metaAll_s2_3_state},
     {metaAll_s2_2_state},
     {metaAll_s2_1_state},
     {metaAll_s2_0_state}};
  wire [7:0][1:0]  _GEN_4 =
    {{metaAll_s2_0_clientStates_0},
     {metaAll_s2_0_clientStates_0},
     {metaAll_s2_5_clientStates_0},
     {metaAll_s2_4_clientStates_0},
     {metaAll_s2_3_clientStates_0},
     {metaAll_s2_2_clientStates_0},
     {metaAll_s2_1_clientStates_0},
     {metaAll_s2_0_clientStates_0}};
  wire [7:0]       _GEN_5 =
    {{metaAll_s2_0_prefetch},
     {metaAll_s2_0_prefetch},
     {metaAll_s2_5_prefetch},
     {metaAll_s2_4_prefetch},
     {metaAll_s2_3_prefetch},
     {metaAll_s2_2_prefetch},
     {metaAll_s2_1_prefetch},
     {metaAll_s2_0_prefetch}};
  wire [7:0][30:0] _GEN_6 =
    {{tagAll_s2_0},
     {tagAll_s2_0},
     {tagAll_s2_5},
     {tagAll_s2_4},
     {tagAll_s2_3},
     {tagAll_s2_2},
     {tagAll_s2_1},
     {tagAll_s2_0}};
  wire [7:0]       _GEN_7 =
    {{errorAll_s2_0},
     {errorAll_s2_0},
     {errorAll_s2_5},
     {errorAll_s2_4},
     {errorAll_s2_3},
     {errorAll_s2_2},
     {errorAll_s2_1},
     {errorAll_s2_0}};
  wire             _GEN_8 = resetFinish & io_dir_w_bits_dir_dirty;
  wire [1:0]       _GEN_9 = resetFinish ? io_dir_w_bits_dir_state : 2'h0;
  wire [1:0]       _GEN_10 = resetFinish ? io_dir_w_bits_dir_clientStates_0 : 2'h0;
  wire             _GEN_11 = resetFinish & io_dir_w_bits_dir_prefetch;
  wire [7:0]       _GEN_12 = 8'h1 << io_dir_w_bits_way;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      resetFinish <= 1'h0;
      resetIdx <= 11'h7FF;
      replacer_wen <= 1'h0;
      reqValidReg <= 1'h0;
      repl_state_repl_state_hold_REG <= 1'h0;
      repl_state_repl_state_hold_r <= 5'h0;
      hit_s2 <= 1'h0;
      way_s2 <= 3'h0;
    end
    else begin
      resetFinish <= resetIdx == 11'h0 | resetFinish;
      if (resetFinish) begin
      end
      else
        resetIdx <= 11'(resetIdx - 11'h1);
      replacer_wen <=
        reqValidReg
        & (reqReg_replacerInfo_channel[2] & (&reqReg_replacerInfo_opcode)
           | reqReg_replacerInfo_channel[0] & reqReg_replacerInfo_opcode == 3'h5);
      reqValidReg <= _metas_T;
      repl_state_repl_state_hold_REG <= _metas_T;
      if (repl_state_repl_state_hold_REG)
        repl_state_repl_state_hold_r <= _repl_state_replacer_sram_io_r_resp_data_0;
      if (reqValidReg) begin
        hit_s2 <= |_hit_s1_T;
        way_s2 <= way_s1;
      end
    end
  end // always @(posedge, posedge)
  wire [37:0]      _errorAll_s1_T =
    {_eccArray_io_r_resp_data_0, _tagArray_io_r_resp_data_0};
  wire [37:0]      _errorAll_s1_T_3 =
    {_eccArray_io_r_resp_data_1, _tagArray_io_r_resp_data_1};
  wire [37:0]      _errorAll_s1_T_6 =
    {_eccArray_io_r_resp_data_2, _tagArray_io_r_resp_data_2};
  wire [37:0]      _errorAll_s1_T_9 =
    {_eccArray_io_r_resp_data_3, _tagArray_io_r_resp_data_3};
  wire [37:0]      _errorAll_s1_T_12 =
    {_eccArray_io_r_resp_data_4, _tagArray_io_r_resp_data_4};
  wire [37:0]      _errorAll_s1_T_15 =
    {_eccArray_io_r_resp_data_5, _tagArray_io_r_resp_data_5};
  always @(posedge clock) begin
    if (_metas_T) begin
      reqReg_tag <= io_read_bits_tag;
      reqReg_set <= io_read_bits_set;
      reqReg_replacerInfo_channel <= io_read_bits_replacerInfo_channel;
      reqReg_replacerInfo_opcode <= io_read_bits_replacerInfo_opcode;
    end
    repl_state_REG <=
      {~(way_s1[2]),
       way_s1[2] ? ~(way_s1[0]) : repl_state[3],
       way_s1[2]
         ? repl_state[2:0]
         : {~(way_s1[1]),
            way_s1[1] ? ~(way_s1[0]) : repl_state[1],
            way_s1[1] ? repl_state[0] : ~(way_s1[0])}};
    repl_state_REG_1 <= reqReg_set;
    if (reqValidReg) begin
      metaAll_s2_0_dirty <= _metaArray_io_r_resp_data_0_dirty;
      metaAll_s2_0_state <= _metaArray_io_r_resp_data_0_state;
      metaAll_s2_0_clientStates_0 <= _metaArray_io_r_resp_data_0_clientStates_0;
      metaAll_s2_0_prefetch <= _metaArray_io_r_resp_data_0_prefetch;
      metaAll_s2_1_dirty <= _metaArray_io_r_resp_data_1_dirty;
      metaAll_s2_1_state <= _metaArray_io_r_resp_data_1_state;
      metaAll_s2_1_clientStates_0 <= _metaArray_io_r_resp_data_1_clientStates_0;
      metaAll_s2_1_prefetch <= _metaArray_io_r_resp_data_1_prefetch;
      metaAll_s2_2_dirty <= _metaArray_io_r_resp_data_2_dirty;
      metaAll_s2_2_state <= _metaArray_io_r_resp_data_2_state;
      metaAll_s2_2_clientStates_0 <= _metaArray_io_r_resp_data_2_clientStates_0;
      metaAll_s2_2_prefetch <= _metaArray_io_r_resp_data_2_prefetch;
      metaAll_s2_3_dirty <= _metaArray_io_r_resp_data_3_dirty;
      metaAll_s2_3_state <= _metaArray_io_r_resp_data_3_state;
      metaAll_s2_3_clientStates_0 <= _metaArray_io_r_resp_data_3_clientStates_0;
      metaAll_s2_3_prefetch <= _metaArray_io_r_resp_data_3_prefetch;
      metaAll_s2_4_dirty <= _metaArray_io_r_resp_data_4_dirty;
      metaAll_s2_4_state <= _metaArray_io_r_resp_data_4_state;
      metaAll_s2_4_clientStates_0 <= _metaArray_io_r_resp_data_4_clientStates_0;
      metaAll_s2_4_prefetch <= _metaArray_io_r_resp_data_4_prefetch;
      metaAll_s2_5_dirty <= _metaArray_io_r_resp_data_5_dirty;
      metaAll_s2_5_state <= _metaArray_io_r_resp_data_5_state;
      metaAll_s2_5_clientStates_0 <= _metaArray_io_r_resp_data_5_clientStates_0;
      metaAll_s2_5_prefetch <= _metaArray_io_r_resp_data_5_prefetch;
      tagAll_s2_0 <= _tagArray_io_r_resp_data_0;
      tagAll_s2_1 <= _tagArray_io_r_resp_data_1;
      tagAll_s2_2 <= _tagArray_io_r_resp_data_2;
      tagAll_s2_3 <= _tagArray_io_r_resp_data_3;
      tagAll_s2_4 <= _tagArray_io_r_resp_data_4;
      tagAll_s2_5 <= _tagArray_io_r_resp_data_5;
      errorAll_s2_0 <=
        ^_errorAll_s1_T | ~(^_errorAll_s1_T)
        & (|{^({_eccArray_io_r_resp_data_0[5:0], _tagArray_io_r_resp_data_0}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_0[4:0], _tagArray_io_r_resp_data_0}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_0[3:0], _tagArray_io_r_resp_data_0}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_0[2:0], _tagArray_io_r_resp_data_0}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_0[1:0], _tagArray_io_r_resp_data_0}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_0[0], _tagArray_io_r_resp_data_0}
               & 32'hD6AAAD5B)});
      errorAll_s2_1 <=
        ^_errorAll_s1_T_3 | ~(^_errorAll_s1_T_3)
        & (|{^({_eccArray_io_r_resp_data_1[5:0], _tagArray_io_r_resp_data_1}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_1[4:0], _tagArray_io_r_resp_data_1}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_1[3:0], _tagArray_io_r_resp_data_1}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_1[2:0], _tagArray_io_r_resp_data_1}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_1[1:0], _tagArray_io_r_resp_data_1}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_1[0], _tagArray_io_r_resp_data_1}
               & 32'hD6AAAD5B)});
      errorAll_s2_2 <=
        ^_errorAll_s1_T_6 | ~(^_errorAll_s1_T_6)
        & (|{^({_eccArray_io_r_resp_data_2[5:0], _tagArray_io_r_resp_data_2}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_2[4:0], _tagArray_io_r_resp_data_2}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_2[3:0], _tagArray_io_r_resp_data_2}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_2[2:0], _tagArray_io_r_resp_data_2}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_2[1:0], _tagArray_io_r_resp_data_2}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_2[0], _tagArray_io_r_resp_data_2}
               & 32'hD6AAAD5B)});
      errorAll_s2_3 <=
        ^_errorAll_s1_T_9 | ~(^_errorAll_s1_T_9)
        & (|{^({_eccArray_io_r_resp_data_3[5:0], _tagArray_io_r_resp_data_3}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_3[4:0], _tagArray_io_r_resp_data_3}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_3[3:0], _tagArray_io_r_resp_data_3}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_3[2:0], _tagArray_io_r_resp_data_3}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_3[1:0], _tagArray_io_r_resp_data_3}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_3[0], _tagArray_io_r_resp_data_3}
               & 32'hD6AAAD5B)});
      errorAll_s2_4 <=
        ^_errorAll_s1_T_12 | ~(^_errorAll_s1_T_12)
        & (|{^({_eccArray_io_r_resp_data_4[5:0], _tagArray_io_r_resp_data_4}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_4[4:0], _tagArray_io_r_resp_data_4}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_4[3:0], _tagArray_io_r_resp_data_4}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_4[2:0], _tagArray_io_r_resp_data_4}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_4[1:0], _tagArray_io_r_resp_data_4}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_4[0], _tagArray_io_r_resp_data_4}
               & 32'hD6AAAD5B)});
      errorAll_s2_5 <=
        ^_errorAll_s1_T_15 | ~(^_errorAll_s1_T_15)
        & (|{^({_eccArray_io_r_resp_data_5[5:0], _tagArray_io_r_resp_data_5}
               & 37'h107C000000),
             ^({_eccArray_io_r_resp_data_5[4:0], _tagArray_io_r_resp_data_5}
               & 36'h803FFF800),
             ^({_eccArray_io_r_resp_data_5[3:0], _tagArray_io_r_resp_data_5}
               & 35'h403FC07F0),
             ^({_eccArray_io_r_resp_data_5[2:0], _tagArray_io_r_resp_data_5}
               & 34'h263C3C78E),
             ^({_eccArray_io_r_resp_data_5[1:0], _tagArray_io_r_resp_data_5}
               & 33'h11B33366D),
             ^({_eccArray_io_r_resp_data_5[0], _tagArray_io_r_resp_data_5}
               & 32'hD6AAAD5B)});
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:10];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        resetFinish = _RANDOM[4'h0][0];
        resetIdx = _RANDOM[4'h0][11:1];
        replacer_wen = _RANDOM[4'h0][12];
        reqReg_tag = {_RANDOM[4'h0][31:13], _RANDOM[4'h1][11:0]};
        reqReg_set = _RANDOM[4'h1][22:12];
        reqReg_replacerInfo_channel = _RANDOM[4'h1][25:23];
        reqReg_replacerInfo_opcode = _RANDOM[4'h1][28:26];
        reqValidReg = _RANDOM[4'h2][5];
        repl_state_repl_state_hold_REG = _RANDOM[4'h2][11];
        repl_state_repl_state_hold_r = _RANDOM[4'h2][16:12];
        repl_state_REG = _RANDOM[4'h2][21:17];
        repl_state_REG_1 = {_RANDOM[4'h2][31:22], _RANDOM[4'h3][0]};
        hit_s2 = _RANDOM[4'h3][1];
        way_s2 = _RANDOM[4'h3][4:2];
        metaAll_s2_0_dirty = _RANDOM[4'h3][5];
        metaAll_s2_0_state = _RANDOM[4'h3][7:6];
        metaAll_s2_0_clientStates_0 = _RANDOM[4'h3][9:8];
        metaAll_s2_0_prefetch = _RANDOM[4'h3][10];
        metaAll_s2_1_dirty = _RANDOM[4'h3][11];
        metaAll_s2_1_state = _RANDOM[4'h3][13:12];
        metaAll_s2_1_clientStates_0 = _RANDOM[4'h3][15:14];
        metaAll_s2_1_prefetch = _RANDOM[4'h3][16];
        metaAll_s2_2_dirty = _RANDOM[4'h3][17];
        metaAll_s2_2_state = _RANDOM[4'h3][19:18];
        metaAll_s2_2_clientStates_0 = _RANDOM[4'h3][21:20];
        metaAll_s2_2_prefetch = _RANDOM[4'h3][22];
        metaAll_s2_3_dirty = _RANDOM[4'h3][23];
        metaAll_s2_3_state = _RANDOM[4'h3][25:24];
        metaAll_s2_3_clientStates_0 = _RANDOM[4'h3][27:26];
        metaAll_s2_3_prefetch = _RANDOM[4'h3][28];
        metaAll_s2_4_dirty = _RANDOM[4'h3][29];
        metaAll_s2_4_state = _RANDOM[4'h3][31:30];
        metaAll_s2_4_clientStates_0 = _RANDOM[4'h4][1:0];
        metaAll_s2_4_prefetch = _RANDOM[4'h4][2];
        metaAll_s2_5_dirty = _RANDOM[4'h4][3];
        metaAll_s2_5_state = _RANDOM[4'h4][5:4];
        metaAll_s2_5_clientStates_0 = _RANDOM[4'h4][7:6];
        metaAll_s2_5_prefetch = _RANDOM[4'h4][8];
        tagAll_s2_0 = {_RANDOM[4'h4][31:9], _RANDOM[4'h5][7:0]};
        tagAll_s2_1 = {_RANDOM[4'h5][31:8], _RANDOM[4'h6][6:0]};
        tagAll_s2_2 = {_RANDOM[4'h6][31:7], _RANDOM[4'h7][5:0]};
        tagAll_s2_3 = {_RANDOM[4'h7][31:6], _RANDOM[4'h8][4:0]};
        tagAll_s2_4 = {_RANDOM[4'h8][31:5], _RANDOM[4'h9][3:0]};
        tagAll_s2_5 = {_RANDOM[4'h9][31:4], _RANDOM[4'hA][2:0]};
        errorAll_s2_0 = _RANDOM[4'hA][3];
        errorAll_s2_1 = _RANDOM[4'hA][4];
        errorAll_s2_2 = _RANDOM[4'hA][5];
        errorAll_s2_3 = _RANDOM[4'hA][6];
        errorAll_s2_4 = _RANDOM[4'hA][7];
        errorAll_s2_5 = _RANDOM[4'hA][8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        resetFinish = 1'h0;
        resetIdx = 11'h7FF;
        replacer_wen = 1'h0;
        reqValidReg = 1'h0;
        repl_state_repl_state_hold_REG = 1'h0;
        repl_state_repl_state_hold_r = 5'h0;
        hit_s2 = 1'h0;
        way_s2 = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_198 metaArray (
    .clock                               (clock),
    .io_r_req_valid                      (_metas_T),
    .io_r_req_bits_setIdx                (io_read_bits_set),
    .io_r_resp_data_0_dirty              (_metaArray_io_r_resp_data_0_dirty),
    .io_r_resp_data_0_state              (_metaArray_io_r_resp_data_0_state),
    .io_r_resp_data_0_clientStates_0     (_metaArray_io_r_resp_data_0_clientStates_0),
    .io_r_resp_data_0_prefetch           (_metaArray_io_r_resp_data_0_prefetch),
    .io_r_resp_data_1_dirty              (_metaArray_io_r_resp_data_1_dirty),
    .io_r_resp_data_1_state              (_metaArray_io_r_resp_data_1_state),
    .io_r_resp_data_1_clientStates_0     (_metaArray_io_r_resp_data_1_clientStates_0),
    .io_r_resp_data_1_prefetch           (_metaArray_io_r_resp_data_1_prefetch),
    .io_r_resp_data_2_dirty              (_metaArray_io_r_resp_data_2_dirty),
    .io_r_resp_data_2_state              (_metaArray_io_r_resp_data_2_state),
    .io_r_resp_data_2_clientStates_0     (_metaArray_io_r_resp_data_2_clientStates_0),
    .io_r_resp_data_2_prefetch           (_metaArray_io_r_resp_data_2_prefetch),
    .io_r_resp_data_3_dirty              (_metaArray_io_r_resp_data_3_dirty),
    .io_r_resp_data_3_state              (_metaArray_io_r_resp_data_3_state),
    .io_r_resp_data_3_clientStates_0     (_metaArray_io_r_resp_data_3_clientStates_0),
    .io_r_resp_data_3_prefetch           (_metaArray_io_r_resp_data_3_prefetch),
    .io_r_resp_data_4_dirty              (_metaArray_io_r_resp_data_4_dirty),
    .io_r_resp_data_4_state              (_metaArray_io_r_resp_data_4_state),
    .io_r_resp_data_4_clientStates_0     (_metaArray_io_r_resp_data_4_clientStates_0),
    .io_r_resp_data_4_prefetch           (_metaArray_io_r_resp_data_4_prefetch),
    .io_r_resp_data_5_dirty              (_metaArray_io_r_resp_data_5_dirty),
    .io_r_resp_data_5_state              (_metaArray_io_r_resp_data_5_state),
    .io_r_resp_data_5_clientStates_0     (_metaArray_io_r_resp_data_5_clientStates_0),
    .io_r_resp_data_5_prefetch           (_metaArray_io_r_resp_data_5_prefetch),
    .io_w_req_valid                      (~resetFinish | io_dir_w_valid),
    .io_w_req_bits_setIdx                (resetFinish ? io_dir_w_bits_set : resetIdx),
    .io_w_req_bits_data_0_dirty          (_GEN_8),
    .io_w_req_bits_data_0_state          (_GEN_9),
    .io_w_req_bits_data_0_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_0_prefetch       (_GEN_11),
    .io_w_req_bits_data_1_dirty          (_GEN_8),
    .io_w_req_bits_data_1_state          (_GEN_9),
    .io_w_req_bits_data_1_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_1_prefetch       (_GEN_11),
    .io_w_req_bits_data_2_dirty          (_GEN_8),
    .io_w_req_bits_data_2_state          (_GEN_9),
    .io_w_req_bits_data_2_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_2_prefetch       (_GEN_11),
    .io_w_req_bits_data_3_dirty          (_GEN_8),
    .io_w_req_bits_data_3_state          (_GEN_9),
    .io_w_req_bits_data_3_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_3_prefetch       (_GEN_11),
    .io_w_req_bits_data_4_dirty          (_GEN_8),
    .io_w_req_bits_data_4_state          (_GEN_9),
    .io_w_req_bits_data_4_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_4_prefetch       (_GEN_11),
    .io_w_req_bits_data_5_dirty          (_GEN_8),
    .io_w_req_bits_data_5_state          (_GEN_9),
    .io_w_req_bits_data_5_clientStates_0 (_GEN_10),
    .io_w_req_bits_data_5_prefetch       (_GEN_11),
    .io_w_req_bits_waymask               (resetFinish ? _GEN_12[5:0] : 6'h3F)
  );
  SRAMTemplate_199 tagArray (
    .clock                 (clock),
    .io_r_req_valid        (_metas_T),
    .io_r_req_bits_setIdx  (io_read_bits_set),
    .io_r_resp_data_0      (_tagArray_io_r_resp_data_0),
    .io_r_resp_data_1      (_tagArray_io_r_resp_data_1),
    .io_r_resp_data_2      (_tagArray_io_r_resp_data_2),
    .io_r_resp_data_3      (_tagArray_io_r_resp_data_3),
    .io_r_resp_data_4      (_tagArray_io_r_resp_data_4),
    .io_r_resp_data_5      (_tagArray_io_r_resp_data_5),
    .io_w_req_valid        (io_tag_w_valid),
    .io_w_req_bits_setIdx  (io_tag_w_bits_set),
    .io_w_req_bits_data_0  (io_tag_w_bits_tag),
    .io_w_req_bits_data_1  (io_tag_w_bits_tag),
    .io_w_req_bits_data_2  (io_tag_w_bits_tag),
    .io_w_req_bits_data_3  (io_tag_w_bits_tag),
    .io_w_req_bits_data_4  (io_tag_w_bits_tag),
    .io_w_req_bits_data_5  (io_tag_w_bits_tag),
    .io_w_req_bits_waymask (_GEN_0[5:0])
  );
  SRAMTemplate_200 eccArray (
    .clock                 (clock),
    .io_r_req_valid        (_metas_T),
    .io_r_req_bits_setIdx  (io_read_bits_set),
    .io_r_resp_data_0      (_eccArray_io_r_resp_data_0),
    .io_r_resp_data_1      (_eccArray_io_r_resp_data_1),
    .io_r_resp_data_2      (_eccArray_io_r_resp_data_2),
    .io_r_resp_data_3      (_eccArray_io_r_resp_data_3),
    .io_r_resp_data_4      (_eccArray_io_r_resp_data_4),
    .io_r_resp_data_5      (_eccArray_io_r_resp_data_5),
    .io_w_req_valid        (io_tag_w_valid),
    .io_w_req_bits_setIdx  (io_tag_w_bits_set),
    .io_w_req_bits_data_0  (_GEN),
    .io_w_req_bits_data_1  (_GEN),
    .io_w_req_bits_data_2  (_GEN),
    .io_w_req_bits_data_3  (_GEN),
    .io_w_req_bits_data_4  (_GEN),
    .io_w_req_bits_data_5  (_GEN),
    .io_w_req_bits_waymask (_GEN_0[5:0])
  );
  SRAMTemplate_201 repl_state_replacer_sram (
    .clock                (clock),
    .reset                (reset),
    .io_r_req_valid       (_metas_T),
    .io_r_req_bits_setIdx (io_read_bits_set),
    .io_r_resp_data_0     (_repl_state_replacer_sram_io_r_resp_data_0),
    .io_w_req_valid       (replacer_wen),
    .io_w_req_bits_setIdx (repl_state_REG_1),
    .io_w_req_bits_data_0 (repl_state_REG)
  );
  assign io_read_ready = io_read_ready_0;
  assign io_resp_valid = reqValidReg;
  assign io_resp_bits_hit = hit_s2;
  assign io_resp_bits_way = way_s2;
  assign io_resp_bits_tag = _GEN_6[way_s2];
  assign io_resp_bits_dir_dirty = _GEN_2[way_s2];
  assign io_resp_bits_dir_state = _GEN_3[way_s2];
  assign io_resp_bits_dir_clientStates_0 = _GEN_4[way_s2];
  assign io_resp_bits_dir_prefetch = _GEN_5[way_s2];
  assign io_resp_bits_error = hit_s2 & _GEN_7[way_s2];
endmodule

