// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IndirectCSRPermitModule(
  input  [11:0] io_in_csrAccess_addr,
  input  [1:0]  io_in_privState_PRVM,
  input         io_in_privState_V,
  input         io_in_aia_miselectIsIllegal,
  input         io_in_aia_siselectIsIllegal,
  input         io_in_aia_vsiselectIsIllegal,
  input  [63:0] io_in_aia_siselect,
  input  [63:0] io_in_aia_vsiselect,
  input         io_in_aia_mvienSEIE,
  output        io_out_indirectCSR_EX_II,
  output        io_out_indirectCSR_EX_VI
);

  wire PrvmIsS = io_in_privState_PRVM == 2'h1;
  wire rwSireg_EX_II_isModeHS = ~io_in_privState_V & PrvmIsS;
  wire rwSireg_EX_II_v_PrvmIsM = &io_in_privState_PRVM;
  wire rwSireg_EX_II_isModeM = rwSireg_EX_II_v_PrvmIsM;
  wire rwSireg_EX_II_isModeVS = io_in_privState_V & PrvmIsS;
  wire _rwSireg_EX_VI_T_4 = io_in_csrAccess_addr == 12'h151;
  assign io_out_indirectCSR_EX_II =
    io_in_aia_miselectIsIllegal & io_in_csrAccess_addr == 12'h351
    | (rwSireg_EX_II_isModeHS & io_in_aia_mvienSEIE & io_in_aia_siselect > 64'h6F
       & io_in_aia_siselect < 64'h100 | (rwSireg_EX_II_isModeM | rwSireg_EX_II_isModeHS)
       & io_in_aia_siselectIsIllegal | rwSireg_EX_II_isModeVS
       & (io_in_aia_vsiselect < 64'h30 | (|(io_in_aia_vsiselect[63:6]))
          & io_in_aia_vsiselect < 64'h70 | (|(io_in_aia_vsiselect[63:8]))))
    & _rwSireg_EX_VI_T_4 | io_in_aia_vsiselectIsIllegal & io_in_csrAccess_addr == 12'h251;
  assign io_out_indirectCSR_EX_VI =
    rwSireg_EX_II_isModeVS & io_in_aia_vsiselect > 64'h2F & io_in_aia_vsiselect < 64'h40
    & _rwSireg_EX_VI_T_4;
endmodule

