// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module L2TlbMissQueue(
  input         clock,
  input         reset,
  input         io_sfence_valid,
  input         io_csr_satp_changed,
  input         io_csr_vsatp_changed,
  input         io_csr_hgatp_changed,
  output        io_in_ready,
  input         io_in_valid,
  input  [37:0] io_in_bits_req_info_vpn,
  input  [1:0]  io_in_bits_req_info_s2xlate,
  input  [1:0]  io_in_bits_req_info_source,
  input         io_in_bits_isLLptw,
  input         io_out_ready,
  output        io_out_valid,
  output [37:0] io_out_bits_req_info_vpn,
  output [1:0]  io_out_bits_req_info_s2xlate,
  output [1:0]  io_out_bits_req_info_source,
  output        io_out_bits_isHptwReq,
  output        io_out_bits_isLLptw,
  output [2:0]  io_out_bits_hptwId
);

  Queue40_L2TlbMQBundle io_out_q (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_ready                 (io_in_ready),
    .io_enq_valid                 (io_in_valid),
    .io_enq_bits_req_info_vpn     (io_in_bits_req_info_vpn),
    .io_enq_bits_req_info_s2xlate (io_in_bits_req_info_s2xlate),
    .io_enq_bits_req_info_source  (io_in_bits_req_info_source),
    .io_enq_bits_isLLptw          (io_in_bits_isLLptw),
    .io_deq_ready                 (io_out_ready),
    .io_deq_valid                 (io_out_valid),
    .io_deq_bits_req_info_vpn     (io_out_bits_req_info_vpn),
    .io_deq_bits_req_info_s2xlate (io_out_bits_req_info_s2xlate),
    .io_deq_bits_req_info_source  (io_out_bits_req_info_source),
    .io_deq_bits_isHptwReq        (io_out_bits_isHptwReq),
    .io_deq_bits_isLLptw          (io_out_bits_isLLptw),
    .io_deq_bits_hptwId           (io_out_bits_hptwId),
    .io_flush
      (io_sfence_valid | io_csr_satp_changed | io_csr_vsatp_changed
       | io_csr_hgatp_changed)
  );
endmodule

