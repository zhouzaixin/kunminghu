// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MissReadyGen(
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [3:0]  io_in_0_bits_source,
  input  [47:0] io_in_0_bits_addr,
  input  [49:0] io_in_0_bits_vaddr,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [3:0]  io_in_1_bits_source,
  input  [47:0] io_in_1_bits_addr,
  input  [49:0] io_in_1_bits_vaddr,
  output        io_in_2_ready,
  input         io_in_2_valid,
  input  [3:0]  io_in_2_bits_source,
  input  [47:0] io_in_2_bits_addr,
  input  [49:0] io_in_2_bits_vaddr,
  output        io_in_3_ready,
  input  [3:0]  io_in_3_bits_source,
  input  [47:0] io_in_3_bits_addr,
  input  [49:0] io_in_3_bits_vaddr,
  output [3:0]  io_queryMQ_0_req_bits_source,
  output [47:0] io_queryMQ_0_req_bits_addr,
  output [49:0] io_queryMQ_0_req_bits_vaddr,
  input         io_queryMQ_0_ready,
  output [3:0]  io_queryMQ_1_req_bits_source,
  output [47:0] io_queryMQ_1_req_bits_addr,
  output [49:0] io_queryMQ_1_req_bits_vaddr,
  input         io_queryMQ_1_ready,
  output [3:0]  io_queryMQ_2_req_bits_source,
  output [47:0] io_queryMQ_2_req_bits_addr,
  output [49:0] io_queryMQ_2_req_bits_vaddr,
  input         io_queryMQ_2_ready,
  output [3:0]  io_queryMQ_3_req_bits_source,
  output [47:0] io_queryMQ_3_req_bits_addr,
  output [49:0] io_queryMQ_3_req_bits_vaddr,
  input         io_queryMQ_3_ready
);

  assign io_in_0_ready = io_queryMQ_0_ready;
  assign io_in_1_ready = io_queryMQ_1_ready & ~io_in_0_valid;
  assign io_in_2_ready = io_queryMQ_2_ready & {io_in_0_valid, io_in_1_valid} == 2'h0;
  assign io_in_3_ready =
    io_queryMQ_3_ready & {io_in_0_valid, io_in_1_valid, io_in_2_valid} == 3'h0;
  assign io_queryMQ_0_req_bits_source = io_in_0_bits_source;
  assign io_queryMQ_0_req_bits_addr = io_in_0_bits_addr;
  assign io_queryMQ_0_req_bits_vaddr = io_in_0_bits_vaddr;
  assign io_queryMQ_1_req_bits_source = io_in_1_bits_source;
  assign io_queryMQ_1_req_bits_addr = io_in_1_bits_addr;
  assign io_queryMQ_1_req_bits_vaddr = io_in_1_bits_vaddr;
  assign io_queryMQ_2_req_bits_source = io_in_2_bits_source;
  assign io_queryMQ_2_req_bits_addr = io_in_2_bits_addr;
  assign io_queryMQ_2_req_bits_vaddr = io_in_2_bits_vaddr;
  assign io_queryMQ_3_req_bits_source = io_in_3_bits_source;
  assign io_queryMQ_3_req_bits_addr = io_in_3_bits_addr;
  assign io_queryMQ_3_req_bits_vaddr = io_in_3_bits_vaddr;
endmodule

