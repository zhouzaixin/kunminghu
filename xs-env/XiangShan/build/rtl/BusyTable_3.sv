// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module BusyTable_3(
  input        clock,
  input        reset,
  input        io_allocPregs_0_valid,
  input  [7:0] io_allocPregs_0_bits,
  input        io_allocPregs_1_valid,
  input  [7:0] io_allocPregs_1_bits,
  input        io_allocPregs_2_valid,
  input  [7:0] io_allocPregs_2_bits,
  input        io_allocPregs_3_valid,
  input  [7:0] io_allocPregs_3_bits,
  input        io_allocPregs_4_valid,
  input  [7:0] io_allocPregs_4_bits,
  input        io_allocPregs_5_valid,
  input  [7:0] io_allocPregs_5_bits,
  input        io_wbPregs_0_valid,
  input  [7:0] io_wbPregs_0_bits,
  input        io_wbPregs_1_valid,
  input  [7:0] io_wbPregs_1_bits,
  input        io_wbPregs_2_valid,
  input  [7:0] io_wbPregs_2_bits,
  input        io_wbPregs_3_valid,
  input  [7:0] io_wbPregs_3_bits,
  input        io_wbPregs_4_valid,
  input  [7:0] io_wbPregs_4_bits,
  input        io_wbPregs_5_valid,
  input  [7:0] io_wbPregs_5_bits,
  input        io_wakeUpFp_0_valid,
  input        io_wakeUpFp_0_bits_v0Wen,
  input  [7:0] io_wakeUpFp_0_bits_pdest,
  input        io_wakeUpFp_0_bits_is0Lat,
  input        io_og0Cancel_8,
  input  [7:0] io_read_0_req,
  output       io_read_0_resp,
  input  [7:0] io_read_1_req,
  output       io_read_1_resp,
  input  [7:0] io_read_2_req,
  output       io_read_2_resp,
  input  [7:0] io_read_3_req,
  output       io_read_3_resp,
  input  [7:0] io_read_4_req,
  output       io_read_4_resp,
  input  [7:0] io_read_5_req,
  output       io_read_5_resp
);

  reg          table_r;
  reg          table_r_1;
  reg          table_r_2;
  reg          table_r_3;
  reg          table_r_4;
  reg          table_r_5;
  reg          table_r_6;
  reg          table_r_7;
  reg          table_r_8;
  reg          table_r_9;
  reg          table_r_10;
  reg          table_r_11;
  reg          table_r_12;
  reg          table_r_13;
  reg          table_r_14;
  reg          table_r_15;
  reg          table_r_16;
  reg          table_r_17;
  reg          table_r_18;
  reg          table_r_19;
  reg          table_r_20;
  reg          table_r_21;
  wire [21:0]  table_0 =
    {table_r_21,
     table_r_20,
     table_r_19,
     table_r_18,
     table_r_17,
     table_r_16,
     table_r_15,
     table_r_14,
     table_r_13,
     table_r_12,
     table_r_11,
     table_r_10,
     table_r_9,
     table_r_8,
     table_r_7,
     table_r_6,
     table_r_5,
     table_r_4,
     table_r_3,
     table_r_2,
     table_r_1,
     table_r};
  wire [21:0]  _io_read_0_resp_T = table_0 >> io_read_0_req;
  wire [21:0]  _io_read_1_resp_T = table_0 >> io_read_1_req;
  wire [21:0]  _io_read_2_resp_T = table_0 >> io_read_2_req;
  wire [21:0]  _io_read_3_resp_T = table_0 >> io_read_3_req;
  wire [21:0]  _io_read_4_resp_T = table_0 >> io_read_4_req;
  wire [21:0]  _io_read_5_resp_T = table_0 >> io_read_5_req;
  wire         _tmp_T_189 = io_wakeUpFp_0_valid & io_wakeUpFp_0_bits_v0Wen;
  wire         _tmp_T_196 = io_wakeUpFp_0_bits_is0Lat & io_og0Cancel_8;
  wire         tmp_0 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h0 & ~_tmp_T_196;
  wire         tmp_0_1 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h1 & ~_tmp_T_196;
  wire         tmp_0_2 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h2 & ~_tmp_T_196;
  wire         tmp_0_3 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h3 & ~_tmp_T_196;
  wire         tmp_0_4 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h4 & ~_tmp_T_196;
  wire         tmp_0_5 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h5 & ~_tmp_T_196;
  wire         tmp_0_6 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h6 & ~_tmp_T_196;
  wire         tmp_0_7 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h7 & ~_tmp_T_196;
  wire         tmp_0_8 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h8 & ~_tmp_T_196;
  wire         tmp_0_9 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h9 & ~_tmp_T_196;
  wire         tmp_0_10 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hA & ~_tmp_T_196;
  wire         tmp_0_11 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hB & ~_tmp_T_196;
  wire         tmp_0_12 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hC & ~_tmp_T_196;
  wire         tmp_0_13 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hD & ~_tmp_T_196;
  wire         tmp_0_14 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hE & ~_tmp_T_196;
  wire         tmp_0_15 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'hF & ~_tmp_T_196;
  wire         tmp_0_16 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h10 & ~_tmp_T_196;
  wire         tmp_0_17 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h11 & ~_tmp_T_196;
  wire         tmp_0_18 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h12 & ~_tmp_T_196;
  wire         tmp_0_19 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h13 & ~_tmp_T_196;
  wire         tmp_0_20 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h14 & ~_tmp_T_196;
  wire         tmp_0_21 = _tmp_T_189 & io_wakeUpFp_0_bits_pdest == 8'h15 & ~_tmp_T_196;
  wire [255:0] _wbMask_T_10 = 256'h1 << io_wbPregs_5_bits;
  wire [255:0] _wbMask_T_8 = 256'h1 << io_wbPregs_4_bits;
  wire [255:0] _wbMask_T_6 = 256'h1 << io_wbPregs_3_bits;
  wire [255:0] _wbMask_T_4 = 256'h1 << io_wbPregs_2_bits;
  wire [255:0] _wbMask_T_2 = 256'h1 << io_wbPregs_1_bits;
  wire [255:0] _wbMask_T = 256'h1 << io_wbPregs_0_bits;
  wire [21:0]  wbMask =
    (io_wbPregs_0_valid ? _wbMask_T[21:0] : 22'h0)
    | (io_wbPregs_1_valid ? _wbMask_T_2[21:0] : 22'h0)
    | (io_wbPregs_2_valid ? _wbMask_T_4[21:0] : 22'h0)
    | (io_wbPregs_3_valid ? _wbMask_T_6[21:0] : 22'h0)
    | (io_wbPregs_4_valid ? _wbMask_T_8[21:0] : 22'h0)
    | (io_wbPregs_5_valid ? _wbMask_T_10[21:0] : 22'h0);
  wire [255:0] _allocMask_T_10 = 256'h1 << io_allocPregs_5_bits;
  wire [255:0] _allocMask_T_8 = 256'h1 << io_allocPregs_4_bits;
  wire [255:0] _allocMask_T_6 = 256'h1 << io_allocPregs_3_bits;
  wire [255:0] _allocMask_T_4 = 256'h1 << io_allocPregs_2_bits;
  wire [255:0] _allocMask_T_2 = 256'h1 << io_allocPregs_1_bits;
  wire [255:0] _allocMask_T = 256'h1 << io_allocPregs_0_bits;
  wire [21:0]  allocMask =
    (io_allocPregs_0_valid ? _allocMask_T[21:0] : 22'h0)
    | (io_allocPregs_1_valid ? _allocMask_T_2[21:0] : 22'h0)
    | (io_allocPregs_2_valid ? _allocMask_T_4[21:0] : 22'h0)
    | (io_allocPregs_3_valid ? _allocMask_T_6[21:0] : 22'h0)
    | (io_allocPregs_4_valid ? _allocMask_T_8[21:0] : 22'h0)
    | (io_allocPregs_5_valid ? _allocMask_T_10[21:0] : 22'h0);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      table_r <= 1'h0;
      table_r_1 <= 1'h0;
      table_r_2 <= 1'h0;
      table_r_3 <= 1'h0;
      table_r_4 <= 1'h0;
      table_r_5 <= 1'h0;
      table_r_6 <= 1'h0;
      table_r_7 <= 1'h0;
      table_r_8 <= 1'h0;
      table_r_9 <= 1'h0;
      table_r_10 <= 1'h0;
      table_r_11 <= 1'h0;
      table_r_12 <= 1'h0;
      table_r_13 <= 1'h0;
      table_r_14 <= 1'h0;
      table_r_15 <= 1'h0;
      table_r_16 <= 1'h0;
      table_r_17 <= 1'h0;
      table_r_18 <= 1'h0;
      table_r_19 <= 1'h0;
      table_r_20 <= 1'h0;
      table_r_21 <= 1'h0;
    end
    else begin
      if (allocMask[0] | tmp_0 | wbMask[0])
        table_r <= ~(tmp_0 | wbMask[0]) & (allocMask[0] | table_r);
      if (allocMask[1] | tmp_0_1 | wbMask[1])
        table_r_1 <= ~(tmp_0_1 | wbMask[1]) & (allocMask[1] | table_r_1);
      if (allocMask[2] | tmp_0_2 | wbMask[2])
        table_r_2 <= ~(tmp_0_2 | wbMask[2]) & (allocMask[2] | table_r_2);
      if (allocMask[3] | tmp_0_3 | wbMask[3])
        table_r_3 <= ~(tmp_0_3 | wbMask[3]) & (allocMask[3] | table_r_3);
      if (allocMask[4] | tmp_0_4 | wbMask[4])
        table_r_4 <= ~(tmp_0_4 | wbMask[4]) & (allocMask[4] | table_r_4);
      if (allocMask[5] | tmp_0_5 | wbMask[5])
        table_r_5 <= ~(tmp_0_5 | wbMask[5]) & (allocMask[5] | table_r_5);
      if (allocMask[6] | tmp_0_6 | wbMask[6])
        table_r_6 <= ~(tmp_0_6 | wbMask[6]) & (allocMask[6] | table_r_6);
      if (allocMask[7] | tmp_0_7 | wbMask[7])
        table_r_7 <= ~(tmp_0_7 | wbMask[7]) & (allocMask[7] | table_r_7);
      if (allocMask[8] | tmp_0_8 | wbMask[8])
        table_r_8 <= ~(tmp_0_8 | wbMask[8]) & (allocMask[8] | table_r_8);
      if (allocMask[9] | tmp_0_9 | wbMask[9])
        table_r_9 <= ~(tmp_0_9 | wbMask[9]) & (allocMask[9] | table_r_9);
      if (allocMask[10] | tmp_0_10 | wbMask[10])
        table_r_10 <= ~(tmp_0_10 | wbMask[10]) & (allocMask[10] | table_r_10);
      if (allocMask[11] | tmp_0_11 | wbMask[11])
        table_r_11 <= ~(tmp_0_11 | wbMask[11]) & (allocMask[11] | table_r_11);
      if (allocMask[12] | tmp_0_12 | wbMask[12])
        table_r_12 <= ~(tmp_0_12 | wbMask[12]) & (allocMask[12] | table_r_12);
      if (allocMask[13] | tmp_0_13 | wbMask[13])
        table_r_13 <= ~(tmp_0_13 | wbMask[13]) & (allocMask[13] | table_r_13);
      if (allocMask[14] | tmp_0_14 | wbMask[14])
        table_r_14 <= ~(tmp_0_14 | wbMask[14]) & (allocMask[14] | table_r_14);
      if (allocMask[15] | tmp_0_15 | wbMask[15])
        table_r_15 <= ~(tmp_0_15 | wbMask[15]) & (allocMask[15] | table_r_15);
      if (allocMask[16] | tmp_0_16 | wbMask[16])
        table_r_16 <= ~(tmp_0_16 | wbMask[16]) & (allocMask[16] | table_r_16);
      if (allocMask[17] | tmp_0_17 | wbMask[17])
        table_r_17 <= ~(tmp_0_17 | wbMask[17]) & (allocMask[17] | table_r_17);
      if (allocMask[18] | tmp_0_18 | wbMask[18])
        table_r_18 <= ~(tmp_0_18 | wbMask[18]) & (allocMask[18] | table_r_18);
      if (allocMask[19] | tmp_0_19 | wbMask[19])
        table_r_19 <= ~(tmp_0_19 | wbMask[19]) & (allocMask[19] | table_r_19);
      if (allocMask[20] | tmp_0_20 | wbMask[20])
        table_r_20 <= ~(tmp_0_20 | wbMask[20]) & (allocMask[20] | table_r_20);
      if (allocMask[21] | tmp_0_21 | wbMask[21])
        table_r_21 <= ~(tmp_0_21 | wbMask[21]) & (allocMask[21] | table_r_21);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        table_r = _RANDOM[3'h4][4];
        table_r_1 = _RANDOM[3'h4][5];
        table_r_2 = _RANDOM[3'h4][6];
        table_r_3 = _RANDOM[3'h4][7];
        table_r_4 = _RANDOM[3'h4][8];
        table_r_5 = _RANDOM[3'h4][9];
        table_r_6 = _RANDOM[3'h4][10];
        table_r_7 = _RANDOM[3'h4][11];
        table_r_8 = _RANDOM[3'h4][12];
        table_r_9 = _RANDOM[3'h4][13];
        table_r_10 = _RANDOM[3'h4][14];
        table_r_11 = _RANDOM[3'h4][15];
        table_r_12 = _RANDOM[3'h4][16];
        table_r_13 = _RANDOM[3'h4][17];
        table_r_14 = _RANDOM[3'h4][18];
        table_r_15 = _RANDOM[3'h4][19];
        table_r_16 = _RANDOM[3'h4][20];
        table_r_17 = _RANDOM[3'h4][21];
        table_r_18 = _RANDOM[3'h4][22];
        table_r_19 = _RANDOM[3'h4][23];
        table_r_20 = _RANDOM[3'h4][24];
        table_r_21 = _RANDOM[3'h4][25];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        table_r = 1'h0;
        table_r_1 = 1'h0;
        table_r_2 = 1'h0;
        table_r_3 = 1'h0;
        table_r_4 = 1'h0;
        table_r_5 = 1'h0;
        table_r_6 = 1'h0;
        table_r_7 = 1'h0;
        table_r_8 = 1'h0;
        table_r_9 = 1'h0;
        table_r_10 = 1'h0;
        table_r_11 = 1'h0;
        table_r_12 = 1'h0;
        table_r_13 = 1'h0;
        table_r_14 = 1'h0;
        table_r_15 = 1'h0;
        table_r_16 = 1'h0;
        table_r_17 = 1'h0;
        table_r_18 = 1'h0;
        table_r_19 = 1'h0;
        table_r_20 = 1'h0;
        table_r_21 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_read_0_resp =
    ~(_io_read_0_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_0_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_0_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_0_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_0_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_0_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_0_req}));
  assign io_read_1_resp =
    ~(_io_read_1_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_1_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_1_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_1_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_1_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_1_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_1_req}));
  assign io_read_2_resp =
    ~(_io_read_2_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_2_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_2_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_2_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_2_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_2_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_2_req}));
  assign io_read_3_resp =
    ~(_io_read_3_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_3_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_3_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_3_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_3_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_3_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_3_req}));
  assign io_read_4_resp =
    ~(_io_read_4_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_4_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_4_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_4_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_4_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_4_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_4_req}));
  assign io_read_5_resp =
    ~(_io_read_5_resp_T[0]
      | (|{io_allocPregs_5_valid & io_allocPregs_5_bits == io_read_5_req,
           io_allocPregs_4_valid & io_allocPregs_4_bits == io_read_5_req,
           io_allocPregs_3_valid & io_allocPregs_3_bits == io_read_5_req,
           io_allocPregs_2_valid & io_allocPregs_2_bits == io_read_5_req,
           io_allocPregs_1_valid & io_allocPregs_1_bits == io_read_5_req,
           io_allocPregs_0_valid & io_allocPregs_0_bits == io_read_5_req}));
endmodule

