// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LatchFastArbiter_3(
  input         clock,
  input         reset,
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [10:0] io_in_0_bits_sourceId,
  input  [10:0] io_in_0_bits_set,
  input  [30:0] io_in_0_bits_tag,
  input  [2:0]  io_in_0_bits_channel,
  input  [2:0]  io_in_0_bits_opcode,
  input  [2:0]  io_in_0_bits_param,
  input  [2:0]  io_in_0_bits_size,
  input  [2:0]  io_in_0_bits_way,
  input  [5:0]  io_in_0_bits_off,
  input         io_in_0_bits_useBypass,
  input  [3:0]  io_in_0_bits_bufIdx,
  input         io_in_0_bits_denied,
  input  [3:0]  io_in_0_bits_sinkId,
  input         io_in_0_bits_bypassPut,
  input         io_in_0_bits_dirty,
  input         io_in_0_bits_isHit,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [10:0] io_in_1_bits_sourceId,
  input  [10:0] io_in_1_bits_set,
  input  [30:0] io_in_1_bits_tag,
  input  [2:0]  io_in_1_bits_channel,
  input  [2:0]  io_in_1_bits_opcode,
  input  [2:0]  io_in_1_bits_param,
  input  [2:0]  io_in_1_bits_size,
  input  [2:0]  io_in_1_bits_way,
  input  [5:0]  io_in_1_bits_off,
  input         io_in_1_bits_useBypass,
  input  [3:0]  io_in_1_bits_bufIdx,
  input         io_in_1_bits_denied,
  input  [3:0]  io_in_1_bits_sinkId,
  input         io_in_1_bits_bypassPut,
  input         io_in_1_bits_dirty,
  input         io_in_1_bits_isHit,
  output        io_in_2_ready,
  input         io_in_2_valid,
  input  [10:0] io_in_2_bits_sourceId,
  input  [10:0] io_in_2_bits_set,
  input  [30:0] io_in_2_bits_tag,
  input  [2:0]  io_in_2_bits_channel,
  input  [2:0]  io_in_2_bits_opcode,
  input  [2:0]  io_in_2_bits_param,
  input  [2:0]  io_in_2_bits_size,
  input  [2:0]  io_in_2_bits_way,
  input  [5:0]  io_in_2_bits_off,
  input         io_in_2_bits_useBypass,
  input  [3:0]  io_in_2_bits_bufIdx,
  input         io_in_2_bits_denied,
  input  [3:0]  io_in_2_bits_sinkId,
  input         io_in_2_bits_bypassPut,
  input         io_in_2_bits_dirty,
  input         io_in_2_bits_isHit,
  output        io_in_3_ready,
  input         io_in_3_valid,
  input  [10:0] io_in_3_bits_sourceId,
  input  [10:0] io_in_3_bits_set,
  input  [30:0] io_in_3_bits_tag,
  input  [2:0]  io_in_3_bits_channel,
  input  [2:0]  io_in_3_bits_opcode,
  input  [2:0]  io_in_3_bits_param,
  input  [2:0]  io_in_3_bits_size,
  input  [2:0]  io_in_3_bits_way,
  input  [5:0]  io_in_3_bits_off,
  input         io_in_3_bits_useBypass,
  input  [3:0]  io_in_3_bits_bufIdx,
  input         io_in_3_bits_denied,
  input  [3:0]  io_in_3_bits_sinkId,
  input         io_in_3_bits_bypassPut,
  input         io_in_3_bits_dirty,
  input         io_in_3_bits_isHit,
  output        io_in_4_ready,
  input         io_in_4_valid,
  input  [10:0] io_in_4_bits_sourceId,
  input  [10:0] io_in_4_bits_set,
  input  [30:0] io_in_4_bits_tag,
  input  [2:0]  io_in_4_bits_channel,
  input  [2:0]  io_in_4_bits_opcode,
  input  [2:0]  io_in_4_bits_param,
  input  [2:0]  io_in_4_bits_size,
  input  [2:0]  io_in_4_bits_way,
  input  [5:0]  io_in_4_bits_off,
  input         io_in_4_bits_useBypass,
  input  [3:0]  io_in_4_bits_bufIdx,
  input         io_in_4_bits_denied,
  input  [3:0]  io_in_4_bits_sinkId,
  input         io_in_4_bits_bypassPut,
  input         io_in_4_bits_dirty,
  input         io_in_4_bits_isHit,
  output        io_in_5_ready,
  input         io_in_5_valid,
  input  [10:0] io_in_5_bits_sourceId,
  input  [10:0] io_in_5_bits_set,
  input  [30:0] io_in_5_bits_tag,
  input  [2:0]  io_in_5_bits_channel,
  input  [2:0]  io_in_5_bits_opcode,
  input  [2:0]  io_in_5_bits_param,
  input  [2:0]  io_in_5_bits_size,
  input  [2:0]  io_in_5_bits_way,
  input  [5:0]  io_in_5_bits_off,
  input         io_in_5_bits_useBypass,
  input  [3:0]  io_in_5_bits_bufIdx,
  input         io_in_5_bits_denied,
  input  [3:0]  io_in_5_bits_sinkId,
  input         io_in_5_bits_bypassPut,
  input         io_in_5_bits_dirty,
  input         io_in_5_bits_isHit,
  output        io_in_6_ready,
  input         io_in_6_valid,
  input  [10:0] io_in_6_bits_sourceId,
  input  [10:0] io_in_6_bits_set,
  input  [30:0] io_in_6_bits_tag,
  input  [2:0]  io_in_6_bits_channel,
  input  [2:0]  io_in_6_bits_opcode,
  input  [2:0]  io_in_6_bits_param,
  input  [2:0]  io_in_6_bits_size,
  input  [2:0]  io_in_6_bits_way,
  input  [5:0]  io_in_6_bits_off,
  input         io_in_6_bits_useBypass,
  input  [3:0]  io_in_6_bits_bufIdx,
  input         io_in_6_bits_denied,
  input  [3:0]  io_in_6_bits_sinkId,
  input         io_in_6_bits_bypassPut,
  input         io_in_6_bits_dirty,
  input         io_in_6_bits_isHit,
  output        io_in_7_ready,
  input         io_in_7_valid,
  input  [10:0] io_in_7_bits_sourceId,
  input  [10:0] io_in_7_bits_set,
  input  [30:0] io_in_7_bits_tag,
  input  [2:0]  io_in_7_bits_channel,
  input  [2:0]  io_in_7_bits_opcode,
  input  [2:0]  io_in_7_bits_param,
  input  [2:0]  io_in_7_bits_size,
  input  [2:0]  io_in_7_bits_way,
  input  [5:0]  io_in_7_bits_off,
  input         io_in_7_bits_useBypass,
  input  [3:0]  io_in_7_bits_bufIdx,
  input         io_in_7_bits_denied,
  input  [3:0]  io_in_7_bits_sinkId,
  input         io_in_7_bits_bypassPut,
  input         io_in_7_bits_dirty,
  input         io_in_7_bits_isHit,
  output        io_in_8_ready,
  input         io_in_8_valid,
  input  [10:0] io_in_8_bits_sourceId,
  input  [10:0] io_in_8_bits_set,
  input  [30:0] io_in_8_bits_tag,
  input  [2:0]  io_in_8_bits_channel,
  input  [2:0]  io_in_8_bits_opcode,
  input  [2:0]  io_in_8_bits_param,
  input  [2:0]  io_in_8_bits_size,
  input  [2:0]  io_in_8_bits_way,
  input  [5:0]  io_in_8_bits_off,
  input         io_in_8_bits_useBypass,
  input  [3:0]  io_in_8_bits_bufIdx,
  input         io_in_8_bits_denied,
  input  [3:0]  io_in_8_bits_sinkId,
  input         io_in_8_bits_bypassPut,
  input         io_in_8_bits_dirty,
  input         io_in_8_bits_isHit,
  output        io_in_9_ready,
  input         io_in_9_valid,
  input  [10:0] io_in_9_bits_sourceId,
  input  [10:0] io_in_9_bits_set,
  input  [30:0] io_in_9_bits_tag,
  input  [2:0]  io_in_9_bits_channel,
  input  [2:0]  io_in_9_bits_opcode,
  input  [2:0]  io_in_9_bits_param,
  input  [2:0]  io_in_9_bits_size,
  input  [2:0]  io_in_9_bits_way,
  input  [5:0]  io_in_9_bits_off,
  input         io_in_9_bits_useBypass,
  input  [3:0]  io_in_9_bits_bufIdx,
  input         io_in_9_bits_denied,
  input  [3:0]  io_in_9_bits_sinkId,
  input         io_in_9_bits_bypassPut,
  input         io_in_9_bits_dirty,
  input         io_in_9_bits_isHit,
  output        io_in_10_ready,
  input         io_in_10_valid,
  input  [10:0] io_in_10_bits_sourceId,
  input  [10:0] io_in_10_bits_set,
  input  [30:0] io_in_10_bits_tag,
  input  [2:0]  io_in_10_bits_channel,
  input  [2:0]  io_in_10_bits_opcode,
  input  [2:0]  io_in_10_bits_param,
  input  [2:0]  io_in_10_bits_size,
  input  [2:0]  io_in_10_bits_way,
  input  [5:0]  io_in_10_bits_off,
  input         io_in_10_bits_useBypass,
  input  [3:0]  io_in_10_bits_bufIdx,
  input         io_in_10_bits_denied,
  input  [3:0]  io_in_10_bits_sinkId,
  input         io_in_10_bits_bypassPut,
  input         io_in_10_bits_dirty,
  input         io_in_10_bits_isHit,
  output        io_in_11_ready,
  input         io_in_11_valid,
  input  [10:0] io_in_11_bits_sourceId,
  input  [10:0] io_in_11_bits_set,
  input  [30:0] io_in_11_bits_tag,
  input  [2:0]  io_in_11_bits_channel,
  input  [2:0]  io_in_11_bits_opcode,
  input  [2:0]  io_in_11_bits_param,
  input  [2:0]  io_in_11_bits_size,
  input  [2:0]  io_in_11_bits_way,
  input  [5:0]  io_in_11_bits_off,
  input         io_in_11_bits_useBypass,
  input  [3:0]  io_in_11_bits_bufIdx,
  input         io_in_11_bits_denied,
  input  [3:0]  io_in_11_bits_sinkId,
  input         io_in_11_bits_bypassPut,
  input         io_in_11_bits_dirty,
  input         io_in_11_bits_isHit,
  output        io_in_12_ready,
  input         io_in_12_valid,
  input  [10:0] io_in_12_bits_sourceId,
  input  [10:0] io_in_12_bits_set,
  input  [30:0] io_in_12_bits_tag,
  input  [2:0]  io_in_12_bits_channel,
  input  [2:0]  io_in_12_bits_opcode,
  input  [2:0]  io_in_12_bits_param,
  input  [2:0]  io_in_12_bits_size,
  input  [2:0]  io_in_12_bits_way,
  input  [5:0]  io_in_12_bits_off,
  input         io_in_12_bits_useBypass,
  input  [3:0]  io_in_12_bits_bufIdx,
  input         io_in_12_bits_denied,
  input  [3:0]  io_in_12_bits_sinkId,
  input         io_in_12_bits_bypassPut,
  input         io_in_12_bits_dirty,
  input         io_in_12_bits_isHit,
  output        io_in_13_ready,
  input         io_in_13_valid,
  input  [10:0] io_in_13_bits_sourceId,
  input  [10:0] io_in_13_bits_set,
  input  [30:0] io_in_13_bits_tag,
  input  [2:0]  io_in_13_bits_channel,
  input  [2:0]  io_in_13_bits_opcode,
  input  [2:0]  io_in_13_bits_param,
  input  [2:0]  io_in_13_bits_size,
  input  [2:0]  io_in_13_bits_way,
  input  [5:0]  io_in_13_bits_off,
  input         io_in_13_bits_useBypass,
  input  [3:0]  io_in_13_bits_bufIdx,
  input         io_in_13_bits_denied,
  input  [3:0]  io_in_13_bits_sinkId,
  input         io_in_13_bits_bypassPut,
  input         io_in_13_bits_dirty,
  input         io_in_13_bits_isHit,
  input         io_out_ready,
  output        io_out_valid,
  output [10:0] io_out_bits_sourceId,
  output [10:0] io_out_bits_set,
  output [30:0] io_out_bits_tag,
  output [2:0]  io_out_bits_channel,
  output [2:0]  io_out_bits_opcode,
  output [2:0]  io_out_bits_param,
  output [2:0]  io_out_bits_size,
  output [2:0]  io_out_bits_way,
  output [5:0]  io_out_bits_off,
  output        io_out_bits_useBypass,
  output [3:0]  io_out_bits_bufIdx,
  output        io_out_bits_denied,
  output [3:0]  io_out_bits_sinkId,
  output        io_out_bits_bypassPut,
  output        io_out_bits_dirty,
  output        io_out_bits_isHit
);

  reg         out_valid_reg;
  reg  [10:0] out_bits_reg_sourceId;
  reg  [10:0] out_bits_reg_set;
  reg  [30:0] out_bits_reg_tag;
  reg  [2:0]  out_bits_reg_channel;
  reg  [2:0]  out_bits_reg_opcode;
  reg  [2:0]  out_bits_reg_param;
  reg  [2:0]  out_bits_reg_size;
  reg  [2:0]  out_bits_reg_way;
  reg  [5:0]  out_bits_reg_off;
  reg         out_bits_reg_useBypass;
  reg  [3:0]  out_bits_reg_bufIdx;
  reg         out_bits_reg_denied;
  reg  [3:0]  out_bits_reg_sinkId;
  reg         out_bits_reg_bypassPut;
  reg         out_bits_reg_dirty;
  reg         out_bits_reg_isHit;
  reg  [13:0] chosen_reg;
  wire [13:0] valids =
    {io_in_13_valid,
     io_in_12_valid,
     io_in_11_valid,
     io_in_10_valid,
     io_in_9_valid,
     io_in_8_valid,
     io_in_7_valid,
     io_in_6_valid,
     io_in_5_valid,
     io_in_4_valid,
     io_in_3_valid,
     io_in_2_valid,
     io_in_1_valid,
     io_in_0_valid};
  reg  [13:0] pendingMask;
  reg  [13:0] rrGrantMask;
  wire        _rrSelOH_T_15 = rrGrantMask[0] & pendingMask[0];
  wire        _rrSelOH_T_2 = rrGrantMask[1] & pendingMask[1];
  wire        _rrSelOH_T_3 = rrGrantMask[2] & pendingMask[2];
  wire        _rrSelOH_T_4 = rrGrantMask[3] & pendingMask[3];
  wire        _rrSelOH_T_5 = rrGrantMask[4] & pendingMask[4];
  wire        _rrSelOH_T_6 = rrGrantMask[5] & pendingMask[5];
  wire        _rrSelOH_T_7 = rrGrantMask[6] & pendingMask[6];
  wire        _rrSelOH_T_8 = rrGrantMask[7] & pendingMask[7];
  wire        _rrSelOH_T_9 = rrGrantMask[8] & pendingMask[8];
  wire        _rrSelOH_T_10 = rrGrantMask[9] & pendingMask[9];
  wire        _rrSelOH_T_11 = rrGrantMask[10] & pendingMask[10];
  wire        _rrSelOH_T_12 = rrGrantMask[11] & pendingMask[11];
  wire        _rrSelOH_T_13 = rrGrantMask[12] & pendingMask[12];
  wire [13:0] rrSelOH =
    {rrGrantMask[13] & pendingMask[13]
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8,
          _rrSelOH_T_9,
          _rrSelOH_T_10,
          _rrSelOH_T_11,
          _rrSelOH_T_12,
          _rrSelOH_T_13} == 13'h0,
     _rrSelOH_T_13
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8,
          _rrSelOH_T_9,
          _rrSelOH_T_10,
          _rrSelOH_T_11,
          _rrSelOH_T_12} == 12'h0,
     _rrSelOH_T_12
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8,
          _rrSelOH_T_9,
          _rrSelOH_T_10,
          _rrSelOH_T_11} == 11'h0,
     _rrSelOH_T_11
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8,
          _rrSelOH_T_9,
          _rrSelOH_T_10} == 10'h0,
     _rrSelOH_T_10
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8,
          _rrSelOH_T_9} == 9'h0,
     _rrSelOH_T_9
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7,
          _rrSelOH_T_8} == 8'h0,
     _rrSelOH_T_8
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6,
          _rrSelOH_T_7} == 7'h0,
     _rrSelOH_T_7
       & {_rrSelOH_T_15,
          _rrSelOH_T_2,
          _rrSelOH_T_3,
          _rrSelOH_T_4,
          _rrSelOH_T_5,
          _rrSelOH_T_6} == 6'h0,
     _rrSelOH_T_6
       & {_rrSelOH_T_15, _rrSelOH_T_2, _rrSelOH_T_3, _rrSelOH_T_4, _rrSelOH_T_5} == 5'h0,
     _rrSelOH_T_5 & {_rrSelOH_T_15, _rrSelOH_T_2, _rrSelOH_T_3, _rrSelOH_T_4} == 4'h0,
     _rrSelOH_T_4 & {_rrSelOH_T_15, _rrSelOH_T_2, _rrSelOH_T_3} == 3'h0,
     _rrSelOH_T_3 & {_rrSelOH_T_15, _rrSelOH_T_2} == 2'h0,
     _rrSelOH_T_2 & ~_rrSelOH_T_15,
     _rrSelOH_T_15};
  wire [13:0] chosenOH =
    (|(rrSelOH & valids))
      ? rrSelOH
      : {io_in_13_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid,
              io_in_8_valid,
              io_in_9_valid,
              io_in_10_valid,
              io_in_11_valid,
              io_in_12_valid} == 13'h0,
         io_in_12_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid,
              io_in_8_valid,
              io_in_9_valid,
              io_in_10_valid,
              io_in_11_valid} == 12'h0,
         io_in_11_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid,
              io_in_8_valid,
              io_in_9_valid,
              io_in_10_valid} == 11'h0,
         io_in_10_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid,
              io_in_8_valid,
              io_in_9_valid} == 10'h0,
         io_in_9_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid,
              io_in_8_valid} == 9'h0,
         io_in_8_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid,
              io_in_7_valid} == 8'h0,
         io_in_7_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid,
              io_in_6_valid} == 7'h0,
         io_in_6_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid,
              io_in_5_valid} == 6'h0,
         io_in_5_valid
           & {io_in_0_valid,
              io_in_1_valid,
              io_in_2_valid,
              io_in_3_valid,
              io_in_4_valid} == 5'h0,
         io_in_4_valid
           & {io_in_0_valid, io_in_1_valid, io_in_2_valid, io_in_3_valid} == 4'h0,
         io_in_3_valid & {io_in_0_valid, io_in_1_valid, io_in_2_valid} == 3'h0,
         io_in_2_valid & {io_in_0_valid, io_in_1_valid} == 2'h0,
         io_in_1_valid & ~io_in_0_valid,
         io_in_0_valid};
  wire [6:0]  _io_out_valid_T_1 = {2'h0, chosen_reg[13:9]} | chosen_reg[7:1];
  wire [2:0]  _io_out_valid_T_3 = _io_out_valid_T_1[6:4] | _io_out_valid_T_1[2:0];
  wire [13:0] _io_out_valid_T_10 =
    valids
    >> {10'h0,
        |(chosen_reg[13:8]),
        |(_io_out_valid_T_1[6:3]),
        |(_io_out_valid_T_3[2:1]),
        _io_out_valid_T_3[2] | _io_out_valid_T_3[0]};
  wire        io_out_valid_0 = out_valid_reg & _io_out_valid_T_10[0];
  wire        latch_result = (|valids) & ~out_valid_reg;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      out_valid_reg <= 1'h0;
      out_bits_reg_sourceId <= 11'h0;
      out_bits_reg_set <= 11'h0;
      out_bits_reg_tag <= 31'h0;
      out_bits_reg_channel <= 3'h0;
      out_bits_reg_opcode <= 3'h0;
      out_bits_reg_param <= 3'h0;
      out_bits_reg_size <= 3'h0;
      out_bits_reg_way <= 3'h0;
      out_bits_reg_off <= 6'h0;
      out_bits_reg_useBypass <= 1'h0;
      out_bits_reg_bufIdx <= 4'h0;
      out_bits_reg_denied <= 1'h0;
      out_bits_reg_sinkId <= 4'h0;
      out_bits_reg_bypassPut <= 1'h0;
      out_bits_reg_dirty <= 1'h0;
      out_bits_reg_isHit <= 1'h0;
      chosen_reg <= 14'h0;
      pendingMask <= 14'h0;
      rrGrantMask <= 14'h0;
    end
    else begin
      out_valid_reg <= ~(io_out_ready & io_out_valid_0) & (latch_result | out_valid_reg);
      if (latch_result) begin
        out_bits_reg_sourceId <=
          (chosenOH[0] ? io_in_0_bits_sourceId : 11'h0)
          | (chosenOH[1] ? io_in_1_bits_sourceId : 11'h0)
          | (chosenOH[2] ? io_in_2_bits_sourceId : 11'h0)
          | (chosenOH[3] ? io_in_3_bits_sourceId : 11'h0)
          | (chosenOH[4] ? io_in_4_bits_sourceId : 11'h0)
          | (chosenOH[5] ? io_in_5_bits_sourceId : 11'h0)
          | (chosenOH[6] ? io_in_6_bits_sourceId : 11'h0)
          | (chosenOH[7] ? io_in_7_bits_sourceId : 11'h0)
          | (chosenOH[8] ? io_in_8_bits_sourceId : 11'h0)
          | (chosenOH[9] ? io_in_9_bits_sourceId : 11'h0)
          | (chosenOH[10] ? io_in_10_bits_sourceId : 11'h0)
          | (chosenOH[11] ? io_in_11_bits_sourceId : 11'h0)
          | (chosenOH[12] ? io_in_12_bits_sourceId : 11'h0)
          | (chosenOH[13] ? io_in_13_bits_sourceId : 11'h0);
        out_bits_reg_set <=
          (chosenOH[0] ? io_in_0_bits_set : 11'h0)
          | (chosenOH[1] ? io_in_1_bits_set : 11'h0)
          | (chosenOH[2] ? io_in_2_bits_set : 11'h0)
          | (chosenOH[3] ? io_in_3_bits_set : 11'h0)
          | (chosenOH[4] ? io_in_4_bits_set : 11'h0)
          | (chosenOH[5] ? io_in_5_bits_set : 11'h0)
          | (chosenOH[6] ? io_in_6_bits_set : 11'h0)
          | (chosenOH[7] ? io_in_7_bits_set : 11'h0)
          | (chosenOH[8] ? io_in_8_bits_set : 11'h0)
          | (chosenOH[9] ? io_in_9_bits_set : 11'h0)
          | (chosenOH[10] ? io_in_10_bits_set : 11'h0)
          | (chosenOH[11] ? io_in_11_bits_set : 11'h0)
          | (chosenOH[12] ? io_in_12_bits_set : 11'h0)
          | (chosenOH[13] ? io_in_13_bits_set : 11'h0);
        out_bits_reg_tag <=
          (chosenOH[0] ? io_in_0_bits_tag : 31'h0)
          | (chosenOH[1] ? io_in_1_bits_tag : 31'h0)
          | (chosenOH[2] ? io_in_2_bits_tag : 31'h0)
          | (chosenOH[3] ? io_in_3_bits_tag : 31'h0)
          | (chosenOH[4] ? io_in_4_bits_tag : 31'h0)
          | (chosenOH[5] ? io_in_5_bits_tag : 31'h0)
          | (chosenOH[6] ? io_in_6_bits_tag : 31'h0)
          | (chosenOH[7] ? io_in_7_bits_tag : 31'h0)
          | (chosenOH[8] ? io_in_8_bits_tag : 31'h0)
          | (chosenOH[9] ? io_in_9_bits_tag : 31'h0)
          | (chosenOH[10] ? io_in_10_bits_tag : 31'h0)
          | (chosenOH[11] ? io_in_11_bits_tag : 31'h0)
          | (chosenOH[12] ? io_in_12_bits_tag : 31'h0)
          | (chosenOH[13] ? io_in_13_bits_tag : 31'h0);
        out_bits_reg_channel <=
          (chosenOH[0] ? io_in_0_bits_channel : 3'h0)
          | (chosenOH[1] ? io_in_1_bits_channel : 3'h0)
          | (chosenOH[2] ? io_in_2_bits_channel : 3'h0)
          | (chosenOH[3] ? io_in_3_bits_channel : 3'h0)
          | (chosenOH[4] ? io_in_4_bits_channel : 3'h0)
          | (chosenOH[5] ? io_in_5_bits_channel : 3'h0)
          | (chosenOH[6] ? io_in_6_bits_channel : 3'h0)
          | (chosenOH[7] ? io_in_7_bits_channel : 3'h0)
          | (chosenOH[8] ? io_in_8_bits_channel : 3'h0)
          | (chosenOH[9] ? io_in_9_bits_channel : 3'h0)
          | (chosenOH[10] ? io_in_10_bits_channel : 3'h0)
          | (chosenOH[11] ? io_in_11_bits_channel : 3'h0)
          | (chosenOH[12] ? io_in_12_bits_channel : 3'h0)
          | (chosenOH[13] ? io_in_13_bits_channel : 3'h0);
        out_bits_reg_opcode <=
          (chosenOH[0] ? io_in_0_bits_opcode : 3'h0)
          | (chosenOH[1] ? io_in_1_bits_opcode : 3'h0)
          | (chosenOH[2] ? io_in_2_bits_opcode : 3'h0)
          | (chosenOH[3] ? io_in_3_bits_opcode : 3'h0)
          | (chosenOH[4] ? io_in_4_bits_opcode : 3'h0)
          | (chosenOH[5] ? io_in_5_bits_opcode : 3'h0)
          | (chosenOH[6] ? io_in_6_bits_opcode : 3'h0)
          | (chosenOH[7] ? io_in_7_bits_opcode : 3'h0)
          | (chosenOH[8] ? io_in_8_bits_opcode : 3'h0)
          | (chosenOH[9] ? io_in_9_bits_opcode : 3'h0)
          | (chosenOH[10] ? io_in_10_bits_opcode : 3'h0)
          | (chosenOH[11] ? io_in_11_bits_opcode : 3'h0)
          | (chosenOH[12] ? io_in_12_bits_opcode : 3'h0)
          | (chosenOH[13] ? io_in_13_bits_opcode : 3'h0);
        out_bits_reg_param <=
          (chosenOH[0] ? io_in_0_bits_param : 3'h0)
          | (chosenOH[1] ? io_in_1_bits_param : 3'h0)
          | (chosenOH[2] ? io_in_2_bits_param : 3'h0)
          | (chosenOH[3] ? io_in_3_bits_param : 3'h0)
          | (chosenOH[4] ? io_in_4_bits_param : 3'h0)
          | (chosenOH[5] ? io_in_5_bits_param : 3'h0)
          | (chosenOH[6] ? io_in_6_bits_param : 3'h0)
          | (chosenOH[7] ? io_in_7_bits_param : 3'h0)
          | (chosenOH[8] ? io_in_8_bits_param : 3'h0)
          | (chosenOH[9] ? io_in_9_bits_param : 3'h0)
          | (chosenOH[10] ? io_in_10_bits_param : 3'h0)
          | (chosenOH[11] ? io_in_11_bits_param : 3'h0)
          | (chosenOH[12] ? io_in_12_bits_param : 3'h0)
          | (chosenOH[13] ? io_in_13_bits_param : 3'h0);
        out_bits_reg_size <=
          (chosenOH[0] ? io_in_0_bits_size : 3'h0)
          | (chosenOH[1] ? io_in_1_bits_size : 3'h0)
          | (chosenOH[2] ? io_in_2_bits_size : 3'h0)
          | (chosenOH[3] ? io_in_3_bits_size : 3'h0)
          | (chosenOH[4] ? io_in_4_bits_size : 3'h0)
          | (chosenOH[5] ? io_in_5_bits_size : 3'h0)
          | (chosenOH[6] ? io_in_6_bits_size : 3'h0)
          | (chosenOH[7] ? io_in_7_bits_size : 3'h0)
          | (chosenOH[8] ? io_in_8_bits_size : 3'h0)
          | (chosenOH[9] ? io_in_9_bits_size : 3'h0)
          | (chosenOH[10] ? io_in_10_bits_size : 3'h0)
          | (chosenOH[11] ? io_in_11_bits_size : 3'h0)
          | (chosenOH[12] ? io_in_12_bits_size : 3'h0)
          | (chosenOH[13] ? io_in_13_bits_size : 3'h0);
        out_bits_reg_way <=
          (chosenOH[0] ? io_in_0_bits_way : 3'h0)
          | (chosenOH[1] ? io_in_1_bits_way : 3'h0)
          | (chosenOH[2] ? io_in_2_bits_way : 3'h0)
          | (chosenOH[3] ? io_in_3_bits_way : 3'h0)
          | (chosenOH[4] ? io_in_4_bits_way : 3'h0)
          | (chosenOH[5] ? io_in_5_bits_way : 3'h0)
          | (chosenOH[6] ? io_in_6_bits_way : 3'h0)
          | (chosenOH[7] ? io_in_7_bits_way : 3'h0)
          | (chosenOH[8] ? io_in_8_bits_way : 3'h0)
          | (chosenOH[9] ? io_in_9_bits_way : 3'h0)
          | (chosenOH[10] ? io_in_10_bits_way : 3'h0)
          | (chosenOH[11] ? io_in_11_bits_way : 3'h0)
          | (chosenOH[12] ? io_in_12_bits_way : 3'h0)
          | (chosenOH[13] ? io_in_13_bits_way : 3'h0);
        out_bits_reg_off <=
          (chosenOH[0] ? io_in_0_bits_off : 6'h0)
          | (chosenOH[1] ? io_in_1_bits_off : 6'h0)
          | (chosenOH[2] ? io_in_2_bits_off : 6'h0)
          | (chosenOH[3] ? io_in_3_bits_off : 6'h0)
          | (chosenOH[4] ? io_in_4_bits_off : 6'h0)
          | (chosenOH[5] ? io_in_5_bits_off : 6'h0)
          | (chosenOH[6] ? io_in_6_bits_off : 6'h0)
          | (chosenOH[7] ? io_in_7_bits_off : 6'h0)
          | (chosenOH[8] ? io_in_8_bits_off : 6'h0)
          | (chosenOH[9] ? io_in_9_bits_off : 6'h0)
          | (chosenOH[10] ? io_in_10_bits_off : 6'h0)
          | (chosenOH[11] ? io_in_11_bits_off : 6'h0)
          | (chosenOH[12] ? io_in_12_bits_off : 6'h0)
          | (chosenOH[13] ? io_in_13_bits_off : 6'h0);
        out_bits_reg_useBypass <=
          chosenOH[0] & io_in_0_bits_useBypass | chosenOH[1] & io_in_1_bits_useBypass
          | chosenOH[2] & io_in_2_bits_useBypass | chosenOH[3] & io_in_3_bits_useBypass
          | chosenOH[4] & io_in_4_bits_useBypass | chosenOH[5] & io_in_5_bits_useBypass
          | chosenOH[6] & io_in_6_bits_useBypass | chosenOH[7] & io_in_7_bits_useBypass
          | chosenOH[8] & io_in_8_bits_useBypass | chosenOH[9] & io_in_9_bits_useBypass
          | chosenOH[10] & io_in_10_bits_useBypass | chosenOH[11]
          & io_in_11_bits_useBypass | chosenOH[12] & io_in_12_bits_useBypass
          | chosenOH[13] & io_in_13_bits_useBypass;
        out_bits_reg_bufIdx <=
          (chosenOH[0] ? io_in_0_bits_bufIdx : 4'h0)
          | (chosenOH[1] ? io_in_1_bits_bufIdx : 4'h0)
          | (chosenOH[2] ? io_in_2_bits_bufIdx : 4'h0)
          | (chosenOH[3] ? io_in_3_bits_bufIdx : 4'h0)
          | (chosenOH[4] ? io_in_4_bits_bufIdx : 4'h0)
          | (chosenOH[5] ? io_in_5_bits_bufIdx : 4'h0)
          | (chosenOH[6] ? io_in_6_bits_bufIdx : 4'h0)
          | (chosenOH[7] ? io_in_7_bits_bufIdx : 4'h0)
          | (chosenOH[8] ? io_in_8_bits_bufIdx : 4'h0)
          | (chosenOH[9] ? io_in_9_bits_bufIdx : 4'h0)
          | (chosenOH[10] ? io_in_10_bits_bufIdx : 4'h0)
          | (chosenOH[11] ? io_in_11_bits_bufIdx : 4'h0)
          | (chosenOH[12] ? io_in_12_bits_bufIdx : 4'h0)
          | (chosenOH[13] ? io_in_13_bits_bufIdx : 4'h0);
        out_bits_reg_denied <=
          chosenOH[0] & io_in_0_bits_denied | chosenOH[1] & io_in_1_bits_denied
          | chosenOH[2] & io_in_2_bits_denied | chosenOH[3] & io_in_3_bits_denied
          | chosenOH[4] & io_in_4_bits_denied | chosenOH[5] & io_in_5_bits_denied
          | chosenOH[6] & io_in_6_bits_denied | chosenOH[7] & io_in_7_bits_denied
          | chosenOH[8] & io_in_8_bits_denied | chosenOH[9] & io_in_9_bits_denied
          | chosenOH[10] & io_in_10_bits_denied | chosenOH[11] & io_in_11_bits_denied
          | chosenOH[12] & io_in_12_bits_denied | chosenOH[13] & io_in_13_bits_denied;
        out_bits_reg_sinkId <=
          (chosenOH[0] ? io_in_0_bits_sinkId : 4'h0)
          | (chosenOH[1] ? io_in_1_bits_sinkId : 4'h0)
          | (chosenOH[2] ? io_in_2_bits_sinkId : 4'h0)
          | (chosenOH[3] ? io_in_3_bits_sinkId : 4'h0)
          | (chosenOH[4] ? io_in_4_bits_sinkId : 4'h0)
          | (chosenOH[5] ? io_in_5_bits_sinkId : 4'h0)
          | (chosenOH[6] ? io_in_6_bits_sinkId : 4'h0)
          | (chosenOH[7] ? io_in_7_bits_sinkId : 4'h0)
          | (chosenOH[8] ? io_in_8_bits_sinkId : 4'h0)
          | (chosenOH[9] ? io_in_9_bits_sinkId : 4'h0)
          | (chosenOH[10] ? io_in_10_bits_sinkId : 4'h0)
          | (chosenOH[11] ? io_in_11_bits_sinkId : 4'h0)
          | (chosenOH[12] ? io_in_12_bits_sinkId : 4'h0)
          | (chosenOH[13] ? io_in_13_bits_sinkId : 4'h0);
        out_bits_reg_bypassPut <=
          chosenOH[0] & io_in_0_bits_bypassPut | chosenOH[1] & io_in_1_bits_bypassPut
          | chosenOH[2] & io_in_2_bits_bypassPut | chosenOH[3] & io_in_3_bits_bypassPut
          | chosenOH[4] & io_in_4_bits_bypassPut | chosenOH[5] & io_in_5_bits_bypassPut
          | chosenOH[6] & io_in_6_bits_bypassPut | chosenOH[7] & io_in_7_bits_bypassPut
          | chosenOH[8] & io_in_8_bits_bypassPut | chosenOH[9] & io_in_9_bits_bypassPut
          | chosenOH[10] & io_in_10_bits_bypassPut | chosenOH[11]
          & io_in_11_bits_bypassPut | chosenOH[12] & io_in_12_bits_bypassPut
          | chosenOH[13] & io_in_13_bits_bypassPut;
        out_bits_reg_dirty <=
          chosenOH[0] & io_in_0_bits_dirty | chosenOH[1] & io_in_1_bits_dirty
          | chosenOH[2] & io_in_2_bits_dirty | chosenOH[3] & io_in_3_bits_dirty
          | chosenOH[4] & io_in_4_bits_dirty | chosenOH[5] & io_in_5_bits_dirty
          | chosenOH[6] & io_in_6_bits_dirty | chosenOH[7] & io_in_7_bits_dirty
          | chosenOH[8] & io_in_8_bits_dirty | chosenOH[9] & io_in_9_bits_dirty
          | chosenOH[10] & io_in_10_bits_dirty | chosenOH[11] & io_in_11_bits_dirty
          | chosenOH[12] & io_in_12_bits_dirty | chosenOH[13] & io_in_13_bits_dirty;
        out_bits_reg_isHit <=
          chosenOH[0] & io_in_0_bits_isHit | chosenOH[1] & io_in_1_bits_isHit
          | chosenOH[2] & io_in_2_bits_isHit | chosenOH[3] & io_in_3_bits_isHit
          | chosenOH[4] & io_in_4_bits_isHit | chosenOH[5] & io_in_5_bits_isHit
          | chosenOH[6] & io_in_6_bits_isHit | chosenOH[7] & io_in_7_bits_isHit
          | chosenOH[8] & io_in_8_bits_isHit | chosenOH[9] & io_in_9_bits_isHit
          | chosenOH[10] & io_in_10_bits_isHit | chosenOH[11] & io_in_11_bits_isHit
          | chosenOH[12] & io_in_12_bits_isHit | chosenOH[13] & io_in_13_bits_isHit;
        chosen_reg <= chosenOH;
        pendingMask <= valids & ~chosenOH;
        rrGrantMask <=
          {|(chosenOH[12:0]),
           |(chosenOH[11:0]),
           |(chosenOH[10:0]),
           |(chosenOH[9:0]),
           |(chosenOH[8:0]),
           |(chosenOH[7:0]),
           |(chosenOH[6:0]),
           |(chosenOH[5:0]),
           |(chosenOH[4:0]),
           |(chosenOH[3:0]),
           |(chosenOH[2:0]),
           |(chosenOH[1:0]),
           chosenOH[0],
           1'h0};
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        out_valid_reg = _RANDOM[3'h0][0];
        out_bits_reg_sourceId = _RANDOM[3'h0][11:1];
        out_bits_reg_set = _RANDOM[3'h0][22:12];
        out_bits_reg_tag = {_RANDOM[3'h0][31:23], _RANDOM[3'h1][21:0]};
        out_bits_reg_channel = _RANDOM[3'h1][24:22];
        out_bits_reg_opcode = _RANDOM[3'h1][27:25];
        out_bits_reg_param = _RANDOM[3'h1][30:28];
        out_bits_reg_size = {_RANDOM[3'h1][31], _RANDOM[3'h2][1:0]};
        out_bits_reg_way = _RANDOM[3'h2][4:2];
        out_bits_reg_off = _RANDOM[3'h2][10:5];
        out_bits_reg_useBypass = _RANDOM[3'h2][11];
        out_bits_reg_bufIdx = _RANDOM[3'h2][15:12];
        out_bits_reg_denied = _RANDOM[3'h2][16];
        out_bits_reg_sinkId = _RANDOM[3'h2][20:17];
        out_bits_reg_bypassPut = _RANDOM[3'h2][21];
        out_bits_reg_dirty = _RANDOM[3'h2][22];
        out_bits_reg_isHit = _RANDOM[3'h2][23];
        chosen_reg = {_RANDOM[3'h2][31:24], _RANDOM[3'h3][5:0]};
        pendingMask = _RANDOM[3'h3][19:6];
        rrGrantMask = {_RANDOM[3'h3][31:20], _RANDOM[3'h4][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        out_valid_reg = 1'h0;
        out_bits_reg_sourceId = 11'h0;
        out_bits_reg_set = 11'h0;
        out_bits_reg_tag = 31'h0;
        out_bits_reg_channel = 3'h0;
        out_bits_reg_opcode = 3'h0;
        out_bits_reg_param = 3'h0;
        out_bits_reg_size = 3'h0;
        out_bits_reg_way = 3'h0;
        out_bits_reg_off = 6'h0;
        out_bits_reg_useBypass = 1'h0;
        out_bits_reg_bufIdx = 4'h0;
        out_bits_reg_denied = 1'h0;
        out_bits_reg_sinkId = 4'h0;
        out_bits_reg_bypassPut = 1'h0;
        out_bits_reg_dirty = 1'h0;
        out_bits_reg_isHit = 1'h0;
        chosen_reg = 14'h0;
        pendingMask = 14'h0;
        rrGrantMask = 14'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_0_ready = chosen_reg[0] & out_valid_reg & io_out_ready;
  assign io_in_1_ready = chosen_reg[1] & out_valid_reg & io_out_ready;
  assign io_in_2_ready = chosen_reg[2] & out_valid_reg & io_out_ready;
  assign io_in_3_ready = chosen_reg[3] & out_valid_reg & io_out_ready;
  assign io_in_4_ready = chosen_reg[4] & out_valid_reg & io_out_ready;
  assign io_in_5_ready = chosen_reg[5] & out_valid_reg & io_out_ready;
  assign io_in_6_ready = chosen_reg[6] & out_valid_reg & io_out_ready;
  assign io_in_7_ready = chosen_reg[7] & out_valid_reg & io_out_ready;
  assign io_in_8_ready = chosen_reg[8] & out_valid_reg & io_out_ready;
  assign io_in_9_ready = chosen_reg[9] & out_valid_reg & io_out_ready;
  assign io_in_10_ready = chosen_reg[10] & out_valid_reg & io_out_ready;
  assign io_in_11_ready = chosen_reg[11] & out_valid_reg & io_out_ready;
  assign io_in_12_ready = chosen_reg[12] & out_valid_reg & io_out_ready;
  assign io_in_13_ready = chosen_reg[13] & out_valid_reg & io_out_ready;
  assign io_out_valid = io_out_valid_0;
  assign io_out_bits_sourceId = out_bits_reg_sourceId;
  assign io_out_bits_set = out_bits_reg_set;
  assign io_out_bits_tag = out_bits_reg_tag;
  assign io_out_bits_channel = out_bits_reg_channel;
  assign io_out_bits_opcode = out_bits_reg_opcode;
  assign io_out_bits_param = out_bits_reg_param;
  assign io_out_bits_size = out_bits_reg_size;
  assign io_out_bits_way = out_bits_reg_way;
  assign io_out_bits_off = out_bits_reg_off;
  assign io_out_bits_useBypass = out_bits_reg_useBypass;
  assign io_out_bits_bufIdx = out_bits_reg_bufIdx;
  assign io_out_bits_denied = out_bits_reg_denied;
  assign io_out_bits_sinkId = out_bits_reg_sinkId;
  assign io_out_bits_bypassPut = out_bits_reg_bypassPut;
  assign io_out_bits_dirty = out_bits_reg_dirty;
  assign io_out_bits_isHit = out_bits_reg_isHit;
endmodule

