// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SmblockctlModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_HD_MISALIGN_LD_ENABLE,
  output        regOut_HD_MISALIGN_ST_ENABLE,
  output        regOut_UNCACHE_WRITE_OUTSTANDING_ENABLE,
  output        regOut_CACHE_ERROR_ENABLE,
  output        regOut_SOFT_PREFETCH_ENABLE,
  output        regOut_LDLD_VIO_CHECK_ENABLE,
  output [3:0]  regOut_SBUFFER_THRESHOLD
);

  reg       reg_HD_MISALIGN_LD_ENABLE;
  reg       reg_HD_MISALIGN_ST_ENABLE;
  reg       reg_UNCACHE_WRITE_OUTSTANDING_ENABLE;
  reg       reg_CACHE_ERROR_ENABLE;
  reg       reg_SOFT_PREFETCH_ENABLE;
  reg       reg_LDLD_VIO_CHECK_ENABLE;
  reg [3:0] reg_SBUFFER_THRESHOLD;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_HD_MISALIGN_LD_ENABLE <= 1'h1;
      reg_HD_MISALIGN_ST_ENABLE <= 1'h1;
      reg_UNCACHE_WRITE_OUTSTANDING_ENABLE <= 1'h0;
      reg_CACHE_ERROR_ENABLE <= 1'h1;
      reg_SOFT_PREFETCH_ENABLE <= 1'h1;
      reg_LDLD_VIO_CHECK_ENABLE <= 1'h1;
      reg_SBUFFER_THRESHOLD <= 4'h7;
    end
    else if (w_wen) begin
      reg_HD_MISALIGN_LD_ENABLE <= w_wdata[9];
      reg_HD_MISALIGN_ST_ENABLE <= w_wdata[8];
      reg_UNCACHE_WRITE_OUTSTANDING_ENABLE <= w_wdata[7];
      reg_CACHE_ERROR_ENABLE <= w_wdata[6];
      reg_SOFT_PREFETCH_ENABLE <= w_wdata[5];
      reg_LDLD_VIO_CHECK_ENABLE <= w_wdata[4];
      reg_SBUFFER_THRESHOLD <= w_wdata[3:0];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_HD_MISALIGN_LD_ENABLE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_HD_MISALIGN_ST_ENABLE = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_UNCACHE_WRITE_OUTSTANDING_ENABLE = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_CACHE_ERROR_ENABLE = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_SOFT_PREFETCH_ENABLE = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_LDLD_VIO_CHECK_ENABLE = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_SBUFFER_THRESHOLD = _RANDOM[/*Zero width*/ 1'b0][9:6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_HD_MISALIGN_LD_ENABLE = 1'h1;
        reg_HD_MISALIGN_ST_ENABLE = 1'h1;
        reg_UNCACHE_WRITE_OUTSTANDING_ENABLE = 1'h0;
        reg_CACHE_ERROR_ENABLE = 1'h1;
        reg_SOFT_PREFETCH_ENABLE = 1'h1;
        reg_LDLD_VIO_CHECK_ENABLE = 1'h1;
        reg_SBUFFER_THRESHOLD = 4'h7;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {54'h0,
     reg_HD_MISALIGN_LD_ENABLE,
     reg_HD_MISALIGN_ST_ENABLE,
     reg_UNCACHE_WRITE_OUTSTANDING_ENABLE,
     reg_CACHE_ERROR_ENABLE,
     reg_SOFT_PREFETCH_ENABLE,
     reg_LDLD_VIO_CHECK_ENABLE,
     reg_SBUFFER_THRESHOLD};
  assign regOut_HD_MISALIGN_LD_ENABLE = reg_HD_MISALIGN_LD_ENABLE;
  assign regOut_HD_MISALIGN_ST_ENABLE = reg_HD_MISALIGN_ST_ENABLE;
  assign regOut_UNCACHE_WRITE_OUTSTANDING_ENABLE = reg_UNCACHE_WRITE_OUTSTANDING_ENABLE;
  assign regOut_CACHE_ERROR_ENABLE = reg_CACHE_ERROR_ENABLE;
  assign regOut_SOFT_PREFETCH_ENABLE = reg_SOFT_PREFETCH_ENABLE;
  assign regOut_LDLD_VIO_CHECK_ENABLE = reg_LDLD_VIO_CHECK_ENABLE;
  assign regOut_SBUFFER_THRESHOLD = reg_SBUFFER_THRESHOLD;
endmodule

