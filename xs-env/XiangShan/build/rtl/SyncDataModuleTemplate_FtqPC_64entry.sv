// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate_FtqPC_64entry(
  input         clock,
  input         reset,
  input  [5:0]  io_raddr_0,
  input  [5:0]  io_raddr_1,
  input  [5:0]  io_raddr_2,
  input  [5:0]  io_raddr_3,
  input  [5:0]  io_raddr_4,
  input  [5:0]  io_raddr_5,
  input  [5:0]  io_raddr_6,
  output [49:0] io_rdata_0_startAddr,
  output [49:0] io_rdata_0_nextLineAddr,
  output        io_rdata_0_fallThruError,
  output [49:0] io_rdata_1_startAddr,
  output [49:0] io_rdata_1_nextLineAddr,
  output        io_rdata_1_fallThruError,
  output [49:0] io_rdata_2_startAddr,
  output [49:0] io_rdata_3_startAddr,
  output [49:0] io_rdata_3_nextLineAddr,
  output [49:0] io_rdata_4_startAddr,
  output [49:0] io_rdata_4_nextLineAddr,
  output [49:0] io_rdata_5_startAddr,
  output [49:0] io_rdata_6_startAddr,
  input         io_wen_0,
  input  [5:0]  io_waddr_0,
  input  [49:0] io_wdata_0_startAddr,
  input  [49:0] io_wdata_0_nextLineAddr,
  input         io_wdata_0_fallThruError
);

  wire [49:0] _dataBanks_3_io_rdata_0_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_0_nextLineAddr;
  wire        _dataBanks_3_io_rdata_0_fallThruError;
  wire [49:0] _dataBanks_3_io_rdata_1_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_1_nextLineAddr;
  wire        _dataBanks_3_io_rdata_1_fallThruError;
  wire [49:0] _dataBanks_3_io_rdata_2_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_3_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_3_nextLineAddr;
  wire [49:0] _dataBanks_3_io_rdata_4_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_4_nextLineAddr;
  wire [49:0] _dataBanks_3_io_rdata_5_startAddr;
  wire [49:0] _dataBanks_3_io_rdata_6_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_0_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_0_nextLineAddr;
  wire        _dataBanks_2_io_rdata_0_fallThruError;
  wire [49:0] _dataBanks_2_io_rdata_1_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_1_nextLineAddr;
  wire        _dataBanks_2_io_rdata_1_fallThruError;
  wire [49:0] _dataBanks_2_io_rdata_2_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_3_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_3_nextLineAddr;
  wire [49:0] _dataBanks_2_io_rdata_4_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_4_nextLineAddr;
  wire [49:0] _dataBanks_2_io_rdata_5_startAddr;
  wire [49:0] _dataBanks_2_io_rdata_6_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_0_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_0_nextLineAddr;
  wire        _dataBanks_1_io_rdata_0_fallThruError;
  wire [49:0] _dataBanks_1_io_rdata_1_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_1_nextLineAddr;
  wire        _dataBanks_1_io_rdata_1_fallThruError;
  wire [49:0] _dataBanks_1_io_rdata_2_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_3_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_3_nextLineAddr;
  wire [49:0] _dataBanks_1_io_rdata_4_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_4_nextLineAddr;
  wire [49:0] _dataBanks_1_io_rdata_5_startAddr;
  wire [49:0] _dataBanks_1_io_rdata_6_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_0_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_0_nextLineAddr;
  wire        _dataBanks_0_io_rdata_0_fallThruError;
  wire [49:0] _dataBanks_0_io_rdata_1_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_1_nextLineAddr;
  wire        _dataBanks_0_io_rdata_1_fallThruError;
  wire [49:0] _dataBanks_0_io_rdata_2_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_3_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_3_nextLineAddr;
  wire [49:0] _dataBanks_0_io_rdata_4_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_4_nextLineAddr;
  wire [49:0] _dataBanks_0_io_rdata_5_startAddr;
  wire [49:0] _dataBanks_0_io_rdata_6_startAddr;
  reg  [5:0]  raddr_dup_0;
  reg  [5:0]  raddr_dup_1;
  reg  [5:0]  raddr_dup_2;
  reg  [5:0]  raddr_dup_3;
  reg  [5:0]  raddr_dup_4;
  reg  [5:0]  raddr_dup_5;
  reg  [5:0]  raddr_dup_6;
  reg         wen_dup_last_REG;
  reg  [5:0]  waddr_dup_0;
  reg  [49:0] r_startAddr;
  reg  [49:0] r_nextLineAddr;
  reg         r_fallThruError;
  reg  [5:0]  raddr_dup_1_0;
  reg  [5:0]  raddr_dup_1_1;
  reg  [5:0]  raddr_dup_1_2;
  reg  [5:0]  raddr_dup_1_3;
  reg  [5:0]  raddr_dup_1_4;
  reg  [5:0]  raddr_dup_1_5;
  reg  [5:0]  raddr_dup_1_6;
  reg         wen_dup_last_REG_1;
  reg  [5:0]  waddr_dup_0_1;
  reg  [49:0] r_1_startAddr;
  reg  [49:0] r_1_nextLineAddr;
  reg         r_1_fallThruError;
  reg  [5:0]  raddr_dup_2_0;
  reg  [5:0]  raddr_dup_2_1;
  reg  [5:0]  raddr_dup_2_2;
  reg  [5:0]  raddr_dup_2_3;
  reg  [5:0]  raddr_dup_2_4;
  reg  [5:0]  raddr_dup_2_5;
  reg  [5:0]  raddr_dup_2_6;
  reg         wen_dup_last_REG_2;
  reg  [5:0]  waddr_dup_0_2;
  reg  [49:0] r_2_startAddr;
  reg  [49:0] r_2_nextLineAddr;
  reg         r_2_fallThruError;
  reg  [5:0]  raddr_dup_3_0;
  reg  [5:0]  raddr_dup_3_1;
  reg  [5:0]  raddr_dup_3_2;
  reg  [5:0]  raddr_dup_3_3;
  reg  [5:0]  raddr_dup_3_4;
  reg  [5:0]  raddr_dup_3_5;
  reg  [5:0]  raddr_dup_3_6;
  reg         wen_dup_last_REG_3;
  reg  [5:0]  waddr_dup_0_3;
  reg  [49:0] r_3_startAddr;
  reg  [49:0] r_3_nextLineAddr;
  reg         r_3_fallThruError;
  reg  [5:0]  raddr_dup_4_0;
  wire        _io_rdata_0_T = raddr_dup_4_0[5:4] == 2'h0;
  wire        _io_rdata_0_T_1 = raddr_dup_4_0[5:4] == 2'h1;
  wire        _io_rdata_0_T_2 = raddr_dup_4_0[5:4] == 2'h2;
  reg  [5:0]  raddr_dup_5_0;
  wire        _io_rdata_1_T = raddr_dup_5_0[5:4] == 2'h0;
  wire        _io_rdata_1_T_1 = raddr_dup_5_0[5:4] == 2'h1;
  wire        _io_rdata_1_T_2 = raddr_dup_5_0[5:4] == 2'h2;
  reg  [5:0]  raddr_dup_6_0;
  reg  [5:0]  raddr_dup_7;
  wire        _io_rdata_3_T = raddr_dup_7[5:4] == 2'h0;
  wire        _io_rdata_3_T_1 = raddr_dup_7[5:4] == 2'h1;
  wire        _io_rdata_3_T_2 = raddr_dup_7[5:4] == 2'h2;
  reg  [5:0]  raddr_dup_8;
  wire        _io_rdata_4_T = raddr_dup_8[5:4] == 2'h0;
  wire        _io_rdata_4_T_1 = raddr_dup_8[5:4] == 2'h1;
  wire        _io_rdata_4_T_2 = raddr_dup_8[5:4] == 2'h2;
  reg  [5:0]  raddr_dup_9;
  reg  [5:0]  raddr_dup_10;
  always @(posedge clock) begin
    raddr_dup_0 <= io_raddr_0;
    raddr_dup_1 <= io_raddr_1;
    raddr_dup_2 <= io_raddr_2;
    raddr_dup_3 <= io_raddr_3;
    raddr_dup_4 <= io_raddr_4;
    raddr_dup_5 <= io_raddr_5;
    raddr_dup_6 <= io_raddr_6;
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_startAddr <= io_wdata_0_startAddr;
      r_nextLineAddr <= io_wdata_0_nextLineAddr;
      r_fallThruError <= io_wdata_0_fallThruError;
      waddr_dup_0_1 <= io_waddr_0;
      r_1_startAddr <= io_wdata_0_startAddr;
      r_1_nextLineAddr <= io_wdata_0_nextLineAddr;
      r_1_fallThruError <= io_wdata_0_fallThruError;
      waddr_dup_0_2 <= io_waddr_0;
      r_2_startAddr <= io_wdata_0_startAddr;
      r_2_nextLineAddr <= io_wdata_0_nextLineAddr;
      r_2_fallThruError <= io_wdata_0_fallThruError;
      waddr_dup_0_3 <= io_waddr_0;
      r_3_startAddr <= io_wdata_0_startAddr;
      r_3_nextLineAddr <= io_wdata_0_nextLineAddr;
      r_3_fallThruError <= io_wdata_0_fallThruError;
    end
    raddr_dup_1_0 <= io_raddr_0;
    raddr_dup_1_1 <= io_raddr_1;
    raddr_dup_1_2 <= io_raddr_2;
    raddr_dup_1_3 <= io_raddr_3;
    raddr_dup_1_4 <= io_raddr_4;
    raddr_dup_1_5 <= io_raddr_5;
    raddr_dup_1_6 <= io_raddr_6;
    raddr_dup_2_0 <= io_raddr_0;
    raddr_dup_2_1 <= io_raddr_1;
    raddr_dup_2_2 <= io_raddr_2;
    raddr_dup_2_3 <= io_raddr_3;
    raddr_dup_2_4 <= io_raddr_4;
    raddr_dup_2_5 <= io_raddr_5;
    raddr_dup_2_6 <= io_raddr_6;
    raddr_dup_3_0 <= io_raddr_0;
    raddr_dup_3_1 <= io_raddr_1;
    raddr_dup_3_2 <= io_raddr_2;
    raddr_dup_3_3 <= io_raddr_3;
    raddr_dup_3_4 <= io_raddr_4;
    raddr_dup_3_5 <= io_raddr_5;
    raddr_dup_3_6 <= io_raddr_6;
    raddr_dup_4_0 <= io_raddr_0;
    raddr_dup_5_0 <= io_raddr_1;
    raddr_dup_6_0 <= io_raddr_2;
    raddr_dup_7 <= io_raddr_3;
    raddr_dup_8 <= io_raddr_4;
    raddr_dup_9 <= io_raddr_5;
    raddr_dup_10 <= io_raddr_6;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      wen_dup_last_REG <= 1'h0;
      wen_dup_last_REG_1 <= 1'h0;
      wen_dup_last_REG_2 <= 1'h0;
      wen_dup_last_REG_3 <= 1'h0;
    end
    else begin
      wen_dup_last_REG <= io_wen_0;
      wen_dup_last_REG_1 <= io_wen_0;
      wen_dup_last_REG_2 <= io_wen_0;
      wen_dup_last_REG_3 <= io_wen_0;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:22];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h17; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        raddr_dup_0 = _RANDOM[5'h0][5:0];
        raddr_dup_1 = _RANDOM[5'h0][11:6];
        raddr_dup_2 = _RANDOM[5'h0][17:12];
        raddr_dup_3 = _RANDOM[5'h0][23:18];
        raddr_dup_4 = _RANDOM[5'h0][29:24];
        raddr_dup_5 = {_RANDOM[5'h0][31:30], _RANDOM[5'h1][3:0]};
        raddr_dup_6 = _RANDOM[5'h1][9:4];
        wen_dup_last_REG = _RANDOM[5'h1][10];
        waddr_dup_0 = _RANDOM[5'h1][16:11];
        r_startAddr = {_RANDOM[5'h1][31:17], _RANDOM[5'h2], _RANDOM[5'h3][2:0]};
        r_nextLineAddr = {_RANDOM[5'h3][31:3], _RANDOM[5'h4][20:0]};
        r_fallThruError = _RANDOM[5'h5][5];
        raddr_dup_1_0 = _RANDOM[5'h5][11:6];
        raddr_dup_1_1 = _RANDOM[5'h5][17:12];
        raddr_dup_1_2 = _RANDOM[5'h5][23:18];
        raddr_dup_1_3 = _RANDOM[5'h5][29:24];
        raddr_dup_1_4 = {_RANDOM[5'h5][31:30], _RANDOM[5'h6][3:0]};
        raddr_dup_1_5 = _RANDOM[5'h6][9:4];
        raddr_dup_1_6 = _RANDOM[5'h6][15:10];
        wen_dup_last_REG_1 = _RANDOM[5'h6][16];
        waddr_dup_0_1 = _RANDOM[5'h6][22:17];
        r_1_startAddr = {_RANDOM[5'h6][31:23], _RANDOM[5'h7], _RANDOM[5'h8][8:0]};
        r_1_nextLineAddr = {_RANDOM[5'h8][31:9], _RANDOM[5'h9][26:0]};
        r_1_fallThruError = _RANDOM[5'hA][11];
        raddr_dup_2_0 = _RANDOM[5'hA][17:12];
        raddr_dup_2_1 = _RANDOM[5'hA][23:18];
        raddr_dup_2_2 = _RANDOM[5'hA][29:24];
        raddr_dup_2_3 = {_RANDOM[5'hA][31:30], _RANDOM[5'hB][3:0]};
        raddr_dup_2_4 = _RANDOM[5'hB][9:4];
        raddr_dup_2_5 = _RANDOM[5'hB][15:10];
        raddr_dup_2_6 = _RANDOM[5'hB][21:16];
        wen_dup_last_REG_2 = _RANDOM[5'hB][22];
        waddr_dup_0_2 = _RANDOM[5'hB][28:23];
        r_2_startAddr = {_RANDOM[5'hB][31:29], _RANDOM[5'hC], _RANDOM[5'hD][14:0]};
        r_2_nextLineAddr = {_RANDOM[5'hD][31:15], _RANDOM[5'hE], _RANDOM[5'hF][0]};
        r_2_fallThruError = _RANDOM[5'hF][17];
        raddr_dup_3_0 = _RANDOM[5'hF][23:18];
        raddr_dup_3_1 = _RANDOM[5'hF][29:24];
        raddr_dup_3_2 = {_RANDOM[5'hF][31:30], _RANDOM[5'h10][3:0]};
        raddr_dup_3_3 = _RANDOM[5'h10][9:4];
        raddr_dup_3_4 = _RANDOM[5'h10][15:10];
        raddr_dup_3_5 = _RANDOM[5'h10][21:16];
        raddr_dup_3_6 = _RANDOM[5'h10][27:22];
        wen_dup_last_REG_3 = _RANDOM[5'h10][28];
        waddr_dup_0_3 = {_RANDOM[5'h10][31:29], _RANDOM[5'h11][2:0]};
        r_3_startAddr = {_RANDOM[5'h11][31:3], _RANDOM[5'h12][20:0]};
        r_3_nextLineAddr = {_RANDOM[5'h12][31:21], _RANDOM[5'h13], _RANDOM[5'h14][6:0]};
        r_3_fallThruError = _RANDOM[5'h14][23];
        raddr_dup_4_0 = _RANDOM[5'h14][29:24];
        raddr_dup_5_0 = {_RANDOM[5'h14][31:30], _RANDOM[5'h15][3:0]};
        raddr_dup_6_0 = _RANDOM[5'h15][9:4];
        raddr_dup_7 = _RANDOM[5'h15][15:10];
        raddr_dup_8 = _RANDOM[5'h15][21:16];
        raddr_dup_9 = _RANDOM[5'h15][27:22];
        raddr_dup_10 = {_RANDOM[5'h15][31:28], _RANDOM[5'h16][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        wen_dup_last_REG = 1'h0;
        wen_dup_last_REG_1 = 1'h0;
        wen_dup_last_REG_2 = 1'h0;
        wen_dup_last_REG_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule_FtqPC_16entry dataBanks_0 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_0[3:0]),
    .io_raddr_1               (raddr_dup_1[3:0]),
    .io_raddr_2               (raddr_dup_2[3:0]),
    .io_raddr_3               (raddr_dup_3[3:0]),
    .io_raddr_4               (raddr_dup_4[3:0]),
    .io_raddr_5               (raddr_dup_5[3:0]),
    .io_raddr_6               (raddr_dup_6[3:0]),
    .io_rdata_0_startAddr     (_dataBanks_0_io_rdata_0_startAddr),
    .io_rdata_0_nextLineAddr  (_dataBanks_0_io_rdata_0_nextLineAddr),
    .io_rdata_0_fallThruError (_dataBanks_0_io_rdata_0_fallThruError),
    .io_rdata_1_startAddr     (_dataBanks_0_io_rdata_1_startAddr),
    .io_rdata_1_nextLineAddr  (_dataBanks_0_io_rdata_1_nextLineAddr),
    .io_rdata_1_fallThruError (_dataBanks_0_io_rdata_1_fallThruError),
    .io_rdata_2_startAddr     (_dataBanks_0_io_rdata_2_startAddr),
    .io_rdata_3_startAddr     (_dataBanks_0_io_rdata_3_startAddr),
    .io_rdata_3_nextLineAddr  (_dataBanks_0_io_rdata_3_nextLineAddr),
    .io_rdata_4_startAddr     (_dataBanks_0_io_rdata_4_startAddr),
    .io_rdata_4_nextLineAddr  (_dataBanks_0_io_rdata_4_nextLineAddr),
    .io_rdata_5_startAddr     (_dataBanks_0_io_rdata_5_startAddr),
    .io_rdata_6_startAddr     (_dataBanks_0_io_rdata_6_startAddr),
    .io_wen_0                 (wen_dup_last_REG & waddr_dup_0[5:4] == 2'h0),
    .io_waddr_0               (waddr_dup_0[3:0]),
    .io_wdata_0_startAddr     (r_startAddr),
    .io_wdata_0_nextLineAddr  (r_nextLineAddr),
    .io_wdata_0_fallThruError (r_fallThruError)
  );
  DataModule_FtqPC_16entry dataBanks_1 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_1_0[3:0]),
    .io_raddr_1               (raddr_dup_1_1[3:0]),
    .io_raddr_2               (raddr_dup_1_2[3:0]),
    .io_raddr_3               (raddr_dup_1_3[3:0]),
    .io_raddr_4               (raddr_dup_1_4[3:0]),
    .io_raddr_5               (raddr_dup_1_5[3:0]),
    .io_raddr_6               (raddr_dup_1_6[3:0]),
    .io_rdata_0_startAddr     (_dataBanks_1_io_rdata_0_startAddr),
    .io_rdata_0_nextLineAddr  (_dataBanks_1_io_rdata_0_nextLineAddr),
    .io_rdata_0_fallThruError (_dataBanks_1_io_rdata_0_fallThruError),
    .io_rdata_1_startAddr     (_dataBanks_1_io_rdata_1_startAddr),
    .io_rdata_1_nextLineAddr  (_dataBanks_1_io_rdata_1_nextLineAddr),
    .io_rdata_1_fallThruError (_dataBanks_1_io_rdata_1_fallThruError),
    .io_rdata_2_startAddr     (_dataBanks_1_io_rdata_2_startAddr),
    .io_rdata_3_startAddr     (_dataBanks_1_io_rdata_3_startAddr),
    .io_rdata_3_nextLineAddr  (_dataBanks_1_io_rdata_3_nextLineAddr),
    .io_rdata_4_startAddr     (_dataBanks_1_io_rdata_4_startAddr),
    .io_rdata_4_nextLineAddr  (_dataBanks_1_io_rdata_4_nextLineAddr),
    .io_rdata_5_startAddr     (_dataBanks_1_io_rdata_5_startAddr),
    .io_rdata_6_startAddr     (_dataBanks_1_io_rdata_6_startAddr),
    .io_wen_0                 (wen_dup_last_REG_1 & waddr_dup_0_1[5:4] == 2'h1),
    .io_waddr_0               (waddr_dup_0_1[3:0]),
    .io_wdata_0_startAddr     (r_1_startAddr),
    .io_wdata_0_nextLineAddr  (r_1_nextLineAddr),
    .io_wdata_0_fallThruError (r_1_fallThruError)
  );
  DataModule_FtqPC_16entry dataBanks_2 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_2_0[3:0]),
    .io_raddr_1               (raddr_dup_2_1[3:0]),
    .io_raddr_2               (raddr_dup_2_2[3:0]),
    .io_raddr_3               (raddr_dup_2_3[3:0]),
    .io_raddr_4               (raddr_dup_2_4[3:0]),
    .io_raddr_5               (raddr_dup_2_5[3:0]),
    .io_raddr_6               (raddr_dup_2_6[3:0]),
    .io_rdata_0_startAddr     (_dataBanks_2_io_rdata_0_startAddr),
    .io_rdata_0_nextLineAddr  (_dataBanks_2_io_rdata_0_nextLineAddr),
    .io_rdata_0_fallThruError (_dataBanks_2_io_rdata_0_fallThruError),
    .io_rdata_1_startAddr     (_dataBanks_2_io_rdata_1_startAddr),
    .io_rdata_1_nextLineAddr  (_dataBanks_2_io_rdata_1_nextLineAddr),
    .io_rdata_1_fallThruError (_dataBanks_2_io_rdata_1_fallThruError),
    .io_rdata_2_startAddr     (_dataBanks_2_io_rdata_2_startAddr),
    .io_rdata_3_startAddr     (_dataBanks_2_io_rdata_3_startAddr),
    .io_rdata_3_nextLineAddr  (_dataBanks_2_io_rdata_3_nextLineAddr),
    .io_rdata_4_startAddr     (_dataBanks_2_io_rdata_4_startAddr),
    .io_rdata_4_nextLineAddr  (_dataBanks_2_io_rdata_4_nextLineAddr),
    .io_rdata_5_startAddr     (_dataBanks_2_io_rdata_5_startAddr),
    .io_rdata_6_startAddr     (_dataBanks_2_io_rdata_6_startAddr),
    .io_wen_0                 (wen_dup_last_REG_2 & waddr_dup_0_2[5:4] == 2'h2),
    .io_waddr_0               (waddr_dup_0_2[3:0]),
    .io_wdata_0_startAddr     (r_2_startAddr),
    .io_wdata_0_nextLineAddr  (r_2_nextLineAddr),
    .io_wdata_0_fallThruError (r_2_fallThruError)
  );
  DataModule_FtqPC_16entry dataBanks_3 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_3_0[3:0]),
    .io_raddr_1               (raddr_dup_3_1[3:0]),
    .io_raddr_2               (raddr_dup_3_2[3:0]),
    .io_raddr_3               (raddr_dup_3_3[3:0]),
    .io_raddr_4               (raddr_dup_3_4[3:0]),
    .io_raddr_5               (raddr_dup_3_5[3:0]),
    .io_raddr_6               (raddr_dup_3_6[3:0]),
    .io_rdata_0_startAddr     (_dataBanks_3_io_rdata_0_startAddr),
    .io_rdata_0_nextLineAddr  (_dataBanks_3_io_rdata_0_nextLineAddr),
    .io_rdata_0_fallThruError (_dataBanks_3_io_rdata_0_fallThruError),
    .io_rdata_1_startAddr     (_dataBanks_3_io_rdata_1_startAddr),
    .io_rdata_1_nextLineAddr  (_dataBanks_3_io_rdata_1_nextLineAddr),
    .io_rdata_1_fallThruError (_dataBanks_3_io_rdata_1_fallThruError),
    .io_rdata_2_startAddr     (_dataBanks_3_io_rdata_2_startAddr),
    .io_rdata_3_startAddr     (_dataBanks_3_io_rdata_3_startAddr),
    .io_rdata_3_nextLineAddr  (_dataBanks_3_io_rdata_3_nextLineAddr),
    .io_rdata_4_startAddr     (_dataBanks_3_io_rdata_4_startAddr),
    .io_rdata_4_nextLineAddr  (_dataBanks_3_io_rdata_4_nextLineAddr),
    .io_rdata_5_startAddr     (_dataBanks_3_io_rdata_5_startAddr),
    .io_rdata_6_startAddr     (_dataBanks_3_io_rdata_6_startAddr),
    .io_wen_0                 (wen_dup_last_REG_3 & (&(waddr_dup_0_3[5:4]))),
    .io_waddr_0               (waddr_dup_0_3[3:0]),
    .io_wdata_0_startAddr     (r_3_startAddr),
    .io_wdata_0_nextLineAddr  (r_3_nextLineAddr),
    .io_wdata_0_fallThruError (r_3_fallThruError)
  );
  assign io_rdata_0_startAddr =
    (_io_rdata_0_T ? _dataBanks_0_io_rdata_0_startAddr : 50'h0)
    | (_io_rdata_0_T_1 ? _dataBanks_1_io_rdata_0_startAddr : 50'h0)
    | (_io_rdata_0_T_2 ? _dataBanks_2_io_rdata_0_startAddr : 50'h0)
    | ((&(raddr_dup_4_0[5:4])) ? _dataBanks_3_io_rdata_0_startAddr : 50'h0);
  assign io_rdata_0_nextLineAddr =
    (_io_rdata_0_T ? _dataBanks_0_io_rdata_0_nextLineAddr : 50'h0)
    | (_io_rdata_0_T_1 ? _dataBanks_1_io_rdata_0_nextLineAddr : 50'h0)
    | (_io_rdata_0_T_2 ? _dataBanks_2_io_rdata_0_nextLineAddr : 50'h0)
    | ((&(raddr_dup_4_0[5:4])) ? _dataBanks_3_io_rdata_0_nextLineAddr : 50'h0);
  assign io_rdata_0_fallThruError =
    _io_rdata_0_T & _dataBanks_0_io_rdata_0_fallThruError | _io_rdata_0_T_1
    & _dataBanks_1_io_rdata_0_fallThruError | _io_rdata_0_T_2
    & _dataBanks_2_io_rdata_0_fallThruError | (&(raddr_dup_4_0[5:4]))
    & _dataBanks_3_io_rdata_0_fallThruError;
  assign io_rdata_1_startAddr =
    (_io_rdata_1_T ? _dataBanks_0_io_rdata_1_startAddr : 50'h0)
    | (_io_rdata_1_T_1 ? _dataBanks_1_io_rdata_1_startAddr : 50'h0)
    | (_io_rdata_1_T_2 ? _dataBanks_2_io_rdata_1_startAddr : 50'h0)
    | ((&(raddr_dup_5_0[5:4])) ? _dataBanks_3_io_rdata_1_startAddr : 50'h0);
  assign io_rdata_1_nextLineAddr =
    (_io_rdata_1_T ? _dataBanks_0_io_rdata_1_nextLineAddr : 50'h0)
    | (_io_rdata_1_T_1 ? _dataBanks_1_io_rdata_1_nextLineAddr : 50'h0)
    | (_io_rdata_1_T_2 ? _dataBanks_2_io_rdata_1_nextLineAddr : 50'h0)
    | ((&(raddr_dup_5_0[5:4])) ? _dataBanks_3_io_rdata_1_nextLineAddr : 50'h0);
  assign io_rdata_1_fallThruError =
    _io_rdata_1_T & _dataBanks_0_io_rdata_1_fallThruError | _io_rdata_1_T_1
    & _dataBanks_1_io_rdata_1_fallThruError | _io_rdata_1_T_2
    & _dataBanks_2_io_rdata_1_fallThruError | (&(raddr_dup_5_0[5:4]))
    & _dataBanks_3_io_rdata_1_fallThruError;
  assign io_rdata_2_startAddr =
    (raddr_dup_6_0[5:4] == 2'h0 ? _dataBanks_0_io_rdata_2_startAddr : 50'h0)
    | (raddr_dup_6_0[5:4] == 2'h1 ? _dataBanks_1_io_rdata_2_startAddr : 50'h0)
    | (raddr_dup_6_0[5:4] == 2'h2 ? _dataBanks_2_io_rdata_2_startAddr : 50'h0)
    | ((&(raddr_dup_6_0[5:4])) ? _dataBanks_3_io_rdata_2_startAddr : 50'h0);
  assign io_rdata_3_startAddr =
    (_io_rdata_3_T ? _dataBanks_0_io_rdata_3_startAddr : 50'h0)
    | (_io_rdata_3_T_1 ? _dataBanks_1_io_rdata_3_startAddr : 50'h0)
    | (_io_rdata_3_T_2 ? _dataBanks_2_io_rdata_3_startAddr : 50'h0)
    | ((&(raddr_dup_7[5:4])) ? _dataBanks_3_io_rdata_3_startAddr : 50'h0);
  assign io_rdata_3_nextLineAddr =
    (_io_rdata_3_T ? _dataBanks_0_io_rdata_3_nextLineAddr : 50'h0)
    | (_io_rdata_3_T_1 ? _dataBanks_1_io_rdata_3_nextLineAddr : 50'h0)
    | (_io_rdata_3_T_2 ? _dataBanks_2_io_rdata_3_nextLineAddr : 50'h0)
    | ((&(raddr_dup_7[5:4])) ? _dataBanks_3_io_rdata_3_nextLineAddr : 50'h0);
  assign io_rdata_4_startAddr =
    (_io_rdata_4_T ? _dataBanks_0_io_rdata_4_startAddr : 50'h0)
    | (_io_rdata_4_T_1 ? _dataBanks_1_io_rdata_4_startAddr : 50'h0)
    | (_io_rdata_4_T_2 ? _dataBanks_2_io_rdata_4_startAddr : 50'h0)
    | ((&(raddr_dup_8[5:4])) ? _dataBanks_3_io_rdata_4_startAddr : 50'h0);
  assign io_rdata_4_nextLineAddr =
    (_io_rdata_4_T ? _dataBanks_0_io_rdata_4_nextLineAddr : 50'h0)
    | (_io_rdata_4_T_1 ? _dataBanks_1_io_rdata_4_nextLineAddr : 50'h0)
    | (_io_rdata_4_T_2 ? _dataBanks_2_io_rdata_4_nextLineAddr : 50'h0)
    | ((&(raddr_dup_8[5:4])) ? _dataBanks_3_io_rdata_4_nextLineAddr : 50'h0);
  assign io_rdata_5_startAddr =
    (raddr_dup_9[5:4] == 2'h0 ? _dataBanks_0_io_rdata_5_startAddr : 50'h0)
    | (raddr_dup_9[5:4] == 2'h1 ? _dataBanks_1_io_rdata_5_startAddr : 50'h0)
    | (raddr_dup_9[5:4] == 2'h2 ? _dataBanks_2_io_rdata_5_startAddr : 50'h0)
    | ((&(raddr_dup_9[5:4])) ? _dataBanks_3_io_rdata_5_startAddr : 50'h0);
  assign io_rdata_6_startAddr =
    (raddr_dup_10[5:4] == 2'h0 ? _dataBanks_0_io_rdata_6_startAddr : 50'h0)
    | (raddr_dup_10[5:4] == 2'h1 ? _dataBanks_1_io_rdata_6_startAddr : 50'h0)
    | (raddr_dup_10[5:4] == 2'h2 ? _dataBanks_2_io_rdata_6_startAddr : 50'h0)
    | ((&(raddr_dup_10[5:4])) ? _dataBanks_3_io_rdata_6_startAddr : 50'h0);
endmodule

