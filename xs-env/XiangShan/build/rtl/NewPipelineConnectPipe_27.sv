// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_27(
  input          clock,
  input          reset,
  output         io_in_ready,
  input          io_in_valid,
  input          io_in_bits_uop_exceptionVec_3,
  input          io_in_bits_uop_exceptionVec_4,
  input          io_in_bits_uop_exceptionVec_5,
  input          io_in_bits_uop_exceptionVec_6,
  input          io_in_bits_uop_exceptionVec_7,
  input          io_in_bits_uop_exceptionVec_13,
  input          io_in_bits_uop_exceptionVec_15,
  input          io_in_bits_uop_exceptionVec_21,
  input          io_in_bits_uop_exceptionVec_23,
  input  [3:0]   io_in_bits_uop_trigger,
  input  [8:0]   io_in_bits_uop_fuOpType,
  input          io_in_bits_uop_vecWen,
  input          io_in_bits_uop_v0Wen,
  input          io_in_bits_uop_vlWen,
  input          io_in_bits_uop_flushPipe,
  input          io_in_bits_uop_vpu_vma,
  input          io_in_bits_uop_vpu_vta,
  input  [1:0]   io_in_bits_uop_vpu_vsew,
  input  [2:0]   io_in_bits_uop_vpu_vlmul,
  input          io_in_bits_uop_vpu_vm,
  input  [7:0]   io_in_bits_uop_vpu_vstart,
  input  [6:0]   io_in_bits_uop_vpu_vuopIdx,
  input  [127:0] io_in_bits_uop_vpu_vmask,
  input  [7:0]   io_in_bits_uop_vpu_vl,
  input  [2:0]   io_in_bits_uop_vpu_nf,
  input  [1:0]   io_in_bits_uop_vpu_veew,
  input  [7:0]   io_in_bits_uop_pdest,
  input          io_in_bits_uop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_robIdx_value,
  input          io_in_bits_uop_replayInst,
  input  [127:0] io_in_bits_data,
  input  [2:0]   io_in_bits_vdIdxInField,
  input          io_out_ready,
  output         io_out_valid,
  output         io_out_bits_uop_exceptionVec_3,
  output         io_out_bits_uop_exceptionVec_4,
  output         io_out_bits_uop_exceptionVec_5,
  output         io_out_bits_uop_exceptionVec_6,
  output         io_out_bits_uop_exceptionVec_7,
  output         io_out_bits_uop_exceptionVec_13,
  output         io_out_bits_uop_exceptionVec_15,
  output         io_out_bits_uop_exceptionVec_21,
  output         io_out_bits_uop_exceptionVec_23,
  output [3:0]   io_out_bits_uop_trigger,
  output [8:0]   io_out_bits_uop_fuOpType,
  output         io_out_bits_uop_vecWen,
  output         io_out_bits_uop_v0Wen,
  output         io_out_bits_uop_vlWen,
  output         io_out_bits_uop_flushPipe,
  output         io_out_bits_uop_vpu_vma,
  output         io_out_bits_uop_vpu_vta,
  output [1:0]   io_out_bits_uop_vpu_vsew,
  output [2:0]   io_out_bits_uop_vpu_vlmul,
  output         io_out_bits_uop_vpu_vm,
  output [7:0]   io_out_bits_uop_vpu_vstart,
  output [6:0]   io_out_bits_uop_vpu_vuopIdx,
  output [127:0] io_out_bits_uop_vpu_vmask,
  output [7:0]   io_out_bits_uop_vpu_vl,
  output [2:0]   io_out_bits_uop_vpu_nf,
  output [1:0]   io_out_bits_uop_vpu_veew,
  output [7:0]   io_out_bits_uop_pdest,
  output         io_out_bits_uop_robIdx_flag,
  output [7:0]   io_out_bits_uop_robIdx_value,
  output         io_out_bits_uop_replayInst,
  output [127:0] io_out_bits_data,
  output [2:0]   io_out_bits_vdIdxInField,
  input          io_rightOutFire,
  input          io_isFlush
);

  reg          valid;
  wire         io_in_ready_0 = io_out_ready | ~valid;
  wire         _data_T = io_in_ready_0 & io_in_valid;
  reg          data_uop_exceptionVec_3;
  reg          data_uop_exceptionVec_4;
  reg          data_uop_exceptionVec_5;
  reg          data_uop_exceptionVec_6;
  reg          data_uop_exceptionVec_7;
  reg          data_uop_exceptionVec_13;
  reg          data_uop_exceptionVec_15;
  reg          data_uop_exceptionVec_21;
  reg          data_uop_exceptionVec_23;
  reg  [3:0]   data_uop_trigger;
  reg  [8:0]   data_uop_fuOpType;
  reg          data_uop_vecWen;
  reg          data_uop_v0Wen;
  reg          data_uop_vlWen;
  reg          data_uop_flushPipe;
  reg          data_uop_vpu_vma;
  reg          data_uop_vpu_vta;
  reg  [1:0]   data_uop_vpu_vsew;
  reg  [2:0]   data_uop_vpu_vlmul;
  reg          data_uop_vpu_vm;
  reg  [7:0]   data_uop_vpu_vstart;
  reg  [6:0]   data_uop_vpu_vuopIdx;
  reg  [127:0] data_uop_vpu_vmask;
  reg  [7:0]   data_uop_vpu_vl;
  reg  [2:0]   data_uop_vpu_nf;
  reg  [1:0]   data_uop_vpu_veew;
  reg  [7:0]   data_uop_pdest;
  reg          data_uop_robIdx_flag;
  reg  [7:0]   data_uop_robIdx_value;
  reg          data_uop_replayInst;
  reg  [127:0] data_data;
  reg  [2:0]   data_vdIdxInField;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= ~io_isFlush & (_data_T | ~io_rightOutFire & valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_uop_exceptionVec_3 <= io_in_bits_uop_exceptionVec_3;
      data_uop_exceptionVec_4 <= io_in_bits_uop_exceptionVec_4;
      data_uop_exceptionVec_5 <= io_in_bits_uop_exceptionVec_5;
      data_uop_exceptionVec_6 <= io_in_bits_uop_exceptionVec_6;
      data_uop_exceptionVec_7 <= io_in_bits_uop_exceptionVec_7;
      data_uop_exceptionVec_13 <= io_in_bits_uop_exceptionVec_13;
      data_uop_exceptionVec_15 <= io_in_bits_uop_exceptionVec_15;
      data_uop_exceptionVec_21 <= io_in_bits_uop_exceptionVec_21;
      data_uop_exceptionVec_23 <= io_in_bits_uop_exceptionVec_23;
      data_uop_trigger <= io_in_bits_uop_trigger;
      data_uop_fuOpType <= io_in_bits_uop_fuOpType;
      data_uop_vecWen <= io_in_bits_uop_vecWen;
      data_uop_v0Wen <= io_in_bits_uop_v0Wen;
      data_uop_vlWen <= io_in_bits_uop_vlWen;
      data_uop_flushPipe <= io_in_bits_uop_flushPipe;
      data_uop_vpu_vma <= io_in_bits_uop_vpu_vma;
      data_uop_vpu_vta <= io_in_bits_uop_vpu_vta;
      data_uop_vpu_vsew <= io_in_bits_uop_vpu_vsew;
      data_uop_vpu_vlmul <= io_in_bits_uop_vpu_vlmul;
      data_uop_vpu_vm <= io_in_bits_uop_vpu_vm;
      data_uop_vpu_vstart <= io_in_bits_uop_vpu_vstart;
      data_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      data_uop_vpu_vmask <= io_in_bits_uop_vpu_vmask;
      data_uop_vpu_vl <= io_in_bits_uop_vpu_vl;
      data_uop_vpu_nf <= io_in_bits_uop_vpu_nf;
      data_uop_vpu_veew <= io_in_bits_uop_vpu_veew;
      data_uop_pdest <= io_in_bits_uop_pdest;
      data_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      data_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      data_uop_replayInst <= io_in_bits_uop_replayInst;
      data_data <= io_in_bits_data;
      data_vdIdxInField <= io_in_bits_vdIdxInField;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:46];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h2F; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[6'h0][0];
        data_uop_exceptionVec_3 = _RANDOM[6'h3][0];
        data_uop_exceptionVec_4 = _RANDOM[6'h3][1];
        data_uop_exceptionVec_5 = _RANDOM[6'h3][2];
        data_uop_exceptionVec_6 = _RANDOM[6'h3][3];
        data_uop_exceptionVec_7 = _RANDOM[6'h3][4];
        data_uop_exceptionVec_13 = _RANDOM[6'h3][10];
        data_uop_exceptionVec_15 = _RANDOM[6'h3][12];
        data_uop_exceptionVec_21 = _RANDOM[6'h3][18];
        data_uop_exceptionVec_23 = _RANDOM[6'h3][20];
        data_uop_trigger = _RANDOM[6'h3][26:23];
        data_uop_fuOpType = _RANDOM[6'h6][19:11];
        data_uop_vecWen = _RANDOM[6'h6][22];
        data_uop_v0Wen = _RANDOM[6'h6][23];
        data_uop_vlWen = _RANDOM[6'h6][24];
        data_uop_flushPipe = _RANDOM[6'h6][28];
        data_uop_vpu_vma = _RANDOM[6'h8][13];
        data_uop_vpu_vta = _RANDOM[6'h8][14];
        data_uop_vpu_vsew = _RANDOM[6'h8][16:15];
        data_uop_vpu_vlmul = _RANDOM[6'h8][19:17];
        data_uop_vpu_vm = _RANDOM[6'h8][28];
        data_uop_vpu_vstart = {_RANDOM[6'h8][31:29], _RANDOM[6'h9][4:0]};
        data_uop_vpu_vuopIdx = _RANDOM[6'h9][23:17];
        data_uop_vpu_vmask =
          {_RANDOM[6'h9][31:25],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD][24:0]};
        data_uop_vpu_vl = {_RANDOM[6'hD][31:25], _RANDOM[6'hE][0]};
        data_uop_vpu_nf = _RANDOM[6'hE][3:1];
        data_uop_vpu_veew = _RANDOM[6'hE][5:4];
        data_uop_pdest = {_RANDOM[6'h11][31:25], _RANDOM[6'h12][0]};
        data_uop_robIdx_flag = _RANDOM[6'h12][13];
        data_uop_robIdx_value = _RANDOM[6'h12][21:14];
        data_uop_replayInst = _RANDOM[6'h26][8];
        data_data =
          {_RANDOM[6'h26][31:14],
           _RANDOM[6'h27],
           _RANDOM[6'h28],
           _RANDOM[6'h29],
           _RANDOM[6'h2A][13:0]};
        data_vdIdxInField = _RANDOM[6'h2E][19:17];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_uop_exceptionVec_3 = data_uop_exceptionVec_3;
  assign io_out_bits_uop_exceptionVec_4 = data_uop_exceptionVec_4;
  assign io_out_bits_uop_exceptionVec_5 = data_uop_exceptionVec_5;
  assign io_out_bits_uop_exceptionVec_6 = data_uop_exceptionVec_6;
  assign io_out_bits_uop_exceptionVec_7 = data_uop_exceptionVec_7;
  assign io_out_bits_uop_exceptionVec_13 = data_uop_exceptionVec_13;
  assign io_out_bits_uop_exceptionVec_15 = data_uop_exceptionVec_15;
  assign io_out_bits_uop_exceptionVec_21 = data_uop_exceptionVec_21;
  assign io_out_bits_uop_exceptionVec_23 = data_uop_exceptionVec_23;
  assign io_out_bits_uop_trigger = data_uop_trigger;
  assign io_out_bits_uop_fuOpType = data_uop_fuOpType;
  assign io_out_bits_uop_vecWen = data_uop_vecWen;
  assign io_out_bits_uop_v0Wen = data_uop_v0Wen;
  assign io_out_bits_uop_vlWen = data_uop_vlWen;
  assign io_out_bits_uop_flushPipe = data_uop_flushPipe;
  assign io_out_bits_uop_vpu_vma = data_uop_vpu_vma;
  assign io_out_bits_uop_vpu_vta = data_uop_vpu_vta;
  assign io_out_bits_uop_vpu_vsew = data_uop_vpu_vsew;
  assign io_out_bits_uop_vpu_vlmul = data_uop_vpu_vlmul;
  assign io_out_bits_uop_vpu_vm = data_uop_vpu_vm;
  assign io_out_bits_uop_vpu_vstart = data_uop_vpu_vstart;
  assign io_out_bits_uop_vpu_vuopIdx = data_uop_vpu_vuopIdx;
  assign io_out_bits_uop_vpu_vmask = data_uop_vpu_vmask;
  assign io_out_bits_uop_vpu_vl = data_uop_vpu_vl;
  assign io_out_bits_uop_vpu_nf = data_uop_vpu_nf;
  assign io_out_bits_uop_vpu_veew = data_uop_vpu_veew;
  assign io_out_bits_uop_pdest = data_uop_pdest;
  assign io_out_bits_uop_robIdx_flag = data_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = data_uop_robIdx_value;
  assign io_out_bits_uop_replayInst = data_uop_replayInst;
  assign io_out_bits_data = data_data;
  assign io_out_bits_vdIdxInField = data_vdIdxInField;
endmodule

