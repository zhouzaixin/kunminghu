// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SinkD(
  input          clock,
  input          reset,
  output         io_d_ready,
  input          io_d_valid,
  input  [3:0]   io_d_bits_opcode,
  input  [1:0]   io_d_bits_param,
  input  [2:0]   io_d_bits_size,
  input  [3:0]   io_d_bits_source,
  input  [2:0]   io_d_bits_sink,
  input          io_d_bits_denied,
  input  [255:0] io_d_bits_data,
  input          io_bs_waddr_ready,
  output         io_bs_waddr_valid,
  output [2:0]   io_bs_waddr_bits_way,
  output [10:0]  io_bs_waddr_bits_set,
  output         io_bs_waddr_bits_beat,
  output         io_bs_waddr_bits_noop,
  output [255:0] io_bs_wdata_data,
  output         io_bypass_write_valid,
  output         io_bypass_write_beat,
  output [255:0] io_bypass_write_data_data,
  input          io_bypass_write_ready,
  input  [3:0]   io_bypass_write_id,
  input  [2:0]   io_way,
  input  [10:0]  io_set,
  input          io_inner_grant,
  input          io_save_data_in_bs,
  output         io_resp_valid,
  output [2:0]   io_resp_bits_opcode,
  output [2:0]   io_resp_bits_param,
  output [3:0]   io_resp_bits_source,
  output [2:0]   io_resp_bits_sink,
  output         io_resp_bits_last,
  output         io_resp_bits_denied,
  output [3:0]   io_resp_bits_bufIdx,
  input          io_sourceD_r_hazard_valid,
  input  [2:0]   io_sourceD_r_hazard_bits_way,
  input  [10:0]  io_sourceD_r_hazard_bits_set
);

  wire        io_d_ready_0;
  wire        _io_resp_valid_T_1 = io_d_ready_0 & io_d_valid;
  wire [12:0] _r_beats1_decode_T = 13'h3F << io_d_bits_size;
  wire        r_beats1 = io_d_bits_opcode[0] & ~(_r_beats1_decode_T[5]);
  reg         r_counter;
  wire        _r_counter1_T = 1'(r_counter - 1'h1);
  wire        last = r_counter | ~r_beats1;
  wire        beat = r_beats1 & ~_r_counter1_T;
  reg  [3:0]  source_latch;
  reg         first_resp;
  reg  [10:0] indexed_set;
  reg  [2:0]  indexed_way;
  wire        w_safe =
    ~(first_resp | io_d_bits_source != source_latch)
    & ~(io_sourceD_r_hazard_valid & io_sourceD_r_hazard_bits_set == indexed_set
        & io_sourceD_r_hazard_bits_way == indexed_way);
  wire        bypass_ready = io_inner_grant & io_d_bits_opcode[0] & io_bypass_write_ready;
  assign io_d_ready_0 =
    ~(io_d_bits_opcode[0]) | (io_d_bits_opcode[0] & w_safe | r_counter)
    & io_save_data_in_bs & io_bs_waddr_ready & (bypass_ready | ~io_inner_grant)
    | ~io_save_data_in_bs & bypass_ready | ~io_save_data_in_bs & ~io_inner_grant;
  reg         io_bs_waddr_bits_beat_r;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 1'h0;
      first_resp <= 1'h1;
    end
    else begin
      if (_io_resp_valid_T_1) begin
        if (r_counter)
          r_counter <= _r_counter1_T;
        else
          r_counter <= r_beats1;
      end
      first_resp <= ~io_d_valid & first_resp;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_d_valid) begin
      source_latch <= io_d_bits_source;
      indexed_set <= io_set;
      indexed_way <= io_way;
      io_bs_waddr_bits_beat_r <= 1'(beat + io_bs_waddr_ready);
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        r_counter = _RANDOM[/*Zero width*/ 1'b0][0];
        source_latch = _RANDOM[/*Zero width*/ 1'b0][4:1];
        first_resp = _RANDOM[/*Zero width*/ 1'b0][5];
        indexed_set = _RANDOM[/*Zero width*/ 1'b0][16:6];
        indexed_way = _RANDOM[/*Zero width*/ 1'b0][19:17];
        io_bs_waddr_bits_beat_r = _RANDOM[/*Zero width*/ 1'b0][20];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 1'h0;
        first_resp = 1'h1;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_d_ready = io_d_ready_0;
  assign io_bs_waddr_valid =
    (io_d_valid & io_d_bits_opcode[0] & w_safe | r_counter) & io_save_data_in_bs
    & (bypass_ready | ~io_inner_grant);
  assign io_bs_waddr_bits_way = io_way;
  assign io_bs_waddr_bits_set = io_set;
  assign io_bs_waddr_bits_beat = io_d_valid ? beat : io_bs_waddr_bits_beat_r;
  assign io_bs_waddr_bits_noop = ~io_d_valid;
  assign io_bs_wdata_data = io_d_bits_data;
  assign io_bypass_write_valid =
    io_d_valid & bypass_ready
    & (~io_save_data_in_bs | io_bs_waddr_ready & (w_safe | r_counter));
  assign io_bypass_write_beat = beat;
  assign io_bypass_write_data_data = io_d_bits_data;
  assign io_resp_valid = (~r_counter | last) & _io_resp_valid_T_1;
  assign io_resp_bits_opcode = io_d_bits_opcode[2:0];
  assign io_resp_bits_param = {1'h0, io_d_bits_param};
  assign io_resp_bits_source = io_d_bits_source;
  assign io_resp_bits_sink = io_d_bits_sink;
  assign io_resp_bits_last = last;
  assign io_resp_bits_denied = io_d_bits_denied;
  assign io_resp_bits_bufIdx = io_bypass_write_id;
endmodule

