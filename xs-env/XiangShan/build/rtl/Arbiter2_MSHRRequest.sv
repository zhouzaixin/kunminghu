// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Arbiter2_MSHRRequest(
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [2:0]  io_in_0_bits_channel,
  input  [2:0]  io_in_0_bits_opcode,
  input  [2:0]  io_in_0_bits_param,
  input  [2:0]  io_in_0_bits_size,
  input  [10:0] io_in_0_bits_source,
  input  [10:0] io_in_0_bits_set,
  input  [30:0] io_in_0_bits_tag,
  input  [5:0]  io_in_0_bits_off,
  input  [31:0] io_in_0_bits_mask,
  input  [3:0]  io_in_0_bits_bufIdx,
  input         io_in_0_bits_needHint,
  input         io_in_0_bits_isPrefetch,
  input         io_in_0_bits_isBop,
  input         io_in_0_bits_preferCache,
  input         io_in_0_bits_dirty,
  input         io_in_0_bits_isHit,
  input         io_in_0_bits_fromProbeHelper,
  input         io_in_0_bits_fromCmoHelper,
  input         io_in_0_bits_needProbeAckData,
  input  [3:0]  io_in_0_bits_reqSource,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [2:0]  io_in_1_bits_channel,
  input  [2:0]  io_in_1_bits_opcode,
  input  [2:0]  io_in_1_bits_param,
  input  [2:0]  io_in_1_bits_size,
  input  [10:0] io_in_1_bits_source,
  input  [10:0] io_in_1_bits_set,
  input  [30:0] io_in_1_bits_tag,
  input  [5:0]  io_in_1_bits_off,
  input  [31:0] io_in_1_bits_mask,
  input         io_in_1_bits_isPrefetch,
  input         io_in_1_bits_isBop,
  input         io_in_1_bits_needProbeAckData,
  input  [3:0]  io_in_1_bits_reqSource,
  input         io_out_ready,
  output        io_out_valid,
  output [2:0]  io_out_bits_channel,
  output [2:0]  io_out_bits_opcode,
  output [2:0]  io_out_bits_param,
  output [2:0]  io_out_bits_size,
  output [10:0] io_out_bits_source,
  output [10:0] io_out_bits_set,
  output [30:0] io_out_bits_tag,
  output [5:0]  io_out_bits_off,
  output [31:0] io_out_bits_mask,
  output [3:0]  io_out_bits_bufIdx,
  output        io_out_bits_needHint,
  output        io_out_bits_isPrefetch,
  output        io_out_bits_isBop,
  output        io_out_bits_preferCache,
  output        io_out_bits_dirty,
  output        io_out_bits_isHit,
  output        io_out_bits_fromProbeHelper,
  output        io_out_bits_fromCmoHelper,
  output        io_out_bits_needProbeAckData,
  output [3:0]  io_out_bits_reqSource
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_channel =
    io_in_0_valid ? io_in_0_bits_channel : io_in_1_bits_channel;
  assign io_out_bits_opcode = io_in_0_valid ? io_in_0_bits_opcode : io_in_1_bits_opcode;
  assign io_out_bits_param = io_in_0_valid ? io_in_0_bits_param : io_in_1_bits_param;
  assign io_out_bits_size = io_in_0_valid ? io_in_0_bits_size : io_in_1_bits_size;
  assign io_out_bits_source = io_in_0_valid ? io_in_0_bits_source : io_in_1_bits_source;
  assign io_out_bits_set = io_in_0_valid ? io_in_0_bits_set : io_in_1_bits_set;
  assign io_out_bits_tag = io_in_0_valid ? io_in_0_bits_tag : io_in_1_bits_tag;
  assign io_out_bits_off = io_in_0_valid ? io_in_0_bits_off : io_in_1_bits_off;
  assign io_out_bits_mask = io_in_0_valid ? io_in_0_bits_mask : io_in_1_bits_mask;
  assign io_out_bits_bufIdx = io_in_0_valid ? io_in_0_bits_bufIdx : 4'h0;
  assign io_out_bits_needHint = io_in_0_valid & io_in_0_bits_needHint;
  assign io_out_bits_isPrefetch =
    io_in_0_valid ? io_in_0_bits_isPrefetch : io_in_1_bits_isPrefetch;
  assign io_out_bits_isBop = io_in_0_valid ? io_in_0_bits_isBop : io_in_1_bits_isBop;
  assign io_out_bits_preferCache = ~io_in_0_valid | io_in_0_bits_preferCache;
  assign io_out_bits_dirty = io_in_0_valid & io_in_0_bits_dirty;
  assign io_out_bits_isHit = ~io_in_0_valid | io_in_0_bits_isHit;
  assign io_out_bits_fromProbeHelper = io_in_0_valid & io_in_0_bits_fromProbeHelper;
  assign io_out_bits_fromCmoHelper = io_in_0_valid & io_in_0_bits_fromCmoHelper;
  assign io_out_bits_needProbeAckData =
    io_in_0_valid ? io_in_0_bits_needProbeAckData : io_in_1_bits_needProbeAckData;
  assign io_out_bits_reqSource =
    io_in_0_valid ? io_in_0_bits_reqSource : io_in_1_bits_reqSource;
endmodule

