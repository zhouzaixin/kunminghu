// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Queue40_L2TlbMQBundle(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [37:0] io_enq_bits_req_info_vpn,
  input  [1:0]  io_enq_bits_req_info_s2xlate,
  input  [1:0]  io_enq_bits_req_info_source,
  input         io_enq_bits_isLLptw,
  input         io_deq_ready,
  output        io_deq_valid,
  output [37:0] io_deq_bits_req_info_vpn,
  output [1:0]  io_deq_bits_req_info_s2xlate,
  output [1:0]  io_deq_bits_req_info_source,
  output        io_deq_bits_isHptwReq,
  output        io_deq_bits_isLLptw,
  output [2:0]  io_deq_bits_hptwId,
  input         io_flush
);

  wire [46:0] _ram_ext_R0_data;
  reg  [5:0]  enq_ptr_value;
  reg  [5:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  wire        do_deq = io_deq_ready & ~empty;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      enq_ptr_value <= 6'h0;
      deq_ptr_value <= 6'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (io_flush) begin
        enq_ptr_value <= 6'h0;
        deq_ptr_value <= 6'h0;
      end
      else begin
        if (do_enq) begin
          if (enq_ptr_value == 6'h27)
            enq_ptr_value <= 6'h0;
          else
            enq_ptr_value <= 6'(enq_ptr_value + 6'h1);
        end
        if (do_deq) begin
          if (deq_ptr_value == 6'h27)
            deq_ptr_value <= 6'h0;
          else
            deq_ptr_value <= 6'(deq_ptr_value + 6'h1);
        end
      end
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][5:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][11:6];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][12];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        enq_ptr_value = 6'h0;
        deq_ptr_value = 6'h0;
        maybe_full = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_40x47 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({3'h0,
        io_enq_bits_isLLptw,
        1'h0,
        io_enq_bits_req_info_source,
        io_enq_bits_req_info_s2xlate,
        io_enq_bits_req_info_vpn})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_req_info_vpn = _ram_ext_R0_data[37:0];
  assign io_deq_bits_req_info_s2xlate = _ram_ext_R0_data[39:38];
  assign io_deq_bits_req_info_source = _ram_ext_R0_data[41:40];
  assign io_deq_bits_isHptwReq = _ram_ext_R0_data[42];
  assign io_deq_bits_isLLptw = _ram_ext_R0_data[43];
  assign io_deq_bits_hptwId = _ram_ext_R0_data[46:44];
endmodule

