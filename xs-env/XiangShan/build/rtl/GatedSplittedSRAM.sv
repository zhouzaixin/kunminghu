// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module GatedSplittedSRAM(
  input          clock,
  input          io_r_req_valid,
  input  [9:0]   io_r_req_bits_setIdx,
  output [547:0] io_r_resp_data_0_data,
  input          io_w_req_valid,
  input  [9:0]   io_w_req_bits_setIdx,
  input  [547:0] io_w_req_bits_data_0_data,
  input          io_en
);

  wire         _ClockGate_3_Q;
  wire         _ClockGate_2_Q;
  wire         _ClockGate_1_Q;
  wire         _ClockGate_Q;
  wire [136:0] _array_0_0_3_io_r_resp_data_0;
  wire [136:0] _array_0_0_2_io_r_resp_data_0;
  wire [136:0] _array_0_0_1_io_r_resp_data_0;
  wire [136:0] _array_0_0_0_io_r_resp_data_0;
  SRAMTemplate_123 array_0_0_0 (
    .clock                (_ClockGate_Q),
    .io_r_req_valid       (io_r_req_valid),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx),
    .io_r_resp_data_0     (_array_0_0_0_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0_data[136:0])
  );
  SRAMTemplate_123 array_0_0_1 (
    .clock                (_ClockGate_1_Q),
    .io_r_req_valid       (io_r_req_valid),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx),
    .io_r_resp_data_0     (_array_0_0_1_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0_data[273:137])
  );
  SRAMTemplate_123 array_0_0_2 (
    .clock                (_ClockGate_2_Q),
    .io_r_req_valid       (io_r_req_valid),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx),
    .io_r_resp_data_0     (_array_0_0_2_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0_data[410:274])
  );
  SRAMTemplate_123 array_0_0_3 (
    .clock                (_ClockGate_3_Q),
    .io_r_req_valid       (io_r_req_valid),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx),
    .io_r_resp_data_0     (_array_0_0_3_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0_data[547:411])
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_en),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (io_en),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  ClockGate ClockGate_2 (
    .TE (1'h0),
    .E  (io_en),
    .CK (clock),
    .Q  (_ClockGate_2_Q)
  );
  ClockGate ClockGate_3 (
    .TE (1'h0),
    .E  (io_en),
    .CK (clock),
    .Q  (_ClockGate_3_Q)
  );
  assign io_r_resp_data_0_data =
    {_array_0_0_3_io_r_resp_data_0,
     _array_0_0_2_io_r_resp_data_0,
     _array_0_0_1_io_r_resp_data_0,
     _array_0_0_0_io_r_resp_data_0};
endmodule

