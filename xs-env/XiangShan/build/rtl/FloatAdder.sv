// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FloatAdder(
  input         clock,
  input         io_fire,
  input  [63:0] io_fp_a,
  input  [63:0] io_fp_b,
  input  [2:0]  io_round_mode,
  input  [1:0]  io_fp_format,
  input  [4:0]  io_op_code,
  input         io_fp_aIsFpCanonicalNAN,
  input         io_fp_bIsFpCanonicalNAN,
  output [63:0] io_fp_result,
  output [4:0]  io_fflags
);

  wire [31:0] _F32Adder_io_fp_c;
  wire [4:0]  _F32Adder_io_fflags;
  wire [63:0] _F64Adder_io_fp_c;
  wire [4:0]  _F64Adder_io_fflags;
  reg  [1:0]  fp_format_reg;
  wire        res_is_f16 = fp_format_reg == 2'h1;
  wire        res_is_f32 = fp_format_reg == 2'h2;
  reg         resultNeedBox;
  always @(posedge clock) begin
    if (io_fire) begin
      fp_format_reg <= io_fp_format;
      resultNeedBox <=
        io_op_code == 5'h0 | io_op_code == 5'h1 | io_op_code == 5'h2 | io_op_code == 5'h3
        | io_op_code == 5'h6 | io_op_code == 5'h7 | io_op_code == 5'h8
        | io_op_code == 5'h1E | io_op_code == 5'h13;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        fp_format_reg = _RANDOM[/*Zero width*/ 1'b0][1:0];
        resultNeedBox = _RANDOM[/*Zero width*/ 1'b0][2];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FloatAdderF64Pipeline F64Adder (
    .clock                   (clock),
    .io_fire                 (io_fire),
    .io_fp_a                 (io_fp_a),
    .io_fp_b                 (io_fp_b),
    .io_fp_c                 (_F64Adder_io_fp_c),
    .io_is_sub               (io_op_code[0]),
    .io_round_mode           (io_round_mode),
    .io_fflags               (_F64Adder_io_fflags),
    .io_op_code              (io_op_code),
    .io_fp_aIsFpCanonicalNAN (io_fp_aIsFpCanonicalNAN),
    .io_fp_bIsFpCanonicalNAN (io_fp_bIsFpCanonicalNAN)
  );
  FloatAdderF32F16MixedPipeline F32Adder (
    .clock                   (clock),
    .io_fire                 (io_fire),
    .io_fp_a                 (io_fp_a[31:0]),
    .io_fp_b                 (io_fp_b[31:0]),
    .io_fp_c                 (_F32Adder_io_fp_c),
    .io_is_sub               (io_op_code[0]),
    .io_round_mode           (io_round_mode),
    .io_fflags               (_F32Adder_io_fflags),
    .io_fp_format            (2'(io_fp_format - 2'h1)),
    .io_op_code              (io_op_code),
    .io_fp_aIsFpCanonicalNAN (io_fp_aIsFpCanonicalNAN),
    .io_fp_bIsFpCanonicalNAN (io_fp_bIsFpCanonicalNAN)
  );
  assign io_fp_result =
    (res_is_f16 ? {{48{resultNeedBox}}, _F32Adder_io_fp_c[15:0]} : 64'h0)
    | (res_is_f32 ? {{32{resultNeedBox}}, _F32Adder_io_fp_c} : 64'h0)
    | ((&fp_format_reg) ? _F64Adder_io_fp_c : 64'h0);
  assign io_fflags =
    (res_is_f16 | res_is_f32 ? _F32Adder_io_fflags : 5'h0)
    | ((&fp_format_reg) ? _F64Adder_io_fflags : 5'h0);
endmodule

