// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CaptureChain(
  input         clock,
  input         io_chainIn_shift,
  input         io_chainIn_data,
  input         io_chainIn_capture,
  output        io_chainOut_data,
  input  [3:0]  io_capture_bits_version,
  input  [15:0] io_capture_bits_partNumber,
  input  [10:0] io_capture_bits_mfrId
);

  reg regs_0;
  reg regs_1;
  reg regs_2;
  reg regs_3;
  reg regs_4;
  reg regs_5;
  reg regs_6;
  reg regs_7;
  reg regs_8;
  reg regs_9;
  reg regs_10;
  reg regs_11;
  reg regs_12;
  reg regs_13;
  reg regs_14;
  reg regs_15;
  reg regs_16;
  reg regs_17;
  reg regs_18;
  reg regs_19;
  reg regs_20;
  reg regs_21;
  reg regs_22;
  reg regs_23;
  reg regs_24;
  reg regs_25;
  reg regs_26;
  reg regs_27;
  reg regs_28;
  reg regs_29;
  reg regs_30;
  reg regs_31;
  always @(posedge clock) begin
    regs_0 <= io_chainIn_capture | (io_chainIn_shift ? regs_1 : regs_0);
    if (io_chainIn_capture) begin
      regs_1 <= io_capture_bits_mfrId[0];
      regs_2 <= io_capture_bits_mfrId[1];
      regs_3 <= io_capture_bits_mfrId[2];
      regs_4 <= io_capture_bits_mfrId[3];
      regs_5 <= io_capture_bits_mfrId[4];
      regs_6 <= io_capture_bits_mfrId[5];
      regs_7 <= io_capture_bits_mfrId[6];
      regs_8 <= io_capture_bits_mfrId[7];
      regs_9 <= io_capture_bits_mfrId[8];
      regs_10 <= io_capture_bits_mfrId[9];
      regs_11 <= io_capture_bits_mfrId[10];
      regs_12 <= io_capture_bits_partNumber[0];
      regs_13 <= io_capture_bits_partNumber[1];
      regs_14 <= io_capture_bits_partNumber[2];
      regs_15 <= io_capture_bits_partNumber[3];
      regs_16 <= io_capture_bits_partNumber[4];
      regs_17 <= io_capture_bits_partNumber[5];
      regs_18 <= io_capture_bits_partNumber[6];
      regs_19 <= io_capture_bits_partNumber[7];
      regs_20 <= io_capture_bits_partNumber[8];
      regs_21 <= io_capture_bits_partNumber[9];
      regs_22 <= io_capture_bits_partNumber[10];
      regs_23 <= io_capture_bits_partNumber[11];
      regs_24 <= io_capture_bits_partNumber[12];
      regs_25 <= io_capture_bits_partNumber[13];
      regs_26 <= io_capture_bits_partNumber[14];
      regs_27 <= io_capture_bits_partNumber[15];
      regs_28 <= io_capture_bits_version[0];
      regs_29 <= io_capture_bits_version[1];
      regs_30 <= io_capture_bits_version[2];
      regs_31 <= io_capture_bits_version[3];
    end
    else if (io_chainIn_shift) begin
      regs_1 <= regs_2;
      regs_2 <= regs_3;
      regs_3 <= regs_4;
      regs_4 <= regs_5;
      regs_5 <= regs_6;
      regs_6 <= regs_7;
      regs_7 <= regs_8;
      regs_8 <= regs_9;
      regs_9 <= regs_10;
      regs_10 <= regs_11;
      regs_11 <= regs_12;
      regs_12 <= regs_13;
      regs_13 <= regs_14;
      regs_14 <= regs_15;
      regs_15 <= regs_16;
      regs_16 <= regs_17;
      regs_17 <= regs_18;
      regs_18 <= regs_19;
      regs_19 <= regs_20;
      regs_20 <= regs_21;
      regs_21 <= regs_22;
      regs_22 <= regs_23;
      regs_23 <= regs_24;
      regs_24 <= regs_25;
      regs_25 <= regs_26;
      regs_26 <= regs_27;
      regs_27 <= regs_28;
      regs_28 <= regs_29;
      regs_29 <= regs_30;
      regs_30 <= regs_31;
      regs_31 <= io_chainIn_data;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        regs_0 = _RANDOM[/*Zero width*/ 1'b0][0];
        regs_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        regs_2 = _RANDOM[/*Zero width*/ 1'b0][2];
        regs_3 = _RANDOM[/*Zero width*/ 1'b0][3];
        regs_4 = _RANDOM[/*Zero width*/ 1'b0][4];
        regs_5 = _RANDOM[/*Zero width*/ 1'b0][5];
        regs_6 = _RANDOM[/*Zero width*/ 1'b0][6];
        regs_7 = _RANDOM[/*Zero width*/ 1'b0][7];
        regs_8 = _RANDOM[/*Zero width*/ 1'b0][8];
        regs_9 = _RANDOM[/*Zero width*/ 1'b0][9];
        regs_10 = _RANDOM[/*Zero width*/ 1'b0][10];
        regs_11 = _RANDOM[/*Zero width*/ 1'b0][11];
        regs_12 = _RANDOM[/*Zero width*/ 1'b0][12];
        regs_13 = _RANDOM[/*Zero width*/ 1'b0][13];
        regs_14 = _RANDOM[/*Zero width*/ 1'b0][14];
        regs_15 = _RANDOM[/*Zero width*/ 1'b0][15];
        regs_16 = _RANDOM[/*Zero width*/ 1'b0][16];
        regs_17 = _RANDOM[/*Zero width*/ 1'b0][17];
        regs_18 = _RANDOM[/*Zero width*/ 1'b0][18];
        regs_19 = _RANDOM[/*Zero width*/ 1'b0][19];
        regs_20 = _RANDOM[/*Zero width*/ 1'b0][20];
        regs_21 = _RANDOM[/*Zero width*/ 1'b0][21];
        regs_22 = _RANDOM[/*Zero width*/ 1'b0][22];
        regs_23 = _RANDOM[/*Zero width*/ 1'b0][23];
        regs_24 = _RANDOM[/*Zero width*/ 1'b0][24];
        regs_25 = _RANDOM[/*Zero width*/ 1'b0][25];
        regs_26 = _RANDOM[/*Zero width*/ 1'b0][26];
        regs_27 = _RANDOM[/*Zero width*/ 1'b0][27];
        regs_28 = _RANDOM[/*Zero width*/ 1'b0][28];
        regs_29 = _RANDOM[/*Zero width*/ 1'b0][29];
        regs_30 = _RANDOM[/*Zero width*/ 1'b0][30];
        regs_31 = _RANDOM[/*Zero width*/ 1'b0][31];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_chainOut_data = regs_0;
endmodule

