// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FcsrModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  input         robCommit_fflags_valid,
  input  [4:0]  robCommit_fflags_bits,
  input         wAliasFflags_wen,
  input  [63:0] wAliasFflags_wdata,
  input         wAliasFfm_wen,
  input  [63:0] wAliasFfm_wdata,
  output [4:0]  fflags,
  output [2:0]  frm,
  output [4:0]  fflagsRdata,
  output [2:0]  frmRdata
);

  reg        reg_NX;
  reg        reg_UF;
  reg        reg_OF;
  reg        reg_DZ;
  reg        reg_NV;
  reg  [2:0] reg_FRM;
  wire [4:0] _fflags_output = {reg_NV, reg_DZ, reg_OF, reg_UF, reg_NX};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_NX <= 1'h0;
      reg_UF <= 1'h0;
      reg_OF <= 1'h0;
      reg_DZ <= 1'h0;
      reg_NV <= 1'h0;
      reg_FRM <= 3'h0;
    end
    else begin
      if (robCommit_fflags_valid) begin
        reg_NX <= robCommit_fflags_bits[0] | reg_NX;
        reg_UF <= robCommit_fflags_bits[1] | reg_UF;
        reg_OF <= robCommit_fflags_bits[2] | reg_OF;
        reg_DZ <= robCommit_fflags_bits[3] | reg_DZ;
        reg_NV <= robCommit_fflags_bits[4] | reg_NV;
      end
      else if (w_wen | wAliasFflags_wen) begin
        reg_NX <= wAliasFflags_wen & wAliasFflags_wdata[0] | w_wen & w_wdata[0];
        reg_UF <= wAliasFflags_wen & wAliasFflags_wdata[1] | w_wen & w_wdata[1];
        reg_OF <= wAliasFflags_wen & wAliasFflags_wdata[2] | w_wen & w_wdata[2];
        reg_DZ <= wAliasFflags_wen & wAliasFflags_wdata[3] | w_wen & w_wdata[3];
        reg_NV <= wAliasFflags_wen & wAliasFflags_wdata[4] | w_wen & w_wdata[4];
      end
      if (w_wen | wAliasFfm_wen)
        reg_FRM <=
          (wAliasFfm_wen ? wAliasFfm_wdata[2:0] : 3'h0) | (w_wen ? w_wdata[7:5] : 3'h0);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_NX = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_UF = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_OF = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_DZ = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_NV = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_FRM = _RANDOM[/*Zero width*/ 1'b0][7:5];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_NX = 1'h0;
        reg_UF = 1'h0;
        reg_OF = 1'h0;
        reg_DZ = 1'h0;
        reg_NV = 1'h0;
        reg_FRM = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata = {56'h0, reg_FRM, reg_NV, reg_DZ, reg_OF, reg_UF, reg_NX};
  assign fflags = _fflags_output;
  assign frm = reg_FRM;
  assign fflagsRdata = _fflags_output;
  assign frmRdata = reg_FRM;
endmodule

