// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ExeUnit_10(
  input         clock,
  input         reset,
  input         io_flush_valid,
  input         io_flush_bits_robIdx_flag,
  input  [7:0]  io_flush_bits_robIdx_value,
  input         io_flush_bits_level,
  input         io_in_valid,
  input  [34:0] io_in_bits_fuType,
  input  [8:0]  io_in_bits_fuOpType,
  input  [63:0] io_in_bits_src_0,
  input  [63:0] io_in_bits_src_1,
  input  [63:0] io_in_bits_src_2,
  input         io_in_bits_robIdx_flag,
  input  [7:0]  io_in_bits_robIdx_value,
  input  [7:0]  io_in_bits_pdest,
  input         io_in_bits_rfWen,
  input         io_in_bits_fpWen,
  input         io_in_bits_fpu_wflags,
  input  [1:0]  io_in_bits_fpu_fmt,
  input  [2:0]  io_in_bits_fpu_rm,
  output        io_out_valid,
  output [63:0] io_out_bits_data_0,
  output [63:0] io_out_bits_data_1,
  output [63:0] io_out_bits_data_2,
  output [7:0]  io_out_bits_pdest,
  output        io_out_bits_robIdx_flag,
  output [7:0]  io_out_bits_robIdx_value,
  output        io_out_bits_intWen,
  output        io_out_bits_fpWen,
  output [4:0]  io_out_bits_fflags,
  output        io_out_bits_wflags,
  input  [2:0]  io_frm
);

  wire        _in1ToN_io_out_0_valid;
  wire [8:0]  _in1ToN_io_out_0_bits_fuOpType;
  wire [1:0]  _in1ToN_io_out_0_bits_fpu_fmt;
  wire [2:0]  _in1ToN_io_out_0_bits_fpu_rm;
  wire        _in1ToN_io_out_1_valid;
  wire [8:0]  _in1ToN_io_out_1_bits_fuOpType;
  wire [1:0]  _in1ToN_io_out_1_bits_fpu_fmt;
  wire [2:0]  _in1ToN_io_out_1_bits_fpu_rm;
  wire        _ClockGate_1_Q;
  wire        _ClockGate_Q;
  wire        _Fmac_io_out_valid;
  wire        _Fmac_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]  _Fmac_io_out_bits_ctrl_robIdx_value;
  wire [7:0]  _Fmac_io_out_bits_ctrl_pdest;
  wire        _Fmac_io_out_bits_ctrl_fpWen;
  wire        _Fmac_io_out_bits_ctrl_fpu_wflags;
  wire [63:0] _Fmac_io_out_bits_res_data;
  wire [4:0]  _Fmac_io_out_bits_res_fflags;
  wire        _Falu_io_out_valid;
  wire        _Falu_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]  _Falu_io_out_bits_ctrl_robIdx_value;
  wire [7:0]  _Falu_io_out_bits_ctrl_pdest;
  wire        _Falu_io_out_bits_ctrl_rfWen;
  wire        _Falu_io_out_bits_ctrl_fpWen;
  wire        _Falu_io_out_bits_ctrl_fpu_wflags;
  wire [63:0] _Falu_io_out_bits_res_data;
  wire [4:0]  _Falu_io_out_bits_res_fflags;
  reg         fuVld_en_reg;
  reg         fuVldVec_1;
  wire        fuVld_en = _in1ToN_io_out_0_valid | fuVldVec_1;
  reg         fuVld_en_reg_1;
  reg         fuVldVec_1_1;
  reg         fuVldVec_2;
  reg         fuVldVec_3;
  wire        fuVld_en_1 =
    _in1ToN_io_out_1_valid | fuVldVec_1_1 | fuVldVec_2 | fuVldVec_3;
  reg         inPipe_2_1;
  reg         inPipe_2_2;
  reg         inPipe_2_3;
  reg         inPipe_1_1_robIdx_flag;
  reg  [7:0]  inPipe_1_1_robIdx_value;
  reg  [7:0]  inPipe_1_1_pdest;
  reg         inPipe_1_1_rfWen;
  reg         inPipe_1_1_fpWen;
  reg         inPipe_1_1_fpu_wflags;
  reg         inPipe_1_2_robIdx_flag;
  reg  [7:0]  inPipe_1_2_robIdx_value;
  reg  [7:0]  inPipe_1_2_pdest;
  reg         inPipe_1_2_fpWen;
  reg         inPipe_1_2_fpu_wflags;
  reg         inPipe_1_3_robIdx_flag;
  reg  [7:0]  inPipe_1_3_robIdx_value;
  reg  [7:0]  inPipe_1_3_pdest;
  reg         inPipe_1_3_fpWen;
  reg         inPipe_1_3_fpu_wflags;
  wire [63:0] io_out_bits_data_2_0 =
    (_Falu_io_out_valid ? _Falu_io_out_bits_res_data : 64'h0)
    | (_Fmac_io_out_valid ? _Fmac_io_out_bits_res_data : 64'h0);
  wire [8:0]  _inPipe_flushVec_flushItself_T_14 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fuVld_en_reg <= 1'h0;
      fuVldVec_1 <= 1'h0;
      fuVld_en_reg_1 <= 1'h0;
      fuVldVec_1_1 <= 1'h0;
      fuVldVec_2 <= 1'h0;
      fuVldVec_3 <= 1'h0;
      inPipe_2_1 <= 1'h0;
      inPipe_2_2 <= 1'h0;
      inPipe_2_3 <= 1'h0;
    end
    else begin
      fuVld_en_reg <= fuVld_en;
      fuVldVec_1 <= _in1ToN_io_out_0_valid;
      fuVld_en_reg_1 <= fuVld_en_1;
      fuVldVec_1_1 <= _in1ToN_io_out_1_valid;
      fuVldVec_2 <= fuVldVec_1_1;
      fuVldVec_3 <= fuVldVec_2;
      inPipe_2_1 <=
        io_in_valid
        & ~(io_in_valid & io_flush_valid
            & (io_flush_bits_level
               & {io_in_bits_robIdx_flag,
                  io_in_bits_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | io_in_bits_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ io_in_bits_robIdx_value > io_flush_bits_robIdx_value));
      inPipe_2_2 <=
        inPipe_2_1
        & ~(inPipe_2_1 & io_flush_valid
            & (io_flush_bits_level
               & {inPipe_1_1_robIdx_flag,
                  inPipe_1_1_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | inPipe_1_1_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ inPipe_1_1_robIdx_value > io_flush_bits_robIdx_value));
      inPipe_2_3 <=
        inPipe_2_2
        & ~(inPipe_2_2 & io_flush_valid
            & (io_flush_bits_level
               & {inPipe_1_2_robIdx_flag,
                  inPipe_1_2_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | inPipe_1_2_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ inPipe_1_2_robIdx_value > io_flush_bits_robIdx_value));
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    inPipe_1_1_robIdx_flag <= io_in_bits_robIdx_flag;
    inPipe_1_1_robIdx_value <= io_in_bits_robIdx_value;
    inPipe_1_1_pdest <= io_in_bits_pdest;
    inPipe_1_1_rfWen <= io_in_bits_rfWen;
    inPipe_1_1_fpWen <= io_in_bits_fpWen;
    inPipe_1_1_fpu_wflags <= io_in_bits_fpu_wflags;
    inPipe_1_2_robIdx_flag <= inPipe_1_1_robIdx_flag;
    inPipe_1_2_robIdx_value <= inPipe_1_1_robIdx_value;
    inPipe_1_2_pdest <= inPipe_1_1_pdest;
    inPipe_1_2_fpWen <= inPipe_1_1_fpWen;
    inPipe_1_2_fpu_wflags <= inPipe_1_1_fpu_wflags;
    inPipe_1_3_robIdx_flag <= inPipe_1_2_robIdx_flag;
    inPipe_1_3_robIdx_value <= inPipe_1_2_robIdx_value;
    inPipe_1_3_pdest <= inPipe_1_2_pdest;
    inPipe_1_3_fpWen <= inPipe_1_2_fpWen;
    inPipe_1_3_fpu_wflags <= inPipe_1_2_fpu_wflags;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:69];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [6:0] i = 7'h0; i < 7'h46; i += 7'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fuVld_en_reg = _RANDOM[7'h0][0];
        fuVldVec_1 = _RANDOM[7'h0][2];
        fuVld_en_reg_1 = _RANDOM[7'h0][3];
        fuVldVec_1_1 = _RANDOM[7'h0][5];
        fuVldVec_2 = _RANDOM[7'h0][6];
        fuVldVec_3 = _RANDOM[7'h0][7];
        inPipe_2_1 = _RANDOM[7'h0][9];
        inPipe_2_2 = _RANDOM[7'h0][10];
        inPipe_2_3 = _RANDOM[7'h0][11];
        inPipe_1_1_robIdx_flag = _RANDOM[7'h9][24];
        inPipe_1_1_robIdx_value = {_RANDOM[7'h9][31:25], _RANDOM[7'hA][0]};
        inPipe_1_1_pdest = _RANDOM[7'hA][13:6];
        inPipe_1_1_rfWen = _RANDOM[7'hA][14];
        inPipe_1_1_fpWen = _RANDOM[7'hA][15];
        inPipe_1_1_fpu_wflags = _RANDOM[7'hA][18];
        inPipe_1_2_robIdx_flag = _RANDOM[7'h27][2];
        inPipe_1_2_robIdx_value = _RANDOM[7'h27][10:3];
        inPipe_1_2_pdest = _RANDOM[7'h27][23:16];
        inPipe_1_2_fpWen = _RANDOM[7'h27][25];
        inPipe_1_2_fpu_wflags = _RANDOM[7'h27][28];
        inPipe_1_3_robIdx_flag = _RANDOM[7'h44][12];
        inPipe_1_3_robIdx_value = _RANDOM[7'h44][20:13];
        inPipe_1_3_pdest = {_RANDOM[7'h44][31:26], _RANDOM[7'h45][1:0]};
        inPipe_1_3_fpWen = _RANDOM[7'h45][3];
        inPipe_1_3_fpu_wflags = _RANDOM[7'h45][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fuVld_en_reg = 1'h0;
        fuVldVec_1 = 1'h0;
        fuVld_en_reg_1 = 1'h0;
        fuVldVec_1_1 = 1'h0;
        fuVldVec_2 = 1'h0;
        fuVldVec_3 = 1'h0;
        inPipe_2_1 = 1'h0;
        inPipe_2_2 = 1'h0;
        inPipe_2_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FAlu Falu (
    .clock                              (_ClockGate_Q),
    .reset                              (reset),
    .io_in_valid                        (_in1ToN_io_out_0_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_0_bits_fuOpType),
    .io_in_bits_ctrl_fpu_fmt            (_in1ToN_io_out_0_bits_fpu_fmt),
    .io_in_bits_ctrl_fpu_rm             (_in1ToN_io_out_0_bits_fpu_rm),
    .io_in_bits_ctrlPipe_1_robIdx_flag  (inPipe_1_1_robIdx_flag),
    .io_in_bits_ctrlPipe_1_robIdx_value (inPipe_1_1_robIdx_value),
    .io_in_bits_ctrlPipe_1_pdest        (inPipe_1_1_pdest),
    .io_in_bits_ctrlPipe_1_rfWen        (inPipe_1_1_rfWen),
    .io_in_bits_ctrlPipe_1_fpWen        (inPipe_1_1_fpWen),
    .io_in_bits_ctrlPipe_1_fpu_wflags   (inPipe_1_1_fpu_wflags),
    .io_in_bits_validPipe_1             (inPipe_2_1),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (_Falu_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (_Falu_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (_Falu_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest             (_Falu_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_rfWen             (_Falu_io_out_bits_ctrl_rfWen),
    .io_out_bits_ctrl_fpWen             (_Falu_io_out_bits_ctrl_fpWen),
    .io_out_bits_ctrl_fpu_wflags        (_Falu_io_out_bits_ctrl_fpu_wflags),
    .io_out_bits_res_data               (_Falu_io_out_bits_res_data),
    .io_out_bits_res_fflags             (_Falu_io_out_bits_res_fflags),
    .io_frm                             (io_frm)
  );
  FMA Fmac (
    .clock                              (_ClockGate_1_Q),
    .reset                              (reset),
    .io_in_valid                        (_in1ToN_io_out_1_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_1_bits_fuOpType),
    .io_in_bits_ctrl_fpu_fmt            (_in1ToN_io_out_1_bits_fpu_fmt),
    .io_in_bits_ctrl_fpu_rm             (_in1ToN_io_out_1_bits_fpu_rm),
    .io_in_bits_ctrlPipe_3_robIdx_flag  (inPipe_1_3_robIdx_flag),
    .io_in_bits_ctrlPipe_3_robIdx_value (inPipe_1_3_robIdx_value),
    .io_in_bits_ctrlPipe_3_pdest        (inPipe_1_3_pdest),
    .io_in_bits_ctrlPipe_3_fpWen        (inPipe_1_3_fpWen),
    .io_in_bits_ctrlPipe_3_fpu_wflags   (inPipe_1_3_fpu_wflags),
    .io_in_bits_validPipe_3             (inPipe_2_3),
    .io_in_bits_data_src_2              (io_in_bits_src_2),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (_Fmac_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (_Fmac_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (_Fmac_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest             (_Fmac_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_fpWen             (_Fmac_io_out_bits_ctrl_fpWen),
    .io_out_bits_ctrl_fpu_wflags        (_Fmac_io_out_bits_ctrl_fpu_wflags),
    .io_out_bits_res_data               (_Fmac_io_out_bits_res_data),
    .io_out_bits_res_fflags             (_Fmac_io_out_bits_res_fflags),
    .io_frm                             (io_frm)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (fuVld_en | fuVld_en_reg),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (fuVld_en_1 | fuVld_en_reg_1),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  Dispatcher_10 in1ToN (
    .io_in_valid            (io_in_valid),
    .io_in_bits_fuType      (io_in_bits_fuType),
    .io_in_bits_fuOpType    (io_in_bits_fuOpType),
    .io_in_bits_fpu_fmt     (io_in_bits_fpu_fmt),
    .io_in_bits_fpu_rm      (io_in_bits_fpu_rm),
    .io_out_0_valid         (_in1ToN_io_out_0_valid),
    .io_out_0_bits_fuOpType (_in1ToN_io_out_0_bits_fuOpType),
    .io_out_0_bits_fpu_fmt  (_in1ToN_io_out_0_bits_fpu_fmt),
    .io_out_0_bits_fpu_rm   (_in1ToN_io_out_0_bits_fpu_rm),
    .io_out_1_valid         (_in1ToN_io_out_1_valid),
    .io_out_1_bits_fuOpType (_in1ToN_io_out_1_bits_fuOpType),
    .io_out_1_bits_fpu_fmt  (_in1ToN_io_out_1_bits_fpu_fmt),
    .io_out_1_bits_fpu_rm   (_in1ToN_io_out_1_bits_fpu_rm)
  );
  assign io_out_valid = |{_Falu_io_out_valid, _Fmac_io_out_valid};
  assign io_out_bits_data_0 = io_out_bits_data_2_0;
  assign io_out_bits_data_1 = _Falu_io_out_bits_res_data;
  assign io_out_bits_data_2 = io_out_bits_data_2_0;
  assign io_out_bits_pdest =
    (_Falu_io_out_valid ? _Falu_io_out_bits_ctrl_pdest : 8'h0)
    | (_Fmac_io_out_valid ? _Fmac_io_out_bits_ctrl_pdest : 8'h0);
  assign io_out_bits_robIdx_flag =
    _Falu_io_out_valid & _Falu_io_out_bits_ctrl_robIdx_flag | _Fmac_io_out_valid
    & _Fmac_io_out_bits_ctrl_robIdx_flag;
  assign io_out_bits_robIdx_value =
    (_Falu_io_out_valid ? _Falu_io_out_bits_ctrl_robIdx_value : 8'h0)
    | (_Fmac_io_out_valid ? _Fmac_io_out_bits_ctrl_robIdx_value : 8'h0);
  assign io_out_bits_intWen = _Falu_io_out_valid & _Falu_io_out_bits_ctrl_rfWen;
  assign io_out_bits_fpWen =
    _Falu_io_out_valid & _Falu_io_out_bits_ctrl_fpWen | _Fmac_io_out_valid
    & _Fmac_io_out_bits_ctrl_fpWen;
  assign io_out_bits_fflags =
    (_Falu_io_out_valid ? _Falu_io_out_bits_res_fflags : 5'h0)
    | (_Fmac_io_out_valid ? _Fmac_io_out_bits_res_fflags : 5'h0);
  assign io_out_bits_wflags =
    _Falu_io_out_valid & _Falu_io_out_bits_ctrl_fpu_wflags | _Fmac_io_out_valid
    & _Fmac_io_out_bits_ctrl_fpu_wflags;
endmodule

