// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LoadPipe(
  input          clock,
  input          reset,
  output         io_lsu_req_ready,
  input          io_lsu_req_valid,
  input  [4:0]   io_lsu_req_bits_cmd,
  input  [49:0]  io_lsu_req_bits_vaddr,
  input  [49:0]  io_lsu_req_bits_vaddr_dup,
  input  [3:0]   io_lsu_req_bits_instrtype,
  input          io_lsu_req_bits_lqIdx_flag,
  input  [6:0]   io_lsu_req_bits_lqIdx_value,
  output         io_lsu_resp_valid,
  output [127:0] io_lsu_resp_bits_data,
  output [127:0] io_lsu_resp_bits_data_delayed,
  output         io_lsu_resp_bits_miss,
  output [3:0]   io_lsu_resp_bits_mshr_id,
  output [2:0]   io_lsu_resp_bits_meta_prefetch,
  output         io_lsu_resp_bits_handled,
  input          io_lsu_s1_kill,
  input          io_lsu_s2_kill,
  input  [2:0]   io_lsu_pf_source,
  input  [47:0]  io_lsu_s1_paddr_dup_lsu,
  input  [47:0]  io_lsu_s1_paddr_dup_dcache,
  output         io_lsu_s2_bank_conflict,
  output         io_lsu_s2_mq_nack,
  input          io_load128Req,
  output         io_meta_read_valid,
  output [7:0]   io_meta_read_bits_idx,
  input  [1:0]   io_meta_resp_0_coh_state,
  input  [1:0]   io_meta_resp_1_coh_state,
  input  [1:0]   io_meta_resp_2_coh_state,
  input  [1:0]   io_meta_resp_3_coh_state,
  input          io_extra_meta_resp_0_error,
  input  [2:0]   io_extra_meta_resp_0_prefetch,
  input          io_extra_meta_resp_1_error,
  input  [2:0]   io_extra_meta_resp_1_prefetch,
  input          io_extra_meta_resp_2_error,
  input  [2:0]   io_extra_meta_resp_2_prefetch,
  input          io_extra_meta_resp_3_error,
  input  [2:0]   io_extra_meta_resp_3_prefetch,
  input          io_tag_read_ready,
  output         io_tag_read_valid,
  output [7:0]   io_tag_read_bits_idx,
  input  [42:0]  io_tag_resp_0,
  input  [42:0]  io_tag_resp_1,
  input  [42:0]  io_tag_resp_2,
  input  [42:0]  io_tag_resp_3,
  input          io_banked_data_read_ready,
  output         io_banked_data_read_valid,
  output [3:0]   io_banked_data_read_bits_way_en,
  output [47:0]  io_banked_data_read_bits_addr,
  output [47:0]  io_banked_data_read_bits_addr_dup,
  output [7:0]   io_banked_data_read_bits_bankMask,
  output         io_banked_data_read_bits_lqIdx_flag,
  output [6:0]   io_banked_data_read_bits_lqIdx_value,
  output         io_is128Req,
  input  [63:0]  io_banked_data_resp_0_raw_data,
  input  [63:0]  io_banked_data_resp_1_raw_data,
  input          io_read_error_delayed_0,
  input          io_read_error_delayed_1,
  output         io_access_flag_write_valid,
  output [7:0]   io_access_flag_write_bits_idx,
  output [3:0]   io_access_flag_write_bits_way_en,
  output         io_prefetch_flag_write_valid,
  output [7:0]   io_prefetch_flag_write_bits_idx,
  output [3:0]   io_prefetch_flag_write_bits_way_en,
  input          io_bank_conflict_slow,
  input          io_miss_req_ready,
  output         io_miss_req_valid,
  output [3:0]   io_miss_req_bits_source,
  output [2:0]   io_miss_req_bits_pf_source,
  output [4:0]   io_miss_req_bits_cmd,
  output [47:0]  io_miss_req_bits_addr,
  output [49:0]  io_miss_req_bits_vaddr,
  output [1:0]   io_miss_req_bits_req_coh_state,
  output         io_miss_req_bits_cancel,
  input  [3:0]   io_miss_resp_id,
  input          io_miss_resp_handled,
  output         io_wbq_conflict_check_valid,
  output [47:0]  io_wbq_conflict_check_bits,
  input          io_wbq_block_miss_req,
  output         io_replace_access_valid,
  output [7:0]   io_replace_access_bits_set,
  output [1:0]   io_replace_access_bits_way,
  output         io_error_valid,
  output [47:0]  io_error_bits_paddr,
  output         io_error_bits_report_to_beu,
  input          io_pseudo_error_valid,
  input          io_pseudo_error_bits_0_valid,
  input  [63:0]  io_pseudo_error_bits_0_mask,
  output         io_pseudo_tag_error_inj_done,
  output         io_pseudo_data_error_inj_done,
  output         io_prefetch_info_naive_total_prefetch,
  output         io_prefetch_info_naive_late_hit_prefetch,
  output         io_counter_filter_query_req_valid,
  output [7:0]   io_counter_filter_query_req_bits_idx,
  output [1:0]   io_counter_filter_query_req_bits_way,
  input          io_counter_filter_query_resp,
  output         io_counter_filter_enq_valid,
  output [7:0]   io_counter_filter_enq_bits_idx,
  output [1:0]   io_counter_filter_enq_bits_way,
  input          io_mq_enq_cancel,
  output [5:0]   io_perf_0_value,
  output [5:0]   io_perf_1_value,
  output [5:0]   io_perf_2_value,
  output [5:0]   io_perf_3_value,
  output [5:0]   io_perf_4_value
);

  wire             s0_valid = io_tag_read_ready & io_lsu_req_valid;
  reg              s1_valid;
  reg  [4:0]       s1_req_cmd;
  reg  [49:0]      s1_req_vaddr;
  reg  [49:0]      s1_req_vaddr_dup;
  reg  [3:0]       s1_req_instrtype;
  reg              s1_req_lqIdx_flag;
  reg  [6:0]       s1_req_lqIdx_value;
  reg              s1_load128Req;
  wire [5:0]       _GEN =
    s1_load128Req ? {io_lsu_s1_paddr_dup_lsu[5:4], 4'h0} : io_lsu_s1_paddr_dup_lsu[5:0];
  reg  [8:0]       s1_bank_oh;
  wire [35:0]      pseudo_tag_toggle_mask =
    io_pseudo_error_valid & io_pseudo_error_bits_0_valid
      ? io_pseudo_error_bits_0_mask[35:0]
      : 36'h0;
  wire [35:0]      toggleTag = io_tag_resp_0[35:0] ^ pseudo_tag_toggle_mask;
  wire [35:0]      toggleTag_1 = io_tag_resp_1[35:0] ^ pseudo_tag_toggle_mask;
  wire [35:0]      toggleTag_2 = io_tag_resp_2[35:0] ^ pseudo_tag_toggle_mask;
  wire [35:0]      toggleTag_3 = io_tag_resp_3[35:0] ^ pseudo_tag_toggle_mask;
  wire             _s1_tag_match_way_dup_dc_T_3 =
    toggleTag == io_lsu_s1_paddr_dup_dcache[47:12] & (|io_meta_resp_0_coh_state);
  wire             _s1_tag_match_way_dup_dc_T_7 =
    toggleTag_1 == io_lsu_s1_paddr_dup_dcache[47:12] & (|io_meta_resp_1_coh_state);
  wire             _s1_tag_match_way_dup_dc_T_11 =
    toggleTag_2 == io_lsu_s1_paddr_dup_dcache[47:12] & (|io_meta_resp_2_coh_state);
  wire             _s1_tag_match_way_dup_dc_T_15 =
    toggleTag_3 == io_lsu_s1_paddr_dup_dcache[47:12] & (|io_meta_resp_3_coh_state);
  wire [3:0]       s1_tag_match_way_dup_dc =
    {_s1_tag_match_way_dup_dc_T_15,
     _s1_tag_match_way_dup_dc_T_11,
     _s1_tag_match_way_dup_dc_T_7,
     _s1_tag_match_way_dup_dc_T_3};
  reg              s2_valid;
  reg              s2_valid_dup;
  reg  [4:0]       s2_req_cmd;
  reg  [3:0]       s2_req_instrtype;
  reg              s2_load128Req;
  reg  [47:0]      s2_paddr;
  reg  [49:0]      s2_vaddr;
  reg  [3:0]       s2_real_way_en;
  reg  [3:0]       s2_tag_errors;
  reg  [3:0]       s2_tag_match_way;
  reg              s2_tag_match;
  reg              s2_can_send_miss_req;
  reg              s2_can_send_miss_req_dup;
  wire             s2_miss_req_valid_dup = s2_valid_dup & s2_can_send_miss_req_dup;
  reg  [1:0]       s2_hit_coh_state;
  wire             _s2_new_hit_coh_r_c_cat_T_23 = s2_req_cmd == 5'h1;
  wire             _s2_new_hit_coh_r_c_cat_T_24 = s2_req_cmd == 5'h11;
  wire             _s2_new_hit_coh_r_c_cat_T_26 = s2_req_cmd == 5'h7;
  wire             _s2_new_hit_coh_r_c_cat_T_28 = s2_req_cmd == 5'h4;
  wire             _s2_new_hit_coh_r_c_cat_T_29 = s2_req_cmd == 5'h9;
  wire             _s2_new_hit_coh_r_c_cat_T_30 = s2_req_cmd == 5'hA;
  wire             _s2_new_hit_coh_r_c_cat_T_31 = s2_req_cmd == 5'hB;
  wire             _s2_new_hit_coh_r_c_cat_T_35 = s2_req_cmd == 5'h8;
  wire             _s2_new_hit_coh_r_c_cat_T_36 = s2_req_cmd == 5'hC;
  wire             _s2_new_hit_coh_r_c_cat_T_37 = s2_req_cmd == 5'hD;
  wire             _s2_new_hit_coh_r_c_cat_T_38 = s2_req_cmd == 5'hE;
  wire             _s2_new_hit_coh_r_c_cat_T_39 = s2_req_cmd == 5'hF;
  wire             _s2_new_hit_coh_r_c_cat_T_46 = s2_req_cmd == 5'h3;
  wire             _s2_new_hit_coh_r_c_cat_T_48 = s2_req_cmd == 5'h6;
  wire [3:0]       _s2_has_permission_r_T =
    {_s2_new_hit_coh_r_c_cat_T_23 | _s2_new_hit_coh_r_c_cat_T_24
       | _s2_new_hit_coh_r_c_cat_T_26 | _s2_new_hit_coh_r_c_cat_T_28
       | _s2_new_hit_coh_r_c_cat_T_29 | _s2_new_hit_coh_r_c_cat_T_30
       | _s2_new_hit_coh_r_c_cat_T_31 | _s2_new_hit_coh_r_c_cat_T_35
       | _s2_new_hit_coh_r_c_cat_T_36 | _s2_new_hit_coh_r_c_cat_T_37
       | _s2_new_hit_coh_r_c_cat_T_38 | _s2_new_hit_coh_r_c_cat_T_39,
     _s2_new_hit_coh_r_c_cat_T_23 | _s2_new_hit_coh_r_c_cat_T_24
       | _s2_new_hit_coh_r_c_cat_T_26 | _s2_new_hit_coh_r_c_cat_T_28
       | _s2_new_hit_coh_r_c_cat_T_29 | _s2_new_hit_coh_r_c_cat_T_30
       | _s2_new_hit_coh_r_c_cat_T_31 | _s2_new_hit_coh_r_c_cat_T_35
       | _s2_new_hit_coh_r_c_cat_T_36 | _s2_new_hit_coh_r_c_cat_T_37
       | _s2_new_hit_coh_r_c_cat_T_38 | _s2_new_hit_coh_r_c_cat_T_39
       | _s2_new_hit_coh_r_c_cat_T_46 | _s2_new_hit_coh_r_c_cat_T_48,
     s2_hit_coh_state};
  wire [3:0]       _s2_new_hit_coh_r_T =
    {_s2_new_hit_coh_r_c_cat_T_23 | _s2_new_hit_coh_r_c_cat_T_24
       | _s2_new_hit_coh_r_c_cat_T_26 | _s2_new_hit_coh_r_c_cat_T_28
       | _s2_new_hit_coh_r_c_cat_T_29 | _s2_new_hit_coh_r_c_cat_T_30
       | _s2_new_hit_coh_r_c_cat_T_31 | _s2_new_hit_coh_r_c_cat_T_35
       | _s2_new_hit_coh_r_c_cat_T_36 | _s2_new_hit_coh_r_c_cat_T_37
       | _s2_new_hit_coh_r_c_cat_T_38 | _s2_new_hit_coh_r_c_cat_T_39,
     _s2_new_hit_coh_r_c_cat_T_23 | _s2_new_hit_coh_r_c_cat_T_24
       | _s2_new_hit_coh_r_c_cat_T_26 | _s2_new_hit_coh_r_c_cat_T_28
       | _s2_new_hit_coh_r_c_cat_T_29 | _s2_new_hit_coh_r_c_cat_T_30
       | _s2_new_hit_coh_r_c_cat_T_31 | _s2_new_hit_coh_r_c_cat_T_35
       | _s2_new_hit_coh_r_c_cat_T_36 | _s2_new_hit_coh_r_c_cat_T_37
       | _s2_new_hit_coh_r_c_cat_T_38 | _s2_new_hit_coh_r_c_cat_T_39
       | _s2_new_hit_coh_r_c_cat_T_46 | _s2_new_hit_coh_r_c_cat_T_48,
     s2_hit_coh_state};
  wire [1:0]       _s2_new_hit_coh_r_T_27 = {1'h0, _s2_new_hit_coh_r_T == 4'hC};
  wire [15:0][1:0] _GEN_0 =
    {{2'h3},
     {2'h3},
     {2'h2},
     {_s2_new_hit_coh_r_T_27},
     {_s2_new_hit_coh_r_T_27},
     {_s2_new_hit_coh_r_T_27},
     {_s2_new_hit_coh_r_T_27},
     {_s2_new_hit_coh_r_T_27},
     {2'h3},
     {2'h2},
     {2'h2},
     {2'h1},
     {2'h3},
     {2'h2},
     {2'h1},
     {2'h0}};
  wire             s2_nack_no_mshr = s2_miss_req_valid_dup & ~io_miss_req_ready;
  reg              s2_nack_data;
  wire [2:0]       s2_bank_addr = s2_paddr[5:3];
  reg              s2_flag_error;
  reg  [2:0]       s2_hit_prefetch;
  wire             _s2_hit_T_2 =
    s2_tag_match
    & (_s2_has_permission_r_T == 4'h3 | _s2_has_permission_r_T == 4'h2
       | _s2_has_permission_r_T == 4'h1 | _s2_has_permission_r_T == 4'h7
       | _s2_has_permission_r_T == 4'h6 | (&_s2_has_permission_r_T)
       | _s2_has_permission_r_T == 4'hE)
    & s2_hit_coh_state == _GEN_0[_s2_new_hit_coh_r_T];
  wire [127:0]     s2_data128bit =
    {io_banked_data_resp_1_raw_data, io_banked_data_resp_0_raw_data};
  wire             _late_prefetch_hit_T = s2_valid & _s2_hit_T_2;
  reg  [2:0]       io_miss_req_bits_pf_source_REG;
  reg  [2:0]       io_miss_req_bits_pf_source_REG_1;
  wire             real_miss = s2_real_way_en == 4'h0;
  wire             _useful_prefetch_T = s2_req_instrtype == 4'h3;
  reg              s3_valid;
  reg              s3_load128Req;
  reg  [49:0]      s3_vaddr;
  reg  [47:0]      s3_paddr;
  reg              s3_hit;
  reg  [3:0]       s3_tag_match_way;
  reg  [3:0]       s3_req_instrtype;
  reg  [127:0]     s3_banked_data_resp_word;
  wire             s3_data_error =
    (s3_load128Req
       ? (|{io_read_error_delayed_1, io_read_error_delayed_0})
       : io_read_error_delayed_0) & s3_hit;
  reg              s3_tag_error;
  reg              s3_flag_error;
  reg  [2:0]       s3_hit_prefetch;
  wire             io_replace_access_valid_0 = s3_valid & s3_hit;
  reg  [7:0]       io_replace_access_bits_set_REG;
  reg  [7:0]       io_replace_access_bits_set_REG_1;
  reg  [1:0]       io_replace_access_bits_way_REG;
  reg  [1:0]       io_replace_access_bits_way_REG_1;
  wire             _s3_clear_pf_flag_en_T_1 = s3_req_instrtype != 4'h3;
  wire             s3_clear_pf_flag_en =
    io_replace_access_valid_0 & _s3_clear_pf_flag_en_T_1 & (|(s3_hit_prefetch[2:1]));
  wire             io_counter_filter_enq_valid_0 =
    s3_clear_pf_flag_en & ~io_counter_filter_query_resp;
  reg              io_perf_0_value_REG;
  reg              io_perf_0_value_REG_1;
  reg              io_perf_1_value_REG;
  reg              io_perf_1_value_REG_1;
  reg              io_perf_2_value_REG;
  reg              io_perf_2_value_REG_1;
  reg              io_perf_3_value_REG;
  reg              io_perf_3_value_REG_1;
  reg              io_perf_4_value_REG;
  reg              io_perf_4_value_REG_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s2_valid <= 1'h0;
      s2_valid_dup <= 1'h0;
    end
    else begin
      s1_valid <= s0_valid;
      s2_valid <= s1_valid & ~io_lsu_s1_kill;
      if (s1_valid)
        s2_valid_dup <= ~io_lsu_s1_kill;
      else
        s2_valid_dup <= ~s2_valid & s2_valid_dup;
    end
  end // always @(posedge, posedge)
  wire [49:0]      s0_req_vaddr =
    io_load128Req ? {io_lsu_req_bits_vaddr[49:4], 4'h0} : io_lsu_req_bits_vaddr;
  wire [7:0]       s0_bank_oh_64 = 8'h1 << s0_req_vaddr[5:3];
  wire [42:0]      s1_enctag_resp_0 = {io_tag_resp_0[42:36], toggleTag};
  wire [42:0]      s1_enctag_resp_1 = {io_tag_resp_1[42:36], toggleTag_1};
  wire [42:0]      s1_enctag_resp_2 = {io_tag_resp_2[42:36], toggleTag_2};
  wire [42:0]      s1_enctag_resp_3 = {io_tag_resp_3[42:36], toggleTag_3};
  wire             s1_tag_match_dup_dc =
    _s1_tag_match_way_dup_dc_T_3 | _s1_tag_match_way_dup_dc_T_7
    | _s1_tag_match_way_dup_dc_T_11 | _s1_tag_match_way_dup_dc_T_15;
  wire [1:0]       _s1_hit_meta_T_8 =
    (_s1_tag_match_way_dup_dc_T_3 ? io_meta_resp_0_coh_state : 2'h0)
    | (_s1_tag_match_way_dup_dc_T_7 ? io_meta_resp_1_coh_state : 2'h0)
    | (_s1_tag_match_way_dup_dc_T_11 ? io_meta_resp_2_coh_state : 2'h0)
    | (_s1_tag_match_way_dup_dc_T_15 ? io_meta_resp_3_coh_state : 2'h0);
  wire             _s1_new_hit_coh_r_c_cat_T_23 = s1_req_cmd == 5'h1;
  wire             _s1_new_hit_coh_r_c_cat_T_24 = s1_req_cmd == 5'h11;
  wire             _s1_new_hit_coh_r_c_cat_T_26 = s1_req_cmd == 5'h7;
  wire             _s1_new_hit_coh_r_c_cat_T_28 = s1_req_cmd == 5'h4;
  wire             _s1_new_hit_coh_r_c_cat_T_29 = s1_req_cmd == 5'h9;
  wire             _s1_new_hit_coh_r_c_cat_T_30 = s1_req_cmd == 5'hA;
  wire             _s1_new_hit_coh_r_c_cat_T_31 = s1_req_cmd == 5'hB;
  wire             _s1_new_hit_coh_r_c_cat_T_35 = s1_req_cmd == 5'h8;
  wire             _s1_new_hit_coh_r_c_cat_T_36 = s1_req_cmd == 5'hC;
  wire             _s1_new_hit_coh_r_c_cat_T_37 = s1_req_cmd == 5'hD;
  wire             _s1_new_hit_coh_r_c_cat_T_38 = s1_req_cmd == 5'hE;
  wire             _s1_new_hit_coh_r_c_cat_T_39 = s1_req_cmd == 5'hF;
  wire             _s1_new_hit_coh_r_c_cat_T_46 = s1_req_cmd == 5'h3;
  wire             _s1_new_hit_coh_r_c_cat_T_48 = s1_req_cmd == 5'h6;
  wire [3:0]       _s1_has_permission_r_T =
    {_s1_new_hit_coh_r_c_cat_T_23 | _s1_new_hit_coh_r_c_cat_T_24
       | _s1_new_hit_coh_r_c_cat_T_26 | _s1_new_hit_coh_r_c_cat_T_28
       | _s1_new_hit_coh_r_c_cat_T_29 | _s1_new_hit_coh_r_c_cat_T_30
       | _s1_new_hit_coh_r_c_cat_T_31 | _s1_new_hit_coh_r_c_cat_T_35
       | _s1_new_hit_coh_r_c_cat_T_36 | _s1_new_hit_coh_r_c_cat_T_37
       | _s1_new_hit_coh_r_c_cat_T_38 | _s1_new_hit_coh_r_c_cat_T_39,
     _s1_new_hit_coh_r_c_cat_T_23 | _s1_new_hit_coh_r_c_cat_T_24
       | _s1_new_hit_coh_r_c_cat_T_26 | _s1_new_hit_coh_r_c_cat_T_28
       | _s1_new_hit_coh_r_c_cat_T_29 | _s1_new_hit_coh_r_c_cat_T_30
       | _s1_new_hit_coh_r_c_cat_T_31 | _s1_new_hit_coh_r_c_cat_T_35
       | _s1_new_hit_coh_r_c_cat_T_36 | _s1_new_hit_coh_r_c_cat_T_37
       | _s1_new_hit_coh_r_c_cat_T_38 | _s1_new_hit_coh_r_c_cat_T_39
       | _s1_new_hit_coh_r_c_cat_T_46 | _s1_new_hit_coh_r_c_cat_T_48,
     _s1_hit_meta_T_8};
  wire [3:0]       _s1_new_hit_coh_r_T =
    {_s1_new_hit_coh_r_c_cat_T_23 | _s1_new_hit_coh_r_c_cat_T_24
       | _s1_new_hit_coh_r_c_cat_T_26 | _s1_new_hit_coh_r_c_cat_T_28
       | _s1_new_hit_coh_r_c_cat_T_29 | _s1_new_hit_coh_r_c_cat_T_30
       | _s1_new_hit_coh_r_c_cat_T_31 | _s1_new_hit_coh_r_c_cat_T_35
       | _s1_new_hit_coh_r_c_cat_T_36 | _s1_new_hit_coh_r_c_cat_T_37
       | _s1_new_hit_coh_r_c_cat_T_38 | _s1_new_hit_coh_r_c_cat_T_39,
     _s1_new_hit_coh_r_c_cat_T_23 | _s1_new_hit_coh_r_c_cat_T_24
       | _s1_new_hit_coh_r_c_cat_T_26 | _s1_new_hit_coh_r_c_cat_T_28
       | _s1_new_hit_coh_r_c_cat_T_29 | _s1_new_hit_coh_r_c_cat_T_30
       | _s1_new_hit_coh_r_c_cat_T_31 | _s1_new_hit_coh_r_c_cat_T_35
       | _s1_new_hit_coh_r_c_cat_T_36 | _s1_new_hit_coh_r_c_cat_T_37
       | _s1_new_hit_coh_r_c_cat_T_38 | _s1_new_hit_coh_r_c_cat_T_39
       | _s1_new_hit_coh_r_c_cat_T_46 | _s1_new_hit_coh_r_c_cat_T_48,
     _s1_hit_meta_T_8};
  wire [1:0]       _s1_new_hit_coh_r_T_27 = {1'h0, _s1_new_hit_coh_r_T == 4'hC};
  wire [15:0][1:0] _GEN_1 =
    {{2'h3},
     {2'h3},
     {2'h2},
     {_s1_new_hit_coh_r_T_27},
     {_s1_new_hit_coh_r_T_27},
     {_s1_new_hit_coh_r_T_27},
     {_s1_new_hit_coh_r_T_27},
     {_s1_new_hit_coh_r_T_27},
     {2'h3},
     {2'h2},
     {2'h2},
     {2'h1},
     {2'h3},
     {2'h2},
     {2'h1},
     {2'h0}};
  wire             s1_will_send_miss_req =
    s1_valid
    & ~(s1_tag_match_dup_dc
        & (_s1_has_permission_r_T == 4'h3 | _s1_has_permission_r_T == 4'h2
           | _s1_has_permission_r_T == 4'h1 | _s1_has_permission_r_T == 4'h7
           | _s1_has_permission_r_T == 4'h6 | (&_s1_has_permission_r_T)
           | _s1_has_permission_r_T == 4'hE)
        & _s1_hit_meta_T_8 == _GEN_1[_s1_new_hit_coh_r_T]);
  wire             resp_bits_replay =
    real_miss
    & (s2_nack_no_mshr | s2_nack_data | s2_miss_req_valid_dup & io_wbq_block_miss_req
       | io_mq_enq_cancel) | io_bank_conflict_slow;
  always @(posedge clock) begin
    if (s0_valid) begin
      s1_req_cmd <= io_lsu_req_bits_cmd;
      s1_req_vaddr <= s0_req_vaddr;
      s1_req_vaddr_dup <= io_lsu_req_bits_vaddr_dup;
      s1_req_instrtype <= io_lsu_req_bits_instrtype;
      s1_req_lqIdx_flag <= io_lsu_req_bits_lqIdx_flag;
      s1_req_lqIdx_value <= io_lsu_req_bits_lqIdx_value;
      s1_load128Req <= io_load128Req;
      s1_bank_oh <=
        io_load128Req
          ? {&(s0_req_vaddr[5:3]), {s0_bank_oh_64[6:0], 1'h0} | s0_bank_oh_64}
          : {1'h0, s0_bank_oh_64};
    end
    if (s1_valid) begin
      s2_req_cmd <= s1_req_cmd;
      s2_req_instrtype <= s1_req_instrtype;
      s2_load128Req <= s1_load128Req;
      s2_paddr <= io_lsu_s1_paddr_dup_dcache;
      s2_vaddr <= {s1_req_vaddr[49:6], _GEN};
      s2_real_way_en <= s1_tag_match_way_dup_dc;
      s2_tag_errors <=
        {(|io_meta_resp_3_coh_state)
           & (^s1_enctag_resp_3 | ~(^s1_enctag_resp_3)
              & (|{^({io_tag_resp_3[41:36], toggleTag_3} & 42'h20FFC000000),
                   ^({io_tag_resp_3[40:36], toggleTag_3} & 41'h10003FFF800),
                   ^({io_tag_resp_3[39:36], toggleTag_3} & 40'h8E03FC07F0),
                   ^({io_tag_resp_3[38:36], toggleTag_3} & 39'h41E3C3C78E),
                   ^({io_tag_resp_3[37:36], toggleTag_3} & 38'h299B33366D),
                   ^({io_tag_resp_3[36], toggleTag_3} & 37'h1556AAAD5B)})),
         (|io_meta_resp_2_coh_state)
           & (^s1_enctag_resp_2 | ~(^s1_enctag_resp_2)
              & (|{^({io_tag_resp_2[41:36], toggleTag_2} & 42'h20FFC000000),
                   ^({io_tag_resp_2[40:36], toggleTag_2} & 41'h10003FFF800),
                   ^({io_tag_resp_2[39:36], toggleTag_2} & 40'h8E03FC07F0),
                   ^({io_tag_resp_2[38:36], toggleTag_2} & 39'h41E3C3C78E),
                   ^({io_tag_resp_2[37:36], toggleTag_2} & 38'h299B33366D),
                   ^({io_tag_resp_2[36], toggleTag_2} & 37'h1556AAAD5B)})),
         (|io_meta_resp_1_coh_state)
           & (^s1_enctag_resp_1 | ~(^s1_enctag_resp_1)
              & (|{^({io_tag_resp_1[41:36], toggleTag_1} & 42'h20FFC000000),
                   ^({io_tag_resp_1[40:36], toggleTag_1} & 41'h10003FFF800),
                   ^({io_tag_resp_1[39:36], toggleTag_1} & 40'h8E03FC07F0),
                   ^({io_tag_resp_1[38:36], toggleTag_1} & 39'h41E3C3C78E),
                   ^({io_tag_resp_1[37:36], toggleTag_1} & 38'h299B33366D),
                   ^({io_tag_resp_1[36], toggleTag_1} & 37'h1556AAAD5B)})),
         (|io_meta_resp_0_coh_state)
           & (^s1_enctag_resp_0 | ~(^s1_enctag_resp_0)
              & (|{^({io_tag_resp_0[41:36], toggleTag} & 42'h20FFC000000),
                   ^({io_tag_resp_0[40:36], toggleTag} & 41'h10003FFF800),
                   ^({io_tag_resp_0[39:36], toggleTag} & 40'h8E03FC07F0),
                   ^({io_tag_resp_0[38:36], toggleTag} & 39'h41E3C3C78E),
                   ^({io_tag_resp_0[37:36], toggleTag} & 38'h299B33366D),
                   ^({io_tag_resp_0[36], toggleTag} & 37'h1556AAAD5B)}))};
      s2_tag_match_way <= s1_tag_match_way_dup_dc;
      s2_tag_match <= s1_tag_match_dup_dc;
      s2_can_send_miss_req <= s1_will_send_miss_req;
      s2_can_send_miss_req_dup <= s1_will_send_miss_req;
      s2_hit_coh_state <= _s1_hit_meta_T_8;
      s2_nack_data <= ~io_banked_data_read_ready;
      s2_flag_error <=
        s1_tag_match_dup_dc
        & (_s1_tag_match_way_dup_dc_T_3 & io_extra_meta_resp_0_error
           | _s1_tag_match_way_dup_dc_T_7 & io_extra_meta_resp_1_error
           | _s1_tag_match_way_dup_dc_T_11 & io_extra_meta_resp_2_error
           | _s1_tag_match_way_dup_dc_T_15 & io_extra_meta_resp_3_error);
      s2_hit_prefetch <=
        (_s1_tag_match_way_dup_dc_T_3 ? io_extra_meta_resp_0_prefetch : 3'h0)
        | (_s1_tag_match_way_dup_dc_T_7 ? io_extra_meta_resp_1_prefetch : 3'h0)
        | (_s1_tag_match_way_dup_dc_T_11 ? io_extra_meta_resp_2_prefetch : 3'h0)
        | (_s1_tag_match_way_dup_dc_T_15 ? io_extra_meta_resp_3_prefetch : 3'h0);
    end
    io_miss_req_bits_pf_source_REG <= io_lsu_pf_source;
    io_miss_req_bits_pf_source_REG_1 <= io_miss_req_bits_pf_source_REG;
    s3_valid <= s2_valid;
    if (s2_valid) begin
      s3_load128Req <= s2_load128Req;
      s3_vaddr <= s2_vaddr;
      s3_paddr <= s2_paddr;
      s3_hit <= _s2_hit_T_2;
      s3_tag_match_way <= s2_tag_match_way;
      s3_req_instrtype <= s2_req_instrtype;
      s3_banked_data_resp_word <= s2_data128bit;
      s3_tag_error <= |s2_tag_errors;
      s3_flag_error <= s2_flag_error;
      s3_hit_prefetch <= s2_hit_prefetch;
    end
    io_replace_access_bits_set_REG <= s1_req_vaddr[13:6];
    io_replace_access_bits_set_REG_1 <= io_replace_access_bits_set_REG;
    io_replace_access_bits_way_REG <=
      {|{_s1_tag_match_way_dup_dc_T_15, _s1_tag_match_way_dup_dc_T_11},
       _s1_tag_match_way_dup_dc_T_15 | _s1_tag_match_way_dup_dc_T_7};
    io_replace_access_bits_way_REG_1 <= io_replace_access_bits_way_REG;
    io_perf_0_value_REG <= s0_valid;
    io_perf_0_value_REG_1 <= io_perf_0_value_REG;
    io_perf_1_value_REG <= s2_valid & resp_bits_replay;
    io_perf_1_value_REG_1 <= io_perf_1_value_REG;
    io_perf_2_value_REG <= s2_valid & resp_bits_replay & s2_nack_data;
    io_perf_2_value_REG_1 <= io_perf_2_value_REG;
    io_perf_3_value_REG <= s2_valid & resp_bits_replay & s2_nack_no_mshr;
    io_perf_3_value_REG_1 <= io_perf_3_value_REG;
    io_perf_4_value_REG <= s2_valid & resp_bits_replay & io_bank_conflict_slow;
    io_perf_4_value_REG_1 <= io_perf_4_value_REG;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:31];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM[i[4:0]] = `RANDOM;
        end
        s1_valid = _RANDOM[5'h0][2];
        s1_req_cmd = _RANDOM[5'h0][7:3];
        s1_req_vaddr = {_RANDOM[5'h0][31:8], _RANDOM[5'h1][25:0]};
        s1_req_vaddr_dup = {_RANDOM[5'h1][31:26], _RANDOM[5'h2], _RANDOM[5'h3][11:0]};
        s1_req_instrtype = _RANDOM[5'h8][5:2];
        s1_req_lqIdx_flag = _RANDOM[5'h8][12];
        s1_req_lqIdx_value = _RANDOM[5'h8][19:13];
        s1_load128Req = _RANDOM[5'h8][28];
        s1_bank_oh = {_RANDOM[5'h8][31:29], _RANDOM[5'h9][5:0]};
        s2_valid = _RANDOM[5'h9][13];
        s2_valid_dup = _RANDOM[5'h9][14];
        s2_req_cmd = _RANDOM[5'h9][19:15];
        s2_req_instrtype = _RANDOM[5'h11][17:14];
        s2_load128Req = _RANDOM[5'h12][8];
        s2_paddr = {_RANDOM[5'h12][31:9], _RANDOM[5'h13][24:0]};
        s2_vaddr = {_RANDOM[5'h13][31:25], _RANDOM[5'h14], _RANDOM[5'h15][10:0]};
        s2_real_way_en = {_RANDOM[5'h15][31:30], _RANDOM[5'h16][1:0]};
        s2_tag_errors = _RANDOM[5'h16][12:9];
        s2_tag_match_way = _RANDOM[5'h16][16:13];
        s2_tag_match = _RANDOM[5'h16][17];
        s2_can_send_miss_req = _RANDOM[5'h16][18];
        s2_can_send_miss_req_dup = _RANDOM[5'h16][19];
        s2_hit_coh_state = _RANDOM[5'h16][24:23];
        s2_nack_data = _RANDOM[5'h16][26];
        s2_flag_error = _RANDOM[5'h16][27];
        s2_hit_prefetch = _RANDOM[5'h16][30:28];
        io_miss_req_bits_pf_source_REG = _RANDOM[5'h17][2:0];
        io_miss_req_bits_pf_source_REG_1 = _RANDOM[5'h17][5:3];
        s3_valid = _RANDOM[5'h17][8];
        s3_load128Req = _RANDOM[5'h17][9];
        s3_vaddr = {_RANDOM[5'h17][31:10], _RANDOM[5'h18][27:0]};
        s3_paddr = {_RANDOM[5'h18][31:28], _RANDOM[5'h19], _RANDOM[5'h1A][11:0]};
        s3_hit = _RANDOM[5'h1A][12];
        s3_tag_match_way = _RANDOM[5'h1A][16:13];
        s3_req_instrtype = _RANDOM[5'h1A][20:17];
        s3_banked_data_resp_word =
          {_RANDOM[5'h1A][31:21],
           _RANDOM[5'h1B],
           _RANDOM[5'h1C],
           _RANDOM[5'h1D],
           _RANDOM[5'h1E][20:0]};
        s3_tag_error = _RANDOM[5'h1E][21];
        s3_flag_error = _RANDOM[5'h1E][22];
        s3_hit_prefetch = _RANDOM[5'h1E][25:23];
        io_replace_access_bits_set_REG = {_RANDOM[5'h1E][31:26], _RANDOM[5'h1F][1:0]};
        io_replace_access_bits_set_REG_1 = _RANDOM[5'h1F][9:2];
        io_replace_access_bits_way_REG = _RANDOM[5'h1F][11:10];
        io_replace_access_bits_way_REG_1 = _RANDOM[5'h1F][13:12];
        io_perf_0_value_REG = _RANDOM[5'h1F][14];
        io_perf_0_value_REG_1 = _RANDOM[5'h1F][15];
        io_perf_1_value_REG = _RANDOM[5'h1F][16];
        io_perf_1_value_REG_1 = _RANDOM[5'h1F][17];
        io_perf_2_value_REG = _RANDOM[5'h1F][18];
        io_perf_2_value_REG_1 = _RANDOM[5'h1F][19];
        io_perf_3_value_REG = _RANDOM[5'h1F][20];
        io_perf_3_value_REG_1 = _RANDOM[5'h1F][21];
        io_perf_4_value_REG = _RANDOM[5'h1F][22];
        io_perf_4_value_REG_1 = _RANDOM[5'h1F][23];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s1_valid = 1'h0;
        s2_valid = 1'h0;
        s2_valid_dup = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_lsu_req_ready = io_tag_read_ready;
  assign io_lsu_resp_valid = s2_valid;
  assign io_lsu_resp_bits_data = s2_data128bit;
  assign io_lsu_resp_bits_data_delayed = s3_banked_data_resp_word;
  assign io_lsu_resp_bits_miss = real_miss;
  assign io_lsu_resp_bits_mshr_id = io_miss_resp_id;
  assign io_lsu_resp_bits_meta_prefetch = s2_hit_prefetch;
  assign io_lsu_resp_bits_handled =
    s2_miss_req_valid_dup & io_miss_req_ready & ~io_mq_enq_cancel & ~io_wbq_block_miss_req
    & io_miss_resp_handled;
  assign io_lsu_s2_bank_conflict = io_bank_conflict_slow;
  assign io_lsu_s2_mq_nack =
    real_miss & (s2_nack_no_mshr | io_mq_enq_cancel | io_wbq_block_miss_req);
  assign io_meta_read_valid = s0_valid;
  assign io_meta_read_bits_idx = io_lsu_req_bits_vaddr[13:6];
  assign io_tag_read_valid = s0_valid;
  assign io_tag_read_bits_idx = io_lsu_req_bits_vaddr[13:6];
  assign io_banked_data_read_valid = s1_valid & s1_req_instrtype != 4'h3;
  assign io_banked_data_read_bits_way_en = s1_tag_match_way_dup_dc;
  assign io_banked_data_read_bits_addr = {s1_req_vaddr[47:6], _GEN};
  assign io_banked_data_read_bits_addr_dup =
    {s1_req_vaddr_dup[47:6],
     s1_load128Req
       ? {io_lsu_s1_paddr_dup_dcache[5:4], 4'h0}
       : io_lsu_s1_paddr_dup_dcache[5:0]};
  assign io_banked_data_read_bits_bankMask = s1_bank_oh[7:0];
  assign io_banked_data_read_bits_lqIdx_flag = s1_req_lqIdx_flag;
  assign io_banked_data_read_bits_lqIdx_value = s1_req_lqIdx_value;
  assign io_is128Req = s1_load128Req;
  assign io_access_flag_write_valid =
    io_replace_access_valid_0 & _s3_clear_pf_flag_en_T_1;
  assign io_access_flag_write_bits_idx = s3_vaddr[13:6];
  assign io_access_flag_write_bits_way_en = s3_tag_match_way;
  assign io_prefetch_flag_write_valid = io_counter_filter_enq_valid_0;
  assign io_prefetch_flag_write_bits_idx = s3_vaddr[13:6];
  assign io_prefetch_flag_write_bits_way_en = s3_tag_match_way;
  assign io_miss_req_valid = s2_valid & s2_can_send_miss_req;
  assign io_miss_req_bits_source = s2_req_instrtype;
  assign io_miss_req_bits_pf_source = io_miss_req_bits_pf_source_REG_1;
  assign io_miss_req_bits_cmd = s2_req_cmd;
  assign io_miss_req_bits_addr = {s2_paddr[47:6], 6'h0};
  assign io_miss_req_bits_vaddr = s2_vaddr;
  assign io_miss_req_bits_req_coh_state = s2_hit_coh_state;
  assign io_miss_req_bits_cancel = io_lsu_s2_kill | (|s2_tag_errors);
  assign io_wbq_conflict_check_valid = s2_miss_req_valid_dup;
  assign io_wbq_conflict_check_bits = {s2_paddr[47:6], 6'h0};
  assign io_replace_access_valid = io_replace_access_valid_0;
  assign io_replace_access_bits_set = io_replace_access_bits_set_REG_1;
  assign io_replace_access_bits_way = io_replace_access_bits_way_REG_1;
  assign io_error_valid = (s3_tag_error | s3_flag_error | s3_data_error) & s3_valid;
  assign io_error_bits_paddr = s3_paddr;
  assign io_error_bits_report_to_beu = (s3_tag_error | s3_data_error) & s3_valid;
  assign io_pseudo_tag_error_inj_done =
    s1_valid
    & (|{|io_meta_resp_3_coh_state,
         |io_meta_resp_2_coh_state,
         |io_meta_resp_1_coh_state,
         |io_meta_resp_0_coh_state});
  assign io_pseudo_data_error_inj_done = _late_prefetch_hit_T & ~io_bank_conflict_slow;
  assign io_prefetch_info_naive_total_prefetch = s2_valid & _useful_prefetch_T;
  assign io_prefetch_info_naive_late_hit_prefetch =
    _late_prefetch_hit_T & _useful_prefetch_T;
  assign io_counter_filter_query_req_valid = s3_clear_pf_flag_en;
  assign io_counter_filter_query_req_bits_idx = s3_vaddr[13:6];
  assign io_counter_filter_query_req_bits_way =
    {|(s3_tag_match_way[3:2]), s3_tag_match_way[3] | s3_tag_match_way[1]};
  assign io_counter_filter_enq_valid = io_counter_filter_enq_valid_0;
  assign io_counter_filter_enq_bits_idx = s3_vaddr[13:6];
  assign io_counter_filter_enq_bits_way =
    {|(s3_tag_match_way[3:2]), s3_tag_match_way[3] | s3_tag_match_way[1]};
  assign io_perf_0_value = {5'h0, io_perf_0_value_REG_1};
  assign io_perf_1_value = {5'h0, io_perf_1_value_REG_1};
  assign io_perf_2_value = {5'h0, io_perf_2_value_REG_1};
  assign io_perf_3_value = {5'h0, io_perf_3_value_REG_1};
  assign io_perf_4_value = {5'h0, io_perf_4_value_REG_1};
endmodule

