// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MieModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_SSIE,
  output        regOut_VSSIE,
  output        regOut_MSIE,
  output        regOut_STIE,
  output        regOut_VSTIE,
  output        regOut_MTIE,
  output        regOut_SEIE,
  output        regOut_VSEIE,
  output        regOut_MEIE,
  output        regOut_SGEIE,
  output        regOut_LCOFIE,
  input         fromHie_VSSIE_valid,
  input         fromHie_VSSIE_bits,
  input         fromHie_VSTIE_valid,
  input         fromHie_VSTIE_bits,
  input         fromHie_VSEIE_valid,
  input         fromHie_VSEIE_bits,
  input         fromHie_SGEIE_valid,
  input         fromHie_SGEIE_bits,
  input         fromSie_SSIE_valid,
  input         fromSie_SSIE_bits,
  input         fromSie_STIE_valid,
  input         fromSie_STIE_bits,
  input         fromSie_SEIE_valid,
  input         fromSie_SEIE_bits,
  input         fromSie_LCOFIE_valid,
  input         fromSie_LCOFIE_bits,
  input         fromVSie_VSSIE_valid,
  input         fromVSie_VSSIE_bits,
  input         fromVSie_VSTIE_valid,
  input         fromVSie_VSTIE_bits,
  input         fromVSie_VSEIE_valid,
  input         fromVSie_VSEIE_bits,
  input         fromVSie_LCOFIE_valid,
  input         fromVSie_LCOFIE_bits
);

  reg reg_SSIE;
  reg reg_VSSIE;
  reg reg_MSIE;
  reg reg_STIE;
  reg reg_VSTIE;
  reg reg_MTIE;
  reg reg_SEIE;
  reg reg_VSEIE;
  reg reg_MEIE;
  reg reg_SGEIE;
  reg reg_LCOFIE;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_SSIE <= 1'h0;
      reg_VSSIE <= 1'h0;
      reg_MSIE <= 1'h0;
      reg_STIE <= 1'h0;
      reg_VSTIE <= 1'h0;
      reg_MTIE <= 1'h0;
      reg_SEIE <= 1'h0;
      reg_VSEIE <= 1'h0;
      reg_MEIE <= 1'h0;
      reg_SGEIE <= 1'h0;
      reg_LCOFIE <= 1'h0;
    end
    else begin
      if (fromSie_SSIE_valid)
        reg_SSIE <= fromSie_SSIE_bits;
      else if (w_wen)
        reg_SSIE <= w_wdata[1];
      if (fromHie_VSSIE_valid | fromVSie_VSSIE_valid)
        reg_VSSIE <=
          fromHie_VSSIE_valid & fromHie_VSSIE_bits | fromVSie_VSSIE_valid
          & fromVSie_VSSIE_bits;
      else if (w_wen)
        reg_VSSIE <= w_wdata[2];
      if (w_wen) begin
        reg_MSIE <= w_wdata[3];
        reg_MTIE <= w_wdata[7];
        reg_MEIE <= w_wdata[11];
      end
      if (fromSie_STIE_valid)
        reg_STIE <= fromSie_STIE_bits;
      else if (w_wen)
        reg_STIE <= w_wdata[5];
      if (fromHie_VSTIE_valid | fromVSie_VSTIE_valid)
        reg_VSTIE <=
          fromHie_VSTIE_valid & fromHie_VSTIE_bits | fromVSie_VSTIE_valid
          & fromVSie_VSTIE_bits;
      else if (w_wen)
        reg_VSTIE <= w_wdata[6];
      if (fromSie_SEIE_valid)
        reg_SEIE <= fromSie_SEIE_bits;
      else if (w_wen)
        reg_SEIE <= w_wdata[9];
      if (fromHie_VSEIE_valid | fromVSie_VSEIE_valid)
        reg_VSEIE <=
          fromHie_VSEIE_valid & fromHie_VSEIE_bits | fromVSie_VSEIE_valid
          & fromVSie_VSEIE_bits;
      else if (w_wen)
        reg_VSEIE <= w_wdata[10];
      if (fromHie_SGEIE_valid)
        reg_SGEIE <= fromHie_SGEIE_bits;
      else if (w_wen)
        reg_SGEIE <= w_wdata[12];
      if (fromSie_LCOFIE_valid | fromVSie_LCOFIE_valid)
        reg_LCOFIE <=
          fromSie_LCOFIE_valid & fromSie_LCOFIE_bits | fromVSie_LCOFIE_valid
          & fromVSie_LCOFIE_bits;
      else if (w_wen)
        reg_LCOFIE <= w_wdata[13];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_SSIE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_VSSIE = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_MSIE = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_STIE = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_VSTIE = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_MTIE = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_SEIE = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_VSEIE = _RANDOM[/*Zero width*/ 1'b0][7];
        reg_MEIE = _RANDOM[/*Zero width*/ 1'b0][8];
        reg_SGEIE = _RANDOM[/*Zero width*/ 1'b0][9];
        reg_LCOFIE = _RANDOM[/*Zero width*/ 1'b0][10];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_SSIE = 1'h0;
        reg_VSSIE = 1'h0;
        reg_MSIE = 1'h0;
        reg_STIE = 1'h0;
        reg_VSTIE = 1'h0;
        reg_MTIE = 1'h0;
        reg_SEIE = 1'h0;
        reg_VSEIE = 1'h0;
        reg_MEIE = 1'h0;
        reg_SGEIE = 1'h0;
        reg_LCOFIE = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {50'h0,
     reg_LCOFIE,
     reg_SGEIE,
     reg_MEIE,
     reg_VSEIE,
     reg_SEIE,
     1'h0,
     reg_MTIE,
     reg_VSTIE,
     reg_STIE,
     1'h0,
     reg_MSIE,
     reg_VSSIE,
     reg_SSIE,
     1'h0};
  assign regOut_SSIE = reg_SSIE;
  assign regOut_VSSIE = reg_VSSIE;
  assign regOut_MSIE = reg_MSIE;
  assign regOut_STIE = reg_STIE;
  assign regOut_VSTIE = reg_VSTIE;
  assign regOut_MTIE = reg_MTIE;
  assign regOut_SEIE = reg_SEIE;
  assign regOut_VSEIE = reg_VSEIE;
  assign regOut_MEIE = reg_MEIE;
  assign regOut_SGEIE = reg_SGEIE;
  assign regOut_LCOFIE = reg_LCOFIE;
endmodule

