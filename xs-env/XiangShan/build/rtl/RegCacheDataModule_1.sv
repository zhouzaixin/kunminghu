// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RegCacheDataModule_1(
  input         clock,
  input         reset,
  input  [3:0]  io_readPorts_0_addr,
  output [63:0] io_readPorts_0_data,
  input  [3:0]  io_readPorts_1_addr,
  output [63:0] io_readPorts_1_data,
  input  [3:0]  io_readPorts_2_addr,
  output [63:0] io_readPorts_2_data,
  input  [3:0]  io_readPorts_3_addr,
  output [63:0] io_readPorts_3_data,
  input  [3:0]  io_readPorts_4_addr,
  output [63:0] io_readPorts_4_data,
  input  [3:0]  io_readPorts_5_addr,
  output [63:0] io_readPorts_5_data,
  input  [3:0]  io_readPorts_6_addr,
  output [63:0] io_readPorts_6_data,
  input  [3:0]  io_readPorts_7_addr,
  output [63:0] io_readPorts_7_data,
  input  [3:0]  io_readPorts_8_addr,
  output [63:0] io_readPorts_8_data,
  input  [3:0]  io_readPorts_9_addr,
  output [63:0] io_readPorts_9_data,
  input  [3:0]  io_readPorts_10_addr,
  output [63:0] io_readPorts_10_data,
  input  [3:0]  io_readPorts_11_addr,
  output [63:0] io_readPorts_11_data,
  input  [3:0]  io_readPorts_12_addr,
  output [63:0] io_readPorts_12_data,
  input  [3:0]  io_readPorts_13_addr,
  output [63:0] io_readPorts_13_data,
  input  [3:0]  io_readPorts_14_addr,
  output [63:0] io_readPorts_14_data,
  input  [3:0]  io_readPorts_15_addr,
  output [63:0] io_readPorts_15_data,
  input  [3:0]  io_readPorts_16_addr,
  output [63:0] io_readPorts_16_data,
  input  [3:0]  io_readPorts_17_addr,
  output [63:0] io_readPorts_17_data,
  input  [3:0]  io_readPorts_18_addr,
  output [63:0] io_readPorts_18_data,
  input  [3:0]  io_readPorts_19_addr,
  output [63:0] io_readPorts_19_data,
  input  [3:0]  io_readPorts_20_addr,
  output [63:0] io_readPorts_20_data,
  input  [3:0]  io_readPorts_21_addr,
  output [63:0] io_readPorts_21_data,
  input  [3:0]  io_readPorts_22_addr,
  output [63:0] io_readPorts_22_data,
  input         io_writePorts_0_wen,
  input  [3:0]  io_writePorts_0_addr,
  input  [63:0] io_writePorts_0_data,
  input         io_writePorts_1_wen,
  input  [3:0]  io_writePorts_1_addr,
  input  [63:0] io_writePorts_1_data,
  input         io_writePorts_2_wen,
  input  [3:0]  io_writePorts_2_addr,
  input  [63:0] io_writePorts_2_data,
  output        io_validInfo_0,
  output        io_validInfo_1,
  output        io_validInfo_2,
  output        io_validInfo_3,
  output        io_validInfo_4,
  output        io_validInfo_5,
  output        io_validInfo_6,
  output        io_validInfo_7,
  output        io_validInfo_8,
  output        io_validInfo_9,
  output        io_validInfo_10,
  output        io_validInfo_11
);

  reg               v_0;
  reg               v_1;
  reg               v_2;
  reg               v_3;
  reg               v_4;
  reg               v_5;
  reg               v_6;
  reg               v_7;
  reg               v_8;
  reg               v_9;
  reg               v_10;
  reg               v_11;
  reg  [63:0]       mem_0;
  reg  [63:0]       mem_1;
  reg  [63:0]       mem_2;
  reg  [63:0]       mem_3;
  reg  [63:0]       mem_4;
  reg  [63:0]       mem_5;
  reg  [63:0]       mem_6;
  reg  [63:0]       mem_7;
  reg  [63:0]       mem_8;
  reg  [63:0]       mem_9;
  reg  [63:0]       mem_10;
  reg  [63:0]       mem_11;
  wire [15:0][63:0] _GEN =
    {{mem_0},
     {mem_0},
     {mem_0},
     {mem_0},
     {mem_11},
     {mem_10},
     {mem_9},
     {mem_8},
     {mem_7},
     {mem_6},
     {mem_5},
     {mem_4},
     {mem_3},
     {mem_2},
     {mem_1},
     {mem_0}};
  wire              wenOH_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h0;
  wire              wenOH_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h0;
  wire              wenOH_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h0;
  wire [2:0]        _GEN_0 = {wenOH_2, wenOH_1, wenOH_0};
  wire              wenOH_1_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h1;
  wire              wenOH_1_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h1;
  wire              wenOH_1_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h1;
  wire [2:0]        _GEN_1 = {wenOH_1_2, wenOH_1_1, wenOH_1_0};
  wire              wenOH_2_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h2;
  wire              wenOH_2_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h2;
  wire              wenOH_2_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h2;
  wire [2:0]        _GEN_2 = {wenOH_2_2, wenOH_2_1, wenOH_2_0};
  wire              wenOH_3_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h3;
  wire              wenOH_3_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h3;
  wire              wenOH_3_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h3;
  wire [2:0]        _GEN_3 = {wenOH_3_2, wenOH_3_1, wenOH_3_0};
  wire              wenOH_4_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h4;
  wire              wenOH_4_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h4;
  wire              wenOH_4_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h4;
  wire [2:0]        _GEN_4 = {wenOH_4_2, wenOH_4_1, wenOH_4_0};
  wire              wenOH_5_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h5;
  wire              wenOH_5_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h5;
  wire              wenOH_5_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h5;
  wire [2:0]        _GEN_5 = {wenOH_5_2, wenOH_5_1, wenOH_5_0};
  wire              wenOH_6_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h6;
  wire              wenOH_6_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h6;
  wire              wenOH_6_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h6;
  wire [2:0]        _GEN_6 = {wenOH_6_2, wenOH_6_1, wenOH_6_0};
  wire              wenOH_7_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h7;
  wire              wenOH_7_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h7;
  wire              wenOH_7_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h7;
  wire [2:0]        _GEN_7 = {wenOH_7_2, wenOH_7_1, wenOH_7_0};
  wire              wenOH_8_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h8;
  wire              wenOH_8_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h8;
  wire              wenOH_8_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h8;
  wire [2:0]        _GEN_8 = {wenOH_8_2, wenOH_8_1, wenOH_8_0};
  wire              wenOH_9_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'h9;
  wire              wenOH_9_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'h9;
  wire              wenOH_9_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'h9;
  wire [2:0]        _GEN_9 = {wenOH_9_2, wenOH_9_1, wenOH_9_0};
  wire              wenOH_10_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'hA;
  wire              wenOH_10_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'hA;
  wire              wenOH_10_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'hA;
  wire [2:0]        _GEN_10 = {wenOH_10_2, wenOH_10_1, wenOH_10_0};
  wire              wenOH_11_0 = io_writePorts_0_wen & io_writePorts_0_addr == 4'hB;
  wire              wenOH_11_1 = io_writePorts_1_wen & io_writePorts_1_addr == 4'hB;
  wire              wenOH_11_2 = io_writePorts_2_wen & io_writePorts_2_addr == 4'hB;
  wire [2:0]        _GEN_11 = {wenOH_11_2, wenOH_11_1, wenOH_11_0};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      v_0 <= 1'h0;
      v_1 <= 1'h0;
      v_2 <= 1'h0;
      v_3 <= 1'h0;
      v_4 <= 1'h0;
      v_5 <= 1'h0;
      v_6 <= 1'h0;
      v_7 <= 1'h0;
      v_8 <= 1'h0;
      v_9 <= 1'h0;
      v_10 <= 1'h0;
      v_11 <= 1'h0;
    end
    else begin
      v_0 <= (|_GEN_0) | v_0;
      v_1 <= (|_GEN_1) | v_1;
      v_2 <= (|_GEN_2) | v_2;
      v_3 <= (|_GEN_3) | v_3;
      v_4 <= (|_GEN_4) | v_4;
      v_5 <= (|_GEN_5) | v_5;
      v_6 <= (|_GEN_6) | v_6;
      v_7 <= (|_GEN_7) | v_7;
      v_8 <= (|_GEN_8) | v_8;
      v_9 <= (|_GEN_9) | v_9;
      v_10 <= (|_GEN_10) | v_10;
      v_11 <= (|_GEN_11) | v_11;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (|_GEN_0)
      mem_0 <=
        (wenOH_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_1)
      mem_1 <=
        (wenOH_1_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_1_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_1_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_2)
      mem_2 <=
        (wenOH_2_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_2_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_2_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_3)
      mem_3 <=
        (wenOH_3_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_3_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_3_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_4)
      mem_4 <=
        (wenOH_4_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_4_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_4_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_5)
      mem_5 <=
        (wenOH_5_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_5_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_5_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_6)
      mem_6 <=
        (wenOH_6_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_6_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_6_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_7)
      mem_7 <=
        (wenOH_7_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_7_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_7_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_8)
      mem_8 <=
        (wenOH_8_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_8_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_8_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_9)
      mem_9 <=
        (wenOH_9_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_9_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_9_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_10)
      mem_10 <=
        (wenOH_10_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_10_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_10_2 ? io_writePorts_2_data : 64'h0);
    if (|_GEN_11)
      mem_11 <=
        (wenOH_11_0 ? io_writePorts_0_data : 64'h0)
        | (wenOH_11_1 ? io_writePorts_1_data : 64'h0)
        | (wenOH_11_2 ? io_writePorts_2_data : 64'h0);
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:24];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h19; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        v_0 = _RANDOM[5'h0][0];
        v_1 = _RANDOM[5'h0][1];
        v_2 = _RANDOM[5'h0][2];
        v_3 = _RANDOM[5'h0][3];
        v_4 = _RANDOM[5'h0][4];
        v_5 = _RANDOM[5'h0][5];
        v_6 = _RANDOM[5'h0][6];
        v_7 = _RANDOM[5'h0][7];
        v_8 = _RANDOM[5'h0][8];
        v_9 = _RANDOM[5'h0][9];
        v_10 = _RANDOM[5'h0][10];
        v_11 = _RANDOM[5'h0][11];
        mem_0 = {_RANDOM[5'h0][31:12], _RANDOM[5'h1], _RANDOM[5'h2][11:0]};
        mem_1 = {_RANDOM[5'h2][31:12], _RANDOM[5'h3], _RANDOM[5'h4][11:0]};
        mem_2 = {_RANDOM[5'h4][31:12], _RANDOM[5'h5], _RANDOM[5'h6][11:0]};
        mem_3 = {_RANDOM[5'h6][31:12], _RANDOM[5'h7], _RANDOM[5'h8][11:0]};
        mem_4 = {_RANDOM[5'h8][31:12], _RANDOM[5'h9], _RANDOM[5'hA][11:0]};
        mem_5 = {_RANDOM[5'hA][31:12], _RANDOM[5'hB], _RANDOM[5'hC][11:0]};
        mem_6 = {_RANDOM[5'hC][31:12], _RANDOM[5'hD], _RANDOM[5'hE][11:0]};
        mem_7 = {_RANDOM[5'hE][31:12], _RANDOM[5'hF], _RANDOM[5'h10][11:0]};
        mem_8 = {_RANDOM[5'h10][31:12], _RANDOM[5'h11], _RANDOM[5'h12][11:0]};
        mem_9 = {_RANDOM[5'h12][31:12], _RANDOM[5'h13], _RANDOM[5'h14][11:0]};
        mem_10 = {_RANDOM[5'h14][31:12], _RANDOM[5'h15], _RANDOM[5'h16][11:0]};
        mem_11 = {_RANDOM[5'h16][31:12], _RANDOM[5'h17], _RANDOM[5'h18][11:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        v_0 = 1'h0;
        v_1 = 1'h0;
        v_2 = 1'h0;
        v_3 = 1'h0;
        v_4 = 1'h0;
        v_5 = 1'h0;
        v_6 = 1'h0;
        v_7 = 1'h0;
        v_8 = 1'h0;
        v_9 = 1'h0;
        v_10 = 1'h0;
        v_11 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_readPorts_0_data = _GEN[io_readPorts_0_addr];
  assign io_readPorts_1_data = _GEN[io_readPorts_1_addr];
  assign io_readPorts_2_data = _GEN[io_readPorts_2_addr];
  assign io_readPorts_3_data = _GEN[io_readPorts_3_addr];
  assign io_readPorts_4_data = _GEN[io_readPorts_4_addr];
  assign io_readPorts_5_data = _GEN[io_readPorts_5_addr];
  assign io_readPorts_6_data = _GEN[io_readPorts_6_addr];
  assign io_readPorts_7_data = _GEN[io_readPorts_7_addr];
  assign io_readPorts_8_data = _GEN[io_readPorts_8_addr];
  assign io_readPorts_9_data = _GEN[io_readPorts_9_addr];
  assign io_readPorts_10_data = _GEN[io_readPorts_10_addr];
  assign io_readPorts_11_data = _GEN[io_readPorts_11_addr];
  assign io_readPorts_12_data = _GEN[io_readPorts_12_addr];
  assign io_readPorts_13_data = _GEN[io_readPorts_13_addr];
  assign io_readPorts_14_data = _GEN[io_readPorts_14_addr];
  assign io_readPorts_15_data = _GEN[io_readPorts_15_addr];
  assign io_readPorts_16_data = _GEN[io_readPorts_16_addr];
  assign io_readPorts_17_data = _GEN[io_readPorts_17_addr];
  assign io_readPorts_18_data = _GEN[io_readPorts_18_addr];
  assign io_readPorts_19_data = _GEN[io_readPorts_19_addr];
  assign io_readPorts_20_data = _GEN[io_readPorts_20_addr];
  assign io_readPorts_21_data = _GEN[io_readPorts_21_addr];
  assign io_readPorts_22_data = _GEN[io_readPorts_22_addr];
  assign io_validInfo_0 = v_0;
  assign io_validInfo_1 = v_1;
  assign io_validInfo_2 = v_2;
  assign io_validInfo_3 = v_3;
  assign io_validInfo_4 = v_4;
  assign io_validInfo_5 = v_5;
  assign io_validInfo_6 = v_6;
  assign io_validInfo_7 = v_7;
  assign io_validInfo_8 = v_8;
  assign io_validInfo_9 = v_9;
  assign io_validInfo_10 = v_10;
  assign io_validInfo_11 = v_11;
endmodule

