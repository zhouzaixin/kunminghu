// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CSA3_2_4017(
  input  [10:0] io_in_0,
  input  [10:0] io_in_1,
  input  [10:0] io_in_2,
  output [10:0] io_out_0,
  output [10:0] io_out_1
);

  wire a_xor_b = io_in_0[0] ^ io_in_1[0];
  wire a_xor_b_1 = io_in_0[1] ^ io_in_1[1];
  wire a_xor_b_2 = io_in_0[2] ^ io_in_1[2];
  wire a_xor_b_3 = io_in_0[3] ^ io_in_1[3];
  wire a_xor_b_4 = io_in_0[4] ^ io_in_1[4];
  wire a_xor_b_5 = io_in_0[5] ^ io_in_1[5];
  wire a_xor_b_6 = io_in_0[6] ^ io_in_1[6];
  wire a_xor_b_7 = io_in_0[7] ^ io_in_1[7];
  wire a_xor_b_8 = io_in_0[8] ^ io_in_1[8];
  wire a_xor_b_9 = io_in_0[9] ^ io_in_1[9];
  wire a_xor_b_10 = io_in_0[10] ^ io_in_1[10];
  assign io_out_0 =
    {a_xor_b_10 ^ io_in_2[10],
     a_xor_b_9 ^ io_in_2[9],
     a_xor_b_8 ^ io_in_2[8],
     a_xor_b_7 ^ io_in_2[7],
     a_xor_b_6 ^ io_in_2[6],
     a_xor_b_5 ^ io_in_2[5],
     a_xor_b_4 ^ io_in_2[4],
     a_xor_b_3 ^ io_in_2[3],
     a_xor_b_2 ^ io_in_2[2],
     a_xor_b_1 ^ io_in_2[1],
     a_xor_b ^ io_in_2[0]};
  assign io_out_1 =
    {io_in_0[10] & io_in_1[10] | a_xor_b_10 & io_in_2[10],
     io_in_0[9] & io_in_1[9] | a_xor_b_9 & io_in_2[9],
     io_in_0[8] & io_in_1[8] | a_xor_b_8 & io_in_2[8],
     io_in_0[7] & io_in_1[7] | a_xor_b_7 & io_in_2[7],
     io_in_0[6] & io_in_1[6] | a_xor_b_6 & io_in_2[6],
     io_in_0[5] & io_in_1[5] | a_xor_b_5 & io_in_2[5],
     io_in_0[4] & io_in_1[4] | a_xor_b_4 & io_in_2[4],
     io_in_0[3] & io_in_1[3] | a_xor_b_3 & io_in_2[3],
     io_in_0[2] & io_in_1[2] | a_xor_b_2 & io_in_2[2],
     io_in_0[1] & io_in_1[1] | a_xor_b_1 & io_in_2[1],
     io_in_0[0] & io_in_1[0] | a_xor_b & io_in_2[0]};
endmodule

