// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DebugTransportModuleJTAG(
  input         io_jtag_clock,
  input         io_jtag_reset,
  input         io_dmi_req_ready,
  output        io_dmi_req_valid,
  output [6:0]  io_dmi_req_bits_addr,
  output [31:0] io_dmi_req_bits_data,
  output [1:0]  io_dmi_req_bits_op,
  output        io_dmi_resp_ready,
  input         io_dmi_resp_valid,
  input  [31:0] io_dmi_resp_bits_data,
  input  [1:0]  io_dmi_resp_bits_resp,
  input         io_jtag_TMS,
  input         io_jtag_TDI,
  output        io_jtag_TDO_data,
  output        io_jtag_TDO_driven,
  input  [10:0] io_jtag_mfr_id,
  input  [15:0] io_jtag_part_number,
  input  [3:0]  io_jtag_version
);

  wire        _tapIO_bypassChain_io_chainOut_data;
  wire [4:0]  _tapIO_controllerInternal_io_output_instruction;
  wire        _tapIO_controllerInternal_io_output_tapIsInTestLogicReset;
  wire        _tapIO_controllerInternal_io_dataChainOut_shift;
  wire        _tapIO_controllerInternal_io_dataChainOut_data;
  wire        _tapIO_controllerInternal_io_dataChainOut_capture;
  wire        _tapIO_controllerInternal_io_dataChainOut_update;
  wire        _tapIO_idcodeChain_io_chainOut_data;
  wire        _dmiAccessChain_io_chainOut_data;
  wire        _dmiAccessChain_io_capture_capture;
  wire        _dmiAccessChain_io_update_valid;
  wire [6:0]  _dmiAccessChain_io_update_bits_addr;
  wire [31:0] _dmiAccessChain_io_update_bits_data;
  wire [1:0]  _dmiAccessChain_io_update_bits_op;
  wire        _dtmInfoChain_io_chainOut_data;
  wire        _dtmInfoChain_io_update_valid;
  wire        _dtmInfoChain_io_update_bits_dmireset;
  reg         busyReg;
  reg         stickyBusyReg;
  reg         stickyNonzeroRespReg;
  reg         downgradeOpReg;
  reg  [6:0]  dmiReqReg_addr;
  reg  [31:0] dmiReqReg_data;
  reg  [1:0]  dmiReqReg_op;
  reg         dmiReqValidReg;
  wire        _busy_T_1 = busyReg & ~io_dmi_resp_valid;
  wire        busy = _busy_T_1 | stickyBusyReg;
  wire        _nonzeroResp_T_1 = io_dmi_resp_valid & (|io_dmi_resp_bits_resp);
  wire        _GEN = busy | ~io_dmi_resp_valid;
  wire        _GEN_0 = downgradeOpReg | _dmiAccessChain_io_update_bits_op == 2'h0;
  wire        io_dmi_resp_ready_0 =
    dmiReqReg_op == 2'h2 ? io_dmi_resp_valid : _dmiAccessChain_io_capture_capture & ~busy;
  wire        tapIO_chainToSelect_0_2 =
    _tapIO_controllerInternal_io_output_instruction == 5'h1;
  wire        tapIO_chainToSelect_1_2 =
    _tapIO_controllerInternal_io_output_instruction == 5'h10;
  wire        tapIO_chainToSelect_2_2 =
    _tapIO_controllerInternal_io_output_instruction == 5'h11;
  wire        _GEN_1 =
    _tapIO_controllerInternal_io_output_tapIsInTestLogicReset
    | _dtmInfoChain_io_update_valid & _dtmInfoChain_io_update_bits_dmireset;
  always @(posedge io_jtag_clock or posedge io_jtag_reset) begin
    if (io_jtag_reset) begin
      busyReg <= 1'h0;
      stickyBusyReg <= 1'h0;
      stickyNonzeroRespReg <= 1'h0;
      downgradeOpReg <= 1'h0;
      dmiReqValidReg <= 1'h0;
    end
    else begin
      busyReg <=
        ~(_tapIO_controllerInternal_io_output_tapIsInTestLogicReset | io_dmi_resp_ready_0
          & io_dmi_resp_valid) & (dmiReqValidReg | busyReg);
      stickyBusyReg <=
        ~_GEN_1 & (_dmiAccessChain_io_capture_capture & _busy_T_1 | stickyBusyReg);
      stickyNonzeroRespReg <=
        ~_GEN_1
        & (_dmiAccessChain_io_capture_capture & _nonzeroResp_T_1 | stickyNonzeroRespReg);
      downgradeOpReg <=
        ~_tapIO_controllerInternal_io_output_tapIsInTestLogicReset
        & (_dmiAccessChain_io_capture_capture
             ? ~busy & (stickyNonzeroRespReg | _nonzeroResp_T_1)
             : ~_dmiAccessChain_io_update_valid & downgradeOpReg);
      dmiReqValidReg <=
        ~(_tapIO_controllerInternal_io_output_tapIsInTestLogicReset | io_dmi_req_ready
          & dmiReqValidReg)
        & (_dmiAccessChain_io_update_valid & ~(stickyBusyReg | _GEN_0) | dmiReqValidReg);
    end
  end // always @(posedge, posedge)
  always @(posedge io_jtag_clock) begin
    if (~_dmiAccessChain_io_update_valid | stickyBusyReg) begin
    end
    else begin
      dmiReqReg_addr <= _GEN_0 ? 7'h0 : _dmiAccessChain_io_update_bits_addr;
      dmiReqReg_data <= _GEN_0 ? 32'h0 : _dmiAccessChain_io_update_bits_data;
      dmiReqReg_op <= _GEN_0 ? 2'h0 : _dmiAccessChain_io_update_bits_op;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        busyReg = _RANDOM[1'h0][0];
        stickyBusyReg = _RANDOM[1'h0][1];
        stickyNonzeroRespReg = _RANDOM[1'h0][2];
        downgradeOpReg = _RANDOM[1'h0][3];
        dmiReqReg_addr = _RANDOM[1'h0][10:4];
        dmiReqReg_data = {_RANDOM[1'h0][31:11], _RANDOM[1'h1][10:0]};
        dmiReqReg_op = _RANDOM[1'h1][12:11];
        dmiReqValidReg = _RANDOM[1'h1][13];
      `endif // RANDOMIZE_REG_INIT
      if (io_jtag_reset) begin
        busyReg = 1'h0;
        stickyBusyReg = 1'h0;
        stickyNonzeroRespReg = 1'h0;
        downgradeOpReg = 1'h0;
        dmiReqValidReg = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  CaptureUpdateChain dtmInfoChain (
    .clock                     (io_jtag_clock),
    .io_chainIn_shift
      (tapIO_chainToSelect_1_2 & _tapIO_controllerInternal_io_dataChainOut_shift),
    .io_chainIn_data
      (tapIO_chainToSelect_1_2 & _tapIO_controllerInternal_io_dataChainOut_data),
    .io_chainIn_capture
      (tapIO_chainToSelect_1_2 & _tapIO_controllerInternal_io_dataChainOut_capture),
    .io_chainIn_update
      (tapIO_chainToSelect_1_2 & _tapIO_controllerInternal_io_dataChainOut_update),
    .io_chainOut_data          (_dtmInfoChain_io_chainOut_data),
    .io_capture_bits_dmiStatus
      ({stickyNonzeroRespReg, stickyNonzeroRespReg | stickyBusyReg}),
    .io_update_valid           (_dtmInfoChain_io_update_valid),
    .io_update_bits_dmireset   (_dtmInfoChain_io_update_bits_dmireset)
  );
  CaptureUpdateChain_1 dmiAccessChain (
    .clock                (io_jtag_clock),
    .io_chainIn_shift
      (tapIO_chainToSelect_2_2 & _tapIO_controllerInternal_io_dataChainOut_shift),
    .io_chainIn_data
      (tapIO_chainToSelect_2_2 & _tapIO_controllerInternal_io_dataChainOut_data),
    .io_chainIn_capture
      (tapIO_chainToSelect_2_2 & _tapIO_controllerInternal_io_dataChainOut_capture),
    .io_chainIn_update
      (tapIO_chainToSelect_2_2 & _tapIO_controllerInternal_io_dataChainOut_update),
    .io_chainOut_data     (_dmiAccessChain_io_chainOut_data),
    .io_capture_bits_addr (_GEN ? 7'h0 : dmiReqReg_addr),
    .io_capture_bits_data (_GEN ? 32'h0 : io_dmi_resp_bits_data),
    .io_capture_bits_resp
      (busy ? 2'h3 : io_dmi_resp_valid ? io_dmi_resp_bits_resp : 2'h0),
    .io_capture_capture   (_dmiAccessChain_io_capture_capture),
    .io_update_valid      (_dmiAccessChain_io_update_valid),
    .io_update_bits_addr  (_dmiAccessChain_io_update_bits_addr),
    .io_update_bits_data  (_dmiAccessChain_io_update_bits_data),
    .io_update_bits_op    (_dmiAccessChain_io_update_bits_op)
  );
  CaptureChain tapIO_idcodeChain (
    .clock                      (io_jtag_clock),
    .io_chainIn_shift
      (tapIO_chainToSelect_0_2 & _tapIO_controllerInternal_io_dataChainOut_shift),
    .io_chainIn_data
      (tapIO_chainToSelect_0_2 & _tapIO_controllerInternal_io_dataChainOut_data),
    .io_chainIn_capture
      (tapIO_chainToSelect_0_2 & _tapIO_controllerInternal_io_dataChainOut_capture),
    .io_chainOut_data           (_tapIO_idcodeChain_io_chainOut_data),
    .io_capture_bits_version    (io_jtag_version),
    .io_capture_bits_partNumber (io_jtag_part_number),
    .io_capture_bits_mfrId      (io_jtag_mfr_id)
  );
  JtagTapController tapIO_controllerInternal (
    .clock                           (io_jtag_clock),
    .io_jtag_TMS                     (io_jtag_TMS),
    .io_jtag_TDI                     (io_jtag_TDI),
    .io_jtag_TDO_data                (io_jtag_TDO_data),
    .io_jtag_TDO_driven              (io_jtag_TDO_driven),
    .io_control_jtag_reset           (io_jtag_reset),
    .io_output_instruction           (_tapIO_controllerInternal_io_output_instruction),
    .io_output_tapIsInTestLogicReset
      (_tapIO_controllerInternal_io_output_tapIsInTestLogicReset),
    .io_dataChainOut_shift           (_tapIO_controllerInternal_io_dataChainOut_shift),
    .io_dataChainOut_data            (_tapIO_controllerInternal_io_dataChainOut_data),
    .io_dataChainOut_capture         (_tapIO_controllerInternal_io_dataChainOut_capture),
    .io_dataChainOut_update          (_tapIO_controllerInternal_io_dataChainOut_update),
    .io_dataChainIn_data
      (tapIO_chainToSelect_0_2
         ? _tapIO_idcodeChain_io_chainOut_data
         : tapIO_chainToSelect_1_2
             ? _dtmInfoChain_io_chainOut_data
             : tapIO_chainToSelect_2_2
                 ? _dmiAccessChain_io_chainOut_data
                 : _tapIO_bypassChain_io_chainOut_data)
  );
  JtagBypassChain tapIO_bypassChain (
    .clock              (io_jtag_clock),
    .io_chainIn_shift   (_tapIO_controllerInternal_io_dataChainOut_shift),
    .io_chainIn_data    (_tapIO_controllerInternal_io_dataChainOut_data),
    .io_chainIn_capture (_tapIO_controllerInternal_io_dataChainOut_capture),
    .io_chainOut_data   (_tapIO_bypassChain_io_chainOut_data)
  );
  assign io_dmi_req_valid = dmiReqValidReg;
  assign io_dmi_req_bits_addr = dmiReqReg_addr;
  assign io_dmi_req_bits_data = dmiReqReg_data;
  assign io_dmi_req_bits_op = dmiReqReg_op;
  assign io_dmi_resp_ready = io_dmi_resp_ready_0;
endmodule

