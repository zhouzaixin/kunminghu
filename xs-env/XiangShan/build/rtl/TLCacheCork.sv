// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLCacheCork(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [3:0]   auto_in_a_bits_opcode,
  input  [2:0]   auto_in_a_bits_param,
  input  [2:0]   auto_in_a_bits_size,
  input  [3:0]   auto_in_a_bits_source,
  input  [47:0]  auto_in_a_bits_address,
  input  [31:0]  auto_in_a_bits_mask,
  input  [255:0] auto_in_a_bits_data,
  input          auto_in_a_bits_corrupt,
  output         auto_in_c_ready,
  input          auto_in_c_valid,
  input  [2:0]   auto_in_c_bits_opcode,
  input  [2:0]   auto_in_c_bits_size,
  input  [3:0]   auto_in_c_bits_source,
  input  [47:0]  auto_in_c_bits_address,
  input  [255:0] auto_in_c_bits_data,
  input          auto_in_c_bits_corrupt,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [3:0]   auto_in_d_bits_opcode,
  output [1:0]   auto_in_d_bits_param,
  output [2:0]   auto_in_d_bits_size,
  output [3:0]   auto_in_d_bits_source,
  output [2:0]   auto_in_d_bits_sink,
  output         auto_in_d_bits_denied,
  output [255:0] auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
  input          auto_in_e_valid,
  input  [2:0]   auto_in_e_bits_sink,
  input          auto_out_a_ready,
  output         auto_out_a_valid,
  output [3:0]   auto_out_a_bits_opcode,
  output [2:0]   auto_out_a_bits_param,
  output [2:0]   auto_out_a_bits_size,
  output [4:0]   auto_out_a_bits_source,
  output [47:0]  auto_out_a_bits_address,
  output [31:0]  auto_out_a_bits_mask,
  output [255:0] auto_out_a_bits_data,
  output         auto_out_a_bits_corrupt,
  output         auto_out_d_ready,
  input          auto_out_d_valid,
  input  [3:0]   auto_out_d_bits_opcode,
  input  [1:0]   auto_out_d_bits_param,
  input  [2:0]   auto_out_d_bits_size,
  input  [4:0]   auto_out_d_bits_source,
  input          auto_out_d_bits_denied,
  input  [255:0] auto_out_d_bits_data,
  input          auto_out_d_bits_corrupt
);

  wire [3:0]   _in_d_bits_T_39;
  wire         in_d_valid;
  wire         a_a_ready;
  wire         c_a_ready;
  wire         nodeIn_d_valid;
  wire         _q_1_io_enq_ready;
  wire         _q_1_io_deq_valid;
  wire [3:0]   _q_1_io_deq_bits_opcode;
  wire [1:0]   _q_1_io_deq_bits_param;
  wire [2:0]   _q_1_io_deq_bits_size;
  wire [3:0]   _q_1_io_deq_bits_source;
  wire         _q_1_io_deq_bits_denied;
  wire [255:0] _q_1_io_deq_bits_data;
  wire         _q_1_io_deq_bits_corrupt;
  wire         _q_io_enq_ready;
  wire         _q_io_deq_valid;
  wire [3:0]   _q_io_deq_bits_opcode;
  wire [1:0]   _q_io_deq_bits_param;
  wire [2:0]   _q_io_deq_bits_size;
  wire [3:0]   _q_io_deq_bits_source;
  wire         _q_io_deq_bits_denied;
  wire [255:0] _q_io_deq_bits_data;
  wire         _q_io_deq_bits_corrupt;
  wire         _pool_io_alloc_valid;
  wire [2:0]   _pool_io_alloc_bits;
  wire         _toD_T = auto_in_a_bits_opcode == 4'h6;
  wire         _toD_T_3 = auto_in_a_bits_opcode == 4'h7;
  wire         toD = _toD_T & auto_in_a_bits_param == 3'h2 | _toD_T_3;
  wire         a_a_valid = auto_in_a_valid & ~toD;
  wire         _GEN = _toD_T | _toD_T_3;
  wire [3:0]   a_a_bits_opcode = _GEN ? 4'h4 : auto_in_a_bits_opcode;
  wire         winner_0 = auto_in_c_valid & (&auto_in_c_bits_opcode);
  wire         c_a_bits_a_mask_sub_sub_sub_sub_sub_0_1 = auto_in_c_bits_size > 3'h4;
  wire         c_a_bits_a_mask_sub_sub_sub_sub_size = auto_in_c_bits_size == 3'h4;
  wire         c_a_bits_a_mask_sub_sub_sub_sub_0_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_sub_sub_size
    & ~(auto_in_c_bits_address[4]);
  wire         c_a_bits_a_mask_sub_sub_sub_sub_1_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_sub_sub_size
    & auto_in_c_bits_address[4];
  wire         c_a_bits_a_mask_sub_sub_sub_size = auto_in_c_bits_size == 3'h3;
  wire         c_a_bits_a_mask_sub_sub_sub_0_2 =
    ~(auto_in_c_bits_address[4]) & ~(auto_in_c_bits_address[3]);
  wire         c_a_bits_a_mask_sub_sub_sub_0_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_sub_size
    & c_a_bits_a_mask_sub_sub_sub_0_2;
  wire         c_a_bits_a_mask_sub_sub_sub_1_2 =
    ~(auto_in_c_bits_address[4]) & auto_in_c_bits_address[3];
  wire         c_a_bits_a_mask_sub_sub_sub_1_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_sub_size
    & c_a_bits_a_mask_sub_sub_sub_1_2;
  wire         c_a_bits_a_mask_sub_sub_sub_2_2 =
    auto_in_c_bits_address[4] & ~(auto_in_c_bits_address[3]);
  wire         c_a_bits_a_mask_sub_sub_sub_2_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_1_1 | c_a_bits_a_mask_sub_sub_sub_size
    & c_a_bits_a_mask_sub_sub_sub_2_2;
  wire         c_a_bits_a_mask_sub_sub_sub_3_2 =
    auto_in_c_bits_address[4] & auto_in_c_bits_address[3];
  wire         c_a_bits_a_mask_sub_sub_sub_3_1 =
    c_a_bits_a_mask_sub_sub_sub_sub_1_1 | c_a_bits_a_mask_sub_sub_sub_size
    & c_a_bits_a_mask_sub_sub_sub_3_2;
  wire         c_a_bits_a_mask_sub_sub_size = auto_in_c_bits_size == 3'h2;
  wire         c_a_bits_a_mask_sub_sub_0_2 =
    c_a_bits_a_mask_sub_sub_sub_0_2 & ~(auto_in_c_bits_address[2]);
  wire         c_a_bits_a_mask_sub_sub_0_1 =
    c_a_bits_a_mask_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_0_2;
  wire         c_a_bits_a_mask_sub_sub_1_2 =
    c_a_bits_a_mask_sub_sub_sub_0_2 & auto_in_c_bits_address[2];
  wire         c_a_bits_a_mask_sub_sub_1_1 =
    c_a_bits_a_mask_sub_sub_sub_0_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_1_2;
  wire         c_a_bits_a_mask_sub_sub_2_2 =
    c_a_bits_a_mask_sub_sub_sub_1_2 & ~(auto_in_c_bits_address[2]);
  wire         c_a_bits_a_mask_sub_sub_2_1 =
    c_a_bits_a_mask_sub_sub_sub_1_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_2_2;
  wire         c_a_bits_a_mask_sub_sub_3_2 =
    c_a_bits_a_mask_sub_sub_sub_1_2 & auto_in_c_bits_address[2];
  wire         c_a_bits_a_mask_sub_sub_3_1 =
    c_a_bits_a_mask_sub_sub_sub_1_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_3_2;
  wire         c_a_bits_a_mask_sub_sub_4_2 =
    c_a_bits_a_mask_sub_sub_sub_2_2 & ~(auto_in_c_bits_address[2]);
  wire         c_a_bits_a_mask_sub_sub_4_1 =
    c_a_bits_a_mask_sub_sub_sub_2_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_4_2;
  wire         c_a_bits_a_mask_sub_sub_5_2 =
    c_a_bits_a_mask_sub_sub_sub_2_2 & auto_in_c_bits_address[2];
  wire         c_a_bits_a_mask_sub_sub_5_1 =
    c_a_bits_a_mask_sub_sub_sub_2_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_5_2;
  wire         c_a_bits_a_mask_sub_sub_6_2 =
    c_a_bits_a_mask_sub_sub_sub_3_2 & ~(auto_in_c_bits_address[2]);
  wire         c_a_bits_a_mask_sub_sub_6_1 =
    c_a_bits_a_mask_sub_sub_sub_3_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_6_2;
  wire         c_a_bits_a_mask_sub_sub_7_2 =
    c_a_bits_a_mask_sub_sub_sub_3_2 & auto_in_c_bits_address[2];
  wire         c_a_bits_a_mask_sub_sub_7_1 =
    c_a_bits_a_mask_sub_sub_sub_3_1 | c_a_bits_a_mask_sub_sub_size
    & c_a_bits_a_mask_sub_sub_7_2;
  wire         c_a_bits_a_mask_sub_size = auto_in_c_bits_size == 3'h1;
  wire         c_a_bits_a_mask_sub_0_2 =
    c_a_bits_a_mask_sub_sub_0_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_0_1 =
    c_a_bits_a_mask_sub_sub_0_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_0_2;
  wire         c_a_bits_a_mask_sub_1_2 =
    c_a_bits_a_mask_sub_sub_0_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_1_1 =
    c_a_bits_a_mask_sub_sub_0_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_1_2;
  wire         c_a_bits_a_mask_sub_2_2 =
    c_a_bits_a_mask_sub_sub_1_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_2_1 =
    c_a_bits_a_mask_sub_sub_1_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_2_2;
  wire         c_a_bits_a_mask_sub_3_2 =
    c_a_bits_a_mask_sub_sub_1_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_3_1 =
    c_a_bits_a_mask_sub_sub_1_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_3_2;
  wire         c_a_bits_a_mask_sub_4_2 =
    c_a_bits_a_mask_sub_sub_2_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_4_1 =
    c_a_bits_a_mask_sub_sub_2_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_4_2;
  wire         c_a_bits_a_mask_sub_5_2 =
    c_a_bits_a_mask_sub_sub_2_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_5_1 =
    c_a_bits_a_mask_sub_sub_2_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_5_2;
  wire         c_a_bits_a_mask_sub_6_2 =
    c_a_bits_a_mask_sub_sub_3_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_6_1 =
    c_a_bits_a_mask_sub_sub_3_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_6_2;
  wire         c_a_bits_a_mask_sub_7_2 =
    c_a_bits_a_mask_sub_sub_3_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_7_1 =
    c_a_bits_a_mask_sub_sub_3_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_7_2;
  wire         c_a_bits_a_mask_sub_8_2 =
    c_a_bits_a_mask_sub_sub_4_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_8_1 =
    c_a_bits_a_mask_sub_sub_4_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_8_2;
  wire         c_a_bits_a_mask_sub_9_2 =
    c_a_bits_a_mask_sub_sub_4_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_9_1 =
    c_a_bits_a_mask_sub_sub_4_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_9_2;
  wire         c_a_bits_a_mask_sub_10_2 =
    c_a_bits_a_mask_sub_sub_5_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_10_1 =
    c_a_bits_a_mask_sub_sub_5_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_10_2;
  wire         c_a_bits_a_mask_sub_11_2 =
    c_a_bits_a_mask_sub_sub_5_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_11_1 =
    c_a_bits_a_mask_sub_sub_5_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_11_2;
  wire         c_a_bits_a_mask_sub_12_2 =
    c_a_bits_a_mask_sub_sub_6_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_12_1 =
    c_a_bits_a_mask_sub_sub_6_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_12_2;
  wire         c_a_bits_a_mask_sub_13_2 =
    c_a_bits_a_mask_sub_sub_6_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_13_1 =
    c_a_bits_a_mask_sub_sub_6_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_13_2;
  wire         c_a_bits_a_mask_sub_14_2 =
    c_a_bits_a_mask_sub_sub_7_2 & ~(auto_in_c_bits_address[1]);
  wire         c_a_bits_a_mask_sub_14_1 =
    c_a_bits_a_mask_sub_sub_7_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_14_2;
  wire         c_a_bits_a_mask_sub_15_2 =
    c_a_bits_a_mask_sub_sub_7_2 & auto_in_c_bits_address[1];
  wire         c_a_bits_a_mask_sub_15_1 =
    c_a_bits_a_mask_sub_sub_7_1 | c_a_bits_a_mask_sub_size & c_a_bits_a_mask_sub_15_2;
  wire         _nodeIn_c_ready_T = auto_in_c_bits_opcode == 3'h6;
  reg          d_first_counter;
  wire         d_grant = _in_d_bits_T_39 == 4'h5 | _in_d_bits_T_39 == 4'h4;
  assign nodeIn_d_valid =
    in_d_valid & (_pool_io_alloc_valid | d_first_counter | ~d_grant);
  wire         in_d_ready =
    auto_in_d_ready & (_pool_io_alloc_valid | d_first_counter | ~d_grant);
  reg  [2:0]   nodeIn_d_bits_sink_r;
  wire         _GEN_0 = auto_out_d_bits_opcode == 4'h1 & auto_out_d_bits_source[0];
  wire [3:0]   d_d_bits_opcode =
    auto_out_d_bits_opcode == 4'h0 & ~(auto_out_d_bits_source[0])
      ? 4'h6
      : _GEN_0 ? 4'h5 : auto_out_d_bits_opcode;
  reg          beatsLeft;
  wire         winner_1 = ~winner_0 & a_a_valid;
  reg          state_0;
  reg          state_1;
  wire         muxState_0 = beatsLeft ? state_0 : winner_0;
  wire         muxState_1 = beatsLeft ? state_1 : winner_1;
  assign c_a_ready = auto_out_a_ready & (~beatsLeft | state_0);
  assign a_a_ready = auto_out_a_ready & (beatsLeft ? state_1 : ~winner_0);
  wire         nodeOut_a_valid =
    beatsLeft ? state_0 & winner_0 | state_1 & a_a_valid : winner_0 | a_a_valid;
  reg          beatsLeft_1;
  wire         _GEN_1 = _q_io_deq_valid | auto_out_d_valid;
  wire         winner_1_1 = ~auto_out_d_valid & _q_io_deq_valid;
  wire         winner_1_2 = ~_GEN_1 & _q_1_io_deq_valid;
  reg          state_1_0;
  reg          state_1_1;
  reg          state_1_2;
  wire         muxState_1_0 = beatsLeft_1 ? state_1_0 : auto_out_d_valid;
  wire         muxState_1_1 = beatsLeft_1 ? state_1_1 : winner_1_1;
  wire         muxState_1_2 = beatsLeft_1 ? state_1_2 : winner_1_2;
  assign in_d_valid =
    beatsLeft_1
      ? state_1_0 & auto_out_d_valid | state_1_1 & _q_io_deq_valid | state_1_2
        & _q_1_io_deq_valid
      : auto_out_d_valid | _q_io_deq_valid | _q_1_io_deq_valid;
  wire [2:0]   _in_d_bits_T_29 =
    (muxState_1_0 ? auto_out_d_bits_size : 3'h0)
    | (muxState_1_1 ? _q_io_deq_bits_size : 3'h0)
    | (muxState_1_2 ? _q_1_io_deq_bits_size : 3'h0);
  assign _in_d_bits_T_39 =
    (muxState_1_0 ? d_d_bits_opcode : 4'h0)
    | (muxState_1_1 ? _q_io_deq_bits_opcode : 4'h0)
    | (muxState_1_2 ? _q_1_io_deq_bits_opcode : 4'h0);
  wire [12:0]  _d_first_beats1_decode_T = 13'h3F << _in_d_bits_T_29;
  wire [12:0]  _decode_T_3 = 13'h3F << auto_in_a_bits_size;
  wire [12:0]  _decode_T = 13'h3F << auto_in_c_bits_size;
  wire [12:0]  _decode_T_6 = 13'h3F << auto_out_d_bits_size;
  wire         _beatsLeft_T_4 = in_d_ready & in_d_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      d_first_counter <= 1'h0;
      beatsLeft <= 1'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 1'h0;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      state_1_2 <= 1'h0;
    end
    else begin
      if (_beatsLeft_T_4) begin
        if (d_first_counter)
          d_first_counter <= 1'(d_first_counter - 1'h1);
        else
          d_first_counter <= _in_d_bits_T_39[0] & ~(_d_first_beats1_decode_T[5]);
      end
      if (~beatsLeft & auto_out_a_ready)
        beatsLeft <=
          winner_0 & ~(_decode_T[5]) | winner_1 & ~(a_a_bits_opcode[2])
          & ~(_decode_T_3[5]);
      else
        beatsLeft <= 1'(beatsLeft - (auto_out_a_ready & nodeOut_a_valid));
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (~beatsLeft_1 & in_d_ready)
        beatsLeft_1 <= auto_out_d_valid & d_d_bits_opcode[0] & ~(_decode_T_6[5]);
      else
        beatsLeft_1 <= 1'(beatsLeft_1 - _beatsLeft_T_4);
      if (beatsLeft_1) begin
      end
      else begin
        state_1_0 <= auto_out_d_valid;
        state_1_1 <= winner_1_1;
        state_1_2 <= winner_1_2;
      end
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (d_first_counter) begin
    end
    else
      nodeIn_d_bits_sink_r <= _pool_io_alloc_bits;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        d_first_counter = _RANDOM[/*Zero width*/ 1'b0][0];
        nodeIn_d_bits_sink_r = _RANDOM[/*Zero width*/ 1'b0][3:1];
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][21];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][22];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][23];
        beatsLeft_1 = _RANDOM[/*Zero width*/ 1'b0][24];
        state_1_0 = _RANDOM[/*Zero width*/ 1'b0][25];
        state_1_1 = _RANDOM[/*Zero width*/ 1'b0][26];
        state_1_2 = _RANDOM[/*Zero width*/ 1'b0][27];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        d_first_counter = 1'h0;
        beatsLeft = 1'h0;
        state_0 = 1'h0;
        state_1 = 1'h0;
        beatsLeft_1 = 1'h0;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        state_1_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  IDPool pool (
    .clock          (clock),
    .reset          (reset),
    .io_free_valid  (auto_in_e_valid),
    .io_free_bits   (auto_in_e_bits_sink),
    .io_alloc_ready (auto_in_d_ready & nodeIn_d_valid & ~d_first_counter & d_grant),
    .io_alloc_valid (_pool_io_alloc_valid),
    .io_alloc_bits  (_pool_io_alloc_bits)
  );
  Queue2_TLBundleD_2 q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_ready        (_q_io_enq_ready),
    .io_enq_valid        (auto_in_c_valid & _nodeIn_c_ready_T),
    .io_enq_bits_opcode  (4'h6),
    .io_enq_bits_param   (2'h0),
    .io_enq_bits_size    (auto_in_c_bits_size),
    .io_enq_bits_source  (auto_in_c_bits_source),
    .io_enq_bits_sink    (3'h0),
    .io_enq_bits_denied  (1'h0),
    .io_enq_bits_data    (256'h0),
    .io_enq_bits_corrupt (1'h0),
    .io_deq_ready        (in_d_ready & (beatsLeft_1 ? state_1_1 : ~auto_out_d_valid)),
    .io_deq_valid        (_q_io_deq_valid),
    .io_deq_bits_opcode  (_q_io_deq_bits_opcode),
    .io_deq_bits_param   (_q_io_deq_bits_param),
    .io_deq_bits_size    (_q_io_deq_bits_size),
    .io_deq_bits_source  (_q_io_deq_bits_source),
    .io_deq_bits_sink    (/* unused */),
    .io_deq_bits_denied  (_q_io_deq_bits_denied),
    .io_deq_bits_data    (_q_io_deq_bits_data),
    .io_deq_bits_corrupt (_q_io_deq_bits_corrupt)
  );
  Queue2_TLBundleD_2 q_1 (
    .clock               (clock),
    .reset               (reset),
    .io_enq_ready        (_q_1_io_enq_ready),
    .io_enq_valid        (auto_in_a_valid & toD),
    .io_enq_bits_opcode  (4'h4),
    .io_enq_bits_param   (2'h0),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_sink    (3'h0),
    .io_enq_bits_denied  (1'h0),
    .io_enq_bits_data    (256'h0),
    .io_enq_bits_corrupt (1'h0),
    .io_deq_ready        (in_d_ready & (beatsLeft_1 ? state_1_2 : ~_GEN_1)),
    .io_deq_valid        (_q_1_io_deq_valid),
    .io_deq_bits_opcode  (_q_1_io_deq_bits_opcode),
    .io_deq_bits_param   (_q_1_io_deq_bits_param),
    .io_deq_bits_size    (_q_1_io_deq_bits_size),
    .io_deq_bits_source  (_q_1_io_deq_bits_source),
    .io_deq_bits_sink    (/* unused */),
    .io_deq_bits_denied  (_q_1_io_deq_bits_denied),
    .io_deq_bits_data    (_q_1_io_deq_bits_data),
    .io_deq_bits_corrupt (_q_1_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = toD ? _q_1_io_enq_ready : a_a_ready;
  assign auto_in_c_ready = _nodeIn_c_ready_T ? _q_io_enq_ready : c_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = _in_d_bits_T_39;
  assign auto_in_d_bits_param =
    (~muxState_1_0 | _GEN_0 ? 2'h0 : auto_out_d_bits_param)
    | (muxState_1_1 ? _q_io_deq_bits_param : 2'h0)
    | (muxState_1_2 ? _q_1_io_deq_bits_param : 2'h0);
  assign auto_in_d_bits_size = _in_d_bits_T_29;
  assign auto_in_d_bits_source =
    (muxState_1_0 ? auto_out_d_bits_source[4:1] : 4'h0)
    | (muxState_1_1 ? _q_io_deq_bits_source : 4'h0)
    | (muxState_1_2 ? _q_1_io_deq_bits_source : 4'h0);
  assign auto_in_d_bits_sink =
    d_first_counter ? nodeIn_d_bits_sink_r : _pool_io_alloc_bits;
  assign auto_in_d_bits_denied =
    muxState_1_0 & auto_out_d_bits_denied | muxState_1_1 & _q_io_deq_bits_denied
    | muxState_1_2 & _q_1_io_deq_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_1_0 ? auto_out_d_bits_data : 256'h0)
    | (muxState_1_1 ? _q_io_deq_bits_data : 256'h0)
    | (muxState_1_2 ? _q_1_io_deq_bits_data : 256'h0);
  assign auto_in_d_bits_corrupt =
    muxState_1_0 & auto_out_d_bits_corrupt | muxState_1_1 & _q_io_deq_bits_corrupt
    | muxState_1_2 & _q_1_io_deq_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode = muxState_1 ? a_a_bits_opcode : 4'h0;
  assign auto_out_a_bits_param = ~muxState_1 | _GEN ? 3'h0 : auto_in_a_bits_param;
  assign auto_out_a_bits_size =
    (muxState_0 ? auto_in_c_bits_size : 3'h0) | (muxState_1 ? auto_in_a_bits_size : 3'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? {auto_in_c_bits_source, 1'h0} : 5'h0)
    | (muxState_1
         ? {auto_in_a_bits_source,
            _GEN | auto_in_a_bits_opcode == 4'h0 | auto_in_a_bits_opcode == 4'h1}
         : 5'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? auto_in_c_bits_address : 48'h0)
    | (muxState_1 ? auto_in_a_bits_address : 48'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {c_a_bits_a_mask_sub_15_1 | c_a_bits_a_mask_sub_15_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_15_1 | c_a_bits_a_mask_sub_15_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_14_1 | c_a_bits_a_mask_sub_14_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_14_1 | c_a_bits_a_mask_sub_14_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_13_1 | c_a_bits_a_mask_sub_13_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_13_1 | c_a_bits_a_mask_sub_13_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_12_1 | c_a_bits_a_mask_sub_12_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_12_1 | c_a_bits_a_mask_sub_12_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_11_1 | c_a_bits_a_mask_sub_11_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_11_1 | c_a_bits_a_mask_sub_11_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_10_1 | c_a_bits_a_mask_sub_10_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_10_1 | c_a_bits_a_mask_sub_10_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_9_1 | c_a_bits_a_mask_sub_9_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_9_1 | c_a_bits_a_mask_sub_9_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_8_1 | c_a_bits_a_mask_sub_8_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_8_1 | c_a_bits_a_mask_sub_8_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_7_1 | c_a_bits_a_mask_sub_7_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_7_1 | c_a_bits_a_mask_sub_7_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_6_1 | c_a_bits_a_mask_sub_6_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_6_1 | c_a_bits_a_mask_sub_6_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_5_1 | c_a_bits_a_mask_sub_5_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_5_1 | c_a_bits_a_mask_sub_5_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_4_1 | c_a_bits_a_mask_sub_4_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_4_1 | c_a_bits_a_mask_sub_4_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_3_1 | c_a_bits_a_mask_sub_3_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_3_1 | c_a_bits_a_mask_sub_3_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_2_1 | c_a_bits_a_mask_sub_2_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_2_1 | c_a_bits_a_mask_sub_2_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_1_1 | c_a_bits_a_mask_sub_1_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_1_1 | c_a_bits_a_mask_sub_1_2
            & ~(auto_in_c_bits_address[0]),
          c_a_bits_a_mask_sub_0_1 | c_a_bits_a_mask_sub_0_2 & auto_in_c_bits_address[0],
          c_a_bits_a_mask_sub_0_1 | c_a_bits_a_mask_sub_0_2
            & ~(auto_in_c_bits_address[0])}
       : 32'h0) | (muxState_1 ? auto_in_a_bits_mask : 32'h0);
  assign auto_out_a_bits_data =
    (muxState_0 ? auto_in_c_bits_data : 256'h0)
    | (muxState_1 ? auto_in_a_bits_data : 256'h0);
  assign auto_out_a_bits_corrupt =
    muxState_0 & auto_in_c_bits_corrupt | muxState_1 & auto_in_a_bits_corrupt;
  assign auto_out_d_ready = in_d_ready & (~beatsLeft_1 | state_1_0);
endmodule

