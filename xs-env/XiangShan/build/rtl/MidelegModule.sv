// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MidelegModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_SSI,
  output        regOut_STI,
  output        regOut_SEI,
  output        regOut_LCOFI
);

  reg reg_SSI;
  reg reg_STI;
  reg reg_SEI;
  reg reg_LCOFI;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_SSI <= 1'h0;
      reg_STI <= 1'h0;
      reg_SEI <= 1'h0;
      reg_LCOFI <= 1'h0;
    end
    else if (w_wen) begin
      reg_SSI <= w_wdata[1];
      reg_STI <= w_wdata[5];
      reg_SEI <= w_wdata[9];
      reg_LCOFI <= w_wdata[13];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_SSI = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_STI = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_SEI = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_LCOFI = _RANDOM[/*Zero width*/ 1'b0][10];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_SSI = 1'h0;
        reg_STI = 1'h0;
        reg_SEI = 1'h0;
        reg_LCOFI = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata = {50'h0, reg_LCOFI, 3'h5, reg_SEI, 3'h1, reg_STI, 3'h1, reg_SSI, 1'h0};
  assign regOut_SSI = reg_SSI;
  assign regOut_STI = reg_STI;
  assign regOut_SEI = reg_SEI;
  assign regOut_LCOFI = reg_LCOFI;
endmodule

