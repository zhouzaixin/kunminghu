// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FoldedSRAMTemplate_21(
  input         clock,
  input         reset,
  output        io_r_req_ready,
  input         io_r_req_valid,
  input  [7:0]  io_r_req_bits_setIdx,
  output        io_r_resp_data_0_valid,
  output [8:0]  io_r_resp_data_0_tag,
  output [1:0]  io_r_resp_data_0_ctr,
  output [19:0] io_r_resp_data_0_target_offset_offset,
  output [3:0]  io_r_resp_data_0_target_offset_pointer,
  output        io_r_resp_data_0_target_offset_usePCRegion,
  output        io_r_resp_data_0_useful,
  input         io_w_req_valid,
  input  [7:0]  io_w_req_bits_setIdx,
  input  [8:0]  io_w_req_bits_data_0_tag,
  input  [1:0]  io_w_req_bits_data_0_ctr,
  input  [19:0] io_w_req_bits_data_0_target_offset_offset,
  input  [3:0]  io_w_req_bits_data_0_target_offset_pointer,
  input         io_w_req_bits_data_0_target_offset_usePCRegion,
  input         io_w_req_bits_data_0_useful,
  input  [37:0] io_w_req_bits_bitmask
);

  wire        _array_io_r_resp_data_0_valid;
  wire [8:0]  _array_io_r_resp_data_0_tag;
  wire [1:0]  _array_io_r_resp_data_0_ctr;
  wire [19:0] _array_io_r_resp_data_0_target_offset_offset;
  wire [3:0]  _array_io_r_resp_data_0_target_offset_pointer;
  wire        _array_io_r_resp_data_0_target_offset_usePCRegion;
  wire        _array_io_r_resp_data_0_useful;
  wire        _array_io_r_resp_data_1_valid;
  wire [8:0]  _array_io_r_resp_data_1_tag;
  wire [1:0]  _array_io_r_resp_data_1_ctr;
  wire [19:0] _array_io_r_resp_data_1_target_offset_offset;
  wire [3:0]  _array_io_r_resp_data_1_target_offset_pointer;
  wire        _array_io_r_resp_data_1_target_offset_usePCRegion;
  wire        _array_io_r_resp_data_1_useful;
  reg         ridx;
  reg         holdRidx_last_REG;
  reg         holdRidx_hold_data;
  wire        holdRidx = holdRidx_last_REG ? ridx : holdRidx_hold_data;
  always @(posedge clock) begin
    if (io_r_req_valid)
      ridx <= io_r_req_bits_setIdx[0];
    if (holdRidx_last_REG)
      holdRidx_hold_data <= ridx;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      holdRidx_last_REG <= 1'h0;
    else
      holdRidx_last_REG <= io_r_req_valid;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ridx = _RANDOM[/*Zero width*/ 1'b0][0];
        holdRidx_last_REG = _RANDOM[/*Zero width*/ 1'b0][8];
        holdRidx_hold_data = _RANDOM[/*Zero width*/ 1'b0][9];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        holdRidx_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_60 array (
    .clock                                          (clock),
    .reset                                          (reset),
    .io_r_req_ready                                 (io_r_req_ready),
    .io_r_req_valid                                 (io_r_req_valid),
    .io_r_req_bits_setIdx                           (io_r_req_bits_setIdx[7:1]),
    .io_r_resp_data_0_valid                         (_array_io_r_resp_data_0_valid),
    .io_r_resp_data_0_tag                           (_array_io_r_resp_data_0_tag),
    .io_r_resp_data_0_ctr                           (_array_io_r_resp_data_0_ctr),
    .io_r_resp_data_0_target_offset_offset
      (_array_io_r_resp_data_0_target_offset_offset),
    .io_r_resp_data_0_target_offset_pointer
      (_array_io_r_resp_data_0_target_offset_pointer),
    .io_r_resp_data_0_target_offset_usePCRegion
      (_array_io_r_resp_data_0_target_offset_usePCRegion),
    .io_r_resp_data_0_useful                        (_array_io_r_resp_data_0_useful),
    .io_r_resp_data_1_valid                         (_array_io_r_resp_data_1_valid),
    .io_r_resp_data_1_tag                           (_array_io_r_resp_data_1_tag),
    .io_r_resp_data_1_ctr                           (_array_io_r_resp_data_1_ctr),
    .io_r_resp_data_1_target_offset_offset
      (_array_io_r_resp_data_1_target_offset_offset),
    .io_r_resp_data_1_target_offset_pointer
      (_array_io_r_resp_data_1_target_offset_pointer),
    .io_r_resp_data_1_target_offset_usePCRegion
      (_array_io_r_resp_data_1_target_offset_usePCRegion),
    .io_r_resp_data_1_useful                        (_array_io_r_resp_data_1_useful),
    .io_w_req_valid                                 (io_w_req_valid),
    .io_w_req_bits_setIdx                           (io_w_req_bits_setIdx[7:1]),
    .io_w_req_bits_data_0_tag                       (io_w_req_bits_data_0_tag),
    .io_w_req_bits_data_0_ctr                       (io_w_req_bits_data_0_ctr),
    .io_w_req_bits_data_0_target_offset_offset
      (io_w_req_bits_data_0_target_offset_offset),
    .io_w_req_bits_data_0_target_offset_pointer
      (io_w_req_bits_data_0_target_offset_pointer),
    .io_w_req_bits_data_0_target_offset_usePCRegion
      (io_w_req_bits_data_0_target_offset_usePCRegion),
    .io_w_req_bits_data_0_useful                    (io_w_req_bits_data_0_useful),
    .io_w_req_bits_data_1_tag                       (io_w_req_bits_data_0_tag),
    .io_w_req_bits_data_1_ctr                       (io_w_req_bits_data_0_ctr),
    .io_w_req_bits_data_1_target_offset_offset
      (io_w_req_bits_data_0_target_offset_offset),
    .io_w_req_bits_data_1_target_offset_pointer
      (io_w_req_bits_data_0_target_offset_pointer),
    .io_w_req_bits_data_1_target_offset_usePCRegion
      (io_w_req_bits_data_0_target_offset_usePCRegion),
    .io_w_req_bits_data_1_useful                    (io_w_req_bits_data_0_useful),
    .io_w_req_bits_flattened_bitmask
      ({io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[37],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[36],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[35],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[34],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[33],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[32],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[31],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[30],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[29],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[28],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[27],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[26],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[25],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[24],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[23],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[22],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[21],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[20],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[19],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[18],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[17],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[16],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[15],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[14],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[13],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[12],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[11],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[10],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[9],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[8],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[7],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[6],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[5],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[4],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[3],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[2],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[1],
        io_w_req_bits_setIdx[0] & io_w_req_bits_bitmask[0],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[37],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[36],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[35],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[34],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[33],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[32],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[31],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[30],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[29],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[28],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[27],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[26],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[25],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[24],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[23],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[22],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[21],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[20],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[19],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[18],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[17],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[16],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[15],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[14],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[13],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[12],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[11],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[10],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[9],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[8],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[7],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[6],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[5],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[4],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[3],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[2],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[1],
        ~(io_w_req_bits_setIdx[0]) & io_w_req_bits_bitmask[0]})
  );
  assign io_r_resp_data_0_valid =
    ~holdRidx & _array_io_r_resp_data_0_valid | holdRidx & _array_io_r_resp_data_1_valid;
  assign io_r_resp_data_0_tag =
    (holdRidx ? 9'h0 : _array_io_r_resp_data_0_tag)
    | (holdRidx ? _array_io_r_resp_data_1_tag : 9'h0);
  assign io_r_resp_data_0_ctr =
    (holdRidx ? 2'h0 : _array_io_r_resp_data_0_ctr)
    | (holdRidx ? _array_io_r_resp_data_1_ctr : 2'h0);
  assign io_r_resp_data_0_target_offset_offset =
    (holdRidx ? 20'h0 : _array_io_r_resp_data_0_target_offset_offset)
    | (holdRidx ? _array_io_r_resp_data_1_target_offset_offset : 20'h0);
  assign io_r_resp_data_0_target_offset_pointer =
    (holdRidx ? 4'h0 : _array_io_r_resp_data_0_target_offset_pointer)
    | (holdRidx ? _array_io_r_resp_data_1_target_offset_pointer : 4'h0);
  assign io_r_resp_data_0_target_offset_usePCRegion =
    ~holdRidx & _array_io_r_resp_data_0_target_offset_usePCRegion | holdRidx
    & _array_io_r_resp_data_1_target_offset_usePCRegion;
  assign io_r_resp_data_0_useful =
    ~holdRidx & _array_io_r_resp_data_0_useful | holdRidx
    & _array_io_r_resp_data_1_useful;
endmodule

