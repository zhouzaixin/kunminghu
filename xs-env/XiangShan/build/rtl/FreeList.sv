// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FreeList(
  input         clock,
  input         reset,
  output [3:0]  io_allocateSlot_0,
  output [3:0]  io_allocateSlot_1,
  input         io_doAllocate_0,
  input         io_doAllocate_1,
  input  [15:0] io_free,
  output [4:0]  io_validCount
);

  reg  [3:0]       freeList_0;
  reg  [3:0]       freeList_1;
  reg  [3:0]       freeList_2;
  reg  [3:0]       freeList_3;
  reg  [3:0]       freeList_4;
  reg  [3:0]       freeList_5;
  reg  [3:0]       freeList_6;
  reg  [3:0]       freeList_7;
  reg  [3:0]       freeList_8;
  reg  [3:0]       freeList_9;
  reg  [3:0]       freeList_10;
  reg  [3:0]       freeList_11;
  reg  [3:0]       freeList_12;
  reg  [3:0]       freeList_13;
  reg  [3:0]       freeList_14;
  reg  [3:0]       freeList_15;
  reg              headPtr_flag;
  reg  [3:0]       headPtr_value;
  reg              tailPtr_flag;
  reg  [3:0]       tailPtr_value;
  reg  [15:0]      freeMask;
  reg              freeReq_next_nextVec_0_r;
  reg              freeReq_next_nextVec_1_r;
  reg  [15:0]      freeSlotOH_next_nextVec_0_r;
  reg  [15:0]      freeSlotOH_next_nextVec_1_r;
  reg  [4:0]       freeSlotCnt;
  wire [15:0][3:0] _GEN =
    {{freeList_15},
     {freeList_14},
     {freeList_13},
     {freeList_12},
     {freeList_11},
     {freeList_10},
     {freeList_9},
     {freeList_8},
     {freeList_7},
     {freeList_6},
     {freeList_5},
     {freeList_4},
     {freeList_3},
     {freeList_2},
     {freeList_1},
     {freeList_0}};
  wire [15:0]      _remFreeSelMaskVec_T_11 =
    ~((freeReq_next_nextVec_0_r ? freeSlotOH_next_nextVec_0_r : 16'h0)
      | (freeReq_next_nextVec_1_r ? freeSlotOH_next_nextVec_1_r : 16'h0));
  wire             _remFreeSelMaskVec_T_2 = freeMask[0] & _remFreeSelMaskVec_T_11[0];
  wire             _remFreeSelMaskVec_T_3 = freeMask[2] & _remFreeSelMaskVec_T_11[2];
  wire             _remFreeSelMaskVec_T_4 = freeMask[4] & _remFreeSelMaskVec_T_11[4];
  wire             _remFreeSelMaskVec_T_5 = freeMask[6] & _remFreeSelMaskVec_T_11[6];
  wire             _remFreeSelMaskVec_T_6 = freeMask[8] & _remFreeSelMaskVec_T_11[8];
  wire             _remFreeSelMaskVec_T_7 = freeMask[10] & _remFreeSelMaskVec_T_11[10];
  wire             _remFreeSelMaskVec_T_8 = freeMask[12] & _remFreeSelMaskVec_T_11[12];
  wire             _remFreeSelMaskVec_T_9 = freeMask[14] & _remFreeSelMaskVec_T_11[14];
  wire [7:0]       remFreeSelMaskVec_0 =
    {_remFreeSelMaskVec_T_9,
     _remFreeSelMaskVec_T_8,
     _remFreeSelMaskVec_T_7,
     _remFreeSelMaskVec_T_6,
     _remFreeSelMaskVec_T_5,
     _remFreeSelMaskVec_T_4,
     _remFreeSelMaskVec_T_3,
     _remFreeSelMaskVec_T_2};
  wire             _remFreeSelMaskVec_T_13 = freeMask[1] & _remFreeSelMaskVec_T_11[1];
  wire             _remFreeSelMaskVec_T_14 = freeMask[3] & _remFreeSelMaskVec_T_11[3];
  wire             _remFreeSelMaskVec_T_15 = freeMask[5] & _remFreeSelMaskVec_T_11[5];
  wire             _remFreeSelMaskVec_T_16 = freeMask[7] & _remFreeSelMaskVec_T_11[7];
  wire             _remFreeSelMaskVec_T_17 = freeMask[9] & _remFreeSelMaskVec_T_11[9];
  wire             _remFreeSelMaskVec_T_18 = freeMask[11] & _remFreeSelMaskVec_T_11[11];
  wire             _remFreeSelMaskVec_T_19 = freeMask[13] & _remFreeSelMaskVec_T_11[13];
  wire             _remFreeSelMaskVec_T_20 = freeMask[15] & _remFreeSelMaskVec_T_11[15];
  wire [7:0]       remFreeSelMaskVec_1 =
    {_remFreeSelMaskVec_T_20,
     _remFreeSelMaskVec_T_19,
     _remFreeSelMaskVec_T_18,
     _remFreeSelMaskVec_T_17,
     _remFreeSelMaskVec_T_16,
     _remFreeSelMaskVec_T_15,
     _remFreeSelMaskVec_T_14,
     _remFreeSelMaskVec_T_13};
  wire [7:0]       remFreeSelIndexOHVec_highIndexOH =
    _remFreeSelMaskVec_T_2
      ? 8'h1
      : _remFreeSelMaskVec_T_3
          ? 8'h2
          : _remFreeSelMaskVec_T_4
              ? 8'h4
              : _remFreeSelMaskVec_T_5
                  ? 8'h8
                  : _remFreeSelMaskVec_T_6
                      ? 8'h10
                      : _remFreeSelMaskVec_T_7
                          ? 8'h20
                          : _remFreeSelMaskVec_T_8
                              ? 8'h40
                              : {_remFreeSelMaskVec_T_9, 7'h0};
  wire [15:0]      remFreeSelIndexOHVec_0 =
    {1'h0,
     remFreeSelIndexOHVec_highIndexOH[7],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[6],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[5],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[4],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[3],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[2],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[1],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH[0]};
  wire [7:0]       remFreeSelIndexOHVec_highIndexOH_1 =
    _remFreeSelMaskVec_T_13
      ? 8'h1
      : _remFreeSelMaskVec_T_14
          ? 8'h2
          : _remFreeSelMaskVec_T_15
              ? 8'h4
              : _remFreeSelMaskVec_T_16
                  ? 8'h8
                  : _remFreeSelMaskVec_T_17
                      ? 8'h10
                      : _remFreeSelMaskVec_T_18
                          ? 8'h20
                          : _remFreeSelMaskVec_T_19
                              ? 8'h40
                              : {_remFreeSelMaskVec_T_20, 7'h0};
  wire [15:0]      remFreeSelIndexOHVec_1 =
    {remFreeSelIndexOHVec_highIndexOH_1[7],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[6],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[5],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[4],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[3],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[2],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[1],
     1'h0,
     remFreeSelIndexOHVec_highIndexOH_1[0],
     1'h0};
  wire [6:0]       _freeList_T_1 =
    freeSlotOH_next_nextVec_0_r[15:9] | freeSlotOH_next_nextVec_0_r[7:1];
  wire [2:0]       _freeList_T_3 = _freeList_T_1[6:4] | _freeList_T_1[2:0];
  wire [3:0]       _freeList_T_9 =
    {|(freeSlotOH_next_nextVec_0_r[15:8]),
     |(_freeList_T_1[6:3]),
     |(_freeList_T_3[2:1]),
     _freeList_T_3[2] | _freeList_T_3[0]};
  wire [3:0]       _enqPtr_new_ptr_T_6 =
    4'(tailPtr_value + {3'h0, freeReq_next_nextVec_0_r});
  wire [6:0]       _freeList_T_11 =
    freeSlotOH_next_nextVec_1_r[15:9] | freeSlotOH_next_nextVec_1_r[7:1];
  wire [2:0]       _freeList_T_13 = _freeList_T_11[6:4] | _freeList_T_11[2:0];
  wire [3:0]       _freeList_T_19 =
    {|(freeSlotOH_next_nextVec_1_r[15:8]),
     |(_freeList_T_11[6:3]),
     |(_freeList_T_13[2:1]),
     _freeList_T_13[2] | _freeList_T_13[0]};
  wire [4:0]       _tailPtrNext_new_ptr_T_1 =
    5'({tailPtr_flag, tailPtr_value}
       + {3'h0, 2'({1'h0, freeReq_next_nextVec_0_r} + {1'h0, freeReq_next_nextVec_1_r})});
  wire [4:0]       _headPtrNext_new_ptr_T_1 =
    5'({headPtr_flag, headPtr_value}
       + {3'h0, 2'({1'h0, io_doAllocate_0} + {1'h0, io_doAllocate_1})});
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      freeList_0 <= 4'h0;
      freeList_1 <= 4'h1;
      freeList_2 <= 4'h2;
      freeList_3 <= 4'h3;
      freeList_4 <= 4'h4;
      freeList_5 <= 4'h5;
      freeList_6 <= 4'h6;
      freeList_7 <= 4'h7;
      freeList_8 <= 4'h8;
      freeList_9 <= 4'h9;
      freeList_10 <= 4'hA;
      freeList_11 <= 4'hB;
      freeList_12 <= 4'hC;
      freeList_13 <= 4'hD;
      freeList_14 <= 4'hE;
      freeList_15 <= 4'hF;
      headPtr_flag <= 1'h0;
      headPtr_value <= 4'h0;
      tailPtr_flag <= 1'h1;
      tailPtr_value <= 4'h0;
      freeMask <= 16'h0;
      freeReq_next_nextVec_0_r <= 1'h0;
      freeReq_next_nextVec_1_r <= 1'h0;
      freeSlotOH_next_nextVec_0_r <= 16'h0;
      freeSlotOH_next_nextVec_1_r <= 16'h0;
      freeSlotCnt <= 5'h10;
    end
    else begin
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h0)
        freeList_0 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h0)
        freeList_0 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h1)
        freeList_1 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h1)
        freeList_1 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h2)
        freeList_2 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h2)
        freeList_2 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h3)
        freeList_3 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h3)
        freeList_3 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h4)
        freeList_4 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h4)
        freeList_4 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h5)
        freeList_5 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h5)
        freeList_5 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h6)
        freeList_6 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h6)
        freeList_6 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h7)
        freeList_7 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h7)
        freeList_7 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h8)
        freeList_8 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h8)
        freeList_8 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'h9)
        freeList_9 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'h9)
        freeList_9 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'hA)
        freeList_10 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'hA)
        freeList_10 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'hB)
        freeList_11 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'hB)
        freeList_11 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'hC)
        freeList_12 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'hC)
        freeList_12 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'hD)
        freeList_13 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'hD)
        freeList_13 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 4'hE)
        freeList_14 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 4'hE)
        freeList_14 <= _freeList_T_9;
      if (freeReq_next_nextVec_1_r & (&_enqPtr_new_ptr_T_6))
        freeList_15 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & (&tailPtr_value))
        freeList_15 <= _freeList_T_9;
      if (|{io_doAllocate_1, io_doAllocate_0}) begin
        headPtr_flag <= _headPtrNext_new_ptr_T_1[4];
        headPtr_value <= _headPtrNext_new_ptr_T_1[3:0];
      end
      if (|{freeReq_next_nextVec_1_r, freeReq_next_nextVec_0_r}) begin
        tailPtr_flag <= _tailPtrNext_new_ptr_T_1[4];
        tailPtr_value <= _tailPtrNext_new_ptr_T_1[3:0];
      end
      freeMask <= (io_free | freeMask) & _remFreeSelMaskVec_T_11;
      if (~((|remFreeSelMaskVec_0) == freeReq_next_nextVec_0_r))
        freeReq_next_nextVec_0_r <= |remFreeSelMaskVec_0;
      if (~((|remFreeSelMaskVec_1) == freeReq_next_nextVec_1_r))
        freeReq_next_nextVec_1_r <= |remFreeSelMaskVec_1;
      if (~(remFreeSelIndexOHVec_0 == freeSlotOH_next_nextVec_0_r))
        freeSlotOH_next_nextVec_0_r <= remFreeSelIndexOHVec_0;
      if (~(remFreeSelIndexOHVec_1 == freeSlotOH_next_nextVec_1_r))
        freeSlotOH_next_nextVec_1_r <= remFreeSelIndexOHVec_1;
      freeSlotCnt <=
        _tailPtrNext_new_ptr_T_1[4] == _headPtrNext_new_ptr_T_1[4]
          ? {1'h0, 4'(_tailPtrNext_new_ptr_T_1[3:0] - _headPtrNext_new_ptr_T_1[3:0])}
          : 5'(5'({1'h0, _tailPtrNext_new_ptr_T_1[3:0]} - 5'h10)
               - {1'h0, _headPtrNext_new_ptr_T_1[3:0]});
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        freeList_0 = _RANDOM[3'h0][3:0];
        freeList_1 = _RANDOM[3'h0][7:4];
        freeList_2 = _RANDOM[3'h0][11:8];
        freeList_3 = _RANDOM[3'h0][15:12];
        freeList_4 = _RANDOM[3'h0][19:16];
        freeList_5 = _RANDOM[3'h0][23:20];
        freeList_6 = _RANDOM[3'h0][27:24];
        freeList_7 = _RANDOM[3'h0][31:28];
        freeList_8 = _RANDOM[3'h1][3:0];
        freeList_9 = _RANDOM[3'h1][7:4];
        freeList_10 = _RANDOM[3'h1][11:8];
        freeList_11 = _RANDOM[3'h1][15:12];
        freeList_12 = _RANDOM[3'h1][19:16];
        freeList_13 = _RANDOM[3'h1][23:20];
        freeList_14 = _RANDOM[3'h1][27:24];
        freeList_15 = _RANDOM[3'h1][31:28];
        headPtr_flag = _RANDOM[3'h2][0];
        headPtr_value = _RANDOM[3'h2][4:1];
        tailPtr_flag = _RANDOM[3'h2][5];
        tailPtr_value = _RANDOM[3'h2][9:6];
        freeMask = _RANDOM[3'h2][25:10];
        freeReq_next_nextVec_0_r = _RANDOM[3'h2][26];
        freeReq_next_nextVec_1_r = _RANDOM[3'h2][27];
        freeSlotOH_next_nextVec_0_r = {_RANDOM[3'h2][31:28], _RANDOM[3'h3][11:0]};
        freeSlotOH_next_nextVec_1_r = _RANDOM[3'h3][27:12];
        freeSlotCnt = {_RANDOM[3'h3][31:28], _RANDOM[3'h4][0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        freeList_0 = 4'h0;
        freeList_1 = 4'h1;
        freeList_2 = 4'h2;
        freeList_3 = 4'h3;
        freeList_4 = 4'h4;
        freeList_5 = 4'h5;
        freeList_6 = 4'h6;
        freeList_7 = 4'h7;
        freeList_8 = 4'h8;
        freeList_9 = 4'h9;
        freeList_10 = 4'hA;
        freeList_11 = 4'hB;
        freeList_12 = 4'hC;
        freeList_13 = 4'hD;
        freeList_14 = 4'hE;
        freeList_15 = 4'hF;
        headPtr_flag = 1'h0;
        headPtr_value = 4'h0;
        tailPtr_flag = 1'h1;
        tailPtr_value = 4'h0;
        freeMask = 16'h0;
        freeReq_next_nextVec_0_r = 1'h0;
        freeReq_next_nextVec_1_r = 1'h0;
        freeSlotOH_next_nextVec_0_r = 16'h0;
        freeSlotOH_next_nextVec_1_r = 16'h0;
        freeSlotCnt = 5'h10;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_allocateSlot_0 = _GEN[headPtr_value];
  assign io_allocateSlot_1 = _GEN[4'(headPtr_value + 4'h1)];
  assign io_validCount = 5'(5'h10 - freeSlotCnt);
endmodule

