// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VFDivSqrt(
  input          clock,
  input          reset,
  input          io_flush_valid,
  input          io_flush_bits_robIdx_flag,
  input  [7:0]   io_flush_bits_robIdx_value,
  input          io_flush_bits_level,
  output         io_in_ready,
  input          io_in_valid,
  input  [8:0]   io_in_bits_ctrl_fuOpType,
  input          io_in_bits_ctrl_robIdx_flag,
  input  [7:0]   io_in_bits_ctrl_robIdx_value,
  input  [7:0]   io_in_bits_ctrl_pdest,
  input          io_in_bits_ctrl_vecWen,
  input          io_in_bits_ctrl_v0Wen,
  input          io_in_bits_ctrl_fpu_wflags,
  input          io_in_bits_ctrl_vpu_vma,
  input          io_in_bits_ctrl_vpu_vta,
  input  [1:0]   io_in_bits_ctrl_vpu_vsew,
  input  [2:0]   io_in_bits_ctrl_vpu_vlmul,
  input          io_in_bits_ctrl_vpu_vm,
  input  [7:0]   io_in_bits_ctrl_vpu_vstart,
  input  [6:0]   io_in_bits_ctrl_vpu_vuopIdx,
  input          io_in_bits_ctrl_vpu_isNarrow,
  input          io_in_bits_ctrl_vpu_isDstMask,
  input  [7:0]   io_in_bits_data_src_4,
  input  [127:0] io_in_bits_data_src_3,
  input  [127:0] io_in_bits_data_src_2,
  input  [127:0] io_in_bits_data_src_1,
  input  [127:0] io_in_bits_data_src_0,
  input          io_out_ready,
  output         io_out_valid,
  output         io_out_bits_ctrl_robIdx_flag,
  output [7:0]   io_out_bits_ctrl_robIdx_value,
  output [7:0]   io_out_bits_ctrl_pdest,
  output         io_out_bits_ctrl_vecWen,
  output         io_out_bits_ctrl_v0Wen,
  output         io_out_bits_ctrl_fpu_wflags,
  output [127:0] io_out_bits_res_data,
  output [4:0]   io_out_bits_res_fflags,
  input  [2:0]   io_frm
);

  wire         io_out_valid_0;
  wire         io_in_ready_0;
  wire [63:0]  _vs1Split_io_outVec64b_0;
  wire [63:0]  _vs1Split_io_outVec64b_1;
  wire [63:0]  _vs2Split_io_outVec64b_0;
  wire [63:0]  _vs2Split_io_outVec64b_1;
  wire         _vfdivs_1_io_start_ready_o;
  wire         _vfdivs_1_io_finish_valid_o;
  wire [63:0]  _vfdivs_1_io_fpdiv_res_o;
  wire [19:0]  _vfdivs_1_io_fflags_o;
  wire         _vfdivs_0_io_start_ready_o;
  wire         _vfdivs_0_io_finish_valid_o;
  wire [63:0]  _vfdivs_0_io_fpdiv_res_o;
  wire [19:0]  _vfdivs_0_io_fflags_o;
  wire         _io_out_bits_perfDebugInfo_T = io_in_ready_0 & io_in_valid;
  reg  [8:0]   outCtrl_r_fuOpType;
  reg          outCtrl_r_robIdx_flag;
  reg  [7:0]   outCtrl_r_robIdx_value;
  reg          outCtrl_r_vpu_vma;
  reg          outCtrl_r_vpu_vta;
  reg  [1:0]   outCtrl_r_vpu_vsew;
  reg  [2:0]   outCtrl_r_vpu_vlmul;
  reg          outCtrl_r_vpu_vm;
  reg  [7:0]   outCtrl_r_vpu_vstart;
  reg  [6:0]   outCtrl_r_vpu_vuopIdx;
  reg          outCtrl_r_vpu_isNarrow;
  reg          outCtrl_r_vpu_isDstMask;
  wire [8:0]   outCtrl_fuOpType =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_fuOpType : outCtrl_r_fuOpType;
  wire [1:0]   outCtrl_vpu_vsew =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vsew : outCtrl_r_vpu_vsew;
  wire [2:0]   outCtrl_vpu_vlmul =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vlmul : outCtrl_r_vpu_vlmul;
  wire [2:0]   outCtrl_vpu_vuopIdx =
    _io_out_bits_perfDebugInfo_T
      ? io_in_bits_ctrl_vpu_vuopIdx[2:0]
      : outCtrl_r_vpu_vuopIdx[2:0];
  reg  [7:0]   outData_r_src_4;
  reg  [127:0] outData_r_src_3;
  reg  [127:0] outData_r_src_2;
  wire [7:0]   outData_src_4 =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_4 : outData_r_src_4;
  wire [127:0] outSrcMask =
    outCtrl_fuOpType == 9'h84 | outCtrl_fuOpType == 9'h86
      ? 128'h0
      : (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vm : outCtrl_r_vpu_vm)
          ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
          : _io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_3 : outData_r_src_3;
  reg          io_out_bits_ctrl_robIdx_r_flag;
  reg  [7:0]   io_out_bits_ctrl_robIdx_r_value;
  reg  [7:0]   io_out_bits_ctrl_pdest_r;
  reg          io_out_bits_ctrl_vecWen_r;
  reg          io_out_bits_ctrl_v0Wen_r;
  reg          io_out_bits_ctrl_fpu_r_wflags;
  wire         _GEN = io_in_ready_0 | _io_out_bits_perfDebugInfo_T;
  wire         thisRobIdx_flag =
    _GEN ? io_in_bits_ctrl_robIdx_flag : outCtrl_r_robIdx_flag;
  wire [7:0]   thisRobIdx_value =
    _GEN ? io_in_bits_ctrl_robIdx_value : outCtrl_r_robIdx_value;
  wire         _vfdivs_1_io_finish_ready_i_T = io_out_ready & io_out_valid_0;
  wire [8:0]   _vfdivs_1_io_flush_i_flushItself_T_1 = {thisRobIdx_flag, thisRobIdx_value};
  wire [8:0]   _vfdivs_1_io_flush_i_flushItself_T_2 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  wire         vfdivs_0_io_flush_i_differentFlag =
    thisRobIdx_flag ^ io_flush_bits_robIdx_flag;
  wire         vfdivs_0_io_flush_i_compare =
    thisRobIdx_value > io_flush_bits_robIdx_value;
  assign io_in_ready_0 = _vfdivs_0_io_start_ready_o & _vfdivs_1_io_start_ready_o;
  assign io_out_valid_0 = _vfdivs_0_io_finish_valid_o & _vfdivs_1_io_finish_valid_o;
  wire [4:0]   vlMax = 5'h10 >> outCtrl_vpu_vsew;
  wire [4:0]   vlMaxThisUop =
    outCtrl_vpu_vlmul[2]
      ? vlMax
        >> (outCtrl_vpu_vlmul[2]
              ? 2'(~(outCtrl_vpu_vlmul[1:0]) + 2'h1)
              : outCtrl_vpu_vlmul[1:0])
      : vlMax;
  wire [7:0]   _GEN_0 = {5'h0, outCtrl_vpu_vuopIdx};
  wire [7:0]   _GEN_1 = {3'h0, vlMaxThisUop};
  wire [7:0]   _vlSetThisUop_T_2 = 8'(_GEN_0 * _GEN_1);
  wire [7:0]   vlSetThisUop =
    outData_src_4 > _vlSetThisUop_T_2 ? 8'(outData_src_4 - _vlSetThisUop_T_2) : 8'h0;
  wire [7:0]   vlMaskRShift =
    8'hFF >> 4'(4'h8 - (vlSetThisUop < _GEN_1 ? vlSetThisUop[3:0] : vlMaxThisUop[3:0]));
  wire [127:0] _outSrcMaskRShift_T_2 = outSrcMask >> 8'(_GEN_0 * {3'h0, vlMax});
  wire         _vlMaskEn_T = outCtrl_vpu_vsew == 2'h1;
  wire         _vlMaskEn_T_1 = outCtrl_vpu_vsew == 2'h2;
  wire [7:0]   _GEN_2 =
    ((_vlMaskEn_T ? _outSrcMaskRShift_T_2[7:0] : 8'h0)
     | (_vlMaskEn_T_1
          ? {2'h0, _outSrcMaskRShift_T_2[3:2], 2'h0, _outSrcMaskRShift_T_2[1:0]}
          : 8'h0)
     | ((&outCtrl_vpu_vsew)
          ? {3'h0, _outSrcMaskRShift_T_2[1], 3'h0, _outSrcMaskRShift_T_2[0]}
          : 8'h0))
    & ((_vlMaskEn_T ? vlMaskRShift : 8'h0)
       | (_vlMaskEn_T_1 ? {2'h0, vlMaskRShift[3:2], 2'h0, vlMaskRShift[1:0]} : 8'h0)
       | ((&outCtrl_vpu_vsew) ? {3'h0, vlMaskRShift[1], 3'h0, vlMaskRShift[0]} : 8'h0));
  always @(posedge clock) begin
    if (_io_out_bits_perfDebugInfo_T) begin
      outCtrl_r_fuOpType <= io_in_bits_ctrl_fuOpType;
      outCtrl_r_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      outCtrl_r_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      outCtrl_r_vpu_vma <= io_in_bits_ctrl_vpu_vma;
      outCtrl_r_vpu_vta <= io_in_bits_ctrl_vpu_vta;
      outCtrl_r_vpu_vsew <= io_in_bits_ctrl_vpu_vsew;
      outCtrl_r_vpu_vlmul <= io_in_bits_ctrl_vpu_vlmul;
      outCtrl_r_vpu_vm <= io_in_bits_ctrl_vpu_vm;
      outCtrl_r_vpu_vstart <= io_in_bits_ctrl_vpu_vstart;
      outCtrl_r_vpu_vuopIdx <= io_in_bits_ctrl_vpu_vuopIdx;
      outCtrl_r_vpu_isNarrow <= io_in_bits_ctrl_vpu_isNarrow;
      outCtrl_r_vpu_isDstMask <= io_in_bits_ctrl_vpu_isDstMask;
      outData_r_src_4 <= io_in_bits_data_src_4;
      outData_r_src_3 <= io_in_bits_data_src_3;
      outData_r_src_2 <= io_in_bits_data_src_2;
      io_out_bits_ctrl_robIdx_r_flag <= io_in_bits_ctrl_robIdx_flag;
      io_out_bits_ctrl_robIdx_r_value <= io_in_bits_ctrl_robIdx_value;
      io_out_bits_ctrl_pdest_r <= io_in_bits_ctrl_pdest;
      io_out_bits_ctrl_vecWen_r <= io_in_bits_ctrl_vecWen;
      io_out_bits_ctrl_v0Wen_r <= io_in_bits_ctrl_v0Wen;
      io_out_bits_ctrl_fpu_r_wflags <= io_in_bits_ctrl_fpu_wflags;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:28];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1D; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        outCtrl_r_fuOpType = _RANDOM[5'h0][8:0];
        outCtrl_r_robIdx_flag = _RANDOM[5'h0][9];
        outCtrl_r_robIdx_value = _RANDOM[5'h0][17:10];
        outCtrl_r_vpu_vma = _RANDOM[5'h1][7];
        outCtrl_r_vpu_vta = _RANDOM[5'h1][8];
        outCtrl_r_vpu_vsew = _RANDOM[5'h1][10:9];
        outCtrl_r_vpu_vlmul = _RANDOM[5'h1][13:11];
        outCtrl_r_vpu_vm = _RANDOM[5'h1][22];
        outCtrl_r_vpu_vstart = _RANDOM[5'h1][30:23];
        outCtrl_r_vpu_vuopIdx = _RANDOM[5'h2][17:11];
        outCtrl_r_vpu_isNarrow = _RANDOM[5'h7][2];
        outCtrl_r_vpu_isDstMask = _RANDOM[5'h7][3];
        outData_r_src_4 = _RANDOM[5'h7][16:9];
        outData_r_src_3 =
          {_RANDOM[5'h7][31:17],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB][16:0]};
        outData_r_src_2 =
          {_RANDOM[5'hB][31:17],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF][16:0]};
        io_out_bits_ctrl_robIdx_r_flag = _RANDOM[5'h1B][17];
        io_out_bits_ctrl_robIdx_r_value = _RANDOM[5'h1B][25:18];
        io_out_bits_ctrl_pdest_r = {_RANDOM[5'h1B][31:26], _RANDOM[5'h1C][1:0]};
        io_out_bits_ctrl_vecWen_r = _RANDOM[5'h1C][2];
        io_out_bits_ctrl_v0Wen_r = _RANDOM[5'h1C][3];
        io_out_bits_ctrl_fpu_r_wflags = _RANDOM[5'h1C][6];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VectorFloatDivider vfdivs_0 (
    .clock             (clock),
    .reset             (reset),
    .io_start_valid_i  (io_in_valid),
    .io_start_ready_o  (_vfdivs_0_io_start_ready_o),
    .io_flush_i
      (io_flush_valid
       & (io_flush_bits_level
          & _vfdivs_1_io_flush_i_flushItself_T_1 == _vfdivs_1_io_flush_i_flushItself_T_2
          | vfdivs_0_io_flush_i_differentFlag ^ vfdivs_0_io_flush_i_compare)),
    .io_fp_format_i    (io_in_bits_ctrl_vpu_vsew),
    .io_opa_i          (_vs2Split_io_outVec64b_0),
    .io_opb_i          (_vs1Split_io_outVec64b_0),
    .io_is_sqrt_i      (io_in_bits_ctrl_fuOpType[0]),
    .io_rm_i           (io_frm),
    .io_finish_valid_o (_vfdivs_0_io_finish_valid_o),
    .io_finish_ready_i (_vfdivs_1_io_finish_ready_i_T),
    .io_fpdiv_res_o    (_vfdivs_0_io_fpdiv_res_o),
    .io_fflags_o       (_vfdivs_0_io_fflags_o)
  );
  VectorFloatDivider vfdivs_1 (
    .clock             (clock),
    .reset             (reset),
    .io_start_valid_i  (io_in_valid),
    .io_start_ready_o  (_vfdivs_1_io_start_ready_o),
    .io_flush_i
      (io_flush_valid
       & (io_flush_bits_level
          & _vfdivs_1_io_flush_i_flushItself_T_1 == _vfdivs_1_io_flush_i_flushItself_T_2
          | vfdivs_0_io_flush_i_differentFlag ^ vfdivs_0_io_flush_i_compare)),
    .io_fp_format_i    (io_in_bits_ctrl_vpu_vsew),
    .io_opa_i          (_vs2Split_io_outVec64b_1),
    .io_opb_i          (_vs1Split_io_outVec64b_1),
    .io_is_sqrt_i      (io_in_bits_ctrl_fuOpType[0]),
    .io_rm_i           (io_frm),
    .io_finish_valid_o (_vfdivs_1_io_finish_valid_o),
    .io_finish_ready_i (_vfdivs_1_io_finish_ready_i_T),
    .io_fpdiv_res_o    (_vfdivs_1_io_fpdiv_res_o),
    .io_fflags_o       (_vfdivs_1_io_fflags_o)
  );
  VecDataSplitModule vs2Split (
    .io_inVecData   (io_in_bits_data_src_1),
    .io_outVec8b_0  (/* unused */),
    .io_outVec8b_1  (/* unused */),
    .io_outVec8b_2  (/* unused */),
    .io_outVec8b_3  (/* unused */),
    .io_outVec8b_4  (/* unused */),
    .io_outVec8b_5  (/* unused */),
    .io_outVec8b_6  (/* unused */),
    .io_outVec8b_7  (/* unused */),
    .io_outVec8b_8  (/* unused */),
    .io_outVec8b_9  (/* unused */),
    .io_outVec8b_10 (/* unused */),
    .io_outVec8b_11 (/* unused */),
    .io_outVec8b_12 (/* unused */),
    .io_outVec8b_13 (/* unused */),
    .io_outVec8b_14 (/* unused */),
    .io_outVec8b_15 (/* unused */),
    .io_outVec16b_0 (/* unused */),
    .io_outVec16b_1 (/* unused */),
    .io_outVec16b_2 (/* unused */),
    .io_outVec16b_3 (/* unused */),
    .io_outVec16b_4 (/* unused */),
    .io_outVec16b_5 (/* unused */),
    .io_outVec16b_6 (/* unused */),
    .io_outVec16b_7 (/* unused */),
    .io_outVec32b_0 (/* unused */),
    .io_outVec32b_1 (/* unused */),
    .io_outVec32b_2 (/* unused */),
    .io_outVec32b_3 (/* unused */),
    .io_outVec64b_0 (_vs2Split_io_outVec64b_0),
    .io_outVec64b_1 (_vs2Split_io_outVec64b_1)
  );
  VecDataSplitModule vs1Split (
    .io_inVecData   (io_in_bits_data_src_0),
    .io_outVec8b_0  (/* unused */),
    .io_outVec8b_1  (/* unused */),
    .io_outVec8b_2  (/* unused */),
    .io_outVec8b_3  (/* unused */),
    .io_outVec8b_4  (/* unused */),
    .io_outVec8b_5  (/* unused */),
    .io_outVec8b_6  (/* unused */),
    .io_outVec8b_7  (/* unused */),
    .io_outVec8b_8  (/* unused */),
    .io_outVec8b_9  (/* unused */),
    .io_outVec8b_10 (/* unused */),
    .io_outVec8b_11 (/* unused */),
    .io_outVec8b_12 (/* unused */),
    .io_outVec8b_13 (/* unused */),
    .io_outVec8b_14 (/* unused */),
    .io_outVec8b_15 (/* unused */),
    .io_outVec16b_0 (/* unused */),
    .io_outVec16b_1 (/* unused */),
    .io_outVec16b_2 (/* unused */),
    .io_outVec16b_3 (/* unused */),
    .io_outVec16b_4 (/* unused */),
    .io_outVec16b_5 (/* unused */),
    .io_outVec16b_6 (/* unused */),
    .io_outVec16b_7 (/* unused */),
    .io_outVec32b_0 (/* unused */),
    .io_outVec32b_1 (/* unused */),
    .io_outVec32b_2 (/* unused */),
    .io_outVec32b_3 (/* unused */),
    .io_outVec64b_0 (_vs1Split_io_outVec64b_0),
    .io_outVec64b_1 (_vs1Split_io_outVec64b_1)
  );
  Mgu mgu (
    .io_in_vd           ({_vfdivs_1_io_fpdiv_res_o, _vfdivs_0_io_fpdiv_res_o}),
    .io_in_oldVd
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_2 : outData_r_src_2),
    .io_in_mask         (outSrcMask),
    .io_in_info_ta
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vta : outCtrl_r_vpu_vta),
    .io_in_info_ma
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vma : outCtrl_r_vpu_vma),
    .io_in_info_vl      (outData_src_4),
    .io_in_info_vstart
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vstart : outCtrl_r_vpu_vstart),
    .io_in_info_eew     (outCtrl_vpu_vsew),
    .io_in_info_vdIdx   (outCtrl_vpu_vuopIdx),
    .io_in_info_narrow
      (_io_out_bits_perfDebugInfo_T
         ? io_in_bits_ctrl_vpu_isNarrow
         : outCtrl_r_vpu_isNarrow),
    .io_in_info_dstMask
      (_io_out_bits_perfDebugInfo_T
         ? io_in_bits_ctrl_vpu_isDstMask
         : outCtrl_r_vpu_isDstMask),
    .io_out_vd          (io_out_bits_res_data),
    .io_out_active      (/* unused */)
  );
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = io_out_valid_0;
  assign io_out_bits_ctrl_robIdx_flag = io_out_bits_ctrl_robIdx_r_flag;
  assign io_out_bits_ctrl_robIdx_value = io_out_bits_ctrl_robIdx_r_value;
  assign io_out_bits_ctrl_pdest = io_out_bits_ctrl_pdest_r;
  assign io_out_bits_ctrl_vecWen = io_out_bits_ctrl_vecWen_r;
  assign io_out_bits_ctrl_v0Wen = io_out_bits_ctrl_v0Wen_r;
  assign io_out_bits_ctrl_fpu_wflags = io_out_bits_ctrl_fpu_r_wflags;
  assign io_out_bits_res_fflags =
    (_GEN_2[0] ? _vfdivs_0_io_fflags_o[4:0] : 5'h0)
    | (_GEN_2[1] ? _vfdivs_0_io_fflags_o[9:5] : 5'h0)
    | (_GEN_2[2] ? _vfdivs_0_io_fflags_o[14:10] : 5'h0)
    | (_GEN_2[3] ? _vfdivs_0_io_fflags_o[19:15] : 5'h0)
    | (_GEN_2[4] ? _vfdivs_1_io_fflags_o[4:0] : 5'h0)
    | (_GEN_2[5] ? _vfdivs_1_io_fflags_o[9:5] : 5'h0)
    | (_GEN_2[6] ? _vfdivs_1_io_fflags_o[14:10] : 5'h0)
    | (_GEN_2[7] ? _vfdivs_1_io_fflags_o[19:15] : 5'h0);
endmodule

