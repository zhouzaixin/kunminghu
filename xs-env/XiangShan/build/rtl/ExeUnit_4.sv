// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ExeUnit_4(
  input         io_in_valid,
  input  [34:0] io_in_bits_fuType,
  input  [8:0]  io_in_bits_fuOpType,
  input  [63:0] io_in_bits_src_0,
  input  [63:0] io_in_bits_src_1,
  input         io_in_bits_robIdx_flag,
  input  [7:0]  io_in_bits_robIdx_value,
  input  [7:0]  io_in_bits_pdest,
  input         io_in_bits_rfWen,
  output        io_out_valid,
  output [63:0] io_out_bits_data_0,
  output [63:0] io_out_bits_data_1,
  output [7:0]  io_out_bits_pdest,
  output        io_out_bits_robIdx_flag,
  output [7:0]  io_out_bits_robIdx_value,
  output        io_out_bits_intWen
);

  wire        _in1ToN_io_out_0_valid;
  wire [8:0]  _in1ToN_io_out_0_bits_fuOpType;
  wire [63:0] _Alu_io_out_bits_res_data;
  Alu Alu (
    .io_in_valid                        (_in1ToN_io_out_0_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_0_bits_fuOpType),
    .io_in_bits_ctrlPipe_0_robIdx_flag  (io_in_bits_robIdx_flag),
    .io_in_bits_ctrlPipe_0_robIdx_value (io_in_bits_robIdx_value),
    .io_in_bits_ctrlPipe_0_pdest        (io_in_bits_pdest),
    .io_in_bits_ctrlPipe_0_rfWen        (io_in_bits_rfWen),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (io_out_bits_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (io_out_bits_robIdx_value),
    .io_out_bits_ctrl_pdest             (io_out_bits_pdest),
    .io_out_bits_ctrl_rfWen             (io_out_bits_intWen),
    .io_out_bits_res_data               (_Alu_io_out_bits_res_data)
  );
  Dispatcher_4 in1ToN (
    .io_in_valid            (io_in_valid),
    .io_in_bits_fuType      (io_in_bits_fuType),
    .io_in_bits_fuOpType    (io_in_bits_fuOpType),
    .io_out_0_valid         (_in1ToN_io_out_0_valid),
    .io_out_0_bits_fuOpType (_in1ToN_io_out_0_bits_fuOpType)
  );
  assign io_out_bits_data_0 = _Alu_io_out_bits_res_data;
  assign io_out_bits_data_1 = _Alu_io_out_bits_res_data;
endmodule

