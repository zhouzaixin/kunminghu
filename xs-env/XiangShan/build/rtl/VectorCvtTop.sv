// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VectorCvtTop(
  input          clock,
  input          reset,
  input          io_fire,
  input          io_uopIdx,
  input  [63:0]  io_src_0,
  input  [63:0]  io_src_1,
  input  [7:0]   io_opType,
  input  [1:0]   io_sew,
  input  [2:0]   io_rm,
  input  [3:0]   io_outputWidth1H,
  input          io_isWiden,
  input          io_isNarrow,
  output [127:0] io_result,
  output [39:0]  io_fflags
);

  wire [63:0] _vectorCvt1_io_result;
  wire [19:0] _vectorCvt1_io_fflags;
  wire [63:0] _vectorCvt0_io_result;
  wire [19:0] _vectorCvt0_io_fflags;
  reg         fireReg_last_r;
  reg         isNarrowCycle2_r;
  reg         isNarrowCycle2;
  reg  [3:0]  outputWidth1HCycle2_r;
  reg  [3:0]  outputWidth1HCycle2;
  wire [39:0] _io_fflags_T_4 = {_vectorCvt1_io_fflags, _vectorCvt0_io_fflags};
  wire [39:0] _io_fflags_T_24 =
    (outputWidth1HCycle2[0] ? _io_fflags_T_4 : 40'h0)
    | (outputWidth1HCycle2[1]
         ? (isNarrowCycle2
              ? {20'h0, _vectorCvt1_io_fflags[9:0], _vectorCvt0_io_fflags[9:0]}
              : _io_fflags_T_4)
         : 40'h0);
  wire [19:0] _GEN =
    _io_fflags_T_24[19:0]
    | (outputWidth1HCycle2[2]
         ? (isNarrowCycle2
              ? {10'h0, _vectorCvt1_io_fflags[4:0], _vectorCvt0_io_fflags[4:0]}
              : {_vectorCvt1_io_fflags[9:0], _vectorCvt0_io_fflags[9:0]})
         : 20'h0);
  always @(posedge clock or posedge reset) begin
    if (reset)
      fireReg_last_r <= 1'h0;
    else if (io_fire | fireReg_last_r)
      fireReg_last_r <= io_fire;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_fire) begin
      isNarrowCycle2_r <= io_isNarrow;
      outputWidth1HCycle2_r <= io_outputWidth1H;
    end
    if (fireReg_last_r) begin
      isNarrowCycle2 <= isNarrowCycle2_r;
      outputWidth1HCycle2 <= outputWidth1HCycle2_r;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        fireReg_last_r = _RANDOM[/*Zero width*/ 1'b0][0];
        isNarrowCycle2_r = _RANDOM[/*Zero width*/ 1'b0][1];
        isNarrowCycle2 = _RANDOM[/*Zero width*/ 1'b0][2];
        outputWidth1HCycle2_r = _RANDOM[/*Zero width*/ 1'b0][6:3];
        outputWidth1HCycle2 = _RANDOM[/*Zero width*/ 1'b0][10:7];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        fireReg_last_r = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VectorCvt vectorCvt0 (
    .clock     (clock),
    .reset     (reset),
    .io_fire   (io_fire),
    .io_src
      (io_isWiden ? {32'h0, io_uopIdx ? io_src_1[31:0] : io_src_0[31:0]} : io_src_0),
    .io_opType (io_opType),
    .io_sew    (io_sew),
    .io_rm     (io_rm),
    .io_result (_vectorCvt0_io_result),
    .io_fflags (_vectorCvt0_io_fflags)
  );
  VectorCvt vectorCvt1 (
    .clock     (clock),
    .reset     (reset),
    .io_fire   (io_fire),
    .io_src
      (io_isWiden ? {32'h0, io_uopIdx ? io_src_1[63:32] : io_src_0[63:32]} : io_src_1),
    .io_opType (io_opType),
    .io_sew    (io_sew),
    .io_rm     (io_rm),
    .io_result (_vectorCvt1_io_result),
    .io_fflags (_vectorCvt1_io_fflags)
  );
  assign io_result =
    isNarrowCycle2
      ? {64'h0, _vectorCvt1_io_result[31:0], _vectorCvt0_io_result[31:0]}
      : {_vectorCvt1_io_result, _vectorCvt0_io_result};
  assign io_fflags =
    {_io_fflags_T_24[39:20],
     _GEN[19:10],
     _GEN[9:0]
       | (outputWidth1HCycle2[3]
            ? {_vectorCvt1_io_fflags[4:0], _vectorCvt0_io_fflags[4:0]}
            : 10'h0)};
endmodule

