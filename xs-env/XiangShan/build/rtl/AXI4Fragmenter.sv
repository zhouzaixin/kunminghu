// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4Fragmenter(
  input          clock,
  input          reset,
  output         auto_in_aw_ready,
  input          auto_in_aw_valid,
  input          auto_in_aw_bits_id,
  input  [47:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [1:0]   auto_in_aw_bits_burst,
  input          auto_in_aw_bits_lock,
  input  [3:0]   auto_in_aw_bits_cache,
  input  [2:0]   auto_in_aw_bits_prot,
  input  [3:0]   auto_in_aw_bits_qos,
  input  [12:0]  auto_in_aw_bits_echo_extra_id,
  output         auto_in_w_ready,
  input          auto_in_w_valid,
  input  [255:0] auto_in_w_bits_data,
  input  [31:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output         auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output [12:0]  auto_in_b_bits_echo_extra_id,
  output         auto_in_ar_ready,
  input          auto_in_ar_valid,
  input          auto_in_ar_bits_id,
  input  [47:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [1:0]   auto_in_ar_bits_burst,
  input          auto_in_ar_bits_lock,
  input  [3:0]   auto_in_ar_bits_cache,
  input  [2:0]   auto_in_ar_bits_prot,
  input  [3:0]   auto_in_ar_bits_qos,
  input  [12:0]  auto_in_ar_bits_echo_extra_id,
  input          auto_in_r_ready,
  output         auto_in_r_valid,
  output         auto_in_r_bits_id,
  output [255:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output [12:0]  auto_in_r_bits_echo_extra_id,
  output         auto_in_r_bits_last,
  input          auto_out_aw_ready,
  output         auto_out_aw_valid,
  output         auto_out_aw_bits_id,
  output [47:0]  auto_out_aw_bits_addr,
  output [7:0]   auto_out_aw_bits_len,
  output [2:0]   auto_out_aw_bits_size,
  output [12:0]  auto_out_aw_bits_echo_extra_id,
  output         auto_out_aw_bits_echo_real_last,
  input          auto_out_w_ready,
  output         auto_out_w_valid,
  output [255:0] auto_out_w_bits_data,
  output [31:0]  auto_out_w_bits_strb,
  output         auto_out_w_bits_last,
  output         auto_out_b_ready,
  input          auto_out_b_valid,
  input          auto_out_b_bits_id,
  input  [1:0]   auto_out_b_bits_resp,
  input  [12:0]  auto_out_b_bits_echo_extra_id,
  input          auto_out_b_bits_echo_real_last,
  input          auto_out_ar_ready,
  output         auto_out_ar_valid,
  output         auto_out_ar_bits_id,
  output [47:0]  auto_out_ar_bits_addr,
  output [7:0]   auto_out_ar_bits_len,
  output [2:0]   auto_out_ar_bits_size,
  output [12:0]  auto_out_ar_bits_echo_extra_id,
  output         auto_out_ar_bits_echo_real_last,
  output         auto_out_r_ready,
  input          auto_out_r_valid,
  input          auto_out_r_bits_id,
  input  [255:0] auto_out_r_bits_data,
  input  [1:0]   auto_out_r_bits_resp,
  input  [12:0]  auto_out_r_bits_echo_extra_id,
  input          auto_out_r_bits_echo_real_last,
  input          auto_out_r_bits_last
);

  wire        w_idle;
  wire        in_aw_ready;
  wire        _in_w_deq_q_io_deq_valid;
  wire        _deq_q_1_io_deq_valid;
  wire [47:0] _deq_q_1_io_deq_bits_addr;
  wire [7:0]  _deq_q_1_io_deq_bits_len;
  wire [2:0]  _deq_q_1_io_deq_bits_size;
  wire [1:0]  _deq_q_1_io_deq_bits_burst;
  wire        _deq_q_io_deq_valid;
  wire [47:0] _deq_q_io_deq_bits_addr;
  wire [7:0]  _deq_q_io_deq_bits_len;
  wire [2:0]  _deq_q_io_deq_bits_size;
  wire [1:0]  _deq_q_io_deq_bits_burst;
  reg         busy;
  reg  [47:0] r_addr;
  reg  [7:0]  r_len;
  wire [7:0]  len = busy ? r_len : _deq_q_io_deq_bits_len;
  wire [47:0] addr = busy ? r_addr : _deq_q_io_deq_bits_addr;
  wire [5:0]  _GEN = len[6:1] | len[7:2];
  wire [4:0]  _GEN_0 = _GEN[4:0] | {len[7], _GEN[5:2]};
  wire        fixed = _deq_q_io_deq_bits_burst == 2'h0;
  wire [7:0]  beats1 =
    fixed | _deq_q_io_deq_bits_size != 3'h5
      ? 8'h0
      : {7'h0, (_GEN_0[0] | _GEN_0[4] | len[0]) & ~(addr[5])};
  wire        ar_last = beats1 == len;
  wire [47:0] _out_bits_addr_T = ~addr;
  wire [11:0] _out_bits_addr_T_1 = 12'h1F << _deq_q_io_deq_bits_size;
  wire        _GEN_1 = auto_out_ar_ready & _deq_q_io_deq_valid;
  reg         busy_1;
  reg  [47:0] r_addr_1;
  reg  [7:0]  r_len_1;
  wire [7:0]  len_1 = busy_1 ? r_len_1 : _deq_q_1_io_deq_bits_len;
  wire [47:0] addr_1 = busy_1 ? r_addr_1 : _deq_q_1_io_deq_bits_addr;
  wire [5:0]  _GEN_2 = len_1[6:1] | len_1[7:2];
  wire [4:0]  _GEN_3 = _GEN_2[4:0] | {len_1[7], _GEN_2[5:2]};
  wire        fixed_1 = _deq_q_1_io_deq_bits_burst == 2'h0;
  wire [7:0]  beats1_1 =
    fixed_1 | _deq_q_1_io_deq_bits_size != 3'h5
      ? 8'h0
      : {7'h0, (_GEN_3[0] | _GEN_3[4] | len_1[0]) & ~(addr_1[5])};
  wire [8:0]  w_beats = {beats1_1, 1'h1} & {1'h1, ~beats1_1};
  wire        aw_last = beats1_1 == len_1;
  wire [47:0] _out_bits_addr_T_6 = ~addr_1;
  wire [11:0] _out_bits_addr_T_7 = 12'h1F << _deq_q_1_io_deq_bits_size;
  wire        _GEN_4 = in_aw_ready & _deq_q_1_io_deq_valid;
  reg         wbeats_latched;
  wire        _in_aw_ready_T = w_idle | wbeats_latched;
  wire        nodeOut_aw_valid = _deq_q_1_io_deq_valid & _in_aw_ready_T;
  assign in_aw_ready = auto_out_aw_ready & _in_aw_ready_T;
  wire        wbeats_valid = _deq_q_1_io_deq_valid & ~wbeats_latched;
  reg  [8:0]  w_counter;
  assign w_idle = w_counter == 9'h0;
  wire [8:0]  w_todo = w_idle ? (wbeats_valid ? w_beats : 9'h0) : w_counter;
  wire        nodeOut_w_valid = _in_w_deq_q_io_deq_valid & (~w_idle | wbeats_valid);
  wire        nodeOut_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;
  reg  [1:0]  error_0;
  reg  [1:0]  error_1;
  wire        _GEN_5 = nodeOut_b_ready & auto_out_b_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      busy <= 1'h0;
      busy_1 <= 1'h0;
      wbeats_latched <= 1'h0;
      w_counter <= 9'h0;
      error_0 <= 2'h0;
      error_1 <= 2'h0;
    end
    else begin
      if (_GEN_1)
        busy <= ~ar_last;
      if (_GEN_4)
        busy_1 <= ~aw_last;
      wbeats_latched <=
        ~(auto_out_aw_ready & nodeOut_aw_valid)
        & (wbeats_valid & w_idle | wbeats_latched);
      w_counter <= 9'(w_todo - {8'h0, auto_out_w_ready & nodeOut_w_valid});
      if (~auto_out_b_bits_id & _GEN_5) begin
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;
        else
          error_0 <= error_0 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id & _GEN_5) begin
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;
        else
          error_1 <= error_1 | auto_out_b_bits_resp;
      end
    end
  end // always @(posedge, posedge)
  wire [22:0] _wrapMask_T_1 =
    {7'h0, _deq_q_io_deq_bits_len, 8'hFF} << _deq_q_io_deq_bits_size;
  wire [47:0] _mux_addr_T_1 = ~_deq_q_io_deq_bits_addr;
  wire [8:0]  beats = {beats1, 1'h1} & {1'h1, ~beats1};
  wire [47:0] _inc_addr_T_1 =
    48'(addr + {32'h0, {7'h0, beats} << _deq_q_io_deq_bits_size});
  wire [22:0] _wrapMask_T_3 =
    {7'h0, _deq_q_1_io_deq_bits_len, 8'hFF} << _deq_q_1_io_deq_bits_size;
  wire [47:0] _mux_addr_T_6 = ~_deq_q_1_io_deq_bits_addr;
  wire [47:0] _inc_addr_T_3 =
    48'(addr_1 + {32'h0, {7'h0, w_beats} << _deq_q_1_io_deq_bits_size});
  always @(posedge clock) begin
    if (_GEN_1) begin
      if (fixed)
        r_addr <= _deq_q_io_deq_bits_addr;
      else if (_deq_q_io_deq_bits_burst == 2'h2)
        r_addr <=
          {33'h0, _inc_addr_T_1[14:0] & _wrapMask_T_1[22:8]}
          | ~{_mux_addr_T_1[47:15], _mux_addr_T_1[14:0] | _wrapMask_T_1[22:8]};
      else
        r_addr <= _inc_addr_T_1;
      r_len <= 8'(len - beats[7:0]);
    end
    if (_GEN_4) begin
      if (fixed_1)
        r_addr_1 <= _deq_q_1_io_deq_bits_addr;
      else if (_deq_q_1_io_deq_bits_burst == 2'h2)
        r_addr_1 <=
          {33'h0, _inc_addr_T_3[14:0] & _wrapMask_T_3[22:8]}
          | ~{_mux_addr_T_6[47:15], _mux_addr_T_6[14:0] | _wrapMask_T_3[22:8]};
      else
        r_addr_1 <= _inc_addr_T_3;
      r_len_1 <= 8'(len_1 - w_beats[7:0]);
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        busy = _RANDOM[2'h0][0];
        r_addr = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][16:0]};
        r_len = _RANDOM[2'h1][24:17];
        busy_1 = _RANDOM[2'h1][25];
        r_addr_1 = {_RANDOM[2'h1][31:26], _RANDOM[2'h2], _RANDOM[2'h3][9:0]};
        r_len_1 = _RANDOM[2'h3][17:10];
        wbeats_latched = _RANDOM[2'h3][18];
        w_counter = _RANDOM[2'h3][27:19];
        error_0 = _RANDOM[2'h3][29:28];
        error_1 = _RANDOM[2'h3][31:30];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        busy = 1'h0;
        busy_1 = 1'h0;
        wbeats_latched = 1'h0;
        w_counter = 9'h0;
        error_0 = 2'h0;
        error_1 = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_AXI4BundleAR deq_q (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_ready              (auto_in_ar_ready),
    .io_enq_valid              (auto_in_ar_valid),
    .io_enq_bits_id            (auto_in_ar_bits_id),
    .io_enq_bits_addr          (auto_in_ar_bits_addr),
    .io_enq_bits_len           (auto_in_ar_bits_len),
    .io_enq_bits_size          (auto_in_ar_bits_size),
    .io_enq_bits_burst         (auto_in_ar_bits_burst),
    .io_enq_bits_lock          (auto_in_ar_bits_lock),
    .io_enq_bits_cache         (auto_in_ar_bits_cache),
    .io_enq_bits_prot          (auto_in_ar_bits_prot),
    .io_enq_bits_qos           (auto_in_ar_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready              (auto_out_ar_ready & ar_last),
    .io_deq_valid              (_deq_q_io_deq_valid),
    .io_deq_bits_id            (auto_out_ar_bits_id),
    .io_deq_bits_addr          (_deq_q_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id (auto_out_ar_bits_echo_extra_id)
  );
  Queue1_AXI4BundleAW deq_q_1 (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_ready              (auto_in_aw_ready),
    .io_enq_valid              (auto_in_aw_valid),
    .io_enq_bits_id            (auto_in_aw_bits_id),
    .io_enq_bits_addr          (auto_in_aw_bits_addr),
    .io_enq_bits_len           (auto_in_aw_bits_len),
    .io_enq_bits_size          (auto_in_aw_bits_size),
    .io_enq_bits_burst         (auto_in_aw_bits_burst),
    .io_enq_bits_lock          (auto_in_aw_bits_lock),
    .io_enq_bits_cache         (auto_in_aw_bits_cache),
    .io_enq_bits_prot          (auto_in_aw_bits_prot),
    .io_enq_bits_qos           (auto_in_aw_bits_qos),
    .io_enq_bits_echo_extra_id (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready              (in_aw_ready & aw_last),
    .io_deq_valid              (_deq_q_1_io_deq_valid),
    .io_deq_bits_id            (auto_out_aw_bits_id),
    .io_deq_bits_addr          (_deq_q_1_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_1_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_1_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_1_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id (auto_out_aw_bits_echo_extra_id)
  );
  Queue1_AXI4BundleW in_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (auto_in_w_ready),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & (~w_idle | wbeats_valid)),
    .io_deq_valid     (_in_w_deq_q_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (/* unused */)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp =
    auto_out_b_bits_resp | (auto_out_b_bits_id ? error_1 : error_0);
  assign auto_in_b_bits_echo_extra_id = auto_out_b_bits_echo_extra_id;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id = auto_out_r_bits_echo_extra_id;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;
  assign auto_out_aw_valid = nodeOut_aw_valid;
  assign auto_out_aw_bits_addr =
    ~{_out_bits_addr_T_6[47:5], _out_bits_addr_T_6[4:0] | ~(_out_bits_addr_T_7[4:0])};
  assign auto_out_aw_bits_len = beats1_1;
  assign auto_out_aw_bits_size = _deq_q_1_io_deq_bits_size;
  assign auto_out_aw_bits_echo_real_last = aw_last;
  assign auto_out_w_valid = nodeOut_w_valid;
  assign auto_out_w_bits_last = w_todo == 9'h1;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid = _deq_q_io_deq_valid;
  assign auto_out_ar_bits_addr =
    ~{_out_bits_addr_T[47:5], _out_bits_addr_T[4:0] | ~(_out_bits_addr_T_1[4:0])};
  assign auto_out_ar_bits_len = beats1;
  assign auto_out_ar_bits_size = _deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_echo_real_last = ar_last;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

