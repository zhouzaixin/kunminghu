// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module HashModule(
  input         clock,
  input  [63:0] io_src,
  input  [8:0]  io_func,
  input         io_regEnable,
  output [63:0] io_out
);

  reg  [63:0]      io_out_r;
  wire [31:0]      sha256sum0 =
    {io_src[1:0], io_src[31:2]} ^ {io_src[12:0], io_src[31:13]}
    ^ {io_src[21:0], io_src[31:22]};
  wire [31:0]      sha256sum1 =
    {io_src[5:0], io_src[31:6]} ^ {io_src[10:0], io_src[31:11]}
    ^ {io_src[24:0], io_src[31:25]};
  wire [31:0]      sha256sig0 =
    {io_src[6:0], io_src[31:7]} ^ {io_src[17:0], io_src[31:18]} ^ {3'h0, io_src[31:3]};
  wire [31:0]      _GEN = {io_src[16:0], io_src[31:17]};
  wire [31:0]      sha256sig1 =
    _GEN ^ {io_src[18:0], io_src[31:19]} ^ {10'h0, io_src[31:10]};
  wire [31:0]      sm3p0 =
    {io_src[22:0], io_src[31:23]} ^ {io_src[14:0], io_src[31:15]} ^ io_src[31:0];
  wire [31:0]      sm3p1 = {io_src[8:0], io_src[31:9]} ^ _GEN ^ io_src[31:0];
  wire [7:0][63:0] _GEN_0 =
    {{{io_src[18:0], io_src[63:19]} ^ {io_src[60:0], io_src[63:61]}
        ^ {6'h0, io_src[63:6]}},
     {{io_src[0], io_src[63:1]} ^ {io_src[7:0], io_src[63:8]} ^ {7'h0, io_src[63:7]}},
     {{io_src[13:0], io_src[63:14]} ^ {io_src[17:0], io_src[63:18]}
        ^ {io_src[40:0], io_src[63:41]}},
     {{io_src[27:0], io_src[63:28]} ^ {io_src[33:0], io_src[63:34]}
        ^ {io_src[38:0], io_src[63:39]}},
     {{{32{sha256sig1[31]}}, sha256sig1}},
     {{{32{sha256sig0[31]}}, sha256sig0}},
     {{{32{sha256sum1[31]}}, sha256sum1}},
     {{{32{sha256sum0[31]}}, sha256sum0}}};
  always @(posedge clock) begin
    if (io_regEnable)
      io_out_r <=
        io_func[3]
          ? (io_func[0] ? {{32{sm3p1[31]}}, sm3p1} : {{32{sm3p0[31]}}, sm3p0})
          : _GEN_0[io_func[2:0]];
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        io_out_r = {_RANDOM[1'h0], _RANDOM[1'h1]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = io_out_r;
endmodule

