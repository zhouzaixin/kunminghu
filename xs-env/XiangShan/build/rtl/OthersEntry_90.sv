// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module OthersEntry_90(
  input         clock,
  input         reset,
  input         io_commonIn_flush_valid,
  input         io_commonIn_flush_bits_robIdx_flag,
  input  [7:0]  io_commonIn_flush_bits_robIdx_value,
  input         io_commonIn_flush_bits_level,
  input         io_commonIn_enq_valid,
  input         io_commonIn_enq_bits_status_robIdx_flag,
  input  [7:0]  io_commonIn_enq_bits_status_robIdx_value,
  input         io_commonIn_enq_bits_status_fuType_4,
  input         io_commonIn_enq_bits_status_fuType_11,
  input         io_commonIn_enq_bits_status_fuType_12,
  input         io_commonIn_enq_bits_status_fuType_13,
  input         io_commonIn_enq_bits_status_fuType_14,
  input  [7:0]  io_commonIn_enq_bits_status_srcStatus_0_psrc,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_0_srcType,
  input         io_commonIn_enq_bits_status_srcStatus_0_srcState,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_0_dataSources_value,
  input  [1:0]  io_commonIn_enq_bits_status_srcStatus_0_exuSources_value,
  input  [7:0]  io_commonIn_enq_bits_status_srcStatus_1_psrc,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_1_srcType,
  input         io_commonIn_enq_bits_status_srcStatus_1_srcState,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_1_dataSources_value,
  input  [1:0]  io_commonIn_enq_bits_status_srcStatus_1_exuSources_value,
  input  [7:0]  io_commonIn_enq_bits_status_srcStatus_2_psrc,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_2_srcType,
  input         io_commonIn_enq_bits_status_srcStatus_2_srcState,
  input  [3:0]  io_commonIn_enq_bits_status_srcStatus_2_dataSources_value,
  input  [1:0]  io_commonIn_enq_bits_status_srcStatus_2_exuSources_value,
  input         io_commonIn_enq_bits_status_issued,
  input  [1:0]  io_commonIn_enq_bits_status_issueTimer,
  input         io_commonIn_enq_bits_status_deqPortIdx,
  input  [8:0]  io_commonIn_enq_bits_payload_fuOpType,
  input         io_commonIn_enq_bits_payload_rfWen,
  input         io_commonIn_enq_bits_payload_fpWen,
  input         io_commonIn_enq_bits_payload_vecWen,
  input         io_commonIn_enq_bits_payload_v0Wen,
  input         io_commonIn_enq_bits_payload_fpu_wflags,
  input  [1:0]  io_commonIn_enq_bits_payload_fpu_fmt,
  input  [2:0]  io_commonIn_enq_bits_payload_fpu_rm,
  input  [7:0]  io_commonIn_enq_bits_payload_pdest,
  input         io_commonIn_wakeUpFromWB_5_valid,
  input         io_commonIn_wakeUpFromWB_5_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_5_bits_pdest,
  input         io_commonIn_wakeUpFromWB_4_valid,
  input         io_commonIn_wakeUpFromWB_4_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_4_bits_pdest,
  input         io_commonIn_wakeUpFromWB_3_valid,
  input         io_commonIn_wakeUpFromWB_3_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_3_bits_pdest,
  input         io_commonIn_wakeUpFromWB_2_valid,
  input         io_commonIn_wakeUpFromWB_2_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_2_bits_pdest,
  input         io_commonIn_wakeUpFromWB_1_valid,
  input         io_commonIn_wakeUpFromWB_1_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_1_bits_pdest,
  input         io_commonIn_wakeUpFromWB_0_valid,
  input         io_commonIn_wakeUpFromWB_0_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromWB_0_bits_pdest,
  input         io_commonIn_wakeUpFromIQ_2_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromIQ_2_bits_pdest,
  input         io_commonIn_wakeUpFromIQ_1_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromIQ_1_bits_pdest,
  input         io_commonIn_wakeUpFromIQ_0_bits_fpWen,
  input  [7:0]  io_commonIn_wakeUpFromIQ_0_bits_pdest,
  input         io_commonIn_wakeUpFromIQ_0_bits_is0Lat,
  input         io_commonIn_og0Cancel_8,
  input         io_commonIn_deqSel,
  input         io_commonIn_deqPortIdxWrite,
  input         io_commonIn_issueResp_valid,
  input  [1:0]  io_commonIn_issueResp_bits_resp,
  output        io_commonOut_valid,
  output        io_commonOut_issued,
  output        io_commonOut_canIssue,
  output [34:0] io_commonOut_fuType,
  output [3:0]  io_commonOut_dataSources_0_value,
  output [3:0]  io_commonOut_dataSources_1_value,
  output [3:0]  io_commonOut_dataSources_2_value,
  output [1:0]  io_commonOut_exuSources_0_value,
  output [1:0]  io_commonOut_exuSources_1_value,
  output [1:0]  io_commonOut_exuSources_2_value,
  output        io_commonOut_entry_bits_status_robIdx_flag,
  output [7:0]  io_commonOut_entry_bits_status_robIdx_value,
  output        io_commonOut_entry_bits_status_fuType_4,
  output        io_commonOut_entry_bits_status_fuType_11,
  output        io_commonOut_entry_bits_status_fuType_12,
  output        io_commonOut_entry_bits_status_fuType_13,
  output        io_commonOut_entry_bits_status_fuType_14,
  output [7:0]  io_commonOut_entry_bits_status_srcStatus_0_psrc,
  output [7:0]  io_commonOut_entry_bits_status_srcStatus_1_psrc,
  output [7:0]  io_commonOut_entry_bits_status_srcStatus_2_psrc,
  output [8:0]  io_commonOut_entry_bits_payload_fuOpType,
  output        io_commonOut_entry_bits_payload_rfWen,
  output        io_commonOut_entry_bits_payload_fpWen,
  output        io_commonOut_entry_bits_payload_vecWen,
  output        io_commonOut_entry_bits_payload_v0Wen,
  output        io_commonOut_entry_bits_payload_fpu_wflags,
  output [1:0]  io_commonOut_entry_bits_payload_fpu_fmt,
  output [2:0]  io_commonOut_entry_bits_payload_fpu_rm,
  output [7:0]  io_commonOut_entry_bits_payload_pdest,
  output        io_commonOut_deqPortIdxRead,
  output [1:0]  io_commonOut_issueTimerRead
);

  wire [2:0] _io_commonOut_exuSources_2_value_comp_io_out;
  wire [2:0] _io_commonOut_exuSources_1_value_comp_io_out;
  wire [2:0] _io_commonOut_exuSources_0_value_comp_io_out;
  wire [2:0] _entryUpdate_status_srcStatus_2_exuSources_value_comp_io_out;
  wire [2:0] _entryUpdate_status_srcStatus_1_exuSources_value_comp_io_out;
  wire [2:0] _entryUpdate_status_srcStatus_0_exuSources_value_comp_io_out;
  reg        validReg_last_REG;
  reg        entryReg_status_robIdx_flag;
  reg  [7:0] entryReg_status_robIdx_value;
  reg        entryReg_status_fuType_4;
  reg        entryReg_status_fuType_11;
  reg        entryReg_status_fuType_12;
  reg        entryReg_status_fuType_13;
  reg        entryReg_status_fuType_14;
  reg  [7:0] entryReg_status_srcStatus_0_psrc;
  reg  [3:0] entryReg_status_srcStatus_0_srcType;
  reg        entryReg_status_srcStatus_0_srcState;
  reg  [3:0] entryReg_status_srcStatus_0_dataSources_value;
  reg  [1:0] entryReg_status_srcStatus_0_exuSources_value;
  reg  [7:0] entryReg_status_srcStatus_1_psrc;
  reg  [3:0] entryReg_status_srcStatus_1_srcType;
  reg        entryReg_status_srcStatus_1_srcState;
  reg  [3:0] entryReg_status_srcStatus_1_dataSources_value;
  reg  [1:0] entryReg_status_srcStatus_1_exuSources_value;
  reg  [7:0] entryReg_status_srcStatus_2_psrc;
  reg  [3:0] entryReg_status_srcStatus_2_srcType;
  reg        entryReg_status_srcStatus_2_srcState;
  reg  [3:0] entryReg_status_srcStatus_2_dataSources_value;
  reg  [1:0] entryReg_status_srcStatus_2_exuSources_value;
  reg        entryReg_status_issued;
  reg  [1:0] entryReg_status_issueTimer;
  reg        entryReg_status_deqPortIdx;
  reg  [8:0] entryReg_payload_fuOpType;
  reg        entryReg_payload_rfWen;
  reg        entryReg_payload_fpWen;
  reg        entryReg_payload_vecWen;
  reg        entryReg_payload_v0Wen;
  reg        entryReg_payload_fpu_wflags;
  reg  [1:0] entryReg_payload_fpu_fmt;
  reg  [2:0] entryReg_payload_fpu_rm;
  reg  [7:0] entryReg_payload_pdest;
  wire       common_flushed =
    io_commonIn_flush_valid
    & (io_commonIn_flush_bits_level
       & {entryReg_status_robIdx_flag,
          entryReg_status_robIdx_value} == {io_commonIn_flush_bits_robIdx_flag,
                                            io_commonIn_flush_bits_robIdx_value}
       | entryReg_status_robIdx_flag ^ io_commonIn_flush_bits_robIdx_flag
       ^ entryReg_status_robIdx_value > io_commonIn_flush_bits_robIdx_value);
  wire       wakeupVec_0_0 =
    io_commonIn_wakeUpFromIQ_0_bits_pdest == entryReg_status_srcStatus_0_psrc
    & entryReg_status_srcStatus_0_srcType[1] & io_commonIn_wakeUpFromIQ_0_bits_fpWen;
  wire       wakeupVec_1_0 =
    io_commonIn_wakeUpFromIQ_0_bits_pdest == entryReg_status_srcStatus_1_psrc
    & entryReg_status_srcStatus_1_srcType[1] & io_commonIn_wakeUpFromIQ_0_bits_fpWen;
  wire       wakeupVec_2_0 =
    io_commonIn_wakeUpFromIQ_0_bits_pdest == entryReg_status_srcStatus_2_psrc
    & entryReg_status_srcStatus_2_srcType[1] & io_commonIn_wakeUpFromIQ_0_bits_fpWen;
  wire       wakeupVec_0_1 =
    io_commonIn_wakeUpFromIQ_1_bits_pdest == entryReg_status_srcStatus_0_psrc
    & entryReg_status_srcStatus_0_srcType[1] & io_commonIn_wakeUpFromIQ_1_bits_fpWen;
  wire       wakeupVec_1_1 =
    io_commonIn_wakeUpFromIQ_1_bits_pdest == entryReg_status_srcStatus_1_psrc
    & entryReg_status_srcStatus_1_srcType[1] & io_commonIn_wakeUpFromIQ_1_bits_fpWen;
  wire       wakeupVec_2_1 =
    io_commonIn_wakeUpFromIQ_1_bits_pdest == entryReg_status_srcStatus_2_psrc
    & entryReg_status_srcStatus_2_srcType[1] & io_commonIn_wakeUpFromIQ_1_bits_fpWen;
  wire       wakeupVec_0_2 =
    io_commonIn_wakeUpFromIQ_2_bits_pdest == entryReg_status_srcStatus_0_psrc
    & entryReg_status_srcStatus_0_srcType[1] & io_commonIn_wakeUpFromIQ_2_bits_fpWen;
  wire       wakeupVec_1_2 =
    io_commonIn_wakeUpFromIQ_2_bits_pdest == entryReg_status_srcStatus_1_psrc
    & entryReg_status_srcStatus_1_srcType[1] & io_commonIn_wakeUpFromIQ_2_bits_fpWen;
  wire       wakeupVec_2_2 =
    io_commonIn_wakeUpFromIQ_2_bits_pdest == entryReg_status_srcStatus_2_psrc
    & entryReg_status_srcStatus_2_srcType[1] & io_commonIn_wakeUpFromIQ_2_bits_fpWen;
  wire       cancelSel_0 =
    io_commonIn_og0Cancel_8 & io_commonIn_wakeUpFromIQ_0_bits_is0Lat;
  wire       hasWakeupIQ_srcWakeupByIQ_0_0 = wakeupVec_0_0 & ~cancelSel_0;
  wire       hasWakeupIQ_srcWakeupByIQ_1_0 = wakeupVec_1_0 & ~cancelSel_0;
  wire       hasWakeupIQ_srcWakeupByIQ_2_0 = wakeupVec_2_0 & ~cancelSel_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      validReg_last_REG <= 1'h0;
    else
      validReg_last_REG <=
        io_commonIn_enq_valid
        | ~(common_flushed | io_commonIn_issueResp_valid
            & (&io_commonIn_issueResp_bits_resp)) & validReg_last_REG;
  end // always @(posedge, posedge)
  wire [2:0] _wakeupByIQ_T =
    {wakeupVec_0_2, wakeupVec_0_1, hasWakeupIQ_srcWakeupByIQ_0_0};
  wire [2:0] _wakeupByIQ_T_3 =
    {wakeupVec_1_2, wakeupVec_1_1, hasWakeupIQ_srcWakeupByIQ_1_0};
  wire [2:0] _wakeupByIQ_T_6 =
    {wakeupVec_2_2, wakeupVec_2_1, hasWakeupIQ_srcWakeupByIQ_2_0};
  always @(posedge clock) begin
    if (io_commonIn_enq_valid) begin
      entryReg_status_robIdx_flag <= io_commonIn_enq_bits_status_robIdx_flag;
      entryReg_status_robIdx_value <= io_commonIn_enq_bits_status_robIdx_value;
      entryReg_status_fuType_4 <= io_commonIn_enq_bits_status_fuType_4;
      entryReg_status_fuType_11 <= io_commonIn_enq_bits_status_fuType_11;
      entryReg_status_fuType_12 <= io_commonIn_enq_bits_status_fuType_12;
      entryReg_status_fuType_13 <= io_commonIn_enq_bits_status_fuType_13;
      entryReg_status_fuType_14 <= io_commonIn_enq_bits_status_fuType_14;
      entryReg_status_srcStatus_0_psrc <= io_commonIn_enq_bits_status_srcStatus_0_psrc;
      entryReg_status_srcStatus_0_srcType <=
        io_commonIn_enq_bits_status_srcStatus_0_srcType;
      entryReg_status_srcStatus_0_srcState <=
        io_commonIn_enq_bits_status_srcStatus_0_srcState;
      entryReg_status_srcStatus_0_dataSources_value <=
        io_commonIn_enq_bits_status_srcStatus_0_dataSources_value;
      entryReg_status_srcStatus_0_exuSources_value <=
        io_commonIn_enq_bits_status_srcStatus_0_exuSources_value;
      entryReg_status_srcStatus_1_psrc <= io_commonIn_enq_bits_status_srcStatus_1_psrc;
      entryReg_status_srcStatus_1_srcType <=
        io_commonIn_enq_bits_status_srcStatus_1_srcType;
      entryReg_status_srcStatus_1_srcState <=
        io_commonIn_enq_bits_status_srcStatus_1_srcState;
      entryReg_status_srcStatus_1_dataSources_value <=
        io_commonIn_enq_bits_status_srcStatus_1_dataSources_value;
      entryReg_status_srcStatus_1_exuSources_value <=
        io_commonIn_enq_bits_status_srcStatus_1_exuSources_value;
      entryReg_status_srcStatus_2_psrc <= io_commonIn_enq_bits_status_srcStatus_2_psrc;
      entryReg_status_srcStatus_2_srcType <=
        io_commonIn_enq_bits_status_srcStatus_2_srcType;
      entryReg_status_srcStatus_2_srcState <=
        io_commonIn_enq_bits_status_srcStatus_2_srcState;
      entryReg_status_srcStatus_2_dataSources_value <=
        io_commonIn_enq_bits_status_srcStatus_2_dataSources_value;
      entryReg_status_srcStatus_2_exuSources_value <=
        io_commonIn_enq_bits_status_srcStatus_2_exuSources_value;
      entryReg_status_issued <= io_commonIn_enq_bits_status_issued;
      entryReg_status_issueTimer <= io_commonIn_enq_bits_status_issueTimer;
      entryReg_status_deqPortIdx <= io_commonIn_enq_bits_status_deqPortIdx;
      entryReg_payload_fuOpType <= io_commonIn_enq_bits_payload_fuOpType;
      entryReg_payload_rfWen <= io_commonIn_enq_bits_payload_rfWen;
      entryReg_payload_fpWen <= io_commonIn_enq_bits_payload_fpWen;
      entryReg_payload_vecWen <= io_commonIn_enq_bits_payload_vecWen;
      entryReg_payload_v0Wen <= io_commonIn_enq_bits_payload_v0Wen;
      entryReg_payload_fpu_wflags <= io_commonIn_enq_bits_payload_fpu_wflags;
      entryReg_payload_fpu_fmt <= io_commonIn_enq_bits_payload_fpu_fmt;
      entryReg_payload_fpu_rm <= io_commonIn_enq_bits_payload_fpu_rm;
      entryReg_payload_pdest <= io_commonIn_enq_bits_payload_pdest;
    end
    else begin
      entryReg_status_srcStatus_0_srcState <=
        entryReg_status_srcStatus_0_srcState
        | (|{io_commonIn_wakeUpFromWB_5_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_5_bits_fpWen & io_commonIn_wakeUpFromWB_5_valid,
             io_commonIn_wakeUpFromWB_4_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_4_bits_fpWen & io_commonIn_wakeUpFromWB_4_valid,
             io_commonIn_wakeUpFromWB_3_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_3_bits_fpWen & io_commonIn_wakeUpFromWB_3_valid,
             io_commonIn_wakeUpFromWB_2_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_2_bits_fpWen & io_commonIn_wakeUpFromWB_2_valid,
             io_commonIn_wakeUpFromWB_1_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_1_bits_fpWen & io_commonIn_wakeUpFromWB_1_valid,
             io_commonIn_wakeUpFromWB_0_bits_pdest == entryReg_status_srcStatus_0_psrc
               & entryReg_status_srcStatus_0_srcType[1]
               & io_commonIn_wakeUpFromWB_0_bits_fpWen
               & io_commonIn_wakeUpFromWB_0_valid}) | (|_wakeupByIQ_T);
      if (|_wakeupByIQ_T)
        entryReg_status_srcStatus_0_dataSources_value <= 4'h2;
      else if (entryReg_status_srcStatus_0_dataSources_value == 4'h2)
        entryReg_status_srcStatus_0_dataSources_value <= 4'h8;
      if (|{wakeupVec_0_2, wakeupVec_0_1, hasWakeupIQ_srcWakeupByIQ_0_0})
        entryReg_status_srcStatus_0_exuSources_value <=
          {|(_entryUpdate_status_srcStatus_0_exuSources_value_comp_io_out[2:1]),
           _entryUpdate_status_srcStatus_0_exuSources_value_comp_io_out[2]
             | _entryUpdate_status_srcStatus_0_exuSources_value_comp_io_out[0]};
      entryReg_status_srcStatus_1_srcState <=
        entryReg_status_srcStatus_1_srcState
        | (|{io_commonIn_wakeUpFromWB_5_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_5_bits_fpWen & io_commonIn_wakeUpFromWB_5_valid,
             io_commonIn_wakeUpFromWB_4_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_4_bits_fpWen & io_commonIn_wakeUpFromWB_4_valid,
             io_commonIn_wakeUpFromWB_3_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_3_bits_fpWen & io_commonIn_wakeUpFromWB_3_valid,
             io_commonIn_wakeUpFromWB_2_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_2_bits_fpWen & io_commonIn_wakeUpFromWB_2_valid,
             io_commonIn_wakeUpFromWB_1_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_1_bits_fpWen & io_commonIn_wakeUpFromWB_1_valid,
             io_commonIn_wakeUpFromWB_0_bits_pdest == entryReg_status_srcStatus_1_psrc
               & entryReg_status_srcStatus_1_srcType[1]
               & io_commonIn_wakeUpFromWB_0_bits_fpWen
               & io_commonIn_wakeUpFromWB_0_valid}) | (|_wakeupByIQ_T_3);
      if (|_wakeupByIQ_T_3)
        entryReg_status_srcStatus_1_dataSources_value <= 4'h2;
      else if (entryReg_status_srcStatus_1_dataSources_value == 4'h2)
        entryReg_status_srcStatus_1_dataSources_value <= 4'h8;
      if (|{wakeupVec_1_2, wakeupVec_1_1, hasWakeupIQ_srcWakeupByIQ_1_0})
        entryReg_status_srcStatus_1_exuSources_value <=
          {|(_entryUpdate_status_srcStatus_1_exuSources_value_comp_io_out[2:1]),
           _entryUpdate_status_srcStatus_1_exuSources_value_comp_io_out[2]
             | _entryUpdate_status_srcStatus_1_exuSources_value_comp_io_out[0]};
      entryReg_status_srcStatus_2_srcState <=
        entryReg_status_srcStatus_2_srcState
        | (|{io_commonIn_wakeUpFromWB_5_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_5_bits_fpWen & io_commonIn_wakeUpFromWB_5_valid,
             io_commonIn_wakeUpFromWB_4_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_4_bits_fpWen & io_commonIn_wakeUpFromWB_4_valid,
             io_commonIn_wakeUpFromWB_3_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_3_bits_fpWen & io_commonIn_wakeUpFromWB_3_valid,
             io_commonIn_wakeUpFromWB_2_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_2_bits_fpWen & io_commonIn_wakeUpFromWB_2_valid,
             io_commonIn_wakeUpFromWB_1_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_1_bits_fpWen & io_commonIn_wakeUpFromWB_1_valid,
             io_commonIn_wakeUpFromWB_0_bits_pdest == entryReg_status_srcStatus_2_psrc
               & entryReg_status_srcStatus_2_srcType[1]
               & io_commonIn_wakeUpFromWB_0_bits_fpWen
               & io_commonIn_wakeUpFromWB_0_valid}) | (|_wakeupByIQ_T_6);
      if (|_wakeupByIQ_T_6)
        entryReg_status_srcStatus_2_dataSources_value <= 4'h2;
      else if (entryReg_status_srcStatus_2_dataSources_value == 4'h2)
        entryReg_status_srcStatus_2_dataSources_value <= 4'h8;
      if (|{wakeupVec_2_2, wakeupVec_2_1, hasWakeupIQ_srcWakeupByIQ_2_0})
        entryReg_status_srcStatus_2_exuSources_value <=
          {|(_entryUpdate_status_srcStatus_2_exuSources_value_comp_io_out[2:1]),
           _entryUpdate_status_srcStatus_2_exuSources_value_comp_io_out[2]
             | _entryUpdate_status_srcStatus_2_exuSources_value_comp_io_out[0]};
      entryReg_status_issued <=
        io_commonIn_deqSel
        | ~(io_commonIn_issueResp_valid & io_commonIn_issueResp_bits_resp == 2'h0)
        & entryReg_status_issued;
      if (io_commonIn_deqSel) begin
        entryReg_status_issueTimer <= 2'h0;
        entryReg_status_deqPortIdx <= io_commonIn_deqPortIdxWrite;
      end
      else begin
        if (entryReg_status_issued) begin
          if (~(&entryReg_status_issueTimer))
            entryReg_status_issueTimer <= 2'(entryReg_status_issueTimer + 2'h1);
        end
        else
          entryReg_status_issueTimer <= 2'h3;
        entryReg_status_deqPortIdx <= entryReg_status_issued & entryReg_status_deqPortIdx;
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:21];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h16; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validReg_last_REG = _RANDOM[5'h0][0];
        entryReg_status_robIdx_flag = _RANDOM[5'h0][1];
        entryReg_status_robIdx_value = _RANDOM[5'h0][9:2];
        entryReg_status_fuType_4 = _RANDOM[5'h0][14];
        entryReg_status_fuType_11 = _RANDOM[5'h0][21];
        entryReg_status_fuType_12 = _RANDOM[5'h0][22];
        entryReg_status_fuType_13 = _RANDOM[5'h0][23];
        entryReg_status_fuType_14 = _RANDOM[5'h0][24];
        entryReg_status_srcStatus_0_psrc = _RANDOM[5'h1][20:13];
        entryReg_status_srcStatus_0_srcType = _RANDOM[5'h1][24:21];
        entryReg_status_srcStatus_0_srcState = _RANDOM[5'h1][25];
        entryReg_status_srcStatus_0_dataSources_value = _RANDOM[5'h1][29:26];
        entryReg_status_srcStatus_0_exuSources_value = _RANDOM[5'h2][5:4];
        entryReg_status_srcStatus_1_psrc = _RANDOM[5'h2][13:6];
        entryReg_status_srcStatus_1_srcType = _RANDOM[5'h2][17:14];
        entryReg_status_srcStatus_1_srcState = _RANDOM[5'h2][18];
        entryReg_status_srcStatus_1_dataSources_value = _RANDOM[5'h2][22:19];
        entryReg_status_srcStatus_1_exuSources_value = _RANDOM[5'h2][30:29];
        entryReg_status_srcStatus_2_psrc = {_RANDOM[5'h2][31], _RANDOM[5'h3][6:0]};
        entryReg_status_srcStatus_2_srcType = _RANDOM[5'h3][10:7];
        entryReg_status_srcStatus_2_srcState = _RANDOM[5'h3][11];
        entryReg_status_srcStatus_2_dataSources_value = _RANDOM[5'h3][15:12];
        entryReg_status_srcStatus_2_exuSources_value = _RANDOM[5'h3][23:22];
        entryReg_status_issued = _RANDOM[5'h3][25];
        entryReg_status_issueTimer = _RANDOM[5'h3][28:27];
        entryReg_status_deqPortIdx = _RANDOM[5'h3][29];
        entryReg_payload_fuOpType = _RANDOM[5'hA][16:8];
        entryReg_payload_rfWen = _RANDOM[5'hA][17];
        entryReg_payload_fpWen = _RANDOM[5'hA][18];
        entryReg_payload_vecWen = _RANDOM[5'hA][19];
        entryReg_payload_v0Wen = _RANDOM[5'hA][20];
        entryReg_payload_fpu_wflags = _RANDOM[5'hC][1];
        entryReg_payload_fpu_fmt = _RANDOM[5'hC][5:4];
        entryReg_payload_fpu_rm = _RANDOM[5'hC][8:6];
        entryReg_payload_pdest = _RANDOM[5'h15][29:22];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        validReg_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  UIntCompressor_27_000000000000001010100000000 entryUpdate_status_srcStatus_0_exuSources_value_comp (
    .io_in
      ({14'h0,
        wakeupVec_0_2,
        1'h0,
        wakeupVec_0_1,
        1'h0,
        hasWakeupIQ_srcWakeupByIQ_0_0,
        8'h0}),
    .io_out (_entryUpdate_status_srcStatus_0_exuSources_value_comp_io_out)
  );
  UIntCompressor_27_000000000000001010100000000 entryUpdate_status_srcStatus_1_exuSources_value_comp (
    .io_in
      ({14'h0,
        wakeupVec_1_2,
        1'h0,
        wakeupVec_1_1,
        1'h0,
        hasWakeupIQ_srcWakeupByIQ_1_0,
        8'h0}),
    .io_out (_entryUpdate_status_srcStatus_1_exuSources_value_comp_io_out)
  );
  UIntCompressor_27_000000000000001010100000000 entryUpdate_status_srcStatus_2_exuSources_value_comp (
    .io_in
      ({14'h0,
        wakeupVec_2_2,
        1'h0,
        wakeupVec_2_1,
        1'h0,
        hasWakeupIQ_srcWakeupByIQ_2_0,
        8'h0}),
    .io_out (_entryUpdate_status_srcStatus_2_exuSources_value_comp_io_out)
  );
  UIntCompressor_27_000000000000001010100000000 io_commonOut_exuSources_0_value_comp (
    .io_in  ({14'h0, wakeupVec_0_2, 1'h0, wakeupVec_0_1, 1'h0, wakeupVec_0_0, 8'h0}),
    .io_out (_io_commonOut_exuSources_0_value_comp_io_out)
  );
  UIntCompressor_27_000000000000001010100000000 io_commonOut_exuSources_1_value_comp (
    .io_in  ({14'h0, wakeupVec_1_2, 1'h0, wakeupVec_1_1, 1'h0, wakeupVec_1_0, 8'h0}),
    .io_out (_io_commonOut_exuSources_1_value_comp_io_out)
  );
  UIntCompressor_27_000000000000001010100000000 io_commonOut_exuSources_2_value_comp (
    .io_in  ({14'h0, wakeupVec_2_2, 1'h0, wakeupVec_2_1, 1'h0, wakeupVec_2_0, 8'h0}),
    .io_out (_io_commonOut_exuSources_2_value_comp_io_out)
  );
  assign io_commonOut_valid = validReg_last_REG;
  assign io_commonOut_issued = entryReg_status_issued;
  assign io_commonOut_canIssue =
    (validReg_last_REG
     & (&{entryReg_status_srcStatus_2_srcState,
          entryReg_status_srcStatus_1_srcState,
          entryReg_status_srcStatus_0_srcState}) & ~entryReg_status_issued
     | validReg_last_REG & ~entryReg_status_issued
     & (&{(|{wakeupVec_2_2, wakeupVec_2_1, wakeupVec_2_0})
            | entryReg_status_srcStatus_2_srcState,
          (|{wakeupVec_1_2, wakeupVec_1_1, wakeupVec_1_0})
            | entryReg_status_srcStatus_1_srcState,
          (|{wakeupVec_0_2, wakeupVec_0_1, wakeupVec_0_0})
            | entryReg_status_srcStatus_0_srcState})) & ~common_flushed;
  assign io_commonOut_fuType =
    {20'h0,
     entryReg_status_fuType_14,
     entryReg_status_fuType_13,
     entryReg_status_fuType_12,
     entryReg_status_fuType_11,
     6'h0,
     entryReg_status_fuType_4,
     4'h0};
  assign io_commonOut_dataSources_0_value =
    (|{wakeupVec_0_2, wakeupVec_0_1, wakeupVec_0_0})
      ? 4'h1
      : entryReg_status_srcStatus_0_dataSources_value;
  assign io_commonOut_dataSources_1_value =
    (|{wakeupVec_1_2, wakeupVec_1_1, wakeupVec_1_0})
      ? 4'h1
      : entryReg_status_srcStatus_1_dataSources_value;
  assign io_commonOut_dataSources_2_value =
    (|{wakeupVec_2_2, wakeupVec_2_1, wakeupVec_2_0})
      ? 4'h1
      : entryReg_status_srcStatus_2_dataSources_value;
  assign io_commonOut_exuSources_0_value =
    (|{wakeupVec_0_2, wakeupVec_0_1, wakeupVec_0_0})
      ? {|(_io_commonOut_exuSources_0_value_comp_io_out[2:1]),
         _io_commonOut_exuSources_0_value_comp_io_out[2]
           | _io_commonOut_exuSources_0_value_comp_io_out[0]}
      : entryReg_status_srcStatus_0_exuSources_value;
  assign io_commonOut_exuSources_1_value =
    (|{wakeupVec_1_2, wakeupVec_1_1, wakeupVec_1_0})
      ? {|(_io_commonOut_exuSources_1_value_comp_io_out[2:1]),
         _io_commonOut_exuSources_1_value_comp_io_out[2]
           | _io_commonOut_exuSources_1_value_comp_io_out[0]}
      : entryReg_status_srcStatus_1_exuSources_value;
  assign io_commonOut_exuSources_2_value =
    (|{wakeupVec_2_2, wakeupVec_2_1, wakeupVec_2_0})
      ? {|(_io_commonOut_exuSources_2_value_comp_io_out[2:1]),
         _io_commonOut_exuSources_2_value_comp_io_out[2]
           | _io_commonOut_exuSources_2_value_comp_io_out[0]}
      : entryReg_status_srcStatus_2_exuSources_value;
  assign io_commonOut_entry_bits_status_robIdx_flag = entryReg_status_robIdx_flag;
  assign io_commonOut_entry_bits_status_robIdx_value = entryReg_status_robIdx_value;
  assign io_commonOut_entry_bits_status_fuType_4 = entryReg_status_fuType_4;
  assign io_commonOut_entry_bits_status_fuType_11 = entryReg_status_fuType_11;
  assign io_commonOut_entry_bits_status_fuType_12 = entryReg_status_fuType_12;
  assign io_commonOut_entry_bits_status_fuType_13 = entryReg_status_fuType_13;
  assign io_commonOut_entry_bits_status_fuType_14 = entryReg_status_fuType_14;
  assign io_commonOut_entry_bits_status_srcStatus_0_psrc =
    entryReg_status_srcStatus_0_psrc;
  assign io_commonOut_entry_bits_status_srcStatus_1_psrc =
    entryReg_status_srcStatus_1_psrc;
  assign io_commonOut_entry_bits_status_srcStatus_2_psrc =
    entryReg_status_srcStatus_2_psrc;
  assign io_commonOut_entry_bits_payload_fuOpType = entryReg_payload_fuOpType;
  assign io_commonOut_entry_bits_payload_rfWen = entryReg_payload_rfWen;
  assign io_commonOut_entry_bits_payload_fpWen = entryReg_payload_fpWen;
  assign io_commonOut_entry_bits_payload_vecWen = entryReg_payload_vecWen;
  assign io_commonOut_entry_bits_payload_v0Wen = entryReg_payload_v0Wen;
  assign io_commonOut_entry_bits_payload_fpu_wflags = entryReg_payload_fpu_wflags;
  assign io_commonOut_entry_bits_payload_fpu_fmt = entryReg_payload_fpu_fmt;
  assign io_commonOut_entry_bits_payload_fpu_rm = entryReg_payload_fpu_rm;
  assign io_commonOut_entry_bits_payload_pdest = entryReg_payload_pdest;
  assign io_commonOut_deqPortIdxRead = entryReg_status_deqPortIdx;
  assign io_commonOut_issueTimerRead = entryReg_status_issueTimer;
endmodule

