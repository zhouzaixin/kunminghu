// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RRArbiterInit(
  input         clock,
  input         reset,
  input         io_in_0_valid,
  input  [37:0] io_in_0_bits_req_info_vpn,
  input  [1:0]  io_in_0_bits_req_info_s2xlate,
  input  [1:0]  io_in_0_bits_req_info_source,
  input  [43:0] io_in_0_bits_ppn,
  input         io_in_0_bits_hptw_resp_entry_n,
  input  [37:0] io_in_0_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_0_bits_hptw_resp_entry_level,
  input         io_in_1_valid,
  input  [37:0] io_in_1_bits_req_info_vpn,
  input  [1:0]  io_in_1_bits_req_info_s2xlate,
  input  [1:0]  io_in_1_bits_req_info_source,
  input  [43:0] io_in_1_bits_ppn,
  input         io_in_1_bits_hptw_resp_entry_n,
  input  [37:0] io_in_1_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_1_bits_hptw_resp_entry_level,
  input         io_in_2_valid,
  input  [37:0] io_in_2_bits_req_info_vpn,
  input  [1:0]  io_in_2_bits_req_info_s2xlate,
  input  [1:0]  io_in_2_bits_req_info_source,
  input  [43:0] io_in_2_bits_ppn,
  input         io_in_2_bits_hptw_resp_entry_n,
  input  [37:0] io_in_2_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_2_bits_hptw_resp_entry_level,
  input         io_in_3_valid,
  input  [37:0] io_in_3_bits_req_info_vpn,
  input  [1:0]  io_in_3_bits_req_info_s2xlate,
  input  [1:0]  io_in_3_bits_req_info_source,
  input  [43:0] io_in_3_bits_ppn,
  input         io_in_3_bits_hptw_resp_entry_n,
  input  [37:0] io_in_3_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_3_bits_hptw_resp_entry_level,
  input         io_in_4_valid,
  input  [37:0] io_in_4_bits_req_info_vpn,
  input  [1:0]  io_in_4_bits_req_info_s2xlate,
  input  [1:0]  io_in_4_bits_req_info_source,
  input  [43:0] io_in_4_bits_ppn,
  input         io_in_4_bits_hptw_resp_entry_n,
  input  [37:0] io_in_4_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_4_bits_hptw_resp_entry_level,
  input         io_in_5_valid,
  input  [37:0] io_in_5_bits_req_info_vpn,
  input  [1:0]  io_in_5_bits_req_info_s2xlate,
  input  [1:0]  io_in_5_bits_req_info_source,
  input  [43:0] io_in_5_bits_ppn,
  input         io_in_5_bits_hptw_resp_entry_n,
  input  [37:0] io_in_5_bits_hptw_resp_entry_ppn,
  input  [1:0]  io_in_5_bits_hptw_resp_entry_level,
  input         io_out_ready,
  output        io_out_valid,
  output [37:0] io_out_bits_req_info_vpn,
  output [1:0]  io_out_bits_req_info_s2xlate,
  output [1:0]  io_out_bits_req_info_source,
  output [43:0] io_out_bits_ppn,
  output        io_out_bits_hptw_resp_entry_n,
  output [37:0] io_out_bits_hptw_resp_entry_ppn,
  output [1:0]  io_out_bits_hptw_resp_entry_level,
  output [2:0]  io_chosen
);

  wire [2:0]       io_chosen_choice;
  wire [7:0]       _GEN =
    {{io_in_0_valid},
     {io_in_0_valid},
     {io_in_5_valid},
     {io_in_4_valid},
     {io_in_3_valid},
     {io_in_2_valid},
     {io_in_1_valid},
     {io_in_0_valid}};
  wire             io_out_valid_0 = _GEN[io_chosen_choice];
  wire [7:0][37:0] _GEN_0 =
    {{io_in_0_bits_req_info_vpn},
     {io_in_0_bits_req_info_vpn},
     {io_in_5_bits_req_info_vpn},
     {io_in_4_bits_req_info_vpn},
     {io_in_3_bits_req_info_vpn},
     {io_in_2_bits_req_info_vpn},
     {io_in_1_bits_req_info_vpn},
     {io_in_0_bits_req_info_vpn}};
  wire [7:0][1:0]  _GEN_1 =
    {{io_in_0_bits_req_info_s2xlate},
     {io_in_0_bits_req_info_s2xlate},
     {io_in_5_bits_req_info_s2xlate},
     {io_in_4_bits_req_info_s2xlate},
     {io_in_3_bits_req_info_s2xlate},
     {io_in_2_bits_req_info_s2xlate},
     {io_in_1_bits_req_info_s2xlate},
     {io_in_0_bits_req_info_s2xlate}};
  wire [7:0][1:0]  _GEN_2 =
    {{io_in_0_bits_req_info_source},
     {io_in_0_bits_req_info_source},
     {io_in_5_bits_req_info_source},
     {io_in_4_bits_req_info_source},
     {io_in_3_bits_req_info_source},
     {io_in_2_bits_req_info_source},
     {io_in_1_bits_req_info_source},
     {io_in_0_bits_req_info_source}};
  wire [7:0][43:0] _GEN_3 =
    {{io_in_0_bits_ppn},
     {io_in_0_bits_ppn},
     {io_in_5_bits_ppn},
     {io_in_4_bits_ppn},
     {io_in_3_bits_ppn},
     {io_in_2_bits_ppn},
     {io_in_1_bits_ppn},
     {io_in_0_bits_ppn}};
  wire [7:0]       _GEN_4 =
    {{io_in_0_bits_hptw_resp_entry_n},
     {io_in_0_bits_hptw_resp_entry_n},
     {io_in_5_bits_hptw_resp_entry_n},
     {io_in_4_bits_hptw_resp_entry_n},
     {io_in_3_bits_hptw_resp_entry_n},
     {io_in_2_bits_hptw_resp_entry_n},
     {io_in_1_bits_hptw_resp_entry_n},
     {io_in_0_bits_hptw_resp_entry_n}};
  wire [7:0][37:0] _GEN_5 =
    {{io_in_0_bits_hptw_resp_entry_ppn},
     {io_in_0_bits_hptw_resp_entry_ppn},
     {io_in_5_bits_hptw_resp_entry_ppn},
     {io_in_4_bits_hptw_resp_entry_ppn},
     {io_in_3_bits_hptw_resp_entry_ppn},
     {io_in_2_bits_hptw_resp_entry_ppn},
     {io_in_1_bits_hptw_resp_entry_ppn},
     {io_in_0_bits_hptw_resp_entry_ppn}};
  wire [7:0][1:0]  _GEN_6 =
    {{io_in_0_bits_hptw_resp_entry_level},
     {io_in_0_bits_hptw_resp_entry_level},
     {io_in_5_bits_hptw_resp_entry_level},
     {io_in_4_bits_hptw_resp_entry_level},
     {io_in_3_bits_hptw_resp_entry_level},
     {io_in_2_bits_hptw_resp_entry_level},
     {io_in_1_bits_hptw_resp_entry_level},
     {io_in_0_bits_hptw_resp_entry_level}};
  reg  [2:0]       ctrl_validMask_grantMask_lastGrant;
  wire             ctrl_validMask_1 =
    io_in_1_valid & ctrl_validMask_grantMask_lastGrant == 3'h0;
  wire             ctrl_validMask_2 =
    io_in_2_valid & ctrl_validMask_grantMask_lastGrant < 3'h2;
  wire             ctrl_validMask_3 =
    io_in_3_valid & ctrl_validMask_grantMask_lastGrant < 3'h3;
  wire             ctrl_validMask_4 =
    io_in_4_valid & ~(ctrl_validMask_grantMask_lastGrant[2]);
  wire             ctrl_validMask_5 =
    io_in_5_valid & ctrl_validMask_grantMask_lastGrant < 3'h5;
  wire [2:0]       _GEN_7 =
    io_in_0_valid
      ? 3'h0
      : io_in_1_valid
          ? 3'h1
          : io_in_2_valid ? 3'h2 : io_in_3_valid ? 3'h3 : {2'h2, ~io_in_4_valid};
  assign io_chosen_choice =
    ctrl_validMask_1
      ? 3'h1
      : ctrl_validMask_2
          ? 3'h2
          : ctrl_validMask_3
              ? 3'h3
              : ctrl_validMask_4 ? 3'h4 : ctrl_validMask_5 ? 3'h5 : _GEN_7;
  always @(posedge clock or posedge reset) begin
    if (reset)
      ctrl_validMask_grantMask_lastGrant <= 3'h0;
    else if (io_out_ready & io_out_valid_0) begin
      if (ctrl_validMask_1)
        ctrl_validMask_grantMask_lastGrant <= 3'h1;
      else if (ctrl_validMask_2)
        ctrl_validMask_grantMask_lastGrant <= 3'h2;
      else if (ctrl_validMask_3)
        ctrl_validMask_grantMask_lastGrant <= 3'h3;
      else if (ctrl_validMask_4)
        ctrl_validMask_grantMask_lastGrant <= 3'h4;
      else if (ctrl_validMask_5)
        ctrl_validMask_grantMask_lastGrant <= 3'h5;
      else
        ctrl_validMask_grantMask_lastGrant <= _GEN_7;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ctrl_validMask_grantMask_lastGrant = _RANDOM[/*Zero width*/ 1'b0][2:0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        ctrl_validMask_grantMask_lastGrant = 3'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = io_out_valid_0;
  assign io_out_bits_req_info_vpn = _GEN_0[io_chosen_choice];
  assign io_out_bits_req_info_s2xlate = _GEN_1[io_chosen_choice];
  assign io_out_bits_req_info_source = _GEN_2[io_chosen_choice];
  assign io_out_bits_ppn = _GEN_3[io_chosen_choice];
  assign io_out_bits_hptw_resp_entry_n = _GEN_4[io_chosen_choice];
  assign io_out_bits_hptw_resp_entry_ppn = _GEN_5[io_chosen_choice];
  assign io_out_bits_hptw_resp_entry_level = _GEN_6[io_chosen_choice];
  assign io_chosen = io_chosen_choice;
endmodule

