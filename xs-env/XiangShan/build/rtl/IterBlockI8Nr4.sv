// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IterBlockI8Nr4(
  input  [8:0] io_d_cons_0,
  input  [8:0] io_d_cons_1,
  input  [8:0] io_d_cons_2,
  input  [8:0] io_d_cons_3,
  input  [8:0] io_pre_w,
  input  [7:0] io_pre_w_low,
  output [8:0] io_nxt_w,
  output [7:0] io_nxt_w_low,
  input  [7:0] io_pre_q,
  output [7:0] io_nxt_q
);

  wire [3:0][8:0] _GEN = {{io_d_cons_3}, {io_d_cons_2}, {io_d_cons_1}, {io_d_cons_0}};
  wire [8:0]      _tmp_T =
    9'(_GEN[2'({1'h0, io_pre_w[8]} + 2'h1)] + {io_pre_w[7:0], io_pre_w_low[7]});
  wire [8:0]      _GEN_0 = {io_pre_w[6:0], io_pre_w_low[7:6]};
  wire [1:0]      _GEN_1 = {io_pre_w[8], _tmp_T[8]};
  wire [8:0]      _io_nxt_w_T_10 =
    (_GEN_1 == 2'h0 ? 9'(io_d_cons_0 + _GEN_0) : 9'h0)
    | (_GEN_1 == 2'h1 ? 9'(io_d_cons_1 + _GEN_0) : 9'h0)
    | (_GEN_1 == 2'h2 ? 9'(io_d_cons_2 + _GEN_0) : 9'h0)
    | ((&_GEN_1) ? 9'(io_d_cons_3 + _GEN_0) : 9'h0);
  assign io_nxt_w = _io_nxt_w_T_10;
  assign io_nxt_w_low = {io_pre_w_low[5:0], 2'h0};
  assign io_nxt_q = {io_pre_q[5:0], ~(_tmp_T[8]), ~(_io_nxt_w_T_10[8])};
endmodule

