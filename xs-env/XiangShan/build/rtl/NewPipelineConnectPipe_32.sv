// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_32(
  input        clock,
  input        reset,
  output       io_in_ready,
  input        io_in_valid,
  input        io_in_bits_uop_exceptionVec_7,
  input        io_in_bits_uop_flushPipe,
  input        io_in_bits_uop_robIdx_flag,
  input  [7:0] io_in_bits_uop_robIdx_value,
  input        io_out_ready,
  output       io_out_valid,
  output       io_out_bits_uop_exceptionVec_7,
  output       io_out_bits_uop_flushPipe,
  output       io_out_bits_uop_robIdx_flag,
  output [7:0] io_out_bits_uop_robIdx_value,
  input        io_rightOutFire
);

  reg        valid;
  wire       io_in_ready_0 = io_out_ready | ~valid;
  wire       _data_T = io_in_ready_0 & io_in_valid;
  reg        data_uop_exceptionVec_7;
  reg        data_uop_flushPipe;
  reg        data_uop_robIdx_flag;
  reg  [7:0] data_uop_robIdx_value;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= _data_T | ~io_rightOutFire & valid;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_uop_exceptionVec_7 <= io_in_bits_uop_exceptionVec_7;
      data_uop_flushPipe <= io_in_bits_uop_flushPipe;
      data_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      data_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:18];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h13; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[5'h0][0];
        data_uop_exceptionVec_7 = _RANDOM[5'h3][4];
        data_uop_flushPipe = _RANDOM[5'h6][28];
        data_uop_robIdx_flag = _RANDOM[5'h12][13];
        data_uop_robIdx_value = _RANDOM[5'h12][21:14];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_uop_exceptionVec_7 = data_uop_exceptionVec_7;
  assign io_out_bits_uop_flushPipe = data_uop_flushPipe;
  assign io_out_bits_uop_robIdx_flag = data_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = data_uop_robIdx_value;
endmodule

