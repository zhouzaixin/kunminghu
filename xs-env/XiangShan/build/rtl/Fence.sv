// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Fence(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrl_robIdx_flag,
  input  [7:0]  io_in_bits_ctrl_robIdx_value,
  input  [7:0]  io_in_bits_ctrl_pdest,
  input         io_in_bits_ctrl_flushPipe,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  input  [63:0] io_in_bits_data_imm,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_flushPipe,
  output [63:0] io_out_bits_res_data,
  output        io_fenceio_sfence_valid,
  output        io_fenceio_sfence_bits_rs1,
  output        io_fenceio_sfence_bits_rs2,
  output [49:0] io_fenceio_sfence_bits_addr,
  output [15:0] io_fenceio_sfence_bits_id,
  output        io_fenceio_sfence_bits_flushPipe,
  output        io_fenceio_sfence_bits_hv,
  output        io_fenceio_sfence_bits_hg,
  output        io_fenceio_fencei,
  output        io_fenceio_sbuffer_flushSb,
  input         io_fenceio_sbuffer_sbIsEmpty
);

  reg  [2:0]  state;
  reg  [8:0]  uop_ctrl_fuOpType;
  reg         uop_ctrl_robIdx_flag;
  reg  [7:0]  uop_ctrl_robIdx_value;
  reg  [7:0]  uop_ctrl_pdest;
  reg         uop_ctrl_flushPipe;
  reg  [63:0] uop_data_imm;
  wire        io_fenceio_sbuffer_flushSb_0 = state == 3'h1;
  wire        _io_fenceio_sfence_valid_T_1 = uop_ctrl_fuOpType == 9'h11;
  wire        io_fenceio_sfence_bits_hv_0 = uop_ctrl_fuOpType == 9'h13;
  wire        io_fenceio_sfence_bits_hg_0 = uop_ctrl_fuOpType == 9'h14;
  reg  [63:0] io_fenceio_sfence_bits_addr_r;
  reg  [63:0] io_fenceio_sfence_bits_id_r;
  wire        io_in_ready_0 = state == 3'h0;
  wire        _io_out_valid_T_1 = state != 3'h1;
  always @(posedge clock or posedge reset) begin
    if (reset)
      state <= 3'h0;
    else if ((|state) & _io_out_valid_T_1)
      state <= 3'h0;
    else if (io_fenceio_sbuffer_flushSb_0 & uop_ctrl_fuOpType == 9'h0
             & io_fenceio_sbuffer_sbIsEmpty)
      state <= 3'h5;
    else if (io_fenceio_sbuffer_flushSb_0 & uop_ctrl_fuOpType == 9'h10
             & io_fenceio_sbuffer_sbIsEmpty)
      state <= 3'h4;
    else if (io_fenceio_sbuffer_flushSb_0
             & (_io_fenceio_sfence_valid_T_1 | io_fenceio_sfence_bits_hg_0
                | io_fenceio_sfence_bits_hv_0) & io_fenceio_sbuffer_sbIsEmpty)
      state <= 3'h2;
    else if (io_fenceio_sbuffer_flushSb_0 & uop_ctrl_fuOpType == 9'h12
             & io_fenceio_sbuffer_sbIsEmpty)
      state <= 3'h3;
    else if (io_in_ready_0 & io_in_valid)
      state <= 3'h1;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_in_ready_0 & io_in_valid) begin
      uop_ctrl_fuOpType <= io_in_bits_ctrl_fuOpType;
      uop_ctrl_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      uop_ctrl_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      uop_ctrl_pdest <= io_in_bits_ctrl_pdest;
      uop_ctrl_flushPipe <= io_in_bits_ctrl_flushPipe;
      uop_data_imm <= io_in_bits_data_imm;
      io_fenceio_sfence_bits_addr_r <= io_in_bits_data_src_0;
      io_fenceio_sfence_bits_id_r <= io_in_bits_data_src_1;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:28];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1D; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[5'h0][2:0];
        uop_ctrl_fuOpType = _RANDOM[5'h0][11:3];
        uop_ctrl_robIdx_flag = _RANDOM[5'h0][12];
        uop_ctrl_robIdx_value = _RANDOM[5'h0][20:13];
        uop_ctrl_pdest = _RANDOM[5'h0][28:21];
        uop_ctrl_flushPipe = _RANDOM[5'h0][29];
        uop_data_imm = {_RANDOM[5'h4][31:30], _RANDOM[5'h5], _RANDOM[5'h6][29:0]};
        io_fenceio_sfence_bits_addr_r =
          {_RANDOM[5'h18][31], _RANDOM[5'h19], _RANDOM[5'h1A][30:0]};
        io_fenceio_sfence_bits_id_r =
          {_RANDOM[5'h1A][31], _RANDOM[5'h1B], _RANDOM[5'h1C][30:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        state = 3'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = (|state) & _io_out_valid_T_1;
  assign io_out_bits_ctrl_robIdx_flag = uop_ctrl_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = uop_ctrl_robIdx_value;
  assign io_out_bits_ctrl_pdest = uop_ctrl_pdest;
  assign io_out_bits_ctrl_flushPipe = uop_ctrl_flushPipe;
  assign io_out_bits_res_data = 64'h0;
  assign io_fenceio_sfence_valid =
    state == 3'h2
    & (_io_fenceio_sfence_valid_T_1 | io_fenceio_sfence_bits_hv_0
       | io_fenceio_sfence_bits_hg_0);
  assign io_fenceio_sfence_bits_rs1 = uop_data_imm[4:0] == 5'h0;
  assign io_fenceio_sfence_bits_rs2 = uop_data_imm[9:5] == 5'h0;
  assign io_fenceio_sfence_bits_addr = io_fenceio_sfence_bits_addr_r[49:0];
  assign io_fenceio_sfence_bits_id = io_fenceio_sfence_bits_id_r[15:0];
  assign io_fenceio_sfence_bits_flushPipe = uop_ctrl_flushPipe;
  assign io_fenceio_sfence_bits_hv = io_fenceio_sfence_bits_hv_0;
  assign io_fenceio_sfence_bits_hg = io_fenceio_sfence_bits_hg_0;
  assign io_fenceio_fencei = state == 3'h3;
  assign io_fenceio_sbuffer_flushSb = io_fenceio_sbuffer_flushSb_0;
endmodule

