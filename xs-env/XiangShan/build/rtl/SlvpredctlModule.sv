// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SlvpredctlModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output [4:0]  regOut_LVPRED_TIMEOUT,
  output        regOut_STORESET_NO_FAST_WAKEUP,
  output        regOut_STORESET_WAIT_STORE,
  output        regOut_NO_SPEC_LOAD,
  output        regOut_LVPRED_DISABLE
);

  reg [4:0] reg_LVPRED_TIMEOUT;
  reg       reg_STORESET_NO_FAST_WAKEUP;
  reg       reg_STORESET_WAIT_STORE;
  reg       reg_NO_SPEC_LOAD;
  reg       reg_LVPRED_DISABLE;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_LVPRED_TIMEOUT <= 5'h3;
      reg_STORESET_NO_FAST_WAKEUP <= 1'h0;
      reg_STORESET_WAIT_STORE <= 1'h0;
      reg_NO_SPEC_LOAD <= 1'h0;
      reg_LVPRED_DISABLE <= 1'h0;
    end
    else if (w_wen) begin
      reg_LVPRED_TIMEOUT <= w_wdata[8:4];
      reg_STORESET_NO_FAST_WAKEUP <= w_wdata[3];
      reg_STORESET_WAIT_STORE <= w_wdata[2];
      reg_NO_SPEC_LOAD <= w_wdata[1];
      reg_LVPRED_DISABLE <= w_wdata[0];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_LVPRED_TIMEOUT = _RANDOM[/*Zero width*/ 1'b0][4:0];
        reg_STORESET_NO_FAST_WAKEUP = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_STORESET_WAIT_STORE = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_NO_SPEC_LOAD = _RANDOM[/*Zero width*/ 1'b0][7];
        reg_LVPRED_DISABLE = _RANDOM[/*Zero width*/ 1'b0][8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_LVPRED_TIMEOUT = 5'h3;
        reg_STORESET_NO_FAST_WAKEUP = 1'h0;
        reg_STORESET_WAIT_STORE = 1'h0;
        reg_NO_SPEC_LOAD = 1'h0;
        reg_LVPRED_DISABLE = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {55'h0,
     reg_LVPRED_TIMEOUT,
     reg_STORESET_NO_FAST_WAKEUP,
     reg_STORESET_WAIT_STORE,
     reg_NO_SPEC_LOAD,
     reg_LVPRED_DISABLE};
  assign regOut_LVPRED_TIMEOUT = reg_LVPRED_TIMEOUT;
  assign regOut_STORESET_NO_FAST_WAKEUP = reg_STORESET_NO_FAST_WAKEUP;
  assign regOut_STORESET_WAIT_STORE = reg_STORESET_WAIT_STORE;
  assign regOut_NO_SPEC_LOAD = reg_NO_SPEC_LOAD;
  assign regOut_LVPRED_DISABLE = reg_LVPRED_DISABLE;
endmodule

