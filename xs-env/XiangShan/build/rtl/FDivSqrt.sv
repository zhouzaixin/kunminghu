// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FDivSqrt(
  input         clock,
  input         reset,
  input         io_flush_valid,
  input         io_flush_bits_robIdx_flag,
  input  [7:0]  io_flush_bits_robIdx_value,
  input         io_flush_bits_level,
  output        io_in_ready,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrl_robIdx_flag,
  input  [7:0]  io_in_bits_ctrl_robIdx_value,
  input  [7:0]  io_in_bits_ctrl_pdest,
  input         io_in_bits_ctrl_fpWen,
  input         io_in_bits_ctrl_fpu_wflags,
  input  [1:0]  io_in_bits_ctrl_fpu_fmt,
  input  [2:0]  io_in_bits_ctrl_fpu_rm,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  input         io_out_ready,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_fpWen,
  output        io_out_bits_ctrl_fpu_wflags,
  output [63:0] io_out_bits_res_data,
  output [4:0]  io_out_bits_res_fflags,
  input  [2:0]  io_frm
);

  wire        _fdiv_io_start_ready_o;
  wire        _fdiv_io_finish_valid_o;
  wire [63:0] _fdiv_io_fpdiv_res_o;
  wire        _io_out_bits_perfDebugInfo_T = _fdiv_io_start_ready_o & io_in_valid;
  reg         outCtrl_r_robIdx_flag;
  reg  [7:0]  outCtrl_r_robIdx_value;
  reg  [1:0]  outCtrl_r_fpu_fmt;
  wire [1:0]  outCtrl_fpu_fmt =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_fpu_fmt : outCtrl_r_fpu_fmt;
  reg         io_out_bits_ctrl_robIdx_r_flag;
  reg  [7:0]  io_out_bits_ctrl_robIdx_r_value;
  reg  [7:0]  io_out_bits_ctrl_pdest_r;
  reg         io_out_bits_ctrl_fpWen_r;
  reg         io_out_bits_ctrl_fpu_r_wflags;
  wire        _fp_bIsFpCanonicalNAN_T = io_in_bits_ctrl_fpu_fmt == 2'h2;
  wire        _fp_bIsFpCanonicalNAN_T_5 = io_in_bits_ctrl_fpu_fmt == 2'h1;
  wire        _GEN = _fdiv_io_start_ready_o | _io_out_bits_perfDebugInfo_T;
  wire        thisRobIdx_flag =
    _GEN ? io_in_bits_ctrl_robIdx_flag : outCtrl_r_robIdx_flag;
  wire [7:0]  thisRobIdx_value =
    _GEN ? io_in_bits_ctrl_robIdx_value : outCtrl_r_robIdx_value;
  always @(posedge clock) begin
    if (_io_out_bits_perfDebugInfo_T) begin
      outCtrl_r_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      outCtrl_r_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      outCtrl_r_fpu_fmt <= io_in_bits_ctrl_fpu_fmt;
      io_out_bits_ctrl_robIdx_r_flag <= io_in_bits_ctrl_robIdx_flag;
      io_out_bits_ctrl_robIdx_r_value <= io_in_bits_ctrl_robIdx_value;
      io_out_bits_ctrl_pdest_r <= io_in_bits_ctrl_pdest;
      io_out_bits_ctrl_fpWen_r <= io_in_bits_ctrl_fpWen;
      io_out_bits_ctrl_fpu_r_wflags <= io_in_bits_ctrl_fpu_wflags;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;
        end
        outCtrl_r_robIdx_flag = _RANDOM[3'h0][9];
        outCtrl_r_robIdx_value = _RANDOM[3'h0][17:10];
        outCtrl_r_fpu_fmt = _RANDOM[3'h1][1:0];
        io_out_bits_ctrl_robIdx_r_flag = _RANDOM[3'h7][5];
        io_out_bits_ctrl_robIdx_r_value = _RANDOM[3'h7][13:6];
        io_out_bits_ctrl_pdest_r = _RANDOM[3'h7][21:14];
        io_out_bits_ctrl_fpWen_r = _RANDOM[3'h7][22];
        io_out_bits_ctrl_fpu_r_wflags = _RANDOM[3'h7][25];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FloatDivider fdiv (
    .clock                   (clock),
    .reset                   (reset),
    .io_start_valid_i        (io_in_valid),
    .io_start_ready_o        (_fdiv_io_start_ready_o),
    .io_flush_i
      (io_flush_valid
       & (io_flush_bits_level
          & {thisRobIdx_flag,
             thisRobIdx_value} == {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value}
          | thisRobIdx_flag ^ io_flush_bits_robIdx_flag
          ^ thisRobIdx_value > io_flush_bits_robIdx_value)),
    .io_fp_format_i          (io_in_bits_ctrl_fpu_fmt),
    .io_opa_i                (io_in_bits_data_src_0),
    .io_opb_i                (io_in_bits_data_src_1),
    .io_is_sqrt_i            (io_in_bits_ctrl_fuOpType[0]),
    .io_rm_i
      (io_in_bits_ctrl_fpu_rm != 3'h7 ? io_in_bits_ctrl_fpu_rm : io_frm),
    .io_fp_aIsFpCanonicalNAN
      (_fp_bIsFpCanonicalNAN_T & io_in_bits_data_src_0[63:32] != 32'hFFFFFFFF
       | _fp_bIsFpCanonicalNAN_T_5 & io_in_bits_data_src_0[63:16] != 48'hFFFFFFFFFFFF),
    .io_fp_bIsFpCanonicalNAN
      (_fp_bIsFpCanonicalNAN_T & io_in_bits_data_src_1[63:32] != 32'hFFFFFFFF
       | _fp_bIsFpCanonicalNAN_T_5 & io_in_bits_data_src_1[63:16] != 48'hFFFFFFFFFFFF),
    .io_finish_valid_o       (_fdiv_io_finish_valid_o),
    .io_finish_ready_i       (io_out_ready & _fdiv_io_finish_valid_o),
    .io_fpdiv_res_o          (_fdiv_io_fpdiv_res_o),
    .io_fflags_o             (io_out_bits_res_fflags)
  );
  assign io_in_ready = _fdiv_io_start_ready_o;
  assign io_out_valid = _fdiv_io_finish_valid_o;
  assign io_out_bits_ctrl_robIdx_flag = io_out_bits_ctrl_robIdx_r_flag;
  assign io_out_bits_ctrl_robIdx_value = io_out_bits_ctrl_robIdx_r_value;
  assign io_out_bits_ctrl_pdest = io_out_bits_ctrl_pdest_r;
  assign io_out_bits_ctrl_fpWen = io_out_bits_ctrl_fpWen_r;
  assign io_out_bits_ctrl_fpu_wflags = io_out_bits_ctrl_fpu_r_wflags;
  assign io_out_bits_res_data =
    (outCtrl_fpu_fmt == 2'h1 ? {48'hFFFFFFFFFFFF, _fdiv_io_fpdiv_res_o[15:0]} : 64'h0)
    | (outCtrl_fpu_fmt == 2'h2 ? {32'hFFFFFFFF, _fdiv_io_fpdiv_res_o[31:0]} : 64'h0)
    | ((&outCtrl_fpu_fmt) ? _fdiv_io_fpdiv_res_o : 64'h0);
endmodule

