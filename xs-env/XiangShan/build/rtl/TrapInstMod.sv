// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TrapInstMod(
  input         clock,
  input         reset,
  input         io_fromDecode_trapInstInfo_valid,
  input  [31:0] io_fromDecode_trapInstInfo_bits_instr,
  input         io_fromDecode_trapInstInfo_bits_ftqPtr_flag,
  input  [5:0]  io_fromDecode_trapInstInfo_bits_ftqPtr_value,
  input  [3:0]  io_fromDecode_trapInstInfo_bits_ftqOffset,
  input         io_fromRob_flush_valid,
  input         io_fromRob_flush_bits_ftqPtr_flag,
  input  [5:0]  io_fromRob_flush_bits_ftqPtr_value,
  input  [3:0]  io_fromRob_flush_bits_ftqOffset,
  input         io_faultCsrUop_valid,
  input  [8:0]  io_faultCsrUop_bits_fuOpType,
  input  [21:0] io_faultCsrUop_bits_imm,
  input         io_faultCsrUop_bits_ftqInfo_ftqPtr_flag,
  input  [5:0]  io_faultCsrUop_bits_ftqInfo_ftqPtr_value,
  input  [3:0]  io_faultCsrUop_bits_ftqInfo_ftqOffset,
  input         io_readClear,
  output        io_currentTrapInst_valid,
  output [31:0] io_currentTrapInst_bits
);

  reg         valid;
  reg  [31:0] trapInstInfo_instr;
  reg         trapInstInfo_ftqPtr_flag;
  reg  [5:0]  trapInstInfo_ftqPtr_value;
  reg  [3:0]  trapInstInfo_ftqOffset;
  wire [6:0]  _sameFlush_T = {trapInstInfo_ftqPtr_flag, trapInstInfo_ftqPtr_value};
  wire        _GEN = io_fromDecode_trapInstInfo_valid & ~valid;
  wire        _GEN_0 =
    io_fromRob_flush_valid & valid
    & (_sameFlush_T == {io_fromRob_flush_bits_ftqPtr_flag,
                        io_fromRob_flush_bits_ftqPtr_value}
       & trapInstInfo_ftqOffset > io_fromRob_flush_bits_ftqOffset
       | trapInstInfo_ftqPtr_flag ^ io_fromRob_flush_bits_ftqPtr_flag
       ^ trapInstInfo_ftqPtr_value > io_fromRob_flush_bits_ftqPtr_value) | io_readClear;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= ~_GEN_0 & (io_faultCsrUop_valid | _GEN | valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (~_GEN_0) begin
      if (io_faultCsrUop_valid) begin
        if (~valid | valid
            & ({io_faultCsrUop_bits_ftqInfo_ftqPtr_flag,
                io_faultCsrUop_bits_ftqInfo_ftqPtr_value} == _sameFlush_T
               & io_faultCsrUop_bits_ftqInfo_ftqOffset < trapInstInfo_ftqOffset
               | io_faultCsrUop_bits_ftqInfo_ftqPtr_flag ^ trapInstInfo_ftqPtr_flag
               ^ io_faultCsrUop_bits_ftqInfo_ftqPtr_value < trapInstInfo_ftqPtr_value)) begin
          trapInstInfo_instr <=
            {io_faultCsrUop_bits_imm[11:0],
             io_faultCsrUop_bits_imm[16:12],
             io_faultCsrUop_bits_fuOpType[2:0],
             io_faultCsrUop_bits_imm[21:17],
             7'h73};
          trapInstInfo_ftqPtr_flag <= io_faultCsrUop_bits_ftqInfo_ftqPtr_flag;
          trapInstInfo_ftqPtr_value <= io_faultCsrUop_bits_ftqInfo_ftqPtr_value;
          trapInstInfo_ftqOffset <= io_faultCsrUop_bits_ftqInfo_ftqOffset;
        end
      end
      else if (_GEN) begin
        trapInstInfo_instr <=
          (&(io_fromDecode_trapInstInfo_bits_instr[1:0]))
            ? io_fromDecode_trapInstInfo_bits_instr
            : {16'h0, io_fromDecode_trapInstInfo_bits_instr[15:0]};
        trapInstInfo_ftqPtr_flag <= io_fromDecode_trapInstInfo_bits_ftqPtr_flag;
        trapInstInfo_ftqPtr_value <= io_fromDecode_trapInstInfo_bits_ftqPtr_value;
        trapInstInfo_ftqOffset <= io_fromDecode_trapInstInfo_bits_ftqOffset;
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        valid = _RANDOM[1'h0][0];
        trapInstInfo_instr = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};
        trapInstInfo_ftqPtr_flag = _RANDOM[1'h1][1];
        trapInstInfo_ftqPtr_value = _RANDOM[1'h1][7:2];
        trapInstInfo_ftqOffset = _RANDOM[1'h1][11:8];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_currentTrapInst_valid = valid;
  assign io_currentTrapInst_bits = trapInstInfo_instr;
endmodule

