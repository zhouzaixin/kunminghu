// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Queue16_TaskBundle(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_channel,
  input  [2:0]  io_enq_bits_txChannel,
  input  [6:0]  io_enq_bits_set,
  input  [32:0] io_enq_bits_tag,
  input  [5:0]  io_enq_bits_off,
  input  [1:0]  io_enq_bits_alias,
  input  [43:0] io_enq_bits_vaddr,
  input         io_enq_bits_isKeyword,
  input  [3:0]  io_enq_bits_opcode,
  input  [2:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [6:0]  io_enq_bits_sourceId,
  input  [1:0]  io_enq_bits_bufIdx,
  input         io_enq_bits_needProbeAckData,
  input         io_enq_bits_denied,
  input         io_enq_bits_corrupt,
  input         io_enq_bits_mshrTask,
  input  [7:0]  io_enq_bits_mshrId,
  input         io_enq_bits_aliasTask,
  input         io_enq_bits_useProbeData,
  input         io_enq_bits_mshrRetry,
  input         io_enq_bits_readProbeDataDown,
  input         io_enq_bits_fromL2pft,
  input         io_enq_bits_needHint,
  input         io_enq_bits_dirty,
  input  [2:0]  io_enq_bits_way,
  input         io_enq_bits_meta_dirty,
  input  [1:0]  io_enq_bits_meta_state,
  input         io_enq_bits_meta_clients,
  input  [1:0]  io_enq_bits_meta_alias,
  input         io_enq_bits_meta_prefetch,
  input  [2:0]  io_enq_bits_meta_prefetchSrc,
  input         io_enq_bits_meta_accessed,
  input         io_enq_bits_meta_tagErr,
  input         io_enq_bits_meta_dataErr,
  input         io_enq_bits_metaWen,
  input         io_enq_bits_tagWen,
  input         io_enq_bits_dsWen,
  input  [7:0]  io_enq_bits_wayMask,
  input         io_enq_bits_replTask,
  input         io_enq_bits_cmoTask,
  input  [3:0]  io_enq_bits_reqSource,
  input         io_enq_bits_mergeA,
  input  [5:0]  io_enq_bits_aMergeTask_off,
  input  [1:0]  io_enq_bits_aMergeTask_alias,
  input  [43:0] io_enq_bits_aMergeTask_vaddr,
  input         io_enq_bits_aMergeTask_isKeyword,
  input  [2:0]  io_enq_bits_aMergeTask_opcode,
  input  [2:0]  io_enq_bits_aMergeTask_param,
  input  [6:0]  io_enq_bits_aMergeTask_sourceId,
  input         io_enq_bits_aMergeTask_meta_dirty,
  input  [1:0]  io_enq_bits_aMergeTask_meta_state,
  input         io_enq_bits_aMergeTask_meta_clients,
  input  [1:0]  io_enq_bits_aMergeTask_meta_alias,
  input         io_enq_bits_aMergeTask_meta_prefetch,
  input  [2:0]  io_enq_bits_aMergeTask_meta_prefetchSrc,
  input         io_enq_bits_aMergeTask_meta_accessed,
  input         io_enq_bits_aMergeTask_meta_tagErr,
  input         io_enq_bits_aMergeTask_meta_dataErr,
  input         io_enq_bits_snpHitRelease,
  input         io_enq_bits_snpHitReleaseToB,
  input         io_enq_bits_snpHitReleaseWithData,
  input  [7:0]  io_enq_bits_snpHitReleaseIdx,
  input  [1:0]  io_enq_bits_snpHitReleaseState,
  input         io_enq_bits_snpHitReleaseDirty,
  input         io_deq_ready,
  output        io_deq_valid,
  output [6:0]  io_deq_bits_set,
  output [32:0] io_deq_bits_tag,
  output [5:0]  io_deq_bits_off,
  output [3:0]  io_deq_bits_opcode,
  output [2:0]  io_deq_bits_param,
  output [7:0]  io_deq_bits_mshrId,
  output        io_deq_bits_dirty,
  output [3:0]  io_deq_bits_reqSource,
  output [4:0]  io_count
);

  wire [65:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        io_deq_valid_0 = io_enq_valid | ~empty;
  wire        do_deq = ~empty & io_deq_ready & io_deq_valid_0;
  wire        do_enq = ~(empty & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= 4'(enq_ptr_value + 4'h1);
      if (do_deq)
        deq_ptr_value <= 4'(deq_ptr_value + 4'h1);
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        enq_ptr_value = 4'h0;
        deq_ptr_value = 4'h0;
        maybe_full = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_16x66 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_reqSource,
        io_enq_bits_dirty,
        io_enq_bits_mshrId,
        io_enq_bits_param,
        io_enq_bits_opcode,
        io_enq_bits_off,
        io_enq_bits_tag,
        io_enq_bits_set})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_set = empty ? io_enq_bits_set : _ram_ext_R0_data[6:0];
  assign io_deq_bits_tag = empty ? io_enq_bits_tag : _ram_ext_R0_data[39:7];
  assign io_deq_bits_off = empty ? io_enq_bits_off : _ram_ext_R0_data[45:40];
  assign io_deq_bits_opcode = empty ? io_enq_bits_opcode : _ram_ext_R0_data[49:46];
  assign io_deq_bits_param = empty ? io_enq_bits_param : _ram_ext_R0_data[52:50];
  assign io_deq_bits_mshrId = empty ? io_enq_bits_mshrId : _ram_ext_R0_data[60:53];
  assign io_deq_bits_dirty = empty ? io_enq_bits_dirty : _ram_ext_R0_data[61];
  assign io_deq_bits_reqSource = empty ? io_enq_bits_reqSource : _ram_ext_R0_data[65:62];
  assign io_count = {maybe_full & ptr_match, 4'(enq_ptr_value - deq_ptr_value)};
endmodule

