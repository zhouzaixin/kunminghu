// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_23(
  input          clock,
  input          reset,
  output         io_in_ready,
  input          io_in_valid,
  input  [34:0]  io_in_bits_fuType,
  input  [8:0]   io_in_bits_fuOpType,
  input  [127:0] io_in_bits_src_0,
  input  [127:0] io_in_bits_src_1,
  input  [127:0] io_in_bits_src_2,
  input  [127:0] io_in_bits_src_3,
  input  [127:0] io_in_bits_src_4,
  input          io_in_bits_robIdx_flag,
  input  [7:0]   io_in_bits_robIdx_value,
  input  [6:0]   io_in_bits_pdest,
  input          io_in_bits_vecWen,
  input          io_in_bits_v0Wen,
  input          io_in_bits_vlWen,
  input          io_in_bits_vpu_vma,
  input          io_in_bits_vpu_vta,
  input  [1:0]   io_in_bits_vpu_vsew,
  input  [2:0]   io_in_bits_vpu_vlmul,
  input          io_in_bits_vpu_vm,
  input  [7:0]   io_in_bits_vpu_vstart,
  input  [6:0]   io_in_bits_vpu_vuopIdx,
  input          io_in_bits_vpu_lastUop,
  input  [127:0] io_in_bits_vpu_vmask,
  input  [2:0]   io_in_bits_vpu_nf,
  input  [1:0]   io_in_bits_vpu_veew,
  input          io_in_bits_vpu_isVleff,
  input          io_in_bits_ftqIdx_flag,
  input  [5:0]   io_in_bits_ftqIdx_value,
  input  [3:0]   io_in_bits_ftqOffset,
  input  [4:0]   io_in_bits_numLsElem,
  input          io_in_bits_sqIdx_flag,
  input  [5:0]   io_in_bits_sqIdx_value,
  input          io_in_bits_lqIdx_flag,
  input  [6:0]   io_in_bits_lqIdx_value,
  input          io_out_ready,
  output         io_out_valid,
  output [34:0]  io_out_bits_fuType,
  output [8:0]   io_out_bits_fuOpType,
  output [127:0] io_out_bits_src_0,
  output [127:0] io_out_bits_src_1,
  output [127:0] io_out_bits_src_2,
  output [127:0] io_out_bits_src_3,
  output [127:0] io_out_bits_src_4,
  output         io_out_bits_robIdx_flag,
  output [7:0]   io_out_bits_robIdx_value,
  output [6:0]   io_out_bits_pdest,
  output         io_out_bits_vecWen,
  output         io_out_bits_v0Wen,
  output         io_out_bits_vlWen,
  output         io_out_bits_vpu_vma,
  output         io_out_bits_vpu_vta,
  output [1:0]   io_out_bits_vpu_vsew,
  output [2:0]   io_out_bits_vpu_vlmul,
  output         io_out_bits_vpu_vm,
  output [7:0]   io_out_bits_vpu_vstart,
  output [6:0]   io_out_bits_vpu_vuopIdx,
  output         io_out_bits_vpu_lastUop,
  output [127:0] io_out_bits_vpu_vmask,
  output [2:0]   io_out_bits_vpu_nf,
  output [1:0]   io_out_bits_vpu_veew,
  output         io_out_bits_vpu_isVleff,
  output         io_out_bits_ftqIdx_flag,
  output [5:0]   io_out_bits_ftqIdx_value,
  output [3:0]   io_out_bits_ftqOffset,
  output [4:0]   io_out_bits_numLsElem,
  output         io_out_bits_sqIdx_flag,
  output [5:0]   io_out_bits_sqIdx_value,
  output         io_out_bits_lqIdx_flag,
  output [6:0]   io_out_bits_lqIdx_value,
  input          io_rightOutFire,
  input          io_isFlush
);

  reg          valid;
  wire         io_in_ready_0 = io_out_ready | ~valid;
  wire         _data_T = io_in_ready_0 & io_in_valid;
  reg  [34:0]  data_fuType;
  reg  [8:0]   data_fuOpType;
  reg  [127:0] data_src_0;
  reg  [127:0] data_src_1;
  reg  [127:0] data_src_2;
  reg  [127:0] data_src_3;
  reg  [127:0] data_src_4;
  reg          data_robIdx_flag;
  reg  [7:0]   data_robIdx_value;
  reg  [6:0]   data_pdest;
  reg          data_vecWen;
  reg          data_v0Wen;
  reg          data_vlWen;
  reg          data_vpu_vma;
  reg          data_vpu_vta;
  reg  [1:0]   data_vpu_vsew;
  reg  [2:0]   data_vpu_vlmul;
  reg          data_vpu_vm;
  reg  [7:0]   data_vpu_vstart;
  reg  [6:0]   data_vpu_vuopIdx;
  reg          data_vpu_lastUop;
  reg  [127:0] data_vpu_vmask;
  reg  [2:0]   data_vpu_nf;
  reg  [1:0]   data_vpu_veew;
  reg          data_vpu_isVleff;
  reg          data_ftqIdx_flag;
  reg  [5:0]   data_ftqIdx_value;
  reg  [3:0]   data_ftqOffset;
  reg  [4:0]   data_numLsElem;
  reg          data_sqIdx_flag;
  reg  [5:0]   data_sqIdx_value;
  reg          data_lqIdx_flag;
  reg  [6:0]   data_lqIdx_value;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= ~io_isFlush & (_data_T | ~io_rightOutFire & valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_fuType <= io_in_bits_fuType;
      data_fuOpType <= io_in_bits_fuOpType;
      data_src_0 <= io_in_bits_src_0;
      data_src_1 <= io_in_bits_src_1;
      data_src_2 <= io_in_bits_src_2;
      data_src_3 <= io_in_bits_src_3;
      data_src_4 <= io_in_bits_src_4;
      data_robIdx_flag <= io_in_bits_robIdx_flag;
      data_robIdx_value <= io_in_bits_robIdx_value;
      data_pdest <= io_in_bits_pdest;
      data_vecWen <= io_in_bits_vecWen;
      data_v0Wen <= io_in_bits_v0Wen;
      data_vlWen <= io_in_bits_vlWen;
      data_vpu_vma <= io_in_bits_vpu_vma;
      data_vpu_vta <= io_in_bits_vpu_vta;
      data_vpu_vsew <= io_in_bits_vpu_vsew;
      data_vpu_vlmul <= io_in_bits_vpu_vlmul;
      data_vpu_vm <= io_in_bits_vpu_vm;
      data_vpu_vstart <= io_in_bits_vpu_vstart;
      data_vpu_vuopIdx <= io_in_bits_vpu_vuopIdx;
      data_vpu_lastUop <= io_in_bits_vpu_lastUop;
      data_vpu_vmask <= io_in_bits_vpu_vmask;
      data_vpu_nf <= io_in_bits_vpu_nf;
      data_vpu_veew <= io_in_bits_vpu_veew;
      data_vpu_isVleff <= io_in_bits_vpu_isVleff;
      data_ftqIdx_flag <= io_in_bits_ftqIdx_flag;
      data_ftqIdx_value <= io_in_bits_ftqIdx_value;
      data_ftqOffset <= io_in_bits_ftqOffset;
      data_numLsElem <= io_in_bits_numLsElem;
      data_sqIdx_flag <= io_in_bits_sqIdx_flag;
      data_sqIdx_value <= io_in_bits_sqIdx_value;
      data_lqIdx_flag <= io_in_bits_lqIdx_flag;
      data_lqIdx_value <= io_in_bits_lqIdx_value;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:31];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM[i[4:0]] = `RANDOM;
        end
        valid = _RANDOM[5'h0][0];
        data_fuType = {_RANDOM[5'h0][31:1], _RANDOM[5'h1][3:0]};
        data_fuOpType = _RANDOM[5'h1][12:4];
        data_src_0 =
          {_RANDOM[5'h1][31:13],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5][12:0]};
        data_src_1 =
          {_RANDOM[5'h5][31:13],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9][12:0]};
        data_src_2 =
          {_RANDOM[5'h9][31:13],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD][12:0]};
        data_src_3 =
          {_RANDOM[5'hD][31:13],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11][12:0]};
        data_src_4 =
          {_RANDOM[5'h11][31:13],
           _RANDOM[5'h12],
           _RANDOM[5'h13],
           _RANDOM[5'h14],
           _RANDOM[5'h15][12:0]};
        data_robIdx_flag = _RANDOM[5'h17][13];
        data_robIdx_value = _RANDOM[5'h17][21:14];
        data_pdest = {_RANDOM[5'h17][31:27], _RANDOM[5'h18][1:0]};
        data_vecWen = _RANDOM[5'h18][2];
        data_v0Wen = _RANDOM[5'h18][3];
        data_vlWen = _RANDOM[5'h18][4];
        data_vpu_vma = _RANDOM[5'h18][6];
        data_vpu_vta = _RANDOM[5'h18][7];
        data_vpu_vsew = _RANDOM[5'h18][9:8];
        data_vpu_vlmul = _RANDOM[5'h18][12:10];
        data_vpu_vm = _RANDOM[5'h18][21];
        data_vpu_vstart = _RANDOM[5'h18][29:22];
        data_vpu_vuopIdx = _RANDOM[5'h19][16:10];
        data_vpu_lastUop = _RANDOM[5'h19][17];
        data_vpu_vmask =
          {_RANDOM[5'h19][31:18],
           _RANDOM[5'h1A],
           _RANDOM[5'h1B],
           _RANDOM[5'h1C],
           _RANDOM[5'h1D][17:0]};
        data_vpu_nf = _RANDOM[5'h1D][28:26];
        data_vpu_veew = _RANDOM[5'h1D][30:29];
        data_vpu_isVleff = _RANDOM[5'h1E][7];
        data_ftqIdx_flag = _RANDOM[5'h1E][9];
        data_ftqIdx_value = _RANDOM[5'h1E][15:10];
        data_ftqOffset = _RANDOM[5'h1E][19:16];
        data_numLsElem = _RANDOM[5'h1E][24:20];
        data_sqIdx_flag = _RANDOM[5'h1E][25];
        data_sqIdx_value = _RANDOM[5'h1E][31:26];
        data_lqIdx_flag = _RANDOM[5'h1F][0];
        data_lqIdx_value = _RANDOM[5'h1F][7:1];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_fuType = data_fuType;
  assign io_out_bits_fuOpType = data_fuOpType;
  assign io_out_bits_src_0 = data_src_0;
  assign io_out_bits_src_1 = data_src_1;
  assign io_out_bits_src_2 = data_src_2;
  assign io_out_bits_src_3 = data_src_3;
  assign io_out_bits_src_4 = data_src_4;
  assign io_out_bits_robIdx_flag = data_robIdx_flag;
  assign io_out_bits_robIdx_value = data_robIdx_value;
  assign io_out_bits_pdest = data_pdest;
  assign io_out_bits_vecWen = data_vecWen;
  assign io_out_bits_v0Wen = data_v0Wen;
  assign io_out_bits_vlWen = data_vlWen;
  assign io_out_bits_vpu_vma = data_vpu_vma;
  assign io_out_bits_vpu_vta = data_vpu_vta;
  assign io_out_bits_vpu_vsew = data_vpu_vsew;
  assign io_out_bits_vpu_vlmul = data_vpu_vlmul;
  assign io_out_bits_vpu_vm = data_vpu_vm;
  assign io_out_bits_vpu_vstart = data_vpu_vstart;
  assign io_out_bits_vpu_vuopIdx = data_vpu_vuopIdx;
  assign io_out_bits_vpu_lastUop = data_vpu_lastUop;
  assign io_out_bits_vpu_vmask = data_vpu_vmask;
  assign io_out_bits_vpu_nf = data_vpu_nf;
  assign io_out_bits_vpu_veew = data_vpu_veew;
  assign io_out_bits_vpu_isVleff = data_vpu_isVleff;
  assign io_out_bits_ftqIdx_flag = data_ftqIdx_flag;
  assign io_out_bits_ftqIdx_value = data_ftqIdx_value;
  assign io_out_bits_ftqOffset = data_ftqOffset;
  assign io_out_bits_numLsElem = data_numLsElem;
  assign io_out_bits_sqIdx_flag = data_sqIdx_flag;
  assign io_out_bits_sqIdx_value = data_sqIdx_value;
  assign io_out_bits_lqIdx_flag = data_lqIdx_flag;
  assign io_out_bits_lqIdx_value = data_lqIdx_value;
endmodule

