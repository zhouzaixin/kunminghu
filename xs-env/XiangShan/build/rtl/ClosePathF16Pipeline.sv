// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ClosePathF16Pipeline(
  input         clock,
  input         io_fire,
  input  [15:0] io_fp_a,
  input  [15:0] io_fp_b,
  output [15:0] io_fp_c,
  input  [2:0]  io_round_mode,
  output [4:0]  io_fflags,
  output [11:0] io_CS1
);

  reg         NX_r;
  wire [11:0] _U_Lshift_io_result;
  wire [11:0] _U_CS4_io_result;
  wire [11:0] _U_CS3_io_result;
  wire [11:0] _U_CS2_io_result;
  wire [11:0] _U_CS1_io_result;
  wire [11:0] _U_CS0_io_result;
  wire [10:0] significand_fp_a = {|(io_fp_a[14:10]), io_fp_a[9:0]};
  wire [10:0] significand_fp_b = {|(io_fp_b[14:10]), io_fp_b[9:0]};
  wire [10:0] _U_CS3_io_adder_op1_T = {1'h1, io_fp_a[9:0]};
  wire [10:0] _U_CS3_io_adder_op0_T = {1'h1, io_fp_b[9:0]};
  reg  [10:0] U_CS4_io_adder_op0_r;
  reg  [10:0] U_CS4_io_adder_op1_r;
  reg  [3:0]  lzd_0123_reg;
  reg  [11:0] U_Lshift_io_src_r;
  reg         close_fraction_result_r;
  reg  [4:0]  lshift_result_head_is_one_r;
  wire [4:0]  _EA_sub_value_WIRE = {1'h0, lzd_0123_reg};
  reg  [11:0] lshift_result_head_is_one_r_1;
  reg  [11:0] lshift_result_head_is_one_r_2;
  reg         EA_sub_value_r;
  reg  [4:0]  EA_sub_value_r_1;
  reg  [4:0]  close_exponent_result_r;
  reg         close_sign_result_r;
  wire        RNE = io_round_mode == 3'h0;
  wire        RDN = io_round_mode == 3'h2;
  wire        RUP = io_round_mode == 3'h3;
  wire        RMM = io_round_mode == 3'h4;
  wire        Efp_b_is_greater =
    (io_fp_b[10] ^ io_fp_a[10]) & (io_fp_a[11] ^ io_fp_b[11] ^ ~(io_fp_a[10]));
  wire        exp_is_equal =
    io_fp_a[10] ^ ~(io_fp_b[10]) | (|(io_fp_a[14:10])) ^ (|(io_fp_b[14:10]));
  wire [4:0]  EA = Efp_b_is_greater ? io_fp_b[14:10] : io_fp_a[14:10];
  wire        _mask_Efp_a_onehot_T_2 = io_fp_a[14:10] == 5'h0 | io_fp_a[14:10] == 5'h1;
  wire        _mask_Efp_a_onehot_T_3 = io_fp_a[14:10] == 5'h2;
  wire        _mask_Efp_a_onehot_T_4 = io_fp_a[14:10] == 5'h3;
  wire        _mask_Efp_a_onehot_T_5 = io_fp_a[14:10] == 5'h4;
  wire        _mask_Efp_a_onehot_T_6 = io_fp_a[14:10] == 5'h5;
  wire        _mask_Efp_a_onehot_T_7 = io_fp_a[14:10] == 5'h6;
  wire        _mask_Efp_a_onehot_T_8 = io_fp_a[14:10] == 5'h7;
  wire        _mask_Efp_a_onehot_T_9 = io_fp_a[14:10] == 5'h8;
  wire        _mask_Efp_a_onehot_T_10 = io_fp_a[14:10] == 5'h9;
  wire        _mask_Efp_a_onehot_T_11 = io_fp_a[14:10] == 5'hA;
  wire        _mask_Efp_a_onehot_T_12 = io_fp_a[14:10] == 5'hB;
  wire        _mask_Efp_b_onehot_T_2 = io_fp_b[14:10] == 5'h0 | io_fp_b[14:10] == 5'h1;
  wire        _mask_Efp_b_onehot_T_3 = io_fp_b[14:10] == 5'h2;
  wire        _mask_Efp_b_onehot_T_4 = io_fp_b[14:10] == 5'h3;
  wire        _mask_Efp_b_onehot_T_5 = io_fp_b[14:10] == 5'h4;
  wire        _mask_Efp_b_onehot_T_6 = io_fp_b[14:10] == 5'h5;
  wire        _mask_Efp_b_onehot_T_7 = io_fp_b[14:10] == 5'h6;
  wire        _mask_Efp_b_onehot_T_8 = io_fp_b[14:10] == 5'h7;
  wire        _mask_Efp_b_onehot_T_9 = io_fp_b[14:10] == 5'h8;
  wire        _mask_Efp_b_onehot_T_10 = io_fp_b[14:10] == 5'h9;
  wire        _mask_Efp_b_onehot_T_11 = io_fp_b[14:10] == 5'hA;
  wire        _mask_Efp_b_onehot_T_12 = io_fp_b[14:10] == 5'hB;
  wire        CS2_round_up =
    io_fp_b[0]
    & (RUP & ~(io_fp_a[15]) | RDN & io_fp_a[15] | RNE & _U_CS2_io_result[1]
       & _U_CS2_io_result[0] | RMM);
  wire        CS3_round_up =
    io_fp_a[0]
    & (RUP & io_fp_a[15] | RDN & ~(io_fp_a[15]) | RNE & _U_CS3_io_result[1]
       & _U_CS3_io_result[0] | RMM);
  wire        sel_CS0 = exp_is_equal & ~(_U_CS0_io_result[11]);
  wire        sel_CS1 = exp_is_equal & _U_CS0_io_result[11];
  wire        sel_CS2 =
    ~exp_is_equal & ~Efp_b_is_greater
    & (~(_U_CS2_io_result[11]) | ~(_U_CS2_io_result[0]) | ~CS2_round_up);
  wire        sel_CS3 =
    ~exp_is_equal & Efp_b_is_greater
    & (~(_U_CS3_io_result[11]) | ~(_U_CS3_io_result[0]) | ~CS3_round_up);
  wire        sel_CS4 =
    ~exp_is_equal
    & (~Efp_b_is_greater & _U_CS2_io_result[11] & _U_CS2_io_result[0] & CS2_round_up
       | Efp_b_is_greater & _U_CS3_io_result[11] & _U_CS3_io_result[0] & CS3_round_up);
  wire [11:0] CS_0123_result =
    (sel_CS0 ? {_U_CS0_io_result[10:0], 1'h0} : 12'h0)
    | (sel_CS1 ? {_U_CS1_io_result[10:0], 1'h0} : 12'h0)
    | (sel_CS2 ? _U_CS2_io_result : 12'h0) | (sel_CS3 ? _U_CS3_io_result : 12'h0);
  wire [11:0] mask_onehot =
    (sel_CS0
       ? {_mask_Efp_a_onehot_T_2,
          _mask_Efp_a_onehot_T_3,
          _mask_Efp_a_onehot_T_4,
          _mask_Efp_a_onehot_T_5,
          _mask_Efp_a_onehot_T_6,
          _mask_Efp_a_onehot_T_7,
          _mask_Efp_a_onehot_T_8,
          _mask_Efp_a_onehot_T_9,
          _mask_Efp_a_onehot_T_10,
          _mask_Efp_a_onehot_T_11,
          _mask_Efp_a_onehot_T_12,
          1'h1}
       : 12'h0)
    | (sel_CS1
         ? {_mask_Efp_b_onehot_T_2,
            _mask_Efp_b_onehot_T_3,
            _mask_Efp_b_onehot_T_4,
            _mask_Efp_b_onehot_T_5,
            _mask_Efp_b_onehot_T_6,
            _mask_Efp_b_onehot_T_7,
            _mask_Efp_b_onehot_T_8,
            _mask_Efp_b_onehot_T_9,
            _mask_Efp_b_onehot_T_10,
            _mask_Efp_b_onehot_T_11,
            _mask_Efp_b_onehot_T_12,
            1'h1}
         : 12'h0)
    | (sel_CS2
         ? {_mask_Efp_a_onehot_T_2,
            _mask_Efp_a_onehot_T_3,
            _mask_Efp_a_onehot_T_4,
            _mask_Efp_a_onehot_T_5,
            _mask_Efp_a_onehot_T_6,
            _mask_Efp_a_onehot_T_7,
            _mask_Efp_a_onehot_T_8,
            _mask_Efp_a_onehot_T_9,
            _mask_Efp_a_onehot_T_10,
            _mask_Efp_a_onehot_T_11,
            _mask_Efp_a_onehot_T_12,
            io_fp_a[14:10] == 5'hC}
         : 12'h0)
    | (sel_CS3
         ? {_mask_Efp_b_onehot_T_2,
            _mask_Efp_b_onehot_T_3,
            _mask_Efp_b_onehot_T_4,
            _mask_Efp_b_onehot_T_5,
            _mask_Efp_b_onehot_T_6,
            _mask_Efp_b_onehot_T_7,
            _mask_Efp_b_onehot_T_8,
            _mask_Efp_b_onehot_T_9,
            _mask_Efp_b_onehot_T_10,
            _mask_Efp_b_onehot_T_11,
            _mask_Efp_b_onehot_T_12,
            io_fp_b[14:10] == 5'hC}
         : 12'h0);
  wire [11:0] priority_mask = CS_0123_result | mask_onehot;
  always @(posedge clock) begin
    if (io_fire) begin
      U_CS4_io_adder_op0_r <= Efp_b_is_greater ? significand_fp_b : significand_fp_a;
      U_CS4_io_adder_op1_r <=
        {1'h0,
         Efp_b_is_greater
           ? {|(io_fp_a[14:10]), io_fp_a[9:1]}
           : {|(io_fp_b[14:10]), io_fp_b[9:1]}};
      lzd_0123_reg <=
        priority_mask[11]
          ? 4'h0
          : priority_mask[10]
              ? 4'h1
              : priority_mask[9]
                  ? 4'h2
                  : priority_mask[8]
                      ? 4'h3
                      : priority_mask[7]
                          ? 4'h4
                          : priority_mask[6]
                              ? 4'h5
                              : priority_mask[5]
                                  ? 4'h6
                                  : priority_mask[4]
                                      ? 4'h7
                                      : priority_mask[3]
                                          ? 4'h8
                                          : priority_mask[2]
                                              ? 4'h9
                                              : priority_mask[1]
                                                  ? 4'hA
                                                  : priority_mask[0] ? 4'hB : 4'hC;
      U_Lshift_io_src_r <= CS_0123_result;
      NX_r <=
        (sel_CS2 & _U_CS2_io_result[11] & _U_CS2_io_result[0] & ~CS2_round_up | sel_CS3
         & _U_CS3_io_result[11] & _U_CS3_io_result[0] & ~CS3_round_up | sel_CS4)
        & (Efp_b_is_greater
             ? (|(io_fp_a[14:10])) & io_fp_a[0]
             : (|(io_fp_b[14:10])) & io_fp_b[0]);
      close_fraction_result_r <= sel_CS4;
      lshift_result_head_is_one_r <= 5'(EA - 5'h1);
      lshift_result_head_is_one_r_1 <= CS_0123_result;
      lshift_result_head_is_one_r_2 <= mask_onehot & CS_0123_result;
      EA_sub_value_r <= sel_CS4;
      EA_sub_value_r_1 <= EA;
      close_exponent_result_r <= EA;
      close_sign_result_r <=
        sel_CS0 & exp_is_equal & (_U_CS0_io_result[11] | _U_CS1_io_result[11])
        & io_fp_a[15] | sel_CS0 & exp_is_equal & ~(_U_CS0_io_result[11])
        & ~(_U_CS1_io_result[11]) & RDN | sel_CS1 & ~(io_fp_a[15]) | sel_CS2 & io_fp_a[15]
        | sel_CS3 & ~(io_fp_a[15]) | sel_CS4 & (Efp_b_is_greater ^ io_fp_a[15]);
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        U_CS4_io_adder_op0_r = _RANDOM[2'h0][10:0];
        U_CS4_io_adder_op1_r = _RANDOM[2'h0][21:11];
        lzd_0123_reg = _RANDOM[2'h0][25:22];
        U_Lshift_io_src_r = {_RANDOM[2'h0][31:26], _RANDOM[2'h1][5:0]};
        NX_r = _RANDOM[2'h1][6];
        close_fraction_result_r = _RANDOM[2'h1][7];
        lshift_result_head_is_one_r = _RANDOM[2'h1][12:8];
        lshift_result_head_is_one_r_1 = _RANDOM[2'h1][24:13];
        lshift_result_head_is_one_r_2 = {_RANDOM[2'h1][31:25], _RANDOM[2'h2][4:0]};
        EA_sub_value_r = _RANDOM[2'h2][5];
        EA_sub_value_r_1 = _RANDOM[2'h2][10:6];
        close_exponent_result_r = _RANDOM[2'h2][15:11];
        close_sign_result_r = _RANDOM[2'h2][16];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ClosePathAdderF16Pipeline U_CS0 (
    .io_adder_op0 (significand_fp_a),
    .io_adder_op1 (significand_fp_b),
    .io_result    (_U_CS0_io_result)
  );
  ClosePathAdderF16Pipeline U_CS1 (
    .io_adder_op0 (significand_fp_b),
    .io_adder_op1 (significand_fp_a),
    .io_result    (_U_CS1_io_result)
  );
  ClosePathAdderF16Pipeline_2 U_CS2 (
    .io_adder_op0 (_U_CS3_io_adder_op1_T),
    .io_adder_op1 (_U_CS3_io_adder_op0_T),
    .io_result    (_U_CS2_io_result)
  );
  ClosePathAdderF16Pipeline_2 U_CS3 (
    .io_adder_op0 (_U_CS3_io_adder_op0_T),
    .io_adder_op1 (_U_CS3_io_adder_op1_T),
    .io_result    (_U_CS3_io_result)
  );
  ClosePathAdderF16Pipeline U_CS4 (
    .io_adder_op0 (U_CS4_io_adder_op0_r),
    .io_adder_op1 (U_CS4_io_adder_op1_r),
    .io_result    (_U_CS4_io_result)
  );
  CloseShiftLeftWithMux_9 U_Lshift (
    .io_src        (U_Lshift_io_src_r),
    .io_shiftValue (lzd_0123_reg),
    .io_result     (_U_Lshift_io_result)
  );
  assign io_fp_c =
    {close_sign_result_r,
     5'(close_exponent_result_r
        - (EA_sub_value_r
             ? 5'h0
             : lshift_result_head_is_one_r > _EA_sub_value_WIRE
               & (|lshift_result_head_is_one_r_1) | (|lshift_result_head_is_one_r_2)
                 ? _EA_sub_value_WIRE
                 : EA_sub_value_r_1)),
     close_fraction_result_r ? _U_CS4_io_result[9:0] : _U_Lshift_io_result[10:1]};
  assign io_fflags = {4'h0, NX_r};
  assign io_CS1 = _U_CS1_io_result;
endmodule

