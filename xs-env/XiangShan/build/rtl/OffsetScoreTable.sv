// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module OffsetScoreTable(
  input         clock,
  input         reset,
  output        io_req_ready,
  input         io_req_valid,
  input  [47:0] io_req_bits,
  output [6:0]  io_prefetchOffset,
  output        io_prefetchDisable,
  output        io_test_req_valid,
  output [47:0] io_test_req_bits_addr,
  output [6:0]  io_test_req_bits_testOffset,
  output [5:0]  io_test_req_bits_ptr,
  input         io_test_resp_valid,
  input  [5:0]  io_test_resp_bits_ptr,
  input         io_test_resp_bits_hit
);

  wire [63:0][6:0] _GEN =
    '{7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h1E,
      7'h1B,
      7'h19,
      7'h18,
      7'h14,
      7'h12,
      7'h10,
      7'hF,
      7'hC,
      7'hA,
      7'h9,
      7'h8,
      7'h6,
      7'h5,
      7'h4,
      7'h3,
      7'h2,
      7'h1,
      7'h7F,
      7'h7E,
      7'h7D,
      7'h7C,
      7'h7B,
      7'h7A,
      7'h78,
      7'h77,
      7'h76,
      7'h74,
      7'h71,
      7'h70,
      7'h6E,
      7'h6C,
      7'h68,
      7'h67,
      7'h65,
      7'h62,
      7'h60};
  reg  [6:0]       prefetchOffset;
  reg              prefetchDisable;
  reg  [4:0]       st_0_score;
  reg  [4:0]       st_1_score;
  reg  [4:0]       st_2_score;
  reg  [4:0]       st_3_score;
  reg  [4:0]       st_4_score;
  reg  [4:0]       st_5_score;
  reg  [4:0]       st_6_score;
  reg  [4:0]       st_7_score;
  reg  [4:0]       st_8_score;
  reg  [4:0]       st_9_score;
  reg  [4:0]       st_10_score;
  reg  [4:0]       st_11_score;
  reg  [4:0]       st_12_score;
  reg  [4:0]       st_13_score;
  reg  [4:0]       st_14_score;
  reg  [4:0]       st_15_score;
  reg  [4:0]       st_16_score;
  reg  [4:0]       st_17_score;
  reg  [4:0]       st_18_score;
  reg  [4:0]       st_19_score;
  reg  [4:0]       st_20_score;
  reg  [4:0]       st_21_score;
  reg  [4:0]       st_22_score;
  reg  [4:0]       st_23_score;
  reg  [4:0]       st_24_score;
  reg  [4:0]       st_25_score;
  reg  [4:0]       st_26_score;
  reg  [4:0]       st_27_score;
  reg  [4:0]       st_28_score;
  reg  [4:0]       st_29_score;
  reg  [4:0]       st_30_score;
  reg  [4:0]       st_31_score;
  reg  [4:0]       st_32_score;
  reg  [4:0]       st_33_score;
  reg  [4:0]       st_34_score;
  reg  [4:0]       st_35_score;
  reg  [4:0]       st_36_score;
  reg  [5:0]       ptr;
  reg  [5:0]       round;
  reg  [6:0]       bestOffset;
  reg  [4:0]       bestScore;
  reg              state;
  wire             io_test_req_valid_0 = state & io_req_valid;
  wire [63:0][6:0] _GEN_0 =
    '{7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h60,
      7'h1E,
      7'h1B,
      7'h19,
      7'h18,
      7'h14,
      7'h12,
      7'h10,
      7'hF,
      7'hC,
      7'hA,
      7'h9,
      7'h8,
      7'h6,
      7'h5,
      7'h4,
      7'h3,
      7'h2,
      7'h1,
      7'h7F,
      7'h7E,
      7'h7D,
      7'h7C,
      7'h7B,
      7'h7A,
      7'h78,
      7'h77,
      7'h76,
      7'h74,
      7'h71,
      7'h70,
      7'h6E,
      7'h6C,
      7'h68,
      7'h67,
      7'h65,
      7'h62,
      7'h60};
  wire             _GEN_1 = {58'h0, round} > 64'h31;
  wire             _GEN_2 = io_test_resp_valid & io_test_resp_bits_hit;
  wire [63:0][4:0] _GEN_3 =
    {{st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_36_score},
     {st_35_score},
     {st_34_score},
     {st_33_score},
     {st_32_score},
     {st_31_score},
     {st_30_score},
     {st_29_score},
     {st_28_score},
     {st_27_score},
     {st_26_score},
     {st_25_score},
     {st_24_score},
     {st_23_score},
     {st_22_score},
     {st_21_score},
     {st_20_score},
     {st_19_score},
     {st_18_score},
     {st_17_score},
     {st_16_score},
     {st_15_score},
     {st_14_score},
     {st_13_score},
     {st_12_score},
     {st_11_score},
     {st_10_score},
     {st_9_score},
     {st_8_score},
     {st_7_score},
     {st_6_score},
     {st_5_score},
     {st_4_score},
     {st_3_score},
     {st_2_score},
     {st_1_score},
     {st_0_score}};
  wire [4:0]       _newScore_T = 5'(_GEN_3[io_test_resp_bits_ptr] + 5'h1);
  wire             renewOffset = _newScore_T > bestScore;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      prefetchOffset <= 7'h2;
      prefetchDisable <= 1'h0;
      st_0_score <= 5'h0;
      st_1_score <= 5'h0;
      st_2_score <= 5'h0;
      st_3_score <= 5'h0;
      st_4_score <= 5'h0;
      st_5_score <= 5'h0;
      st_6_score <= 5'h0;
      st_7_score <= 5'h0;
      st_8_score <= 5'h0;
      st_9_score <= 5'h0;
      st_10_score <= 5'h0;
      st_11_score <= 5'h0;
      st_12_score <= 5'h0;
      st_13_score <= 5'h0;
      st_14_score <= 5'h0;
      st_15_score <= 5'h0;
      st_16_score <= 5'h0;
      st_17_score <= 5'h0;
      st_18_score <= 5'h0;
      st_19_score <= 5'h0;
      st_20_score <= 5'h0;
      st_21_score <= 5'h0;
      st_22_score <= 5'h0;
      st_23_score <= 5'h0;
      st_24_score <= 5'h0;
      st_25_score <= 5'h0;
      st_26_score <= 5'h0;
      st_27_score <= 5'h0;
      st_28_score <= 5'h0;
      st_29_score <= 5'h0;
      st_30_score <= 5'h0;
      st_31_score <= 5'h0;
      st_32_score <= 5'h0;
      st_33_score <= 5'h0;
      st_34_score <= 5'h0;
      st_35_score <= 5'h0;
      st_36_score <= 5'h0;
      ptr <= 6'h0;
      round <= 6'h0;
      bestOffset <= 7'h2;
      bestScore <= 5'h0;
      state <= 1'h0;
    end
    else begin
      if (state) begin
      end
      else begin
        prefetchOffset <= bestOffset;
        prefetchDisable <= bestScore == 5'h0;
      end
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h0)
        st_0_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_0_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1)
        st_1_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_1_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h2)
        st_2_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_2_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h3)
        st_3_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_3_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h4)
        st_4_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_4_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h5)
        st_5_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_5_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h6)
        st_6_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_6_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h7)
        st_7_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_7_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h8)
        st_8_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_8_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h9)
        st_9_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_9_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hA)
        st_10_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_10_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hB)
        st_11_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_11_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hC)
        st_12_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_12_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hD)
        st_13_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_13_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hE)
        st_14_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_14_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'hF)
        st_15_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_15_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h10)
        st_16_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_16_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h11)
        st_17_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_17_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h12)
        st_18_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_18_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h13)
        st_19_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_19_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h14)
        st_20_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_20_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h15)
        st_21_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_21_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h16)
        st_22_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_22_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h17)
        st_23_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_23_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h18)
        st_24_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_24_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h19)
        st_25_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_25_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1A)
        st_26_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_26_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1B)
        st_27_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_27_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1C)
        st_28_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_28_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1D)
        st_29_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_29_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1E)
        st_30_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_30_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h1F)
        st_31_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_31_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h20)
        st_32_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_32_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h21)
        st_33_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_33_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h22)
        st_34_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_34_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h23)
        st_35_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_35_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 6'h24)
        st_36_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_36_score <= 5'h0;
      if (state & io_test_req_valid_0) begin
        if (ptr == 6'h24) begin
          ptr <= 6'h0;
          round <= 6'(round + 6'h1);
        end
        else
          ptr <= 6'(ptr + 6'h1);
      end
      else if (state) begin
      end
      else begin
        ptr <= 6'h0;
        round <= 6'h0;
      end
      if (state & _GEN_2 & renewOffset)
        bestOffset <= _GEN_0[io_test_resp_bits_ptr];
      if (state & _GEN_2) begin
        if (renewOffset)
          bestScore <= _newScore_T;
      end
      else if (state) begin
      end
      else
        bestScore <= 5'h0;
      state <= ~state | (_GEN_2 ? ~((&_newScore_T) | _GEN_1) : ~_GEN_1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        prefetchOffset = _RANDOM[3'h0][6:0];
        prefetchDisable = _RANDOM[3'h0][7];
        st_0_score = _RANDOM[3'h0][12:8];
        st_1_score = _RANDOM[3'h0][17:13];
        st_2_score = _RANDOM[3'h0][22:18];
        st_3_score = _RANDOM[3'h0][27:23];
        st_4_score = {_RANDOM[3'h0][31:28], _RANDOM[3'h1][0]};
        st_5_score = _RANDOM[3'h1][5:1];
        st_6_score = _RANDOM[3'h1][10:6];
        st_7_score = _RANDOM[3'h1][15:11];
        st_8_score = _RANDOM[3'h1][20:16];
        st_9_score = _RANDOM[3'h1][25:21];
        st_10_score = _RANDOM[3'h1][30:26];
        st_11_score = {_RANDOM[3'h1][31], _RANDOM[3'h2][3:0]};
        st_12_score = _RANDOM[3'h2][8:4];
        st_13_score = _RANDOM[3'h2][13:9];
        st_14_score = _RANDOM[3'h2][18:14];
        st_15_score = _RANDOM[3'h2][23:19];
        st_16_score = _RANDOM[3'h2][28:24];
        st_17_score = {_RANDOM[3'h2][31:29], _RANDOM[3'h3][1:0]};
        st_18_score = _RANDOM[3'h3][6:2];
        st_19_score = _RANDOM[3'h3][11:7];
        st_20_score = _RANDOM[3'h3][16:12];
        st_21_score = _RANDOM[3'h3][21:17];
        st_22_score = _RANDOM[3'h3][26:22];
        st_23_score = _RANDOM[3'h3][31:27];
        st_24_score = _RANDOM[3'h4][4:0];
        st_25_score = _RANDOM[3'h4][9:5];
        st_26_score = _RANDOM[3'h4][14:10];
        st_27_score = _RANDOM[3'h4][19:15];
        st_28_score = _RANDOM[3'h4][24:20];
        st_29_score = _RANDOM[3'h4][29:25];
        st_30_score = {_RANDOM[3'h4][31:30], _RANDOM[3'h5][2:0]};
        st_31_score = _RANDOM[3'h5][7:3];
        st_32_score = _RANDOM[3'h5][12:8];
        st_33_score = _RANDOM[3'h5][17:13];
        st_34_score = _RANDOM[3'h5][22:18];
        st_35_score = _RANDOM[3'h5][27:23];
        st_36_score = {_RANDOM[3'h5][31:28], _RANDOM[3'h6][0]};
        ptr = _RANDOM[3'h6][6:1];
        round = _RANDOM[3'h6][12:7];
        bestOffset = _RANDOM[3'h6][19:13];
        bestScore = _RANDOM[3'h6][24:20];
        state = _RANDOM[3'h6][25];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        prefetchOffset = 7'h2;
        prefetchDisable = 1'h0;
        st_0_score = 5'h0;
        st_1_score = 5'h0;
        st_2_score = 5'h0;
        st_3_score = 5'h0;
        st_4_score = 5'h0;
        st_5_score = 5'h0;
        st_6_score = 5'h0;
        st_7_score = 5'h0;
        st_8_score = 5'h0;
        st_9_score = 5'h0;
        st_10_score = 5'h0;
        st_11_score = 5'h0;
        st_12_score = 5'h0;
        st_13_score = 5'h0;
        st_14_score = 5'h0;
        st_15_score = 5'h0;
        st_16_score = 5'h0;
        st_17_score = 5'h0;
        st_18_score = 5'h0;
        st_19_score = 5'h0;
        st_20_score = 5'h0;
        st_21_score = 5'h0;
        st_22_score = 5'h0;
        st_23_score = 5'h0;
        st_24_score = 5'h0;
        st_25_score = 5'h0;
        st_26_score = 5'h0;
        st_27_score = 5'h0;
        st_28_score = 5'h0;
        st_29_score = 5'h0;
        st_30_score = 5'h0;
        st_31_score = 5'h0;
        st_32_score = 5'h0;
        st_33_score = 5'h0;
        st_34_score = 5'h0;
        st_35_score = 5'h0;
        st_36_score = 5'h0;
        ptr = 6'h0;
        round = 6'h0;
        bestOffset = 7'h2;
        bestScore = 5'h0;
        state = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = state;
  assign io_prefetchOffset = prefetchOffset;
  assign io_prefetchDisable = prefetchDisable;
  assign io_test_req_valid = io_test_req_valid_0;
  assign io_test_req_bits_addr = io_req_bits;
  assign io_test_req_bits_testOffset = _GEN[ptr];
  assign io_test_req_bits_ptr = ptr;
endmodule

