// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VSSplitBufferImp(
  input          clock,
  input          reset,
  input          io_redirect_valid,
  input          io_redirect_bits_robIdx_flag,
  input  [7:0]   io_redirect_bits_robIdx_value,
  input          io_redirect_bits_level,
  output         io_in_ready,
  input          io_in_valid,
  input  [15:0]  io_in_bits_flowMask,
  input  [127:0] io_in_bits_data,
  input  [63:0]  io_in_bits_baseAddr,
  input  [63:0]  io_in_bits_uopAddr,
  input  [127:0] io_in_bits_stride,
  input  [4:0]   io_in_bits_flowNum,
  input  [1:0]   io_in_bits_eew,
  input  [2:0]   io_in_bits_sew,
  input  [2:0]   io_in_bits_emul,
  input  [2:0]   io_in_bits_lmul,
  input  [2:0]   io_in_bits_instType,
  input  [4:0]   io_in_bits_indexedSplitOffset,
  input          io_in_bits_uop_preDecodeInfo_isRVC,
  input          io_in_bits_uop_ftqPtr_flag,
  input  [5:0]   io_in_bits_uop_ftqPtr_value,
  input  [3:0]   io_in_bits_uop_ftqOffset,
  input  [8:0]   io_in_bits_uop_fuOpType,
  input          io_in_bits_uop_rfWen,
  input          io_in_bits_uop_fpWen,
  input  [7:0]   io_in_bits_uop_vpu_vstart,
  input  [6:0]   io_in_bits_uop_vpu_vuopIdx,
  input  [1:0]   io_in_bits_uop_vpu_veew,
  input  [6:0]   io_in_bits_uop_uopIdx,
  input  [7:0]   io_in_bits_uop_pdest,
  input          io_in_bits_uop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_robIdx_value,
  input          io_in_bits_uop_storeSetHit,
  input          io_in_bits_uop_waitForRobIdx_flag,
  input  [7:0]   io_in_bits_uop_waitForRobIdx_value,
  input          io_in_bits_uop_loadWaitBit,
  input          io_in_bits_uop_loadWaitStrict,
  input          io_in_bits_uop_lqIdx_flag,
  input  [6:0]   io_in_bits_uop_lqIdx_value,
  input          io_in_bits_uop_sqIdx_flag,
  input  [5:0]   io_in_bits_uop_sqIdx_value,
  input          io_in_bits_preIsSplit,
  input  [3:0]   io_in_bits_mBIndex,
  input  [2:0]   io_in_bits_alignedType,
  input  [7:0]   io_in_bits_indexVlMaxInVd,
  input  [3:0]   io_in_bits_usLowBitsAddr,
  input          io_in_bits_usAligned128,
  input  [31:0]  io_in_bits_usMask,
  input          io_out_ready,
  output         io_out_valid,
  output [63:0]  io_out_bits_vaddr,
  output [49:0]  io_out_bits_basevaddr,
  output [15:0]  io_out_bits_mask,
  output [3:0]   io_out_bits_reg_offset,
  output [2:0]   io_out_bits_alignedType,
  output         io_out_bits_vecActive,
  output         io_out_bits_uop_exceptionVec_6,
  output         io_out_bits_uop_preDecodeInfo_isRVC,
  output         io_out_bits_uop_ftqPtr_flag,
  output [5:0]   io_out_bits_uop_ftqPtr_value,
  output [3:0]   io_out_bits_uop_ftqOffset,
  output [8:0]   io_out_bits_uop_fuOpType,
  output         io_out_bits_uop_rfWen,
  output         io_out_bits_uop_fpWen,
  output [7:0]   io_out_bits_uop_vpu_vstart,
  output [1:0]   io_out_bits_uop_vpu_veew,
  output [6:0]   io_out_bits_uop_uopIdx,
  output [7:0]   io_out_bits_uop_pdest,
  output         io_out_bits_uop_robIdx_flag,
  output [7:0]   io_out_bits_uop_robIdx_value,
  output         io_out_bits_uop_storeSetHit,
  output         io_out_bits_uop_waitForRobIdx_flag,
  output [7:0]   io_out_bits_uop_waitForRobIdx_value,
  output         io_out_bits_uop_loadWaitBit,
  output         io_out_bits_uop_loadWaitStrict,
  output         io_out_bits_uop_lqIdx_flag,
  output [6:0]   io_out_bits_uop_lqIdx_value,
  output         io_out_bits_uop_sqIdx_flag,
  output [5:0]   io_out_bits_uop_sqIdx_value,
  output [3:0]   io_out_bits_mBIndex,
  output [7:0]   io_out_bits_elemIdx,
  output [7:0]   io_out_bits_elemIdxInsideVd,
  output         io_vstd_valid,
  output [8:0]   io_vstd_bits_uop_fuOpType,
  output         io_vstd_bits_uop_sqIdx_flag,
  output [5:0]   io_vstd_bits_uop_sqIdx_value,
  output [127:0] io_vstd_bits_data,
  input          io_vstdMisalign_storePipeEmpty,
  input          io_vstdMisalign_storeMisalignBufferEmpty
);

  wire         inActiveIssue;
  wire         activeIssue;
  wire         splitFinish;
  wire         needCancel;
  reg  [15:0]  uopq_flowMask;
  reg  [127:0] uopq_data;
  reg  [63:0]  uopq_baseAddr;
  reg  [63:0]  uopq_uopAddr;
  reg  [127:0] uopq_stride;
  reg  [4:0]   uopq_flowNum;
  reg  [1:0]   uopq_eew;
  reg  [2:0]   uopq_sew;
  reg  [2:0]   uopq_emul;
  reg  [2:0]   uopq_lmul;
  reg  [2:0]   uopq_instType;
  reg  [4:0]   uopq_indexedSplitOffset;
  reg          uopq_uop_preDecodeInfo_isRVC;
  reg          uopq_uop_ftqPtr_flag;
  reg  [5:0]   uopq_uop_ftqPtr_value;
  reg  [3:0]   uopq_uop_ftqOffset;
  reg  [8:0]   uopq_uop_fuOpType;
  reg          uopq_uop_rfWen;
  reg          uopq_uop_fpWen;
  reg  [7:0]   uopq_uop_vpu_vstart;
  reg  [6:0]   uopq_uop_vpu_vuopIdx;
  reg  [1:0]   uopq_uop_vpu_veew;
  reg  [6:0]   uopq_uop_uopIdx;
  reg  [7:0]   uopq_uop_pdest;
  reg          uopq_uop_robIdx_flag;
  reg  [7:0]   uopq_uop_robIdx_value;
  reg          uopq_uop_storeSetHit;
  reg          uopq_uop_waitForRobIdx_flag;
  reg  [7:0]   uopq_uop_waitForRobIdx_value;
  reg          uopq_uop_loadWaitBit;
  reg          uopq_uop_loadWaitStrict;
  reg          uopq_uop_lqIdx_flag;
  reg  [6:0]   uopq_uop_lqIdx_value;
  reg          uopq_uop_sqIdx_flag;
  reg  [5:0]   uopq_uop_sqIdx_value;
  reg          uopq_preIsSplit;
  reg  [3:0]   uopq_mBIndex;
  reg  [2:0]   uopq_alignedType;
  reg  [7:0]   uopq_indexVlMaxInVd;
  reg  [3:0]   regOffset;
  reg          uopq_usAligned128;
  reg  [31:0]  uopq_usMask;
  reg          allocated;
  reg  [4:0]   splitIdx;
  reg  [127:0] strideOffsetReg;
  wire [8:0]   _flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire         _canAccept_T_2 = activeIssue | inActiveIssue;
  wire         canAccept = ~allocated | allocated & splitFinish & _canAccept_T_2;
  wire         doEnqueue =
    canAccept & io_in_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {io_in_bits_uop_robIdx_flag, io_in_bits_uop_robIdx_value} == _flushItself_T_2
           | io_in_bits_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ io_in_bits_uop_robIdx_value > io_redirect_bits_robIdx_value));
  wire         issueValid = allocated & ~needCancel;
  wire [2:0]   elemIdx_uopFlowsLog2 =
    ~(uopq_instType[0]) | $signed(uopq_emul) > $signed(uopq_lmul)
      ? 3'(3'(($signed(uopq_emul) > 3'sh0 ? 3'h0 : uopq_emul) - 3'h4) - {1'h0, uopq_eew})
      : 3'(3'(($signed(uopq_lmul) > 3'sh0 ? 3'h0 : uopq_lmul) - 3'h4)
           - {1'h0, uopq_sew[1:0]});
  wire [7:0]   elemIdx =
    {1'h0, elemIdx_uopFlowsLog2 == 3'h0 ? uopq_uop_vpu_vuopIdx : 7'h0}
    | (elemIdx_uopFlowsLog2 == 3'h1 ? {uopq_uop_vpu_vuopIdx, splitIdx[0]} : 8'h0)
    | (elemIdx_uopFlowsLog2 == 3'h2 ? {uopq_uop_vpu_vuopIdx[5:0], splitIdx[1:0]} : 8'h0)
    | (elemIdx_uopFlowsLog2 == 3'h3 ? {uopq_uop_vpu_vuopIdx[4:0], splitIdx[2:0]} : 8'h0)
    | (elemIdx_uopFlowsLog2 == 3'h4 ? {uopq_uop_vpu_vuopIdx[3:0], splitIdx[3:0]} : 8'h0);
  wire [4:0]   _splitIdxOffset_T = 5'(uopq_indexedSplitOffset + splitIdx);
  wire [7:0]   _GEN = elemIdx & uopq_indexVlMaxInVd;
  wire         _indexedStride_T_111 = _GEN == 8'h0;
  wire         _indexedStride_T_112 = _GEN == 8'h1;
  wire         _indexedStride_T_100 = _GEN == 8'h2;
  wire         _indexedStride_T_101 = _GEN == 8'h3;
  wire         _indexedStride_T_75 = _GEN == 8'h4;
  wire         _indexedStride_T_76 = _GEN == 8'h5;
  wire         _indexedStride_T_77 = _GEN == 8'h6;
  wire         _indexedStride_T_78 = _GEN == 8'h7;
  wire         _addrAligned_T_10 = uopq_eew == 2'h0;
  wire         _addrAligned_T_7 = uopq_eew == 2'h1;
  wire         _addrAligned_T_8 = uopq_eew == 2'h2;
  wire [63:0]  _vaddr_T =
    64'(uopq_uopAddr
        + (uopq_instType[0]
             ? {32'h0,
                {16'h0,
                 {8'h0,
                  _addrAligned_T_10
                    ? (_indexedStride_T_111 ? uopq_stride[7:0] : 8'h0)
                      | (_indexedStride_T_112 ? uopq_stride[15:8] : 8'h0)
                      | (_indexedStride_T_100 ? uopq_stride[23:16] : 8'h0)
                      | (_indexedStride_T_101 ? uopq_stride[31:24] : 8'h0)
                      | (_indexedStride_T_75 ? uopq_stride[39:32] : 8'h0)
                      | (_indexedStride_T_76 ? uopq_stride[47:40] : 8'h0)
                      | (_indexedStride_T_77 ? uopq_stride[55:48] : 8'h0)
                      | (_indexedStride_T_78 ? uopq_stride[63:56] : 8'h0)
                      | (_GEN == 8'h8 ? uopq_stride[71:64] : 8'h0)
                      | (_GEN == 8'h9 ? uopq_stride[79:72] : 8'h0)
                      | (_GEN == 8'hA ? uopq_stride[87:80] : 8'h0)
                      | (_GEN == 8'hB ? uopq_stride[95:88] : 8'h0)
                      | (_GEN == 8'hC ? uopq_stride[103:96] : 8'h0)
                      | (_GEN == 8'hD ? uopq_stride[111:104] : 8'h0)
                      | (_GEN == 8'hE ? uopq_stride[119:112] : 8'h0)
                      | (_GEN == 8'hF ? uopq_stride[127:120] : 8'h0)
                    : 8'h0}
                   | (_addrAligned_T_7
                        ? (_indexedStride_T_111 ? uopq_stride[15:0] : 16'h0)
                          | (_indexedStride_T_112 ? uopq_stride[31:16] : 16'h0)
                          | (_indexedStride_T_100 ? uopq_stride[47:32] : 16'h0)
                          | (_indexedStride_T_101 ? uopq_stride[63:48] : 16'h0)
                          | (_indexedStride_T_75 ? uopq_stride[79:64] : 16'h0)
                          | (_indexedStride_T_76 ? uopq_stride[95:80] : 16'h0)
                          | (_indexedStride_T_77 ? uopq_stride[111:96] : 16'h0)
                          | (_indexedStride_T_78 ? uopq_stride[127:112] : 16'h0)
                        : 16'h0)}
                  | (_addrAligned_T_8
                       ? (_indexedStride_T_111 ? uopq_stride[31:0] : 32'h0)
                         | (_indexedStride_T_112 ? uopq_stride[63:32] : 32'h0)
                         | (_indexedStride_T_100 ? uopq_stride[95:64] : 32'h0)
                         | (_indexedStride_T_101 ? uopq_stride[127:96] : 32'h0)
                       : 32'h0)}
               | ((&uopq_eew)
                    ? (_indexedStride_T_111 ? uopq_stride[63:0] : 64'h0)
                      | (_indexedStride_T_112 ? uopq_stride[127:64] : 64'h0)
                    : 64'h0)
             : strideOffsetReg[63:0]));
  wire         _flowData_T_15 = uopq_alignedType == 3'h0;
  wire         _flowData_T_16 = uopq_alignedType == 3'h1;
  wire         _flowData_T_17 = uopq_alignedType == 3'h2;
  wire         _flowData_T_18 = uopq_alignedType == 3'h3;
  wire         _flowData_T_19 = uopq_alignedType == 3'h4;
  wire [30:0]  mask =
    {15'h0,
     {8'h0,
      {4'h0, {2'h0, {1'h0, _flowData_T_15} | {2{_flowData_T_16}}} | {4{_flowData_T_17}}}
        | {8{_flowData_T_18}}} | {16{_flowData_T_19}}} << _vaddr_T[3:0];
  wire         _usSplitData_T_4 = splitIdx == 5'h1;
  wire [15:0]  usSplitMask =
    ((|splitIdx) ? 16'h0 : uopq_usMask[15:0])
    | (_usSplitData_T_4 ? uopq_usMask[31:16] : 16'h0);
  wire [31:0]  _vecActive_T_2 = 32'h1 << splitIdx;
  wire         vecActive =
    uopq_preIsSplit ? (|(_vecActive_T_2[15:0] & uopq_flowMask)) : (|usSplitMask);
  wire         addrAligned =
    _addrAligned_T_10 | _addrAligned_T_7 & ~(_vaddr_T[0]) | _addrAligned_T_8
    & _vaddr_T[1:0] == 2'h0 | (&uopq_eew) & _vaddr_T[2:0] == 3'h0 | ~uopq_preIsSplit;
  wire [15:0]  _io_out_bits_mask_T_1 = uopq_preIsSplit ? mask[15:0] : usSplitMask;
  wire [8:0]   _flushItself_T_1 = {uopq_uop_robIdx_flag, uopq_uop_robIdx_value};
  wire         differentFlag = uopq_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag;
  wire         compare = uopq_uop_robIdx_value > io_redirect_bits_robIdx_value;
  assign needCancel =
    io_redirect_valid
    & (io_redirect_bits_level & _flushItself_T_1 == _flushItself_T_2 | differentFlag
       ^ compare) & allocated;
  wire         _io_out_valid_T_1 =
    addrAligned | io_vstdMisalign_storePipeEmpty
    & io_vstdMisalign_storeMisalignBufferEmpty;
  wire [4:0]   _GEN_0 =
    {3'h0,
     (uopq_usAligned128 | uopq_usMask[31:16] == 16'h0) & ~uopq_preIsSplit & ~(|splitIdx)
       ? 2'h2
       : {1'h0, 1'(inActiveIssue + activeIssue)}};
  assign splitFinish = splitIdx >= 5'(uopq_flowNum - _GEN_0);
  assign activeIssue = issueValid & _io_out_valid_T_1 & io_out_ready & vecActive;
  assign inActiveIssue = issueValid & ~vecActive;
  wire [127:0] splitData =
    (_flowData_T_15
       ? {120'h0,
          (_splitIdxOffset_T[3:0] == 4'h0 ? uopq_data[7:0] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h1 ? uopq_data[15:8] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h2 ? uopq_data[23:16] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h3 ? uopq_data[31:24] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h4 ? uopq_data[39:32] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h5 ? uopq_data[47:40] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h6 ? uopq_data[55:48] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h7 ? uopq_data[63:56] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h8 ? uopq_data[71:64] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'h9 ? uopq_data[79:72] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'hA ? uopq_data[87:80] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'hB ? uopq_data[95:88] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'hC ? uopq_data[103:96] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'hD ? uopq_data[111:104] : 8'h0)
            | (_splitIdxOffset_T[3:0] == 4'hE ? uopq_data[119:112] : 8'h0)
            | ((&(_splitIdxOffset_T[3:0])) ? uopq_data[127:120] : 8'h0)}
       : 128'h0)
    | (_flowData_T_16
         ? {112'h0,
            (_splitIdxOffset_T[2:0] == 3'h0 ? uopq_data[15:0] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h1 ? uopq_data[31:16] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h2 ? uopq_data[47:32] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h3 ? uopq_data[63:48] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h4 ? uopq_data[79:64] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h5 ? uopq_data[95:80] : 16'h0)
              | (_splitIdxOffset_T[2:0] == 3'h6 ? uopq_data[111:96] : 16'h0)
              | ((&(_splitIdxOffset_T[2:0])) ? uopq_data[127:112] : 16'h0)}
         : 128'h0)
    | (_flowData_T_17
         ? {96'h0,
            (_splitIdxOffset_T[1:0] == 2'h0 ? uopq_data[31:0] : 32'h0)
              | (_splitIdxOffset_T[1:0] == 2'h1 ? uopq_data[63:32] : 32'h0)
              | (_splitIdxOffset_T[1:0] == 2'h2 ? uopq_data[95:64] : 32'h0)
              | ((&(_splitIdxOffset_T[1:0])) ? uopq_data[127:96] : 32'h0)}
         : 128'h0)
    | (_flowData_T_18
         ? {64'h0,
            (_splitIdxOffset_T[0] ? 64'h0 : uopq_data[63:0])
              | (_splitIdxOffset_T[0] ? uopq_data[127:64] : 64'h0)}
         : 128'h0) | (_flowData_T_19 ? uopq_data : 128'h0);
  wire [255:0] _usSplitData_tmpData_T_46 =
    (_vaddr_T[3:0] == 4'h0 ? {128'h0, uopq_data} : 256'h0)
    | (_vaddr_T[3:0] == 4'h1 ? {120'h0, uopq_data, 8'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h2 ? {112'h0, uopq_data, 16'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h3 ? {104'h0, uopq_data, 24'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h4 ? {96'h0, uopq_data, 32'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h5 ? {88'h0, uopq_data, 40'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h6 ? {80'h0, uopq_data, 48'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h7 ? {72'h0, uopq_data, 56'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h8 ? {64'h0, uopq_data, 64'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'h9 ? {56'h0, uopq_data, 72'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'hA ? {48'h0, uopq_data, 80'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'hB ? {40'h0, uopq_data, 88'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'hC ? {32'h0, uopq_data, 96'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'hD ? {24'h0, uopq_data, 104'h0} : 256'h0)
    | (_vaddr_T[3:0] == 4'hE ? {16'h0, uopq_data, 112'h0} : 256'h0)
    | ((&(_vaddr_T[3:0])) ? {8'h0, uopq_data, 120'h0} : 256'h0);
  wire [6:0]   sqIdx_new_value = 7'({1'h0, uopq_uop_sqIdx_value} + {2'h0, splitIdx});
  wire [7:0]   _sqIdx_diff_T_4 = 8'({1'h0, sqIdx_new_value} - 8'h38);
  wire         sqIdx_reverse_flag = $signed(_sqIdx_diff_T_4) > -8'sh1;
  wire         sqIdx_flag = sqIdx_reverse_flag ^ uopq_uop_sqIdx_flag;
  wire [5:0]   _sqIdx_new_ptr_value_T_1 =
    sqIdx_reverse_flag ? _sqIdx_diff_T_4[5:0] : sqIdx_new_value[5:0];
  always @(posedge clock) begin
    if (doEnqueue) begin
      uopq_flowMask <= io_in_bits_flowMask;
      uopq_data <= io_in_bits_data;
      uopq_baseAddr <= io_in_bits_baseAddr;
      uopq_uopAddr <= io_in_bits_uopAddr;
      uopq_stride <= io_in_bits_stride;
      uopq_flowNum <= io_in_bits_flowNum;
      uopq_eew <= io_in_bits_eew;
      uopq_sew <= io_in_bits_sew;
      uopq_emul <= io_in_bits_emul;
      uopq_lmul <= io_in_bits_lmul;
      uopq_instType <= io_in_bits_instType;
      uopq_indexedSplitOffset <= io_in_bits_indexedSplitOffset;
      uopq_uop_preDecodeInfo_isRVC <= io_in_bits_uop_preDecodeInfo_isRVC;
      uopq_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_uop_fuOpType <= io_in_bits_uop_fuOpType;
      uopq_uop_rfWen <= io_in_bits_uop_rfWen;
      uopq_uop_fpWen <= io_in_bits_uop_fpWen;
      uopq_uop_vpu_vstart <= io_in_bits_uop_vpu_vstart;
      uopq_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_uop_vpu_veew <= io_in_bits_uop_vpu_veew;
      uopq_uop_uopIdx <= io_in_bits_uop_uopIdx;
      uopq_uop_pdest <= io_in_bits_uop_pdest;
      uopq_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      uopq_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      uopq_uop_storeSetHit <= io_in_bits_uop_storeSetHit;
      uopq_uop_waitForRobIdx_flag <= io_in_bits_uop_waitForRobIdx_flag;
      uopq_uop_waitForRobIdx_value <= io_in_bits_uop_waitForRobIdx_value;
      uopq_uop_loadWaitBit <= io_in_bits_uop_loadWaitBit;
      uopq_uop_loadWaitStrict <= io_in_bits_uop_loadWaitStrict;
      uopq_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_preIsSplit <= io_in_bits_preIsSplit;
      uopq_mBIndex <= io_in_bits_mBIndex;
      uopq_alignedType <= io_in_bits_alignedType;
      uopq_indexVlMaxInVd <= io_in_bits_indexVlMaxInVd;
      regOffset <= io_in_bits_usLowBitsAddr;
      uopq_usAligned128 <= io_in_bits_usAligned128;
      uopq_usMask <= io_in_bits_usMask;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      allocated <= 1'h0;
      splitIdx <= 5'h0;
      strideOffsetReg <= 128'h0;
    end
    else begin
      allocated <= doEnqueue | ~(needCancel | splitFinish & _canAccept_T_2) & allocated;
      if (io_redirect_valid
          & (io_redirect_bits_level & _flushItself_T_1 == _flushItself_T_2 | differentFlag
             ^ compare)) begin
        splitIdx <= 5'h0;
        strideOffsetReg <= 128'h0;
      end
      else if (_canAccept_T_2) begin
        splitIdx <= splitFinish ? 5'h0 : 5'(splitIdx + _GEN_0);
        strideOffsetReg <=
          splitFinish | ~uopq_preIsSplit ? 128'h0 : 128'(strideOffsetReg + uopq_stride);
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:63];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [6:0] i = 7'h0; i < 7'h40; i += 7'h1) begin
          _RANDOM[i[5:0]] = `RANDOM;
        end
        uopq_flowMask = _RANDOM[6'h0][15:0];
        uopq_data = {_RANDOM[6'h1], _RANDOM[6'h2], _RANDOM[6'h3], _RANDOM[6'h4]};
        uopq_baseAddr = {_RANDOM[6'h5][31:8], _RANDOM[6'h6], _RANDOM[6'h7][7:0]};
        uopq_uopAddr = {_RANDOM[6'h7][31:8], _RANDOM[6'h8], _RANDOM[6'h9][7:0]};
        uopq_stride =
          {_RANDOM[6'h9][31:8],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD][7:0]};
        uopq_flowNum = _RANDOM[6'hD][12:8];
        uopq_eew = _RANDOM[6'hD][21:20];
        uopq_sew = _RANDOM[6'hD][24:22];
        uopq_emul = _RANDOM[6'hD][27:25];
        uopq_lmul = _RANDOM[6'hD][30:28];
        uopq_instType = _RANDOM[6'hE][9:7];
        uopq_indexedSplitOffset = {_RANDOM[6'hE][31], _RANDOM[6'hF][3:0]};
        uopq_uop_preDecodeInfo_isRVC = _RANDOM[6'h12][31];
        uopq_uop_ftqPtr_flag = _RANDOM[6'h13][6];
        uopq_uop_ftqPtr_value = _RANDOM[6'h13][12:7];
        uopq_uop_ftqOffset = _RANDOM[6'h13][16:13];
        uopq_uop_fuOpType = _RANDOM[6'h15][22:14];
        uopq_uop_rfWen = _RANDOM[6'h15][23];
        uopq_uop_fpWen = _RANDOM[6'h15][24];
        uopq_uop_vpu_vstart = _RANDOM[6'h18][7:0];
        uopq_uop_vpu_vuopIdx = _RANDOM[6'h18][26:20];
        uopq_uop_vpu_veew = _RANDOM[6'h1D][8:7];
        uopq_uop_uopIdx = _RANDOM[6'h1D][28:22];
        uopq_uop_pdest = {_RANDOM[6'h20][31:28], _RANDOM[6'h21][3:0]};
        uopq_uop_robIdx_flag = _RANDOM[6'h21][16];
        uopq_uop_robIdx_value = _RANDOM[6'h21][24:17];
        uopq_uop_storeSetHit = _RANDOM[6'h34][10];
        uopq_uop_waitForRobIdx_flag = _RANDOM[6'h34][11];
        uopq_uop_waitForRobIdx_value = _RANDOM[6'h34][19:12];
        uopq_uop_loadWaitBit = _RANDOM[6'h34][20];
        uopq_uop_loadWaitStrict = _RANDOM[6'h34][21];
        uopq_uop_lqIdx_flag = _RANDOM[6'h34][27];
        uopq_uop_lqIdx_value = {_RANDOM[6'h34][31:28], _RANDOM[6'h35][2:0]};
        uopq_uop_sqIdx_flag = _RANDOM[6'h35][3];
        uopq_uop_sqIdx_value = _RANDOM[6'h35][9:4];
        uopq_preIsSplit = _RANDOM[6'h39][21];
        uopq_mBIndex = _RANDOM[6'h39][25:22];
        uopq_alignedType = _RANDOM[6'h39][28:26];
        uopq_indexVlMaxInVd = {_RANDOM[6'h39][31:29], _RANDOM[6'h3A][4:0]};
        regOffset = _RANDOM[6'h3A][8:5];
        uopq_usAligned128 = _RANDOM[6'h3A][9];
        uopq_usMask = {_RANDOM[6'h3A][31:10], _RANDOM[6'h3B][9:0]};
        allocated = _RANDOM[6'h3B][10];
        splitIdx = _RANDOM[6'h3B][15:11];
        strideOffsetReg =
          {_RANDOM[6'h3B][31:16],
           _RANDOM[6'h3C],
           _RANDOM[6'h3D],
           _RANDOM[6'h3E],
           _RANDOM[6'h3F][15:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        allocated = 1'h0;
        splitIdx = 5'h0;
        strideOffsetReg = 128'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = canAccept;
  assign io_out_valid = issueValid & vecActive & _io_out_valid_T_1;
  assign io_out_bits_vaddr =
    uopq_preIsSplit
      ? _vaddr_T
      : ((|splitIdx) ? 64'h0 : {uopq_uopAddr[63:4], 4'h0})
        | (_usSplitData_T_4 ? 64'({uopq_uopAddr[63:4], 4'h0} + 64'h10) : 64'h0);
  assign io_out_bits_basevaddr = uopq_baseAddr[49:0];
  assign io_out_bits_mask = _io_out_bits_mask_T_1;
  assign io_out_bits_reg_offset = regOffset;
  assign io_out_bits_alignedType = uopq_alignedType;
  assign io_out_bits_vecActive = vecActive;
  assign io_out_bits_uop_exceptionVec_6 =
    ~addrAligned & ~uopq_preIsSplit & (|_io_out_bits_mask_T_1);
  assign io_out_bits_uop_preDecodeInfo_isRVC = uopq_uop_preDecodeInfo_isRVC;
  assign io_out_bits_uop_ftqPtr_flag = uopq_uop_ftqPtr_flag;
  assign io_out_bits_uop_ftqPtr_value = uopq_uop_ftqPtr_value;
  assign io_out_bits_uop_ftqOffset = uopq_uop_ftqOffset;
  assign io_out_bits_uop_fuOpType = uopq_uop_fuOpType;
  assign io_out_bits_uop_rfWen = uopq_uop_rfWen;
  assign io_out_bits_uop_fpWen = uopq_uop_fpWen;
  assign io_out_bits_uop_vpu_vstart = uopq_uop_vpu_vstart;
  assign io_out_bits_uop_vpu_veew = uopq_uop_vpu_veew;
  assign io_out_bits_uop_uopIdx = uopq_uop_uopIdx;
  assign io_out_bits_uop_pdest = uopq_uop_pdest;
  assign io_out_bits_uop_robIdx_flag = uopq_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = uopq_uop_robIdx_value;
  assign io_out_bits_uop_storeSetHit = uopq_uop_storeSetHit;
  assign io_out_bits_uop_waitForRobIdx_flag = uopq_uop_waitForRobIdx_flag;
  assign io_out_bits_uop_waitForRobIdx_value = uopq_uop_waitForRobIdx_value;
  assign io_out_bits_uop_loadWaitBit = uopq_uop_loadWaitBit;
  assign io_out_bits_uop_loadWaitStrict = uopq_uop_loadWaitStrict;
  assign io_out_bits_uop_lqIdx_flag = uopq_uop_lqIdx_flag;
  assign io_out_bits_uop_lqIdx_value = uopq_uop_lqIdx_value;
  assign io_out_bits_uop_sqIdx_flag = sqIdx_flag;
  assign io_out_bits_uop_sqIdx_value = _sqIdx_new_ptr_value_T_1;
  assign io_out_bits_mBIndex = uopq_mBIndex;
  assign io_out_bits_elemIdx = elemIdx;
  assign io_out_bits_elemIdxInsideVd = {3'h0, _splitIdxOffset_T};
  assign io_vstd_valid = issueValid & (vecActive | ~uopq_preIsSplit);
  assign io_vstd_bits_uop_fuOpType = uopq_uop_fuOpType;
  assign io_vstd_bits_uop_sqIdx_flag = sqIdx_flag;
  assign io_vstd_bits_uop_sqIdx_value = _sqIdx_new_ptr_value_T_1;
  assign io_vstd_bits_data =
    uopq_preIsSplit
      ? (_flowData_T_15 ? {2{{2{{2{{2{splitData[7:0]}}}}}}}} : 128'h0)
        | (_flowData_T_16 ? {2{{2{{2{splitData[15:0]}}}}}} : 128'h0)
        | (_flowData_T_17 ? {2{{2{splitData[31:0]}}}} : 128'h0)
        | (_flowData_T_18 ? {2{splitData[63:0]}} : 128'h0)
        | (_flowData_T_19 ? splitData : 128'h0)
      : ((|splitIdx) ? 128'h0 : _usSplitData_tmpData_T_46[127:0])
        | (_usSplitData_T_4 ? _usSplitData_tmpData_T_46[255:128] : 128'h0);
endmodule

