// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VldMgu(
  input  [127:0] io_in_vd,
  input  [127:0] io_in_oldVd,
  input  [127:0] io_in_mask,
  input          io_in_info_ta,
  input          io_in_info_ma,
  input  [7:0]   io_in_info_vl,
  input  [7:0]   io_in_info_vstart,
  input  [1:0]   io_in_info_eew,
  input  [1:0]   io_in_info_vsew,
  input  [2:0]   io_in_info_vdIdx,
  input          io_in_isIndexedVls,
  output [127:0] io_out_vd
);

  wire [15:0] _maskTailGen_io_out_activeEn;
  wire [15:0] _maskTailGen_io_out_agnosticEn;
  ByteMaskTailGen maskTailGen (
    .io_in_begin       (io_in_info_vstart),
    .io_in_end         (io_in_info_vl),
    .io_in_vma         (io_in_info_ma),
    .io_in_vta         (io_in_info_ta),
    .io_in_vsew        (io_in_isIndexedVls ? io_in_info_vsew : io_in_info_eew),
    .io_in_maskUsed    (io_in_mask[15:0]),
    .io_in_vdIdx       (io_in_info_vdIdx),
    .io_out_activeEn   (_maskTailGen_io_out_activeEn),
    .io_out_agnosticEn (_maskTailGen_io_out_agnosticEn)
  );
  assign io_out_vd =
    {_maskTailGen_io_out_activeEn[15]
       ? io_in_vd[127:120]
       : _maskTailGen_io_out_agnosticEn[15] ? 8'hFF : io_in_oldVd[127:120],
     _maskTailGen_io_out_activeEn[14]
       ? io_in_vd[119:112]
       : _maskTailGen_io_out_agnosticEn[14] ? 8'hFF : io_in_oldVd[119:112],
     _maskTailGen_io_out_activeEn[13]
       ? io_in_vd[111:104]
       : _maskTailGen_io_out_agnosticEn[13] ? 8'hFF : io_in_oldVd[111:104],
     _maskTailGen_io_out_activeEn[12]
       ? io_in_vd[103:96]
       : _maskTailGen_io_out_agnosticEn[12] ? 8'hFF : io_in_oldVd[103:96],
     _maskTailGen_io_out_activeEn[11]
       ? io_in_vd[95:88]
       : _maskTailGen_io_out_agnosticEn[11] ? 8'hFF : io_in_oldVd[95:88],
     _maskTailGen_io_out_activeEn[10]
       ? io_in_vd[87:80]
       : _maskTailGen_io_out_agnosticEn[10] ? 8'hFF : io_in_oldVd[87:80],
     _maskTailGen_io_out_activeEn[9]
       ? io_in_vd[79:72]
       : _maskTailGen_io_out_agnosticEn[9] ? 8'hFF : io_in_oldVd[79:72],
     _maskTailGen_io_out_activeEn[8]
       ? io_in_vd[71:64]
       : _maskTailGen_io_out_agnosticEn[8] ? 8'hFF : io_in_oldVd[71:64],
     _maskTailGen_io_out_activeEn[7]
       ? io_in_vd[63:56]
       : _maskTailGen_io_out_agnosticEn[7] ? 8'hFF : io_in_oldVd[63:56],
     _maskTailGen_io_out_activeEn[6]
       ? io_in_vd[55:48]
       : _maskTailGen_io_out_agnosticEn[6] ? 8'hFF : io_in_oldVd[55:48],
     _maskTailGen_io_out_activeEn[5]
       ? io_in_vd[47:40]
       : _maskTailGen_io_out_agnosticEn[5] ? 8'hFF : io_in_oldVd[47:40],
     _maskTailGen_io_out_activeEn[4]
       ? io_in_vd[39:32]
       : _maskTailGen_io_out_agnosticEn[4] ? 8'hFF : io_in_oldVd[39:32],
     _maskTailGen_io_out_activeEn[3]
       ? io_in_vd[31:24]
       : _maskTailGen_io_out_agnosticEn[3] ? 8'hFF : io_in_oldVd[31:24],
     _maskTailGen_io_out_activeEn[2]
       ? io_in_vd[23:16]
       : _maskTailGen_io_out_agnosticEn[2] ? 8'hFF : io_in_oldVd[23:16],
     _maskTailGen_io_out_activeEn[1]
       ? io_in_vd[15:8]
       : _maskTailGen_io_out_agnosticEn[1] ? 8'hFF : io_in_oldVd[15:8],
     _maskTailGen_io_out_activeEn[0]
       ? io_in_vd[7:0]
       : _maskTailGen_io_out_agnosticEn[0] ? 8'hFF : io_in_oldVd[7:0]};
endmodule

