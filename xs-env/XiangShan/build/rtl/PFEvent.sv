// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PFEvent(
  input         clock,
  input         reset,
  input         io_distribute_csr_w_valid,
  input  [11:0] io_distribute_csr_w_bits_addr,
  input  [63:0] io_distribute_csr_w_bits_data,
  output [63:0] io_hpmevent_0,
  output [63:0] io_hpmevent_1,
  output [63:0] io_hpmevent_2,
  output [63:0] io_hpmevent_3,
  output [63:0] io_hpmevent_4,
  output [63:0] io_hpmevent_5,
  output [63:0] io_hpmevent_6,
  output [63:0] io_hpmevent_7,
  output [63:0] io_hpmevent_8,
  output [63:0] io_hpmevent_9,
  output [63:0] io_hpmevent_10,
  output [63:0] io_hpmevent_11,
  output [63:0] io_hpmevent_12,
  output [63:0] io_hpmevent_13,
  output [63:0] io_hpmevent_14,
  output [63:0] io_hpmevent_15,
  output [63:0] io_hpmevent_16,
  output [63:0] io_hpmevent_17,
  output [63:0] io_hpmevent_18,
  output [63:0] io_hpmevent_19,
  output [63:0] io_hpmevent_20,
  output [63:0] io_hpmevent_21,
  output [63:0] io_hpmevent_22,
  output [63:0] io_hpmevent_23
);

  reg [63:0] perfEvents_0;
  reg [63:0] perfEvents_1;
  reg [63:0] perfEvents_2;
  reg [63:0] perfEvents_3;
  reg [63:0] perfEvents_4;
  reg [63:0] perfEvents_5;
  reg [63:0] perfEvents_6;
  reg [63:0] perfEvents_7;
  reg [63:0] perfEvents_8;
  reg [63:0] perfEvents_9;
  reg [63:0] perfEvents_10;
  reg [63:0] perfEvents_11;
  reg [63:0] perfEvents_12;
  reg [63:0] perfEvents_13;
  reg [63:0] perfEvents_14;
  reg [63:0] perfEvents_15;
  reg [63:0] perfEvents_16;
  reg [63:0] perfEvents_17;
  reg [63:0] perfEvents_18;
  reg [63:0] perfEvents_19;
  reg [63:0] perfEvents_20;
  reg [63:0] perfEvents_21;
  reg [63:0] perfEvents_22;
  reg [63:0] perfEvents_23;
  reg [63:0] wdata_reg;
  reg        wen_reg_last_REG;
  reg        wen_reg_last_REG_1;
  reg        wen_reg_last_REG_3;
  reg        wen_reg_last_REG_4;
  reg        wen_reg_last_REG_6;
  reg        wen_reg_last_REG_7;
  reg        wen_reg_last_REG_8;
  reg        wen_reg_last_REG_11;
  reg        wen_reg_last_REG_12;
  reg        wen_reg_last_REG_13;
  reg        wen_reg_last_REG_14;
  reg        wen_reg_last_REG_15;
  reg        wen_reg_last_REG_16;
  reg        wen_reg_last_REG_17;
  reg        wen_reg_last_REG_18;
  reg        wen_reg_last_REG_19;
  reg        wen_reg_last_REG_20;
  reg        wen_reg_last_REG_21;
  reg        wen_reg_last_REG_22;
  reg        wen_reg_last_REG_23;
  reg        wen_reg_last_REG_24;
  reg        wen_reg_last_REG_25;
  reg        wen_reg_last_REG_26;
  reg        wen_reg_last_REG_27;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      perfEvents_0 <= 64'h0;
      perfEvents_1 <= 64'h0;
      perfEvents_2 <= 64'h0;
      perfEvents_3 <= 64'h0;
      perfEvents_4 <= 64'h0;
      perfEvents_5 <= 64'h0;
      perfEvents_6 <= 64'h0;
      perfEvents_7 <= 64'h0;
      perfEvents_8 <= 64'h4010040100;
      perfEvents_9 <= 64'h4010040100;
      perfEvents_10 <= 64'h4010040100;
      perfEvents_11 <= 64'h4010040100;
      perfEvents_12 <= 64'h4010040100;
      perfEvents_13 <= 64'h4010040100;
      perfEvents_14 <= 64'h4010040100;
      perfEvents_15 <= 64'h4010040100;
      perfEvents_16 <= 64'h8020080200;
      perfEvents_17 <= 64'h8020080200;
      perfEvents_18 <= 64'h8020080200;
      perfEvents_19 <= 64'h8020080200;
      perfEvents_20 <= 64'h8020080200;
      perfEvents_21 <= 64'h8020080200;
      perfEvents_22 <= 64'h8020080200;
      perfEvents_23 <= 64'h8020080200;
      wen_reg_last_REG <= 1'h0;
      wen_reg_last_REG_1 <= 1'h0;
      wen_reg_last_REG_3 <= 1'h0;
      wen_reg_last_REG_4 <= 1'h0;
      wen_reg_last_REG_6 <= 1'h0;
      wen_reg_last_REG_7 <= 1'h0;
      wen_reg_last_REG_8 <= 1'h0;
      wen_reg_last_REG_11 <= 1'h0;
      wen_reg_last_REG_12 <= 1'h0;
      wen_reg_last_REG_13 <= 1'h0;
      wen_reg_last_REG_14 <= 1'h0;
      wen_reg_last_REG_15 <= 1'h0;
      wen_reg_last_REG_16 <= 1'h0;
      wen_reg_last_REG_17 <= 1'h0;
      wen_reg_last_REG_18 <= 1'h0;
      wen_reg_last_REG_19 <= 1'h0;
      wen_reg_last_REG_20 <= 1'h0;
      wen_reg_last_REG_21 <= 1'h0;
      wen_reg_last_REG_22 <= 1'h0;
      wen_reg_last_REG_23 <= 1'h0;
      wen_reg_last_REG_24 <= 1'h0;
      wen_reg_last_REG_25 <= 1'h0;
      wen_reg_last_REG_26 <= 1'h0;
      wen_reg_last_REG_27 <= 1'h0;
    end
    else begin
      if (wen_reg_last_REG_15)
        perfEvents_0 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_0 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_8)
        perfEvents_1 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_1 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_6)
        perfEvents_2 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_2 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_16)
        perfEvents_3 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_3 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_27)
        perfEvents_4 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_4 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_11)
        perfEvents_5 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_5 & 64'h78000C0300C0300;
      if (wen_reg_last_REG)
        perfEvents_6 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_6 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_4)
        perfEvents_7 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_7 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_23)
        perfEvents_8 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_8 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_25)
        perfEvents_9 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_9 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_12)
        perfEvents_10 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_10 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_1)
        perfEvents_11 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_11 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_20)
        perfEvents_12 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_12 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_24)
        perfEvents_13 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_13 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_3)
        perfEvents_14 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_14 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_13)
        perfEvents_15 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_15 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_21)
        perfEvents_16 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_16 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_19)
        perfEvents_17 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_17 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_17)
        perfEvents_18 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_18 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_14)
        perfEvents_19 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_19 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_26)
        perfEvents_20 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_20 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_7)
        perfEvents_21 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_21 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_18)
        perfEvents_22 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_22 & 64'h78000C0300C0300;
      if (wen_reg_last_REG_22)
        perfEvents_23 <=
          wdata_reg & 64'hF87FFF3FCFF3FCFF | perfEvents_23 & 64'h78000C0300C0300;
      wen_reg_last_REG <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h329;
      wen_reg_last_REG_1 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32E;
      wen_reg_last_REG_3 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h331;
      wen_reg_last_REG_4 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32A;
      wen_reg_last_REG_6 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h325;
      wen_reg_last_REG_7 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h338;
      wen_reg_last_REG_8 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h324;
      wen_reg_last_REG_11 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h328;
      wen_reg_last_REG_12 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32D;
      wen_reg_last_REG_13 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h332;
      wen_reg_last_REG_14 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h336;
      wen_reg_last_REG_15 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h323;
      wen_reg_last_REG_16 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h326;
      wen_reg_last_REG_17 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h335;
      wen_reg_last_REG_18 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h339;
      wen_reg_last_REG_19 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h334;
      wen_reg_last_REG_20 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32F;
      wen_reg_last_REG_21 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h333;
      wen_reg_last_REG_22 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h33A;
      wen_reg_last_REG_23 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32B;
      wen_reg_last_REG_24 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h330;
      wen_reg_last_REG_25 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32C;
      wen_reg_last_REG_26 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h337;
      wen_reg_last_REG_27 <=
        io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h327;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_distribute_csr_w_valid)
      wdata_reg <= io_distribute_csr_w_bits_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:60];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h3D; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        perfEvents_0 = {_RANDOM[6'h0], _RANDOM[6'h1]};
        perfEvents_1 = {_RANDOM[6'h2], _RANDOM[6'h3]};
        perfEvents_2 = {_RANDOM[6'h4], _RANDOM[6'h5]};
        perfEvents_3 = {_RANDOM[6'h6], _RANDOM[6'h7]};
        perfEvents_4 = {_RANDOM[6'h8], _RANDOM[6'h9]};
        perfEvents_5 = {_RANDOM[6'hA], _RANDOM[6'hB]};
        perfEvents_6 = {_RANDOM[6'hC], _RANDOM[6'hD]};
        perfEvents_7 = {_RANDOM[6'hE], _RANDOM[6'hF]};
        perfEvents_8 = {_RANDOM[6'h10], _RANDOM[6'h11]};
        perfEvents_9 = {_RANDOM[6'h12], _RANDOM[6'h13]};
        perfEvents_10 = {_RANDOM[6'h14], _RANDOM[6'h15]};
        perfEvents_11 = {_RANDOM[6'h16], _RANDOM[6'h17]};
        perfEvents_12 = {_RANDOM[6'h18], _RANDOM[6'h19]};
        perfEvents_13 = {_RANDOM[6'h1A], _RANDOM[6'h1B]};
        perfEvents_14 = {_RANDOM[6'h1C], _RANDOM[6'h1D]};
        perfEvents_15 = {_RANDOM[6'h1E], _RANDOM[6'h1F]};
        perfEvents_16 = {_RANDOM[6'h20], _RANDOM[6'h21]};
        perfEvents_17 = {_RANDOM[6'h22], _RANDOM[6'h23]};
        perfEvents_18 = {_RANDOM[6'h24], _RANDOM[6'h25]};
        perfEvents_19 = {_RANDOM[6'h26], _RANDOM[6'h27]};
        perfEvents_20 = {_RANDOM[6'h28], _RANDOM[6'h29]};
        perfEvents_21 = {_RANDOM[6'h2A], _RANDOM[6'h2B]};
        perfEvents_22 = {_RANDOM[6'h2C], _RANDOM[6'h2D]};
        perfEvents_23 = {_RANDOM[6'h2E], _RANDOM[6'h2F]};
        wdata_reg = {_RANDOM[6'h3A], _RANDOM[6'h3B]};
        wen_reg_last_REG = _RANDOM[6'h3C][0];
        wen_reg_last_REG_1 = _RANDOM[6'h3C][1];
        wen_reg_last_REG_3 = _RANDOM[6'h3C][3];
        wen_reg_last_REG_4 = _RANDOM[6'h3C][4];
        wen_reg_last_REG_6 = _RANDOM[6'h3C][6];
        wen_reg_last_REG_7 = _RANDOM[6'h3C][7];
        wen_reg_last_REG_8 = _RANDOM[6'h3C][8];
        wen_reg_last_REG_11 = _RANDOM[6'h3C][11];
        wen_reg_last_REG_12 = _RANDOM[6'h3C][12];
        wen_reg_last_REG_13 = _RANDOM[6'h3C][13];
        wen_reg_last_REG_14 = _RANDOM[6'h3C][14];
        wen_reg_last_REG_15 = _RANDOM[6'h3C][15];
        wen_reg_last_REG_16 = _RANDOM[6'h3C][16];
        wen_reg_last_REG_17 = _RANDOM[6'h3C][17];
        wen_reg_last_REG_18 = _RANDOM[6'h3C][18];
        wen_reg_last_REG_19 = _RANDOM[6'h3C][19];
        wen_reg_last_REG_20 = _RANDOM[6'h3C][20];
        wen_reg_last_REG_21 = _RANDOM[6'h3C][21];
        wen_reg_last_REG_22 = _RANDOM[6'h3C][22];
        wen_reg_last_REG_23 = _RANDOM[6'h3C][23];
        wen_reg_last_REG_24 = _RANDOM[6'h3C][24];
        wen_reg_last_REG_25 = _RANDOM[6'h3C][25];
        wen_reg_last_REG_26 = _RANDOM[6'h3C][26];
        wen_reg_last_REG_27 = _RANDOM[6'h3C][27];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        perfEvents_0 = 64'h0;
        perfEvents_1 = 64'h0;
        perfEvents_2 = 64'h0;
        perfEvents_3 = 64'h0;
        perfEvents_4 = 64'h0;
        perfEvents_5 = 64'h0;
        perfEvents_6 = 64'h0;
        perfEvents_7 = 64'h0;
        perfEvents_8 = 64'h4010040100;
        perfEvents_9 = 64'h4010040100;
        perfEvents_10 = 64'h4010040100;
        perfEvents_11 = 64'h4010040100;
        perfEvents_12 = 64'h4010040100;
        perfEvents_13 = 64'h4010040100;
        perfEvents_14 = 64'h4010040100;
        perfEvents_15 = 64'h4010040100;
        perfEvents_16 = 64'h8020080200;
        perfEvents_17 = 64'h8020080200;
        perfEvents_18 = 64'h8020080200;
        perfEvents_19 = 64'h8020080200;
        perfEvents_20 = 64'h8020080200;
        perfEvents_21 = 64'h8020080200;
        perfEvents_22 = 64'h8020080200;
        perfEvents_23 = 64'h8020080200;
        wen_reg_last_REG = 1'h0;
        wen_reg_last_REG_1 = 1'h0;
        wen_reg_last_REG_3 = 1'h0;
        wen_reg_last_REG_4 = 1'h0;
        wen_reg_last_REG_6 = 1'h0;
        wen_reg_last_REG_7 = 1'h0;
        wen_reg_last_REG_8 = 1'h0;
        wen_reg_last_REG_11 = 1'h0;
        wen_reg_last_REG_12 = 1'h0;
        wen_reg_last_REG_13 = 1'h0;
        wen_reg_last_REG_14 = 1'h0;
        wen_reg_last_REG_15 = 1'h0;
        wen_reg_last_REG_16 = 1'h0;
        wen_reg_last_REG_17 = 1'h0;
        wen_reg_last_REG_18 = 1'h0;
        wen_reg_last_REG_19 = 1'h0;
        wen_reg_last_REG_20 = 1'h0;
        wen_reg_last_REG_21 = 1'h0;
        wen_reg_last_REG_22 = 1'h0;
        wen_reg_last_REG_23 = 1'h0;
        wen_reg_last_REG_24 = 1'h0;
        wen_reg_last_REG_25 = 1'h0;
        wen_reg_last_REG_26 = 1'h0;
        wen_reg_last_REG_27 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_hpmevent_0 = perfEvents_0;
  assign io_hpmevent_1 = perfEvents_1;
  assign io_hpmevent_2 = perfEvents_2;
  assign io_hpmevent_3 = perfEvents_3;
  assign io_hpmevent_4 = perfEvents_4;
  assign io_hpmevent_5 = perfEvents_5;
  assign io_hpmevent_6 = perfEvents_6;
  assign io_hpmevent_7 = perfEvents_7;
  assign io_hpmevent_8 = perfEvents_8;
  assign io_hpmevent_9 = perfEvents_9;
  assign io_hpmevent_10 = perfEvents_10;
  assign io_hpmevent_11 = perfEvents_11;
  assign io_hpmevent_12 = perfEvents_12;
  assign io_hpmevent_13 = perfEvents_13;
  assign io_hpmevent_14 = perfEvents_14;
  assign io_hpmevent_15 = perfEvents_15;
  assign io_hpmevent_16 = perfEvents_16;
  assign io_hpmevent_17 = perfEvents_17;
  assign io_hpmevent_18 = perfEvents_18;
  assign io_hpmevent_19 = perfEvents_19;
  assign io_hpmevent_20 = perfEvents_20;
  assign io_hpmevent_21 = perfEvents_21;
  assign io_hpmevent_22 = perfEvents_22;
  assign io_hpmevent_23 = perfEvents_23;
endmodule

