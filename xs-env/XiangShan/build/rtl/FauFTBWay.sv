// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FauFTBWay(
  input         clock,
  input         reset,
  input  [15:0] io_req_tag,
  output        io_resp_isCall,
  output        io_resp_isRet,
  output        io_resp_isJalr,
  output        io_resp_valid,
  output [3:0]  io_resp_brSlots_0_offset,
  output        io_resp_brSlots_0_sharing,
  output        io_resp_brSlots_0_valid,
  output [11:0] io_resp_brSlots_0_lower,
  output [1:0]  io_resp_brSlots_0_tarStat,
  output [3:0]  io_resp_tailSlot_offset,
  output        io_resp_tailSlot_sharing,
  output        io_resp_tailSlot_valid,
  output [19:0] io_resp_tailSlot_lower,
  output [1:0]  io_resp_tailSlot_tarStat,
  output [3:0]  io_resp_pftAddr,
  output        io_resp_carry,
  output        io_resp_last_may_be_rvi_call,
  output        io_resp_strong_bias_0,
  output        io_resp_strong_bias_1,
  output        io_resp_hit,
  input  [15:0] io_update_req_tag,
  output        io_update_hit,
  input         io_write_valid,
  input         io_write_entry_isCall,
  input         io_write_entry_isRet,
  input         io_write_entry_isJalr,
  input         io_write_entry_valid,
  input  [3:0]  io_write_entry_brSlots_0_offset,
  input         io_write_entry_brSlots_0_sharing,
  input         io_write_entry_brSlots_0_valid,
  input  [11:0] io_write_entry_brSlots_0_lower,
  input  [1:0]  io_write_entry_brSlots_0_tarStat,
  input  [3:0]  io_write_entry_tailSlot_offset,
  input         io_write_entry_tailSlot_sharing,
  input         io_write_entry_tailSlot_valid,
  input  [19:0] io_write_entry_tailSlot_lower,
  input  [1:0]  io_write_entry_tailSlot_tarStat,
  input  [3:0]  io_write_entry_pftAddr,
  input         io_write_entry_carry,
  input         io_write_entry_last_may_be_rvi_call,
  input         io_write_entry_strong_bias_0,
  input         io_write_entry_strong_bias_1,
  input  [15:0] io_write_tag
);

  reg        data_isCall;
  reg        data_isRet;
  reg        data_isJalr;
  reg        data_valid;
  reg [3:0]  data_brSlots_0_offset;
  reg        data_brSlots_0_sharing;
  reg        data_brSlots_0_valid;
  reg [11:0] data_brSlots_0_lower;
  reg [1:0]  data_brSlots_0_tarStat;
  reg [3:0]  data_tailSlot_offset;
  reg        data_tailSlot_sharing;
  reg        data_tailSlot_valid;
  reg [19:0] data_tailSlot_lower;
  reg [1:0]  data_tailSlot_tarStat;
  reg [3:0]  data_pftAddr;
  reg        data_carry;
  reg        data_last_may_be_rvi_call;
  reg        data_strong_bias_0;
  reg        data_strong_bias_1;
  reg [15:0] tag;
  reg        valid;
  always @(posedge clock) begin
    if (io_write_valid) begin
      data_isCall <= io_write_entry_isCall;
      data_isRet <= io_write_entry_isRet;
      data_isJalr <= io_write_entry_isJalr;
      data_valid <= io_write_entry_valid;
      data_brSlots_0_offset <= io_write_entry_brSlots_0_offset;
      data_brSlots_0_sharing <= io_write_entry_brSlots_0_sharing;
      data_brSlots_0_valid <= io_write_entry_brSlots_0_valid;
      data_brSlots_0_lower <= io_write_entry_brSlots_0_lower;
      data_brSlots_0_tarStat <= io_write_entry_brSlots_0_tarStat;
      data_tailSlot_offset <= io_write_entry_tailSlot_offset;
      data_tailSlot_sharing <= io_write_entry_tailSlot_sharing;
      data_tailSlot_valid <= io_write_entry_tailSlot_valid;
      data_tailSlot_lower <= io_write_entry_tailSlot_lower;
      data_tailSlot_tarStat <= io_write_entry_tailSlot_tarStat;
      data_pftAddr <= io_write_entry_pftAddr;
      data_carry <= io_write_entry_carry;
      data_last_may_be_rvi_call <= io_write_entry_last_may_be_rvi_call;
      data_strong_bias_0 <= io_write_entry_strong_bias_0;
      data_strong_bias_1 <= io_write_entry_strong_bias_1;
      tag <= io_write_tag;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= io_write_valid & ~valid | valid;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        data_isCall = _RANDOM[2'h0][0];
        data_isRet = _RANDOM[2'h0][1];
        data_isJalr = _RANDOM[2'h0][2];
        data_valid = _RANDOM[2'h0][3];
        data_brSlots_0_offset = _RANDOM[2'h0][7:4];
        data_brSlots_0_sharing = _RANDOM[2'h0][8];
        data_brSlots_0_valid = _RANDOM[2'h0][9];
        data_brSlots_0_lower = _RANDOM[2'h0][21:10];
        data_brSlots_0_tarStat = _RANDOM[2'h0][23:22];
        data_tailSlot_offset = _RANDOM[2'h0][27:24];
        data_tailSlot_sharing = _RANDOM[2'h0][28];
        data_tailSlot_valid = _RANDOM[2'h0][29];
        data_tailSlot_lower = {_RANDOM[2'h0][31:30], _RANDOM[2'h1][17:0]};
        data_tailSlot_tarStat = _RANDOM[2'h1][19:18];
        data_pftAddr = _RANDOM[2'h1][23:20];
        data_carry = _RANDOM[2'h1][24];
        data_last_may_be_rvi_call = _RANDOM[2'h1][25];
        data_strong_bias_0 = _RANDOM[2'h1][26];
        data_strong_bias_1 = _RANDOM[2'h1][27];
        tag = {_RANDOM[2'h1][31:28], _RANDOM[2'h2][11:0]};
        valid = _RANDOM[2'h2][12];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_resp_isCall = data_isCall;
  assign io_resp_isRet = data_isRet;
  assign io_resp_isJalr = data_isJalr;
  assign io_resp_valid = data_valid;
  assign io_resp_brSlots_0_offset = data_brSlots_0_offset;
  assign io_resp_brSlots_0_sharing = data_brSlots_0_sharing;
  assign io_resp_brSlots_0_valid = data_brSlots_0_valid;
  assign io_resp_brSlots_0_lower = data_brSlots_0_lower;
  assign io_resp_brSlots_0_tarStat = data_brSlots_0_tarStat;
  assign io_resp_tailSlot_offset = data_tailSlot_offset;
  assign io_resp_tailSlot_sharing = data_tailSlot_sharing;
  assign io_resp_tailSlot_valid = data_tailSlot_valid;
  assign io_resp_tailSlot_lower = data_tailSlot_lower;
  assign io_resp_tailSlot_tarStat = data_tailSlot_tarStat;
  assign io_resp_pftAddr = data_pftAddr;
  assign io_resp_carry = data_carry;
  assign io_resp_last_may_be_rvi_call = data_last_may_be_rvi_call;
  assign io_resp_strong_bias_0 = data_strong_bias_0;
  assign io_resp_strong_bias_1 = data_strong_bias_1;
  assign io_resp_hit = tag == io_req_tag & valid;
  assign io_update_hit =
    tag == io_update_req_tag & valid | io_write_tag == io_update_req_tag & io_write_valid;
endmodule

