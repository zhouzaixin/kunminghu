// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Pipeline_15(
  input         clock,
  input         reset,
  input         io_in_valid,
  input  [10:0] io_in_bits_set,
  input  [2:0]  io_in_bits_way,
  input         io_in_bits_data_dirty,
  input  [1:0]  io_in_bits_data_state,
  input  [1:0]  io_in_bits_data_clientStates_0,
  input         io_in_bits_data_prefetch,
  output        io_out_valid,
  output [10:0] io_out_bits_set,
  output [2:0]  io_out_bits_way,
  output        io_out_bits_data_dirty,
  output [1:0]  io_out_bits_data_state,
  output [1:0]  io_out_bits_data_clientStates_0,
  output        io_out_bits_data_prefetch
);

  Queue1_SelfDirWrite stages_0 (
    .clock                           (clock),
    .reset                           (reset),
    .io_enq_valid                    (io_in_valid),
    .io_enq_bits_set                 (io_in_bits_set),
    .io_enq_bits_way                 (io_in_bits_way),
    .io_enq_bits_data_dirty          (io_in_bits_data_dirty),
    .io_enq_bits_data_state          (io_in_bits_data_state),
    .io_enq_bits_data_clientStates_0 (io_in_bits_data_clientStates_0),
    .io_enq_bits_data_prefetch       (io_in_bits_data_prefetch),
    .io_deq_valid                    (io_out_valid),
    .io_deq_bits_set                 (io_out_bits_set),
    .io_deq_bits_way                 (io_out_bits_way),
    .io_deq_bits_data_dirty          (io_out_bits_data_dirty),
    .io_deq_bits_data_state          (io_out_bits_data_state),
    .io_deq_bits_data_clientStates_0 (io_out_bits_data_clientStates_0),
    .io_deq_bits_data_prefetch       (io_out_bits_data_prefetch)
  );
endmodule

