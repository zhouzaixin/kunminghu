// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module OffsetScoreTable_1(
  input         clock,
  input         reset,
  output        io_req_ready,
  input         io_req_valid,
  input  [49:0] io_req_bits,
  output [9:0]  io_prefetchOffset,
  output        io_prefetchDisable,
  output        io_test_req_valid,
  output [49:0] io_test_req_bits_addr,
  output [9:0]  io_test_req_bits_testOffset,
  output [6:0]  io_test_req_bits_ptr,
  input         io_test_resp_valid,
  input  [6:0]  io_test_resp_bits_ptr,
  input         io_test_resp_bits_hit
);

  wire [127:0][9:0] _GEN =
    '{10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'hFA,
      10'hF3,
      10'hF0,
      10'hE1,
      10'hD8,
      10'hC8,
      10'hC0,
      10'hB4,
      10'hA2,
      10'hA0,
      10'h96,
      10'h90,
      10'h87,
      10'h80,
      10'h7D,
      10'h78,
      10'h6C,
      10'h64,
      10'h60,
      10'h5A,
      10'h51,
      10'h50,
      10'h4B,
      10'h48,
      10'h40,
      10'h3C,
      10'h36,
      10'h32,
      10'h30,
      10'h2D,
      10'h28,
      10'h24,
      10'h20,
      10'h1E,
      10'h1B,
      10'h19,
      10'h18,
      10'h14,
      10'h12,
      10'h10,
      10'hF,
      10'hC,
      10'hA,
      10'h9,
      10'h8,
      10'h6,
      10'h5,
      10'h4,
      10'h3,
      10'h2,
      10'h1,
      10'h3FF,
      10'h3FE,
      10'h3FD,
      10'h3FC,
      10'h3FB,
      10'h3FA,
      10'h3F8,
      10'h3F7,
      10'h3F6,
      10'h3F4,
      10'h3F1,
      10'h3F0,
      10'h3EE,
      10'h3EC,
      10'h3E8,
      10'h3E7,
      10'h3E5,
      10'h3E2,
      10'h3E0,
      10'h3DC,
      10'h3D8,
      10'h3D3,
      10'h3D0,
      10'h3CE,
      10'h3CA,
      10'h3C4,
      10'h3C0,
      10'h3B8,
      10'h3B5,
      10'h3B0,
      10'h3AF,
      10'h3A6,
      10'h3A0,
      10'h39C,
      10'h394,
      10'h388,
      10'h383,
      10'h380,
      10'h379,
      10'h370,
      10'h36A,
      10'h360,
      10'h35E,
      10'h34C,
      10'h340,
      10'h338,
      10'h328,
      10'h31F,
      10'h310,
      10'h30D,
      10'h306,
      10'h300,
      10'h5B,
      10'h93,
      10'h75,
      10'h3A5,
      10'h36D,
      10'h38B};
  reg  [9:0]        prefetchOffset;
  reg               prefetchDisable;
  reg  [4:0]        st_0_score;
  reg  [4:0]        st_1_score;
  reg  [4:0]        st_2_score;
  reg  [4:0]        st_3_score;
  reg  [4:0]        st_4_score;
  reg  [4:0]        st_5_score;
  reg  [4:0]        st_6_score;
  reg  [4:0]        st_7_score;
  reg  [4:0]        st_8_score;
  reg  [4:0]        st_9_score;
  reg  [4:0]        st_10_score;
  reg  [4:0]        st_11_score;
  reg  [4:0]        st_12_score;
  reg  [4:0]        st_13_score;
  reg  [4:0]        st_14_score;
  reg  [4:0]        st_15_score;
  reg  [4:0]        st_16_score;
  reg  [4:0]        st_17_score;
  reg  [4:0]        st_18_score;
  reg  [4:0]        st_19_score;
  reg  [4:0]        st_20_score;
  reg  [4:0]        st_21_score;
  reg  [4:0]        st_22_score;
  reg  [4:0]        st_23_score;
  reg  [4:0]        st_24_score;
  reg  [4:0]        st_25_score;
  reg  [4:0]        st_26_score;
  reg  [4:0]        st_27_score;
  reg  [4:0]        st_28_score;
  reg  [4:0]        st_29_score;
  reg  [4:0]        st_30_score;
  reg  [4:0]        st_31_score;
  reg  [4:0]        st_32_score;
  reg  [4:0]        st_33_score;
  reg  [4:0]        st_34_score;
  reg  [4:0]        st_35_score;
  reg  [4:0]        st_36_score;
  reg  [4:0]        st_37_score;
  reg  [4:0]        st_38_score;
  reg  [4:0]        st_39_score;
  reg  [4:0]        st_40_score;
  reg  [4:0]        st_41_score;
  reg  [4:0]        st_42_score;
  reg  [4:0]        st_43_score;
  reg  [4:0]        st_44_score;
  reg  [4:0]        st_45_score;
  reg  [4:0]        st_46_score;
  reg  [4:0]        st_47_score;
  reg  [4:0]        st_48_score;
  reg  [4:0]        st_49_score;
  reg  [4:0]        st_50_score;
  reg  [4:0]        st_51_score;
  reg  [4:0]        st_52_score;
  reg  [4:0]        st_53_score;
  reg  [4:0]        st_54_score;
  reg  [4:0]        st_55_score;
  reg  [4:0]        st_56_score;
  reg  [4:0]        st_57_score;
  reg  [4:0]        st_58_score;
  reg  [4:0]        st_59_score;
  reg  [4:0]        st_60_score;
  reg  [4:0]        st_61_score;
  reg  [4:0]        st_62_score;
  reg  [4:0]        st_63_score;
  reg  [4:0]        st_64_score;
  reg  [4:0]        st_65_score;
  reg  [4:0]        st_66_score;
  reg  [4:0]        st_67_score;
  reg  [4:0]        st_68_score;
  reg  [4:0]        st_69_score;
  reg  [4:0]        st_70_score;
  reg  [4:0]        st_71_score;
  reg  [4:0]        st_72_score;
  reg  [4:0]        st_73_score;
  reg  [4:0]        st_74_score;
  reg  [4:0]        st_75_score;
  reg  [4:0]        st_76_score;
  reg  [4:0]        st_77_score;
  reg  [4:0]        st_78_score;
  reg  [4:0]        st_79_score;
  reg  [4:0]        st_80_score;
  reg  [4:0]        st_81_score;
  reg  [4:0]        st_82_score;
  reg  [4:0]        st_83_score;
  reg  [4:0]        st_84_score;
  reg  [4:0]        st_85_score;
  reg  [4:0]        st_86_score;
  reg  [4:0]        st_87_score;
  reg  [4:0]        st_88_score;
  reg  [4:0]        st_89_score;
  reg  [4:0]        st_90_score;
  reg  [4:0]        st_91_score;
  reg  [4:0]        st_92_score;
  reg  [4:0]        st_93_score;
  reg  [4:0]        st_94_score;
  reg  [4:0]        st_95_score;
  reg  [4:0]        st_96_score;
  reg  [4:0]        st_97_score;
  reg  [4:0]        st_98_score;
  reg  [4:0]        st_99_score;
  reg  [4:0]        st_100_score;
  reg  [4:0]        st_101_score;
  reg  [4:0]        st_102_score;
  reg  [4:0]        st_103_score;
  reg  [4:0]        st_104_score;
  reg  [4:0]        st_105_score;
  reg  [4:0]        st_106_score;
  reg  [4:0]        st_107_score;
  reg  [4:0]        st_108_score;
  reg  [6:0]        ptr;
  reg  [5:0]        round;
  reg  [9:0]        bestOffset;
  reg  [4:0]        bestScore;
  reg               state;
  wire              io_test_req_valid_0 = state & io_req_valid;
  wire [127:0][9:0] _GEN_0 =
    '{10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'h38B,
      10'hFA,
      10'hF3,
      10'hF0,
      10'hE1,
      10'hD8,
      10'hC8,
      10'hC0,
      10'hB4,
      10'hA2,
      10'hA0,
      10'h96,
      10'h90,
      10'h87,
      10'h80,
      10'h7D,
      10'h78,
      10'h6C,
      10'h64,
      10'h60,
      10'h5A,
      10'h51,
      10'h50,
      10'h4B,
      10'h48,
      10'h40,
      10'h3C,
      10'h36,
      10'h32,
      10'h30,
      10'h2D,
      10'h28,
      10'h24,
      10'h20,
      10'h1E,
      10'h1B,
      10'h19,
      10'h18,
      10'h14,
      10'h12,
      10'h10,
      10'hF,
      10'hC,
      10'hA,
      10'h9,
      10'h8,
      10'h6,
      10'h5,
      10'h4,
      10'h3,
      10'h2,
      10'h1,
      10'h3FF,
      10'h3FE,
      10'h3FD,
      10'h3FC,
      10'h3FB,
      10'h3FA,
      10'h3F8,
      10'h3F7,
      10'h3F6,
      10'h3F4,
      10'h3F1,
      10'h3F0,
      10'h3EE,
      10'h3EC,
      10'h3E8,
      10'h3E7,
      10'h3E5,
      10'h3E2,
      10'h3E0,
      10'h3DC,
      10'h3D8,
      10'h3D3,
      10'h3D0,
      10'h3CE,
      10'h3CA,
      10'h3C4,
      10'h3C0,
      10'h3B8,
      10'h3B5,
      10'h3B0,
      10'h3AF,
      10'h3A6,
      10'h3A0,
      10'h39C,
      10'h394,
      10'h388,
      10'h383,
      10'h380,
      10'h379,
      10'h370,
      10'h36A,
      10'h360,
      10'h35E,
      10'h34C,
      10'h340,
      10'h338,
      10'h328,
      10'h31F,
      10'h310,
      10'h30D,
      10'h306,
      10'h300,
      10'h5B,
      10'h93,
      10'h75,
      10'h3A5,
      10'h36D,
      10'h38B};
  wire              _GEN_1 = {58'h0, round} > 64'h31;
  wire              _GEN_2 = io_test_resp_valid & io_test_resp_bits_hit;
  wire [127:0][4:0] _GEN_3 =
    {{st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_0_score},
     {st_108_score},
     {st_107_score},
     {st_106_score},
     {st_105_score},
     {st_104_score},
     {st_103_score},
     {st_102_score},
     {st_101_score},
     {st_100_score},
     {st_99_score},
     {st_98_score},
     {st_97_score},
     {st_96_score},
     {st_95_score},
     {st_94_score},
     {st_93_score},
     {st_92_score},
     {st_91_score},
     {st_90_score},
     {st_89_score},
     {st_88_score},
     {st_87_score},
     {st_86_score},
     {st_85_score},
     {st_84_score},
     {st_83_score},
     {st_82_score},
     {st_81_score},
     {st_80_score},
     {st_79_score},
     {st_78_score},
     {st_77_score},
     {st_76_score},
     {st_75_score},
     {st_74_score},
     {st_73_score},
     {st_72_score},
     {st_71_score},
     {st_70_score},
     {st_69_score},
     {st_68_score},
     {st_67_score},
     {st_66_score},
     {st_65_score},
     {st_64_score},
     {st_63_score},
     {st_62_score},
     {st_61_score},
     {st_60_score},
     {st_59_score},
     {st_58_score},
     {st_57_score},
     {st_56_score},
     {st_55_score},
     {st_54_score},
     {st_53_score},
     {st_52_score},
     {st_51_score},
     {st_50_score},
     {st_49_score},
     {st_48_score},
     {st_47_score},
     {st_46_score},
     {st_45_score},
     {st_44_score},
     {st_43_score},
     {st_42_score},
     {st_41_score},
     {st_40_score},
     {st_39_score},
     {st_38_score},
     {st_37_score},
     {st_36_score},
     {st_35_score},
     {st_34_score},
     {st_33_score},
     {st_32_score},
     {st_31_score},
     {st_30_score},
     {st_29_score},
     {st_28_score},
     {st_27_score},
     {st_26_score},
     {st_25_score},
     {st_24_score},
     {st_23_score},
     {st_22_score},
     {st_21_score},
     {st_20_score},
     {st_19_score},
     {st_18_score},
     {st_17_score},
     {st_16_score},
     {st_15_score},
     {st_14_score},
     {st_13_score},
     {st_12_score},
     {st_11_score},
     {st_10_score},
     {st_9_score},
     {st_8_score},
     {st_7_score},
     {st_6_score},
     {st_5_score},
     {st_4_score},
     {st_3_score},
     {st_2_score},
     {st_1_score},
     {st_0_score}};
  wire [4:0]        _newScore_T = 5'(_GEN_3[io_test_resp_bits_ptr] + 5'h1);
  wire              renewOffset = _newScore_T > bestScore;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      prefetchOffset <= 10'h2;
      prefetchDisable <= 1'h0;
      st_0_score <= 5'h0;
      st_1_score <= 5'h0;
      st_2_score <= 5'h0;
      st_3_score <= 5'h0;
      st_4_score <= 5'h0;
      st_5_score <= 5'h0;
      st_6_score <= 5'h0;
      st_7_score <= 5'h0;
      st_8_score <= 5'h0;
      st_9_score <= 5'h0;
      st_10_score <= 5'h0;
      st_11_score <= 5'h0;
      st_12_score <= 5'h0;
      st_13_score <= 5'h0;
      st_14_score <= 5'h0;
      st_15_score <= 5'h0;
      st_16_score <= 5'h0;
      st_17_score <= 5'h0;
      st_18_score <= 5'h0;
      st_19_score <= 5'h0;
      st_20_score <= 5'h0;
      st_21_score <= 5'h0;
      st_22_score <= 5'h0;
      st_23_score <= 5'h0;
      st_24_score <= 5'h0;
      st_25_score <= 5'h0;
      st_26_score <= 5'h0;
      st_27_score <= 5'h0;
      st_28_score <= 5'h0;
      st_29_score <= 5'h0;
      st_30_score <= 5'h0;
      st_31_score <= 5'h0;
      st_32_score <= 5'h0;
      st_33_score <= 5'h0;
      st_34_score <= 5'h0;
      st_35_score <= 5'h0;
      st_36_score <= 5'h0;
      st_37_score <= 5'h0;
      st_38_score <= 5'h0;
      st_39_score <= 5'h0;
      st_40_score <= 5'h0;
      st_41_score <= 5'h0;
      st_42_score <= 5'h0;
      st_43_score <= 5'h0;
      st_44_score <= 5'h0;
      st_45_score <= 5'h0;
      st_46_score <= 5'h0;
      st_47_score <= 5'h0;
      st_48_score <= 5'h0;
      st_49_score <= 5'h0;
      st_50_score <= 5'h0;
      st_51_score <= 5'h0;
      st_52_score <= 5'h0;
      st_53_score <= 5'h0;
      st_54_score <= 5'h0;
      st_55_score <= 5'h0;
      st_56_score <= 5'h0;
      st_57_score <= 5'h0;
      st_58_score <= 5'h0;
      st_59_score <= 5'h0;
      st_60_score <= 5'h0;
      st_61_score <= 5'h0;
      st_62_score <= 5'h0;
      st_63_score <= 5'h0;
      st_64_score <= 5'h0;
      st_65_score <= 5'h0;
      st_66_score <= 5'h0;
      st_67_score <= 5'h0;
      st_68_score <= 5'h0;
      st_69_score <= 5'h0;
      st_70_score <= 5'h0;
      st_71_score <= 5'h0;
      st_72_score <= 5'h0;
      st_73_score <= 5'h0;
      st_74_score <= 5'h0;
      st_75_score <= 5'h0;
      st_76_score <= 5'h0;
      st_77_score <= 5'h0;
      st_78_score <= 5'h0;
      st_79_score <= 5'h0;
      st_80_score <= 5'h0;
      st_81_score <= 5'h0;
      st_82_score <= 5'h0;
      st_83_score <= 5'h0;
      st_84_score <= 5'h0;
      st_85_score <= 5'h0;
      st_86_score <= 5'h0;
      st_87_score <= 5'h0;
      st_88_score <= 5'h0;
      st_89_score <= 5'h0;
      st_90_score <= 5'h0;
      st_91_score <= 5'h0;
      st_92_score <= 5'h0;
      st_93_score <= 5'h0;
      st_94_score <= 5'h0;
      st_95_score <= 5'h0;
      st_96_score <= 5'h0;
      st_97_score <= 5'h0;
      st_98_score <= 5'h0;
      st_99_score <= 5'h0;
      st_100_score <= 5'h0;
      st_101_score <= 5'h0;
      st_102_score <= 5'h0;
      st_103_score <= 5'h0;
      st_104_score <= 5'h0;
      st_105_score <= 5'h0;
      st_106_score <= 5'h0;
      st_107_score <= 5'h0;
      st_108_score <= 5'h0;
      ptr <= 7'h0;
      round <= 6'h0;
      bestOffset <= 10'h2;
      bestScore <= 5'h0;
      state <= 1'h0;
    end
    else begin
      if (state) begin
      end
      else begin
        prefetchOffset <= bestOffset;
        prefetchDisable <= {59'h0, bestScore} < 64'h2;
      end
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h0)
        st_0_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_0_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1)
        st_1_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_1_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2)
        st_2_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_2_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3)
        st_3_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_3_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4)
        st_4_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_4_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5)
        st_5_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_5_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h6)
        st_6_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_6_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h7)
        st_7_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_7_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h8)
        st_8_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_8_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h9)
        st_9_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_9_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hA)
        st_10_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_10_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hB)
        st_11_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_11_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hC)
        st_12_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_12_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hD)
        st_13_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_13_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hE)
        st_14_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_14_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'hF)
        st_15_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_15_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h10)
        st_16_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_16_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h11)
        st_17_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_17_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h12)
        st_18_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_18_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h13)
        st_19_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_19_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h14)
        st_20_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_20_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h15)
        st_21_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_21_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h16)
        st_22_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_22_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h17)
        st_23_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_23_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h18)
        st_24_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_24_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h19)
        st_25_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_25_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1A)
        st_26_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_26_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1B)
        st_27_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_27_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1C)
        st_28_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_28_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1D)
        st_29_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_29_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1E)
        st_30_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_30_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h1F)
        st_31_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_31_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h20)
        st_32_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_32_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h21)
        st_33_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_33_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h22)
        st_34_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_34_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h23)
        st_35_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_35_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h24)
        st_36_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_36_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h25)
        st_37_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_37_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h26)
        st_38_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_38_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h27)
        st_39_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_39_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h28)
        st_40_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_40_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h29)
        st_41_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_41_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2A)
        st_42_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_42_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2B)
        st_43_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_43_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2C)
        st_44_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_44_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2D)
        st_45_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_45_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2E)
        st_46_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_46_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h2F)
        st_47_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_47_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h30)
        st_48_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_48_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h31)
        st_49_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_49_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h32)
        st_50_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_50_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h33)
        st_51_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_51_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h34)
        st_52_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_52_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h35)
        st_53_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_53_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h36)
        st_54_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_54_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h37)
        st_55_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_55_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h38)
        st_56_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_56_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h39)
        st_57_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_57_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3A)
        st_58_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_58_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3B)
        st_59_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_59_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3C)
        st_60_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_60_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3D)
        st_61_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_61_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3E)
        st_62_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_62_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h3F)
        st_63_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_63_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h40)
        st_64_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_64_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h41)
        st_65_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_65_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h42)
        st_66_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_66_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h43)
        st_67_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_67_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h44)
        st_68_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_68_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h45)
        st_69_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_69_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h46)
        st_70_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_70_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h47)
        st_71_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_71_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h48)
        st_72_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_72_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h49)
        st_73_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_73_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4A)
        st_74_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_74_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4B)
        st_75_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_75_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4C)
        st_76_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_76_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4D)
        st_77_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_77_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4E)
        st_78_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_78_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h4F)
        st_79_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_79_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h50)
        st_80_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_80_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h51)
        st_81_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_81_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h52)
        st_82_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_82_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h53)
        st_83_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_83_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h54)
        st_84_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_84_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h55)
        st_85_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_85_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h56)
        st_86_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_86_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h57)
        st_87_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_87_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h58)
        st_88_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_88_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h59)
        st_89_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_89_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5A)
        st_90_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_90_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5B)
        st_91_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_91_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5C)
        st_92_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_92_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5D)
        st_93_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_93_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5E)
        st_94_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_94_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h5F)
        st_95_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_95_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h60)
        st_96_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_96_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h61)
        st_97_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_97_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h62)
        st_98_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_98_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h63)
        st_99_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_99_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h64)
        st_100_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_100_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h65)
        st_101_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_101_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h66)
        st_102_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_102_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h67)
        st_103_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_103_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h68)
        st_104_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_104_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h69)
        st_105_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_105_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h6A)
        st_106_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_106_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h6B)
        st_107_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_107_score <= 5'h0;
      if (state & _GEN_2 & io_test_resp_bits_ptr == 7'h6C)
        st_108_score <= _newScore_T;
      else if (state) begin
      end
      else
        st_108_score <= 5'h0;
      if (state & io_test_req_valid_0) begin
        if (ptr == 7'h6C) begin
          ptr <= 7'h0;
          round <= 6'(round + 6'h1);
        end
        else
          ptr <= 7'(ptr + 7'h1);
      end
      else if (state) begin
      end
      else begin
        ptr <= 7'h0;
        round <= 6'h0;
      end
      if (state & _GEN_2 & renewOffset)
        bestOffset <= _GEN_0[io_test_resp_bits_ptr];
      if (state & _GEN_2) begin
        if (renewOffset)
          bestScore <= _newScore_T;
      end
      else if (state) begin
      end
      else
        bestScore <= 5'h0;
      state <= ~state | (_GEN_2 ? ~((&_newScore_T) | _GEN_1) : ~_GEN_1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:18];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h13; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        prefetchOffset = _RANDOM[5'h0][9:0];
        prefetchDisable = _RANDOM[5'h0][10];
        st_0_score = _RANDOM[5'h0][15:11];
        st_1_score = _RANDOM[5'h0][20:16];
        st_2_score = _RANDOM[5'h0][25:21];
        st_3_score = _RANDOM[5'h0][30:26];
        st_4_score = {_RANDOM[5'h0][31], _RANDOM[5'h1][3:0]};
        st_5_score = _RANDOM[5'h1][8:4];
        st_6_score = _RANDOM[5'h1][13:9];
        st_7_score = _RANDOM[5'h1][18:14];
        st_8_score = _RANDOM[5'h1][23:19];
        st_9_score = _RANDOM[5'h1][28:24];
        st_10_score = {_RANDOM[5'h1][31:29], _RANDOM[5'h2][1:0]};
        st_11_score = _RANDOM[5'h2][6:2];
        st_12_score = _RANDOM[5'h2][11:7];
        st_13_score = _RANDOM[5'h2][16:12];
        st_14_score = _RANDOM[5'h2][21:17];
        st_15_score = _RANDOM[5'h2][26:22];
        st_16_score = _RANDOM[5'h2][31:27];
        st_17_score = _RANDOM[5'h3][4:0];
        st_18_score = _RANDOM[5'h3][9:5];
        st_19_score = _RANDOM[5'h3][14:10];
        st_20_score = _RANDOM[5'h3][19:15];
        st_21_score = _RANDOM[5'h3][24:20];
        st_22_score = _RANDOM[5'h3][29:25];
        st_23_score = {_RANDOM[5'h3][31:30], _RANDOM[5'h4][2:0]};
        st_24_score = _RANDOM[5'h4][7:3];
        st_25_score = _RANDOM[5'h4][12:8];
        st_26_score = _RANDOM[5'h4][17:13];
        st_27_score = _RANDOM[5'h4][22:18];
        st_28_score = _RANDOM[5'h4][27:23];
        st_29_score = {_RANDOM[5'h4][31:28], _RANDOM[5'h5][0]};
        st_30_score = _RANDOM[5'h5][5:1];
        st_31_score = _RANDOM[5'h5][10:6];
        st_32_score = _RANDOM[5'h5][15:11];
        st_33_score = _RANDOM[5'h5][20:16];
        st_34_score = _RANDOM[5'h5][25:21];
        st_35_score = _RANDOM[5'h5][30:26];
        st_36_score = {_RANDOM[5'h5][31], _RANDOM[5'h6][3:0]};
        st_37_score = _RANDOM[5'h6][8:4];
        st_38_score = _RANDOM[5'h6][13:9];
        st_39_score = _RANDOM[5'h6][18:14];
        st_40_score = _RANDOM[5'h6][23:19];
        st_41_score = _RANDOM[5'h6][28:24];
        st_42_score = {_RANDOM[5'h6][31:29], _RANDOM[5'h7][1:0]};
        st_43_score = _RANDOM[5'h7][6:2];
        st_44_score = _RANDOM[5'h7][11:7];
        st_45_score = _RANDOM[5'h7][16:12];
        st_46_score = _RANDOM[5'h7][21:17];
        st_47_score = _RANDOM[5'h7][26:22];
        st_48_score = _RANDOM[5'h7][31:27];
        st_49_score = _RANDOM[5'h8][4:0];
        st_50_score = _RANDOM[5'h8][9:5];
        st_51_score = _RANDOM[5'h8][14:10];
        st_52_score = _RANDOM[5'h8][19:15];
        st_53_score = _RANDOM[5'h8][24:20];
        st_54_score = _RANDOM[5'h8][29:25];
        st_55_score = {_RANDOM[5'h8][31:30], _RANDOM[5'h9][2:0]};
        st_56_score = _RANDOM[5'h9][7:3];
        st_57_score = _RANDOM[5'h9][12:8];
        st_58_score = _RANDOM[5'h9][17:13];
        st_59_score = _RANDOM[5'h9][22:18];
        st_60_score = _RANDOM[5'h9][27:23];
        st_61_score = {_RANDOM[5'h9][31:28], _RANDOM[5'hA][0]};
        st_62_score = _RANDOM[5'hA][5:1];
        st_63_score = _RANDOM[5'hA][10:6];
        st_64_score = _RANDOM[5'hA][15:11];
        st_65_score = _RANDOM[5'hA][20:16];
        st_66_score = _RANDOM[5'hA][25:21];
        st_67_score = _RANDOM[5'hA][30:26];
        st_68_score = {_RANDOM[5'hA][31], _RANDOM[5'hB][3:0]};
        st_69_score = _RANDOM[5'hB][8:4];
        st_70_score = _RANDOM[5'hB][13:9];
        st_71_score = _RANDOM[5'hB][18:14];
        st_72_score = _RANDOM[5'hB][23:19];
        st_73_score = _RANDOM[5'hB][28:24];
        st_74_score = {_RANDOM[5'hB][31:29], _RANDOM[5'hC][1:0]};
        st_75_score = _RANDOM[5'hC][6:2];
        st_76_score = _RANDOM[5'hC][11:7];
        st_77_score = _RANDOM[5'hC][16:12];
        st_78_score = _RANDOM[5'hC][21:17];
        st_79_score = _RANDOM[5'hC][26:22];
        st_80_score = _RANDOM[5'hC][31:27];
        st_81_score = _RANDOM[5'hD][4:0];
        st_82_score = _RANDOM[5'hD][9:5];
        st_83_score = _RANDOM[5'hD][14:10];
        st_84_score = _RANDOM[5'hD][19:15];
        st_85_score = _RANDOM[5'hD][24:20];
        st_86_score = _RANDOM[5'hD][29:25];
        st_87_score = {_RANDOM[5'hD][31:30], _RANDOM[5'hE][2:0]};
        st_88_score = _RANDOM[5'hE][7:3];
        st_89_score = _RANDOM[5'hE][12:8];
        st_90_score = _RANDOM[5'hE][17:13];
        st_91_score = _RANDOM[5'hE][22:18];
        st_92_score = _RANDOM[5'hE][27:23];
        st_93_score = {_RANDOM[5'hE][31:28], _RANDOM[5'hF][0]};
        st_94_score = _RANDOM[5'hF][5:1];
        st_95_score = _RANDOM[5'hF][10:6];
        st_96_score = _RANDOM[5'hF][15:11];
        st_97_score = _RANDOM[5'hF][20:16];
        st_98_score = _RANDOM[5'hF][25:21];
        st_99_score = _RANDOM[5'hF][30:26];
        st_100_score = {_RANDOM[5'hF][31], _RANDOM[5'h10][3:0]};
        st_101_score = _RANDOM[5'h10][8:4];
        st_102_score = _RANDOM[5'h10][13:9];
        st_103_score = _RANDOM[5'h10][18:14];
        st_104_score = _RANDOM[5'h10][23:19];
        st_105_score = _RANDOM[5'h10][28:24];
        st_106_score = {_RANDOM[5'h10][31:29], _RANDOM[5'h11][1:0]};
        st_107_score = _RANDOM[5'h11][6:2];
        st_108_score = _RANDOM[5'h11][11:7];
        ptr = _RANDOM[5'h11][18:12];
        round = _RANDOM[5'h11][24:19];
        bestOffset = {_RANDOM[5'h11][31:25], _RANDOM[5'h12][2:0]};
        bestScore = _RANDOM[5'h12][7:3];
        state = _RANDOM[5'h12][8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        prefetchOffset = 10'h2;
        prefetchDisable = 1'h0;
        st_0_score = 5'h0;
        st_1_score = 5'h0;
        st_2_score = 5'h0;
        st_3_score = 5'h0;
        st_4_score = 5'h0;
        st_5_score = 5'h0;
        st_6_score = 5'h0;
        st_7_score = 5'h0;
        st_8_score = 5'h0;
        st_9_score = 5'h0;
        st_10_score = 5'h0;
        st_11_score = 5'h0;
        st_12_score = 5'h0;
        st_13_score = 5'h0;
        st_14_score = 5'h0;
        st_15_score = 5'h0;
        st_16_score = 5'h0;
        st_17_score = 5'h0;
        st_18_score = 5'h0;
        st_19_score = 5'h0;
        st_20_score = 5'h0;
        st_21_score = 5'h0;
        st_22_score = 5'h0;
        st_23_score = 5'h0;
        st_24_score = 5'h0;
        st_25_score = 5'h0;
        st_26_score = 5'h0;
        st_27_score = 5'h0;
        st_28_score = 5'h0;
        st_29_score = 5'h0;
        st_30_score = 5'h0;
        st_31_score = 5'h0;
        st_32_score = 5'h0;
        st_33_score = 5'h0;
        st_34_score = 5'h0;
        st_35_score = 5'h0;
        st_36_score = 5'h0;
        st_37_score = 5'h0;
        st_38_score = 5'h0;
        st_39_score = 5'h0;
        st_40_score = 5'h0;
        st_41_score = 5'h0;
        st_42_score = 5'h0;
        st_43_score = 5'h0;
        st_44_score = 5'h0;
        st_45_score = 5'h0;
        st_46_score = 5'h0;
        st_47_score = 5'h0;
        st_48_score = 5'h0;
        st_49_score = 5'h0;
        st_50_score = 5'h0;
        st_51_score = 5'h0;
        st_52_score = 5'h0;
        st_53_score = 5'h0;
        st_54_score = 5'h0;
        st_55_score = 5'h0;
        st_56_score = 5'h0;
        st_57_score = 5'h0;
        st_58_score = 5'h0;
        st_59_score = 5'h0;
        st_60_score = 5'h0;
        st_61_score = 5'h0;
        st_62_score = 5'h0;
        st_63_score = 5'h0;
        st_64_score = 5'h0;
        st_65_score = 5'h0;
        st_66_score = 5'h0;
        st_67_score = 5'h0;
        st_68_score = 5'h0;
        st_69_score = 5'h0;
        st_70_score = 5'h0;
        st_71_score = 5'h0;
        st_72_score = 5'h0;
        st_73_score = 5'h0;
        st_74_score = 5'h0;
        st_75_score = 5'h0;
        st_76_score = 5'h0;
        st_77_score = 5'h0;
        st_78_score = 5'h0;
        st_79_score = 5'h0;
        st_80_score = 5'h0;
        st_81_score = 5'h0;
        st_82_score = 5'h0;
        st_83_score = 5'h0;
        st_84_score = 5'h0;
        st_85_score = 5'h0;
        st_86_score = 5'h0;
        st_87_score = 5'h0;
        st_88_score = 5'h0;
        st_89_score = 5'h0;
        st_90_score = 5'h0;
        st_91_score = 5'h0;
        st_92_score = 5'h0;
        st_93_score = 5'h0;
        st_94_score = 5'h0;
        st_95_score = 5'h0;
        st_96_score = 5'h0;
        st_97_score = 5'h0;
        st_98_score = 5'h0;
        st_99_score = 5'h0;
        st_100_score = 5'h0;
        st_101_score = 5'h0;
        st_102_score = 5'h0;
        st_103_score = 5'h0;
        st_104_score = 5'h0;
        st_105_score = 5'h0;
        st_106_score = 5'h0;
        st_107_score = 5'h0;
        st_108_score = 5'h0;
        ptr = 7'h0;
        round = 6'h0;
        bestOffset = 10'h2;
        bestScore = 5'h0;
        state = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = state;
  assign io_prefetchOffset = prefetchOffset;
  assign io_prefetchDisable = prefetchDisable;
  assign io_test_req_valid = io_test_req_valid_0;
  assign io_test_req_bits_addr = io_req_bits;
  assign io_test_req_bits_testOffset = _GEN[ptr];
  assign io_test_req_bits_ptr = ptr;
endmodule

