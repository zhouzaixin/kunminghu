// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module L2TlbPrefetch(
  input         clock,
  input         reset,
  input         io_sfence_valid,
  input  [3:0]  io_csr_vsatp_mode,
  input         io_csr_vsatp_changed,
  input  [3:0]  io_csr_hgatp_mode,
  input         io_csr_priv_virt,
  input         io_in_valid,
  input  [37:0] io_in_bits_vpn,
  input         io_out_ready,
  output        io_out_valid,
  output [37:0] io_out_bits_req_info_vpn,
  output [1:0]  io_out_bits_req_info_s2xlate
);

  reg         v;
  reg  [37:0] old_reqs_0;
  reg  [37:0] old_reqs_1;
  reg  [37:0] old_reqs_2;
  reg  [37:0] old_reqs_3;
  reg         old_v_0;
  reg         old_v_1;
  reg         old_v_2;
  reg         old_v_3;
  reg  [1:0]  old_index;
  wire [34:0] _next_line_T_1 = 35'(io_in_bits_vpn[37:3] + 35'h1);
  reg  [37:0] next_req;
  wire        _v_T = io_out_ready & v;
  wire        _GEN = _v_T & old_index == 2'h0;
  wire        _GEN_0 = _v_T & old_index == 2'h1;
  wire        _GEN_1 = _v_T & old_index == 2'h2;
  wire        _GEN_2 = _v_T & (&old_index);
  always @(posedge clock) begin
    if (_GEN)
      old_reqs_0 <= next_req;
    if (_GEN_0)
      old_reqs_1 <= next_req;
    if (_GEN_1)
      old_reqs_2 <= next_req;
    if (_GEN_2)
      old_reqs_3 <= next_req;
    if (io_in_valid)
      next_req <= {_next_line_T_1, 3'h0};
  end // always @(posedge)
  wire        flush = io_sfence_valid | io_csr_priv_virt & io_csr_vsatp_changed;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      old_v_0 <= 1'h0;
      old_v_1 <= 1'h0;
      old_v_2 <= 1'h0;
      old_v_3 <= 1'h0;
      old_index <= 2'h0;
      v <= 1'h0;
    end
    else begin
      old_v_0 <= ~flush & (_GEN | old_v_0);
      old_v_1 <= ~flush & (_GEN_0 | old_v_1);
      old_v_2 <= ~flush & (_GEN_1 | old_v_2);
      old_v_3 <= ~flush & (_GEN_2 | old_v_3);
      if (_v_T) begin
        if (&old_index)
          old_index <= 2'h0;
        else
          old_index <= 2'(old_index + 2'h1);
      end
      v <=
        ~flush
        & (io_in_valid & ~flush
           & {old_reqs_0[37:3] == _next_line_T_1 & old_v_0,
              old_reqs_1[37:3] == _next_line_T_1 & old_v_1,
              old_reqs_2[37:3] == _next_line_T_1 & old_v_2,
              old_reqs_3[37:3] == _next_line_T_1 & old_v_3} == 4'h0 | ~_v_T & v);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        old_reqs_0 = {_RANDOM[3'h0], _RANDOM[3'h1][5:0]};
        old_reqs_1 = {_RANDOM[3'h1][31:6], _RANDOM[3'h2][11:0]};
        old_reqs_2 = {_RANDOM[3'h2][31:12], _RANDOM[3'h3][17:0]};
        old_reqs_3 = {_RANDOM[3'h3][31:18], _RANDOM[3'h4][23:0]};
        old_v_0 = _RANDOM[3'h4][24];
        old_v_1 = _RANDOM[3'h4][25];
        old_v_2 = _RANDOM[3'h4][26];
        old_v_3 = _RANDOM[3'h4][27];
        old_index = _RANDOM[3'h4][29:28];
        next_req = {_RANDOM[3'h4][31:30], _RANDOM[3'h5], _RANDOM[3'h6][3:0]};
        v = _RANDOM[3'h6][4];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        old_v_0 = 1'h0;
        old_v_1 = 1'h0;
        old_v_2 = 1'h0;
        old_v_3 = 1'h0;
        old_index = 2'h0;
        v = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = v;
  assign io_out_bits_req_info_vpn = next_req;
  assign io_out_bits_req_info_s2xlate =
    io_csr_priv_virt & (|io_csr_vsatp_mode) & (|io_csr_hgatp_mode)
      ? 2'h3
      : io_csr_priv_virt & (|io_csr_vsatp_mode)
          ? 2'h1
          : {io_csr_priv_virt & (|io_csr_hgatp_mode), 1'h0};
endmodule

