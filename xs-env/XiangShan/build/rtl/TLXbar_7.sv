// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar_7(
  input          clock,
  input          reset,
  output         auto_in_2_a_ready,
  input          auto_in_2_a_valid,
  input  [3:0]   auto_in_2_a_bits_opcode,
  input  [2:0]   auto_in_2_a_bits_param,
  input  [2:0]   auto_in_2_a_bits_size,
  input  [2:0]   auto_in_2_a_bits_source,
  input  [47:0]  auto_in_2_a_bits_address,
  input  [3:0]   auto_in_2_a_bits_user_reqSource,
  input  [31:0]  auto_in_2_a_bits_mask,
  input  [255:0] auto_in_2_a_bits_data,
  input          auto_in_2_a_bits_corrupt,
  input          auto_in_2_d_ready,
  output         auto_in_2_d_valid,
  output [3:0]   auto_in_2_d_bits_opcode,
  output [1:0]   auto_in_2_d_bits_param,
  output [2:0]   auto_in_2_d_bits_size,
  output [2:0]   auto_in_2_d_bits_source,
  output [9:0]   auto_in_2_d_bits_sink,
  output         auto_in_2_d_bits_denied,
  output [255:0] auto_in_2_d_bits_data,
  output         auto_in_2_d_bits_corrupt,
  output         auto_in_1_a_ready,
  input          auto_in_1_a_valid,
  input  [3:0]   auto_in_1_a_bits_opcode,
  input  [2:0]   auto_in_1_a_bits_param,
  input  [2:0]   auto_in_1_a_bits_size,
  input  [3:0]   auto_in_1_a_bits_source,
  input  [47:0]  auto_in_1_a_bits_address,
  input  [1:0]   auto_in_1_a_bits_user_alias,
  input  [3:0]   auto_in_1_a_bits_user_reqSource,
  input          auto_in_1_a_bits_user_needHint,
  input  [31:0]  auto_in_1_a_bits_mask,
  input  [255:0] auto_in_1_a_bits_data,
  input          auto_in_1_a_bits_corrupt,
  input          auto_in_1_d_ready,
  output         auto_in_1_d_valid,
  output [3:0]   auto_in_1_d_bits_opcode,
  output [1:0]   auto_in_1_d_bits_param,
  output [2:0]   auto_in_1_d_bits_size,
  output [3:0]   auto_in_1_d_bits_source,
  output [9:0]   auto_in_1_d_bits_sink,
  output         auto_in_1_d_bits_denied,
  output [255:0] auto_in_1_d_bits_data,
  output         auto_in_1_d_bits_corrupt,
  output         auto_in_0_a_ready,
  input          auto_in_0_a_valid,
  input  [3:0]   auto_in_0_a_bits_opcode,
  input  [2:0]   auto_in_0_a_bits_param,
  input  [2:0]   auto_in_0_a_bits_size,
  input  [5:0]   auto_in_0_a_bits_source,
  input  [47:0]  auto_in_0_a_bits_address,
  input  [1:0]   auto_in_0_a_bits_user_alias,
  input  [43:0]  auto_in_0_a_bits_user_vaddr,
  input  [3:0]   auto_in_0_a_bits_user_reqSource,
  input          auto_in_0_a_bits_user_needHint,
  input          auto_in_0_a_bits_echo_isKeyword,
  input  [31:0]  auto_in_0_a_bits_mask,
  input  [255:0] auto_in_0_a_bits_data,
  input          auto_in_0_a_bits_corrupt,
  input          auto_in_0_b_ready,
  output         auto_in_0_b_valid,
  output [2:0]   auto_in_0_b_bits_opcode,
  output [1:0]   auto_in_0_b_bits_param,
  output [2:0]   auto_in_0_b_bits_size,
  output [5:0]   auto_in_0_b_bits_source,
  output [47:0]  auto_in_0_b_bits_address,
  output [31:0]  auto_in_0_b_bits_mask,
  output [255:0] auto_in_0_b_bits_data,
  output         auto_in_0_b_bits_corrupt,
  output         auto_in_0_c_ready,
  input          auto_in_0_c_valid,
  input  [2:0]   auto_in_0_c_bits_opcode,
  input  [2:0]   auto_in_0_c_bits_param,
  input  [2:0]   auto_in_0_c_bits_size,
  input  [5:0]   auto_in_0_c_bits_source,
  input  [47:0]  auto_in_0_c_bits_address,
  input  [1:0]   auto_in_0_c_bits_user_alias,
  input  [43:0]  auto_in_0_c_bits_user_vaddr,
  input  [3:0]   auto_in_0_c_bits_user_reqSource,
  input          auto_in_0_c_bits_user_needHint,
  input          auto_in_0_c_bits_echo_isKeyword,
  input  [255:0] auto_in_0_c_bits_data,
  input          auto_in_0_c_bits_corrupt,
  input          auto_in_0_d_ready,
  output         auto_in_0_d_valid,
  output [3:0]   auto_in_0_d_bits_opcode,
  output [1:0]   auto_in_0_d_bits_param,
  output [2:0]   auto_in_0_d_bits_size,
  output [5:0]   auto_in_0_d_bits_source,
  output [9:0]   auto_in_0_d_bits_sink,
  output         auto_in_0_d_bits_denied,
  output         auto_in_0_d_bits_echo_isKeyword,
  output [255:0] auto_in_0_d_bits_data,
  output         auto_in_0_d_bits_corrupt,
  output         auto_in_0_e_ready,
  input          auto_in_0_e_valid,
  input  [9:0]   auto_in_0_e_bits_sink,
  input          auto_out_3_a_ready,
  output         auto_out_3_a_valid,
  output [3:0]   auto_out_3_a_bits_opcode,
  output [2:0]   auto_out_3_a_bits_param,
  output [2:0]   auto_out_3_a_bits_size,
  output [6:0]   auto_out_3_a_bits_source,
  output [47:0]  auto_out_3_a_bits_address,
  output [3:0]   auto_out_3_a_bits_user_reqSource,
  output [1:0]   auto_out_3_a_bits_user_alias,
  output [43:0]  auto_out_3_a_bits_user_vaddr,
  output         auto_out_3_a_bits_user_needHint,
  output         auto_out_3_a_bits_echo_isKeyword,
  output [31:0]  auto_out_3_a_bits_mask,
  output [255:0] auto_out_3_a_bits_data,
  output         auto_out_3_a_bits_corrupt,
  output         auto_out_3_b_ready,
  input          auto_out_3_b_valid,
  input  [2:0]   auto_out_3_b_bits_opcode,
  input  [1:0]   auto_out_3_b_bits_param,
  input  [2:0]   auto_out_3_b_bits_size,
  input  [6:0]   auto_out_3_b_bits_source,
  input  [47:0]  auto_out_3_b_bits_address,
  input  [31:0]  auto_out_3_b_bits_mask,
  input  [255:0] auto_out_3_b_bits_data,
  input          auto_out_3_b_bits_corrupt,
  input          auto_out_3_c_ready,
  output         auto_out_3_c_valid,
  output [2:0]   auto_out_3_c_bits_opcode,
  output [2:0]   auto_out_3_c_bits_param,
  output [2:0]   auto_out_3_c_bits_size,
  output [6:0]   auto_out_3_c_bits_source,
  output [47:0]  auto_out_3_c_bits_address,
  output [3:0]   auto_out_3_c_bits_user_reqSource,
  output [1:0]   auto_out_3_c_bits_user_alias,
  output [43:0]  auto_out_3_c_bits_user_vaddr,
  output         auto_out_3_c_bits_user_needHint,
  output         auto_out_3_c_bits_echo_isKeyword,
  output [255:0] auto_out_3_c_bits_data,
  output         auto_out_3_c_bits_corrupt,
  output         auto_out_3_d_ready,
  input          auto_out_3_d_valid,
  input  [3:0]   auto_out_3_d_bits_opcode,
  input  [1:0]   auto_out_3_d_bits_param,
  input  [2:0]   auto_out_3_d_bits_size,
  input  [6:0]   auto_out_3_d_bits_source,
  input  [7:0]   auto_out_3_d_bits_sink,
  input          auto_out_3_d_bits_denied,
  input          auto_out_3_d_bits_echo_isKeyword,
  input  [255:0] auto_out_3_d_bits_data,
  input          auto_out_3_d_bits_corrupt,
  input          auto_out_3_e_ready,
  output         auto_out_3_e_valid,
  output [7:0]   auto_out_3_e_bits_sink,
  input          auto_out_2_a_ready,
  output         auto_out_2_a_valid,
  output [3:0]   auto_out_2_a_bits_opcode,
  output [2:0]   auto_out_2_a_bits_param,
  output [2:0]   auto_out_2_a_bits_size,
  output [6:0]   auto_out_2_a_bits_source,
  output [47:0]  auto_out_2_a_bits_address,
  output [3:0]   auto_out_2_a_bits_user_reqSource,
  output [1:0]   auto_out_2_a_bits_user_alias,
  output [43:0]  auto_out_2_a_bits_user_vaddr,
  output         auto_out_2_a_bits_user_needHint,
  output         auto_out_2_a_bits_echo_isKeyword,
  output [31:0]  auto_out_2_a_bits_mask,
  output [255:0] auto_out_2_a_bits_data,
  output         auto_out_2_a_bits_corrupt,
  output         auto_out_2_b_ready,
  input          auto_out_2_b_valid,
  input  [2:0]   auto_out_2_b_bits_opcode,
  input  [1:0]   auto_out_2_b_bits_param,
  input  [2:0]   auto_out_2_b_bits_size,
  input  [6:0]   auto_out_2_b_bits_source,
  input  [47:0]  auto_out_2_b_bits_address,
  input  [31:0]  auto_out_2_b_bits_mask,
  input  [255:0] auto_out_2_b_bits_data,
  input          auto_out_2_b_bits_corrupt,
  input          auto_out_2_c_ready,
  output         auto_out_2_c_valid,
  output [2:0]   auto_out_2_c_bits_opcode,
  output [2:0]   auto_out_2_c_bits_param,
  output [2:0]   auto_out_2_c_bits_size,
  output [6:0]   auto_out_2_c_bits_source,
  output [47:0]  auto_out_2_c_bits_address,
  output [3:0]   auto_out_2_c_bits_user_reqSource,
  output [1:0]   auto_out_2_c_bits_user_alias,
  output [43:0]  auto_out_2_c_bits_user_vaddr,
  output         auto_out_2_c_bits_user_needHint,
  output         auto_out_2_c_bits_echo_isKeyword,
  output [255:0] auto_out_2_c_bits_data,
  output         auto_out_2_c_bits_corrupt,
  output         auto_out_2_d_ready,
  input          auto_out_2_d_valid,
  input  [3:0]   auto_out_2_d_bits_opcode,
  input  [1:0]   auto_out_2_d_bits_param,
  input  [2:0]   auto_out_2_d_bits_size,
  input  [6:0]   auto_out_2_d_bits_source,
  input  [7:0]   auto_out_2_d_bits_sink,
  input          auto_out_2_d_bits_denied,
  input          auto_out_2_d_bits_echo_isKeyword,
  input  [255:0] auto_out_2_d_bits_data,
  input          auto_out_2_d_bits_corrupt,
  input          auto_out_2_e_ready,
  output         auto_out_2_e_valid,
  output [7:0]   auto_out_2_e_bits_sink,
  input          auto_out_1_a_ready,
  output         auto_out_1_a_valid,
  output [3:0]   auto_out_1_a_bits_opcode,
  output [2:0]   auto_out_1_a_bits_param,
  output [2:0]   auto_out_1_a_bits_size,
  output [6:0]   auto_out_1_a_bits_source,
  output [47:0]  auto_out_1_a_bits_address,
  output [3:0]   auto_out_1_a_bits_user_reqSource,
  output [1:0]   auto_out_1_a_bits_user_alias,
  output [43:0]  auto_out_1_a_bits_user_vaddr,
  output         auto_out_1_a_bits_user_needHint,
  output         auto_out_1_a_bits_echo_isKeyword,
  output [31:0]  auto_out_1_a_bits_mask,
  output [255:0] auto_out_1_a_bits_data,
  output         auto_out_1_a_bits_corrupt,
  output         auto_out_1_b_ready,
  input          auto_out_1_b_valid,
  input  [2:0]   auto_out_1_b_bits_opcode,
  input  [1:0]   auto_out_1_b_bits_param,
  input  [2:0]   auto_out_1_b_bits_size,
  input  [6:0]   auto_out_1_b_bits_source,
  input  [47:0]  auto_out_1_b_bits_address,
  input  [31:0]  auto_out_1_b_bits_mask,
  input  [255:0] auto_out_1_b_bits_data,
  input          auto_out_1_b_bits_corrupt,
  input          auto_out_1_c_ready,
  output         auto_out_1_c_valid,
  output [2:0]   auto_out_1_c_bits_opcode,
  output [2:0]   auto_out_1_c_bits_param,
  output [2:0]   auto_out_1_c_bits_size,
  output [6:0]   auto_out_1_c_bits_source,
  output [47:0]  auto_out_1_c_bits_address,
  output [3:0]   auto_out_1_c_bits_user_reqSource,
  output [1:0]   auto_out_1_c_bits_user_alias,
  output [43:0]  auto_out_1_c_bits_user_vaddr,
  output         auto_out_1_c_bits_user_needHint,
  output         auto_out_1_c_bits_echo_isKeyword,
  output [255:0] auto_out_1_c_bits_data,
  output         auto_out_1_c_bits_corrupt,
  output         auto_out_1_d_ready,
  input          auto_out_1_d_valid,
  input  [3:0]   auto_out_1_d_bits_opcode,
  input  [1:0]   auto_out_1_d_bits_param,
  input  [2:0]   auto_out_1_d_bits_size,
  input  [6:0]   auto_out_1_d_bits_source,
  input  [7:0]   auto_out_1_d_bits_sink,
  input          auto_out_1_d_bits_denied,
  input          auto_out_1_d_bits_echo_isKeyword,
  input  [255:0] auto_out_1_d_bits_data,
  input          auto_out_1_d_bits_corrupt,
  input          auto_out_1_e_ready,
  output         auto_out_1_e_valid,
  output [7:0]   auto_out_1_e_bits_sink,
  input          auto_out_0_a_ready,
  output         auto_out_0_a_valid,
  output [3:0]   auto_out_0_a_bits_opcode,
  output [2:0]   auto_out_0_a_bits_param,
  output [2:0]   auto_out_0_a_bits_size,
  output [6:0]   auto_out_0_a_bits_source,
  output [47:0]  auto_out_0_a_bits_address,
  output [3:0]   auto_out_0_a_bits_user_reqSource,
  output [1:0]   auto_out_0_a_bits_user_alias,
  output [43:0]  auto_out_0_a_bits_user_vaddr,
  output         auto_out_0_a_bits_user_needHint,
  output         auto_out_0_a_bits_echo_isKeyword,
  output [31:0]  auto_out_0_a_bits_mask,
  output [255:0] auto_out_0_a_bits_data,
  output         auto_out_0_a_bits_corrupt,
  output         auto_out_0_b_ready,
  input          auto_out_0_b_valid,
  input  [2:0]   auto_out_0_b_bits_opcode,
  input  [1:0]   auto_out_0_b_bits_param,
  input  [2:0]   auto_out_0_b_bits_size,
  input  [6:0]   auto_out_0_b_bits_source,
  input  [47:0]  auto_out_0_b_bits_address,
  input  [31:0]  auto_out_0_b_bits_mask,
  input  [255:0] auto_out_0_b_bits_data,
  input          auto_out_0_b_bits_corrupt,
  input          auto_out_0_c_ready,
  output         auto_out_0_c_valid,
  output [2:0]   auto_out_0_c_bits_opcode,
  output [2:0]   auto_out_0_c_bits_param,
  output [2:0]   auto_out_0_c_bits_size,
  output [6:0]   auto_out_0_c_bits_source,
  output [47:0]  auto_out_0_c_bits_address,
  output [3:0]   auto_out_0_c_bits_user_reqSource,
  output [1:0]   auto_out_0_c_bits_user_alias,
  output [43:0]  auto_out_0_c_bits_user_vaddr,
  output         auto_out_0_c_bits_user_needHint,
  output         auto_out_0_c_bits_echo_isKeyword,
  output [255:0] auto_out_0_c_bits_data,
  output         auto_out_0_c_bits_corrupt,
  output         auto_out_0_d_ready,
  input          auto_out_0_d_valid,
  input  [3:0]   auto_out_0_d_bits_opcode,
  input  [1:0]   auto_out_0_d_bits_param,
  input  [2:0]   auto_out_0_d_bits_size,
  input  [6:0]   auto_out_0_d_bits_source,
  input  [7:0]   auto_out_0_d_bits_sink,
  input          auto_out_0_d_bits_denied,
  input          auto_out_0_d_bits_echo_isKeyword,
  input  [255:0] auto_out_0_d_bits_data,
  input          auto_out_0_d_bits_corrupt,
  input          auto_out_0_e_ready,
  output         auto_out_0_e_valid,
  output [7:0]   auto_out_0_e_bits_sink
);

  wire        allowed_7_3;
  wire        allowed_7_2;
  wire        allowed_7_1;
  wire        allowed_7_0;
  wire        allowed_6_3;
  wire        allowed_6_2;
  wire        allowed_6_1;
  wire        allowed_6_0;
  wire        allowed_5_3;
  wire        allowed_5_2;
  wire        allowed_5_1;
  wire        allowed_5_0;
  wire        allowed_4_3;
  wire        allowed_4_2;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        allowed_3_2;
  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_2;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_2;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_2;
  wire        allowed_1;
  wire        allowed_0;
  wire [6:0]  in_0_a_bits_source = {1'h0, auto_in_0_a_bits_source};
  wire [6:0]  in_0_c_bits_source = {1'h0, auto_in_0_c_bits_source};
  wire [6:0]  in_1_a_bits_source = {3'h4, auto_in_1_a_bits_source};
  wire [6:0]  in_2_a_bits_source = {4'hA, auto_in_2_a_bits_source};
  wire [9:0]  out_0_d_bits_sink = {2'h3, auto_out_0_d_bits_sink};
  wire [9:0]  out_1_d_bits_sink = {2'h2, auto_out_1_d_bits_sink};
  wire [9:0]  out_2_d_bits_sink = {2'h1, auto_out_2_d_bits_sink};
  wire [9:0]  out_3_d_bits_sink = {2'h0, auto_out_3_d_bits_sink};
  wire        requestAIO_0_0 = auto_in_0_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_0_1 =
    {auto_in_0_a_bits_address[7], ~(auto_in_0_a_bits_address[6])} == 2'h0;
  wire        requestAIO_0_2 = auto_in_0_a_bits_address[7:6] == 2'h2;
  wire        requestAIO_1_0 = auto_in_1_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_1_1 =
    {auto_in_1_a_bits_address[7], ~(auto_in_1_a_bits_address[6])} == 2'h0;
  wire        requestAIO_1_2 = auto_in_1_a_bits_address[7:6] == 2'h2;
  wire        requestAIO_2_0 = auto_in_2_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_2_1 =
    {auto_in_2_a_bits_address[7], ~(auto_in_2_a_bits_address[6])} == 2'h0;
  wire        requestAIO_2_2 = auto_in_2_a_bits_address[7:6] == 2'h2;
  wire        requestCIO_0_0 = auto_in_0_c_bits_address[7:6] == 2'h0;
  wire        requestCIO_0_1 =
    {auto_in_0_c_bits_address[7], ~(auto_in_0_c_bits_address[6])} == 2'h0;
  wire        requestCIO_0_2 = auto_in_0_c_bits_address[7:6] == 2'h2;
  wire        requestDOI_0_1 = auto_out_0_d_bits_source[6:4] == 3'h4;
  wire        requestDOI_0_2 = auto_out_0_d_bits_source[6:3] == 4'hA;
  wire        requestDOI_1_1 = auto_out_1_d_bits_source[6:4] == 3'h4;
  wire        requestDOI_1_2 = auto_out_1_d_bits_source[6:3] == 4'hA;
  wire        requestDOI_2_1 = auto_out_2_d_bits_source[6:4] == 3'h4;
  wire        requestDOI_2_2 = auto_out_2_d_bits_source[6:3] == 4'hA;
  wire        requestDOI_3_1 = auto_out_3_d_bits_source[6:4] == 3'h4;
  wire        requestDOI_3_2 = auto_out_3_d_bits_source[6:3] == 4'hA;
  wire        requestEIO_0_1 = auto_in_0_e_bits_sink[9:8] == 2'h2;
  wire        requestEIO_0_2 = auto_in_0_e_bits_sink[9:8] == 2'h1;
  wire        requestEIO_0_3 = auto_in_0_e_bits_sink[9:8] == 2'h0;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid = auto_in_0_a_valid & requestAIO_0_1;
  wire        portsAOI_filtered_2_valid = auto_in_0_a_valid & requestAIO_0_2;
  wire        portsAOI_filtered_3_valid =
    auto_in_0_a_valid & (&(auto_in_0_a_bits_address[7:6]));
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid = auto_in_1_a_valid & requestAIO_1_1;
  wire        portsAOI_filtered_1_2_valid = auto_in_1_a_valid & requestAIO_1_2;
  wire        portsAOI_filtered_1_3_valid =
    auto_in_1_a_valid & (&(auto_in_1_a_bits_address[7:6]));
  wire        portsAOI_filtered_2_0_valid = auto_in_2_a_valid & requestAIO_2_0;
  wire        portsAOI_filtered_2_1_valid = auto_in_2_a_valid & requestAIO_2_1;
  wire        portsAOI_filtered_2_2_valid = auto_in_2_a_valid & requestAIO_2_2;
  wire        portsAOI_filtered_2_3_valid =
    auto_in_2_a_valid & (&(auto_in_2_a_bits_address[7:6]));
  wire        portsBIO_filtered_0_valid =
    auto_out_0_b_valid & ~(auto_out_0_b_bits_source[6]);
  wire        portsBIO_filtered_1_0_valid =
    auto_out_1_b_valid & ~(auto_out_1_b_bits_source[6]);
  wire        portsBIO_filtered_2_0_valid =
    auto_out_2_b_valid & ~(auto_out_2_b_bits_source[6]);
  wire        portsBIO_filtered_3_0_valid =
    auto_out_3_b_valid & ~(auto_out_3_b_bits_source[6]);
  wire        portsDIO_filtered_0_valid =
    auto_out_0_d_valid & ~(auto_out_0_d_bits_source[6]);
  wire        portsDIO_filtered_1_valid = auto_out_0_d_valid & requestDOI_0_1;
  wire        portsDIO_filtered_2_valid = auto_out_0_d_valid & requestDOI_0_2;
  wire        portsDIO_filtered_1_0_valid =
    auto_out_1_d_valid & ~(auto_out_1_d_bits_source[6]);
  wire        portsDIO_filtered_1_1_valid = auto_out_1_d_valid & requestDOI_1_1;
  wire        portsDIO_filtered_1_2_valid = auto_out_1_d_valid & requestDOI_1_2;
  wire        portsDIO_filtered_2_0_valid =
    auto_out_2_d_valid & ~(auto_out_2_d_bits_source[6]);
  wire        portsDIO_filtered_2_1_valid = auto_out_2_d_valid & requestDOI_2_1;
  wire        portsDIO_filtered_2_2_valid = auto_out_2_d_valid & requestDOI_2_2;
  wire        portsDIO_filtered_3_0_valid =
    auto_out_3_d_valid & ~(auto_out_3_d_bits_source[6]);
  wire        portsDIO_filtered_3_1_valid = auto_out_3_d_valid & requestDOI_3_1;
  wire        portsDIO_filtered_3_2_valid = auto_out_3_d_valid & requestDOI_3_2;
  reg         beatsLeft;
  wire [2:0]  readys_valid =
    {portsAOI_filtered_2_0_valid, portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [2:0]  readys_mask;
  wire [2:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [3:0]  _GEN =
    {_readys_filter_T_1[1:0], portsAOI_filtered_2_0_valid, portsAOI_filtered_1_0_valid}
    | {_readys_filter_T_1, portsAOI_filtered_2_0_valid};
  wire [2:0]  readys_readys =
    ~({readys_mask[2], _readys_filter_T_1[2] | readys_mask[1], _GEN[3] | readys_mask[0]}
      & (_GEN[2:0] | {_readys_filter_T_1[2], _GEN[3:2]}));
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  wire        winner_2 = readys_readys[2] & portsAOI_filtered_2_0_valid;
  reg         state_0;
  reg         state_1;
  reg         state_2;
  wire        muxState_0 = beatsLeft ? state_0 : winner_0;
  wire        muxState_1 = beatsLeft ? state_1 : winner_1;
  wire        muxState_2 = beatsLeft ? state_2 : winner_2;
  assign allowed_0 = beatsLeft ? state_0 : readys_readys[0];
  assign allowed_1 = beatsLeft ? state_1 : readys_readys[1];
  assign allowed_2 = beatsLeft ? state_2 : readys_readys[2];
  wire        out_0_a_valid =
    beatsLeft
      ? state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid
        | state_2 & portsAOI_filtered_2_0_valid
      : portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid
        | portsAOI_filtered_2_0_valid;
  reg         beatsLeft_1;
  wire [2:0]  readys_valid_1 =
    {portsAOI_filtered_2_1_valid, portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [2:0]  readys_mask_1;
  wire [2:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [3:0]  _GEN_0 =
    {_readys_filter_T_3[1:0], portsAOI_filtered_2_1_valid, portsAOI_filtered_1_1_valid}
    | {_readys_filter_T_3, portsAOI_filtered_2_1_valid};
  wire [2:0]  readys_readys_1 =
    ~({readys_mask_1[2],
       _readys_filter_T_3[2] | readys_mask_1[1],
       _GEN_0[3] | readys_mask_1[0]}
      & (_GEN_0[2:0] | {_readys_filter_T_3[2], _GEN_0[3:2]}));
  wire        winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  wire        winner_1_2 = readys_readys_1[2] & portsAOI_filtered_2_1_valid;
  reg         state_1_0;
  reg         state_1_1;
  reg         state_1_2;
  wire        muxState_1_0 = beatsLeft_1 ? state_1_0 : winner_1_0;
  wire        muxState_1_1 = beatsLeft_1 ? state_1_1 : winner_1_1;
  wire        muxState_1_2 = beatsLeft_1 ? state_1_2 : winner_1_2;
  assign allowed_1_0 = beatsLeft_1 ? state_1_0 : readys_readys_1[0];
  assign allowed_1_1 = beatsLeft_1 ? state_1_1 : readys_readys_1[1];
  assign allowed_1_2 = beatsLeft_1 ? state_1_2 : readys_readys_1[2];
  wire        out_1_a_valid =
    beatsLeft_1
      ? state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid
        | state_1_2 & portsAOI_filtered_2_1_valid
      : portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid
        | portsAOI_filtered_2_1_valid;
  reg         beatsLeft_2;
  wire [2:0]  readys_valid_2 =
    {portsAOI_filtered_2_2_valid, portsAOI_filtered_1_2_valid, portsAOI_filtered_2_valid};
  reg  [2:0]  readys_mask_2;
  wire [2:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [3:0]  _GEN_1 =
    {_readys_filter_T_5[1:0], portsAOI_filtered_2_2_valid, portsAOI_filtered_1_2_valid}
    | {_readys_filter_T_5, portsAOI_filtered_2_2_valid};
  wire [2:0]  readys_readys_2 =
    ~({readys_mask_2[2],
       _readys_filter_T_5[2] | readys_mask_2[1],
       _GEN_1[3] | readys_mask_2[0]}
      & (_GEN_1[2:0] | {_readys_filter_T_5[2], _GEN_1[3:2]}));
  wire        winner_2_0 = readys_readys_2[0] & portsAOI_filtered_2_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsAOI_filtered_1_2_valid;
  wire        winner_2_2 = readys_readys_2[2] & portsAOI_filtered_2_2_valid;
  reg         state_2_0;
  reg         state_2_1;
  reg         state_2_2;
  wire        muxState_2_0 = beatsLeft_2 ? state_2_0 : winner_2_0;
  wire        muxState_2_1 = beatsLeft_2 ? state_2_1 : winner_2_1;
  wire        muxState_2_2 = beatsLeft_2 ? state_2_2 : winner_2_2;
  assign allowed_2_0 = beatsLeft_2 ? state_2_0 : readys_readys_2[0];
  assign allowed_2_1 = beatsLeft_2 ? state_2_1 : readys_readys_2[1];
  assign allowed_2_2 = beatsLeft_2 ? state_2_2 : readys_readys_2[2];
  wire        out_2_a_valid =
    beatsLeft_2
      ? state_2_0 & portsAOI_filtered_2_valid | state_2_1 & portsAOI_filtered_1_2_valid
        | state_2_2 & portsAOI_filtered_2_2_valid
      : portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid
        | portsAOI_filtered_2_2_valid;
  reg         beatsLeft_3;
  wire [2:0]  readys_valid_3 =
    {portsAOI_filtered_2_3_valid, portsAOI_filtered_1_3_valid, portsAOI_filtered_3_valid};
  reg  [2:0]  readys_mask_3;
  wire [2:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [3:0]  _GEN_2 =
    {_readys_filter_T_7[1:0], portsAOI_filtered_2_3_valid, portsAOI_filtered_1_3_valid}
    | {_readys_filter_T_7, portsAOI_filtered_2_3_valid};
  wire [2:0]  readys_readys_3 =
    ~({readys_mask_3[2],
       _readys_filter_T_7[2] | readys_mask_3[1],
       _GEN_2[3] | readys_mask_3[0]}
      & (_GEN_2[2:0] | {_readys_filter_T_7[2], _GEN_2[3:2]}));
  wire        winner_3_0 = readys_readys_3[0] & portsAOI_filtered_3_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsAOI_filtered_1_3_valid;
  wire        winner_3_2 = readys_readys_3[2] & portsAOI_filtered_2_3_valid;
  reg         state_3_0;
  reg         state_3_1;
  reg         state_3_2;
  wire        muxState_3_0 = beatsLeft_3 ? state_3_0 : winner_3_0;
  wire        muxState_3_1 = beatsLeft_3 ? state_3_1 : winner_3_1;
  wire        muxState_3_2 = beatsLeft_3 ? state_3_2 : winner_3_2;
  assign allowed_3_0 = beatsLeft_3 ? state_3_0 : readys_readys_3[0];
  assign allowed_3_1 = beatsLeft_3 ? state_3_1 : readys_readys_3[1];
  assign allowed_3_2 = beatsLeft_3 ? state_3_2 : readys_readys_3[2];
  wire        out_3_a_valid =
    beatsLeft_3
      ? state_3_0 & portsAOI_filtered_3_valid | state_3_1 & portsAOI_filtered_1_3_valid
        | state_3_2 & portsAOI_filtered_2_3_valid
      : portsAOI_filtered_3_valid | portsAOI_filtered_1_3_valid
        | portsAOI_filtered_2_3_valid;
  reg         beatsLeft_4;
  wire [3:0]  readys_valid_4 =
    {portsBIO_filtered_3_0_valid,
     portsBIO_filtered_2_0_valid,
     portsBIO_filtered_1_0_valid,
     portsBIO_filtered_0_valid};
  reg  [3:0]  readys_mask_4;
  wire [3:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [5:0]  _GEN_3 =
    {_readys_filter_T_9[2:0],
     portsBIO_filtered_3_0_valid,
     portsBIO_filtered_2_0_valid,
     portsBIO_filtered_1_0_valid}
    | {_readys_filter_T_9, portsBIO_filtered_3_0_valid, portsBIO_filtered_2_0_valid};
  wire [4:0]  _GEN_4 = _GEN_3[4:0] | {_readys_filter_T_9[3], _GEN_3[5:2]};
  wire [3:0]  readys_readys_4 =
    ~({readys_mask_4[3],
       _readys_filter_T_9[3] | readys_mask_4[2],
       _GEN_3[5] | readys_mask_4[1],
       _GEN_4[4] | readys_mask_4[0]} & _GEN_4[3:0]);
  wire        winner_4_0 = readys_readys_4[0] & portsBIO_filtered_0_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsBIO_filtered_1_0_valid;
  wire        winner_4_2 = readys_readys_4[2] & portsBIO_filtered_2_0_valid;
  wire        winner_4_3 = readys_readys_4[3] & portsBIO_filtered_3_0_valid;
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  reg         state_4_3;
  wire        muxState_4_0 = beatsLeft_4 ? state_4_0 : winner_4_0;
  wire        muxState_4_1 = beatsLeft_4 ? state_4_1 : winner_4_1;
  wire        muxState_4_2 = beatsLeft_4 ? state_4_2 : winner_4_2;
  wire        muxState_4_3 = beatsLeft_4 ? state_4_3 : winner_4_3;
  assign allowed_4_0 = beatsLeft_4 ? state_4_0 : readys_readys_4[0];
  assign allowed_4_1 = beatsLeft_4 ? state_4_1 : readys_readys_4[1];
  assign allowed_4_2 = beatsLeft_4 ? state_4_2 : readys_readys_4[2];
  assign allowed_4_3 = beatsLeft_4 ? state_4_3 : readys_readys_4[3];
  wire        in_0_b_valid =
    beatsLeft_4
      ? state_4_0 & portsBIO_filtered_0_valid | state_4_1 & portsBIO_filtered_1_0_valid
        | state_4_2 & portsBIO_filtered_2_0_valid | state_4_3
        & portsBIO_filtered_3_0_valid
      : portsBIO_filtered_0_valid | portsBIO_filtered_1_0_valid
        | portsBIO_filtered_2_0_valid | portsBIO_filtered_3_0_valid;
  reg         beatsLeft_5;
  wire [3:0]  readys_valid_5 =
    {portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid,
     portsDIO_filtered_0_valid};
  reg  [3:0]  readys_mask_5;
  wire [3:0]  _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;
  wire [5:0]  _GEN_5 =
    {_readys_filter_T_11[2:0],
     portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid}
    | {_readys_filter_T_11, portsDIO_filtered_3_0_valid, portsDIO_filtered_2_0_valid};
  wire [4:0]  _GEN_6 = _GEN_5[4:0] | {_readys_filter_T_11[3], _GEN_5[5:2]};
  wire [3:0]  readys_readys_5 =
    ~({readys_mask_5[3],
       _readys_filter_T_11[3] | readys_mask_5[2],
       _GEN_5[5] | readys_mask_5[1],
       _GEN_6[4] | readys_mask_5[0]} & _GEN_6[3:0]);
  wire        winner_5_0 = readys_readys_5[0] & portsDIO_filtered_0_valid;
  wire        winner_5_1 = readys_readys_5[1] & portsDIO_filtered_1_0_valid;
  wire        winner_5_2 = readys_readys_5[2] & portsDIO_filtered_2_0_valid;
  wire        winner_5_3 = readys_readys_5[3] & portsDIO_filtered_3_0_valid;
  reg         state_5_0;
  reg         state_5_1;
  reg         state_5_2;
  reg         state_5_3;
  wire        muxState_5_0 = beatsLeft_5 ? state_5_0 : winner_5_0;
  wire        muxState_5_1 = beatsLeft_5 ? state_5_1 : winner_5_1;
  wire        muxState_5_2 = beatsLeft_5 ? state_5_2 : winner_5_2;
  wire        muxState_5_3 = beatsLeft_5 ? state_5_3 : winner_5_3;
  assign allowed_5_0 = beatsLeft_5 ? state_5_0 : readys_readys_5[0];
  assign allowed_5_1 = beatsLeft_5 ? state_5_1 : readys_readys_5[1];
  assign allowed_5_2 = beatsLeft_5 ? state_5_2 : readys_readys_5[2];
  assign allowed_5_3 = beatsLeft_5 ? state_5_3 : readys_readys_5[3];
  wire        in_0_d_valid =
    beatsLeft_5
      ? state_5_0 & portsDIO_filtered_0_valid | state_5_1 & portsDIO_filtered_1_0_valid
        | state_5_2 & portsDIO_filtered_2_0_valid | state_5_3
        & portsDIO_filtered_3_0_valid
      : portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid
        | portsDIO_filtered_2_0_valid | portsDIO_filtered_3_0_valid;
  reg         beatsLeft_6;
  wire [3:0]  readys_valid_6 =
    {portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid,
     portsDIO_filtered_1_valid};
  reg  [3:0]  readys_mask_6;
  wire [3:0]  _readys_filter_T_13 = readys_valid_6 & ~readys_mask_6;
  wire [5:0]  _GEN_7 =
    {_readys_filter_T_13[2:0],
     portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid}
    | {_readys_filter_T_13, portsDIO_filtered_3_1_valid, portsDIO_filtered_2_1_valid};
  wire [4:0]  _GEN_8 = _GEN_7[4:0] | {_readys_filter_T_13[3], _GEN_7[5:2]};
  wire [3:0]  readys_readys_6 =
    ~({readys_mask_6[3],
       _readys_filter_T_13[3] | readys_mask_6[2],
       _GEN_7[5] | readys_mask_6[1],
       _GEN_8[4] | readys_mask_6[0]} & _GEN_8[3:0]);
  wire        winner_6_0 = readys_readys_6[0] & portsDIO_filtered_1_valid;
  wire        winner_6_1 = readys_readys_6[1] & portsDIO_filtered_1_1_valid;
  wire        winner_6_2 = readys_readys_6[2] & portsDIO_filtered_2_1_valid;
  wire        winner_6_3 = readys_readys_6[3] & portsDIO_filtered_3_1_valid;
  reg         state_6_0;
  reg         state_6_1;
  reg         state_6_2;
  reg         state_6_3;
  wire        muxState_6_0 = beatsLeft_6 ? state_6_0 : winner_6_0;
  wire        muxState_6_1 = beatsLeft_6 ? state_6_1 : winner_6_1;
  wire        muxState_6_2 = beatsLeft_6 ? state_6_2 : winner_6_2;
  wire        muxState_6_3 = beatsLeft_6 ? state_6_3 : winner_6_3;
  assign allowed_6_0 = beatsLeft_6 ? state_6_0 : readys_readys_6[0];
  assign allowed_6_1 = beatsLeft_6 ? state_6_1 : readys_readys_6[1];
  assign allowed_6_2 = beatsLeft_6 ? state_6_2 : readys_readys_6[2];
  assign allowed_6_3 = beatsLeft_6 ? state_6_3 : readys_readys_6[3];
  wire        in_1_d_valid =
    beatsLeft_6
      ? state_6_0 & portsDIO_filtered_1_valid | state_6_1 & portsDIO_filtered_1_1_valid
        | state_6_2 & portsDIO_filtered_2_1_valid | state_6_3
        & portsDIO_filtered_3_1_valid
      : portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid
        | portsDIO_filtered_2_1_valid | portsDIO_filtered_3_1_valid;
  reg         beatsLeft_7;
  wire [3:0]  readys_valid_7 =
    {portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid,
     portsDIO_filtered_2_valid};
  reg  [3:0]  readys_mask_7;
  wire [3:0]  _readys_filter_T_15 = readys_valid_7 & ~readys_mask_7;
  wire [5:0]  _GEN_9 =
    {_readys_filter_T_15[2:0],
     portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid}
    | {_readys_filter_T_15, portsDIO_filtered_3_2_valid, portsDIO_filtered_2_2_valid};
  wire [4:0]  _GEN_10 = _GEN_9[4:0] | {_readys_filter_T_15[3], _GEN_9[5:2]};
  wire [3:0]  readys_readys_7 =
    ~({readys_mask_7[3],
       _readys_filter_T_15[3] | readys_mask_7[2],
       _GEN_9[5] | readys_mask_7[1],
       _GEN_10[4] | readys_mask_7[0]} & _GEN_10[3:0]);
  wire        winner_7_0 = readys_readys_7[0] & portsDIO_filtered_2_valid;
  wire        winner_7_1 = readys_readys_7[1] & portsDIO_filtered_1_2_valid;
  wire        winner_7_2 = readys_readys_7[2] & portsDIO_filtered_2_2_valid;
  wire        winner_7_3 = readys_readys_7[3] & portsDIO_filtered_3_2_valid;
  reg         state_7_0;
  reg         state_7_1;
  reg         state_7_2;
  reg         state_7_3;
  wire        muxState_7_0 = beatsLeft_7 ? state_7_0 : winner_7_0;
  wire        muxState_7_1 = beatsLeft_7 ? state_7_1 : winner_7_1;
  wire        muxState_7_2 = beatsLeft_7 ? state_7_2 : winner_7_2;
  wire        muxState_7_3 = beatsLeft_7 ? state_7_3 : winner_7_3;
  assign allowed_7_0 = beatsLeft_7 ? state_7_0 : readys_readys_7[0];
  assign allowed_7_1 = beatsLeft_7 ? state_7_1 : readys_readys_7[1];
  assign allowed_7_2 = beatsLeft_7 ? state_7_2 : readys_readys_7[2];
  assign allowed_7_3 = beatsLeft_7 ? state_7_3 : readys_readys_7[3];
  wire        in_2_d_valid =
    beatsLeft_7
      ? state_7_0 & portsDIO_filtered_2_valid | state_7_1 & portsDIO_filtered_1_2_valid
        | state_7_2 & portsDIO_filtered_2_2_valid | state_7_3
        & portsDIO_filtered_3_2_valid
      : portsDIO_filtered_2_valid | portsDIO_filtered_1_2_valid
        | portsDIO_filtered_2_2_valid | portsDIO_filtered_3_2_valid;
  wire [2:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [2:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[1:0], 1'h0};
  wire [2:0]  _readys_mask_T_8 = readys_readys_1 & readys_valid_1;
  wire [2:0]  _readys_mask_T_11 = _readys_mask_T_8 | {_readys_mask_T_8[1:0], 1'h0};
  wire [2:0]  _readys_mask_T_16 = readys_readys_2 & readys_valid_2;
  wire [2:0]  _readys_mask_T_19 = _readys_mask_T_16 | {_readys_mask_T_16[1:0], 1'h0};
  wire [2:0]  _readys_mask_T_24 = readys_readys_3 & readys_valid_3;
  wire [2:0]  _readys_mask_T_27 = _readys_mask_T_24 | {_readys_mask_T_24[1:0], 1'h0};
  wire [3:0]  _readys_mask_T_32 = readys_readys_4 & readys_valid_4;
  wire [3:0]  _readys_mask_T_35 = _readys_mask_T_32 | {_readys_mask_T_32[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_40 = readys_readys_5 & readys_valid_5;
  wire [3:0]  _readys_mask_T_43 = _readys_mask_T_40 | {_readys_mask_T_40[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_48 = readys_readys_6 & readys_valid_6;
  wire [3:0]  _readys_mask_T_51 = _readys_mask_T_48 | {_readys_mask_T_48[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_56 = readys_readys_7 & readys_valid_7;
  wire [3:0]  _readys_mask_T_59 = _readys_mask_T_56 | {_readys_mask_T_56[2:0], 1'h0};
  wire [12:0] _beatsAI_decode_T = 13'h3F << auto_in_0_a_bits_size;
  wire [12:0] _beatsAI_decode_T_3 = 13'h3F << auto_in_1_a_bits_size;
  wire [12:0] _beatsAI_decode_T_6 = 13'h3F << auto_in_2_a_bits_size;
  wire [12:0] _beatsDO_decode_T = 13'h3F << auto_out_0_d_bits_size;
  wire [12:0] _beatsDO_decode_T_3 = 13'h3F << auto_out_1_d_bits_size;
  wire [12:0] _beatsDO_decode_T_6 = 13'h3F << auto_out_2_d_bits_size;
  wire [12:0] _beatsDO_decode_T_9 = 13'h3F << auto_out_3_d_bits_size;
  wire        latch = ~beatsLeft & auto_out_0_a_ready;
  wire        latch_1 = ~beatsLeft_1 & auto_out_1_a_ready;
  wire        latch_2 = ~beatsLeft_2 & auto_out_2_a_ready;
  wire        latch_3 = ~beatsLeft_3 & auto_out_3_a_ready;
  wire        latch_4 = ~beatsLeft_4 & auto_in_0_b_ready;
  wire        latch_5 = ~beatsLeft_5 & auto_in_0_d_ready;
  wire        latch_6 = ~beatsLeft_6 & auto_in_1_d_ready;
  wire        latch_7 = ~beatsLeft_7 & auto_in_2_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 3'h7;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      beatsLeft_1 <= 1'h0;
      readys_mask_1 <= 3'h7;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      state_1_2 <= 1'h0;
      beatsLeft_2 <= 1'h0;
      readys_mask_2 <= 3'h7;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      state_2_2 <= 1'h0;
      beatsLeft_3 <= 1'h0;
      readys_mask_3 <= 3'h7;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      beatsLeft_4 <= 1'h0;
      readys_mask_4 <= 4'hF;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
      state_4_3 <= 1'h0;
      beatsLeft_5 <= 1'h0;
      readys_mask_5 <= 4'hF;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      state_5_3 <= 1'h0;
      beatsLeft_6 <= 1'h0;
      readys_mask_6 <= 4'hF;
      state_6_0 <= 1'h0;
      state_6_1 <= 1'h0;
      state_6_2 <= 1'h0;
      state_6_3 <= 1'h0;
      beatsLeft_7 <= 1'h0;
      readys_mask_7 <= 4'hF;
      state_7_0 <= 1'h0;
      state_7_1 <= 1'h0;
      state_7_2 <= 1'h0;
      state_7_3 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          winner_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5]) | winner_1
          & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5]) | winner_2
          & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft <= 1'(beatsLeft - (auto_out_0_a_ready & out_0_a_valid));
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[0], 2'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
      end
      if (latch_1)
        beatsLeft_1 <=
          winner_1_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_1_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_1_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_1 <= 1'(beatsLeft_1 - (auto_out_1_a_ready & out_1_a_valid));
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_11 | {_readys_mask_T_11[0], 2'h0};
      if (beatsLeft_1) begin
      end
      else begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
        state_1_2 <= winner_1_2;
      end
      if (latch_2)
        beatsLeft_2 <=
          winner_2_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_2_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_2_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_2 <= 1'(beatsLeft_2 - (auto_out_2_a_ready & out_2_a_valid));
      if (latch_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_19 | {_readys_mask_T_19[0], 2'h0};
      if (beatsLeft_2) begin
      end
      else begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
        state_2_2 <= winner_2_2;
      end
      if (latch_3)
        beatsLeft_3 <=
          winner_3_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_3_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_3_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_3 <= 1'(beatsLeft_3 - (auto_out_3_a_ready & out_3_a_valid));
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_27 | {_readys_mask_T_27[0], 2'h0};
      if (beatsLeft_3) begin
      end
      else begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
      end
      beatsLeft_4 <= ~latch_4 & 1'(beatsLeft_4 - (auto_in_0_b_ready & in_0_b_valid));
      if (latch_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_35 | {_readys_mask_T_35[1:0], 2'h0};
      if (beatsLeft_4) begin
      end
      else begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
        state_4_3 <= winner_4_3;
      end
      if (latch_5)
        beatsLeft_5 <=
          winner_5_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5]) | winner_5_1
          & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5]) | winner_5_2
          & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5]) | winner_5_3
          & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_5 <= 1'(beatsLeft_5 - (auto_in_0_d_ready & in_0_d_valid));
      if (latch_5 & (|readys_valid_5))
        readys_mask_5 <= _readys_mask_T_43 | {_readys_mask_T_43[1:0], 2'h0};
      if (beatsLeft_5) begin
      end
      else begin
        state_5_0 <= winner_5_0;
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
        state_5_3 <= winner_5_3;
      end
      if (latch_6)
        beatsLeft_6 <=
          winner_6_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5]) | winner_6_1
          & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5]) | winner_6_2
          & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5]) | winner_6_3
          & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_6 <= 1'(beatsLeft_6 - (auto_in_1_d_ready & in_1_d_valid));
      if (latch_6 & (|readys_valid_6))
        readys_mask_6 <= _readys_mask_T_51 | {_readys_mask_T_51[1:0], 2'h0};
      if (beatsLeft_6) begin
      end
      else begin
        state_6_0 <= winner_6_0;
        state_6_1 <= winner_6_1;
        state_6_2 <= winner_6_2;
        state_6_3 <= winner_6_3;
      end
      if (latch_7)
        beatsLeft_7 <=
          winner_7_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5]) | winner_7_1
          & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5]) | winner_7_2
          & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5]) | winner_7_3
          & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_7 <= 1'(beatsLeft_7 - (auto_in_2_d_ready & in_2_d_valid));
      if (latch_7 & (|readys_valid_7))
        readys_mask_7 <= _readys_mask_T_59 | {_readys_mask_T_59[1:0], 2'h0};
      if (beatsLeft_7) begin
      end
      else begin
        state_7_0 <= winner_7_0;
        state_7_1 <= winner_7_1;
        state_7_2 <= winner_7_2;
        state_7_3 <= winner_7_3;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        beatsLeft = _RANDOM[1'h0][0];
        readys_mask = _RANDOM[1'h0][3:1];
        state_0 = _RANDOM[1'h0][4];
        state_1 = _RANDOM[1'h0][5];
        state_2 = _RANDOM[1'h0][6];
        beatsLeft_1 = _RANDOM[1'h0][7];
        readys_mask_1 = _RANDOM[1'h0][10:8];
        state_1_0 = _RANDOM[1'h0][11];
        state_1_1 = _RANDOM[1'h0][12];
        state_1_2 = _RANDOM[1'h0][13];
        beatsLeft_2 = _RANDOM[1'h0][14];
        readys_mask_2 = _RANDOM[1'h0][17:15];
        state_2_0 = _RANDOM[1'h0][18];
        state_2_1 = _RANDOM[1'h0][19];
        state_2_2 = _RANDOM[1'h0][20];
        beatsLeft_3 = _RANDOM[1'h0][21];
        readys_mask_3 = _RANDOM[1'h0][24:22];
        state_3_0 = _RANDOM[1'h0][25];
        state_3_1 = _RANDOM[1'h0][26];
        state_3_2 = _RANDOM[1'h0][27];
        beatsLeft_4 = _RANDOM[1'h0][28];
        readys_mask_4 = {_RANDOM[1'h0][31:29], _RANDOM[1'h1][0]};
        state_4_0 = _RANDOM[1'h1][1];
        state_4_1 = _RANDOM[1'h1][2];
        state_4_2 = _RANDOM[1'h1][3];
        state_4_3 = _RANDOM[1'h1][4];
        beatsLeft_5 = _RANDOM[1'h1][5];
        readys_mask_5 = _RANDOM[1'h1][9:6];
        state_5_0 = _RANDOM[1'h1][10];
        state_5_1 = _RANDOM[1'h1][11];
        state_5_2 = _RANDOM[1'h1][12];
        state_5_3 = _RANDOM[1'h1][13];
        beatsLeft_6 = _RANDOM[1'h1][14];
        readys_mask_6 = _RANDOM[1'h1][18:15];
        state_6_0 = _RANDOM[1'h1][19];
        state_6_1 = _RANDOM[1'h1][20];
        state_6_2 = _RANDOM[1'h1][21];
        state_6_3 = _RANDOM[1'h1][22];
        beatsLeft_7 = _RANDOM[1'h1][23];
        readys_mask_7 = _RANDOM[1'h1][27:24];
        state_7_0 = _RANDOM[1'h1][28];
        state_7_1 = _RANDOM[1'h1][29];
        state_7_2 = _RANDOM[1'h1][30];
        state_7_3 = _RANDOM[1'h1][31];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 1'h0;
        readys_mask = 3'h7;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        beatsLeft_1 = 1'h0;
        readys_mask_1 = 3'h7;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        state_1_2 = 1'h0;
        beatsLeft_2 = 1'h0;
        readys_mask_2 = 3'h7;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        state_2_2 = 1'h0;
        beatsLeft_3 = 1'h0;
        readys_mask_3 = 3'h7;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
        state_3_2 = 1'h0;
        beatsLeft_4 = 1'h0;
        readys_mask_4 = 4'hF;
        state_4_0 = 1'h0;
        state_4_1 = 1'h0;
        state_4_2 = 1'h0;
        state_4_3 = 1'h0;
        beatsLeft_5 = 1'h0;
        readys_mask_5 = 4'hF;
        state_5_0 = 1'h0;
        state_5_1 = 1'h0;
        state_5_2 = 1'h0;
        state_5_3 = 1'h0;
        beatsLeft_6 = 1'h0;
        readys_mask_6 = 4'hF;
        state_6_0 = 1'h0;
        state_6_1 = 1'h0;
        state_6_2 = 1'h0;
        state_6_3 = 1'h0;
        beatsLeft_7 = 1'h0;
        readys_mask_7 = 4'hF;
        state_7_0 = 1'h0;
        state_7_1 = 1'h0;
        state_7_2 = 1'h0;
        state_7_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_2_a_ready =
    requestAIO_2_0 & auto_out_0_a_ready & allowed_2 | requestAIO_2_1 & auto_out_1_a_ready
    & allowed_1_2 | requestAIO_2_2 & auto_out_2_a_ready & allowed_2_2
    | (&(auto_in_2_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_3_2;
  assign auto_in_2_d_valid = in_2_d_valid;
  assign auto_in_2_d_bits_opcode =
    (muxState_7_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_7_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_7_2 ? auto_out_2_d_bits_opcode : 4'h0)
    | (muxState_7_3 ? auto_out_3_d_bits_opcode : 4'h0);
  assign auto_in_2_d_bits_param =
    (muxState_7_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_7_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_7_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_7_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_2_d_bits_size =
    (muxState_7_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_7_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_7_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_7_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_2_d_bits_source =
    (muxState_7_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_7_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_7_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_7_3 ? auto_out_3_d_bits_source[2:0] : 3'h0);
  assign auto_in_2_d_bits_sink =
    (muxState_7_0 ? out_0_d_bits_sink : 10'h0)
    | (muxState_7_1 ? out_1_d_bits_sink : 10'h0)
    | (muxState_7_2 ? out_2_d_bits_sink : 10'h0)
    | (muxState_7_3 ? out_3_d_bits_sink : 10'h0);
  assign auto_in_2_d_bits_denied =
    muxState_7_0 & auto_out_0_d_bits_denied | muxState_7_1 & auto_out_1_d_bits_denied
    | muxState_7_2 & auto_out_2_d_bits_denied | muxState_7_3 & auto_out_3_d_bits_denied;
  assign auto_in_2_d_bits_data =
    (muxState_7_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_7_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_7_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_7_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_2_d_bits_corrupt =
    muxState_7_0 & auto_out_0_d_bits_corrupt | muxState_7_1 & auto_out_1_d_bits_corrupt
    | muxState_7_2 & auto_out_2_d_bits_corrupt | muxState_7_3 & auto_out_3_d_bits_corrupt;
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready
    & allowed_1_1 | requestAIO_1_2 & auto_out_2_a_ready & allowed_2_1
    | (&(auto_in_1_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_3_1;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_6_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_6_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_6_2 ? auto_out_2_d_bits_opcode : 4'h0)
    | (muxState_6_3 ? auto_out_3_d_bits_opcode : 4'h0);
  assign auto_in_1_d_bits_param =
    (muxState_6_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_6_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_6_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_6_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_1_d_bits_size =
    (muxState_6_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_6_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_6_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_6_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_1_d_bits_source =
    (muxState_6_0 ? auto_out_0_d_bits_source[3:0] : 4'h0)
    | (muxState_6_1 ? auto_out_1_d_bits_source[3:0] : 4'h0)
    | (muxState_6_2 ? auto_out_2_d_bits_source[3:0] : 4'h0)
    | (muxState_6_3 ? auto_out_3_d_bits_source[3:0] : 4'h0);
  assign auto_in_1_d_bits_sink =
    (muxState_6_0 ? out_0_d_bits_sink : 10'h0)
    | (muxState_6_1 ? out_1_d_bits_sink : 10'h0)
    | (muxState_6_2 ? out_2_d_bits_sink : 10'h0)
    | (muxState_6_3 ? out_3_d_bits_sink : 10'h0);
  assign auto_in_1_d_bits_denied =
    muxState_6_0 & auto_out_0_d_bits_denied | muxState_6_1 & auto_out_1_d_bits_denied
    | muxState_6_2 & auto_out_2_d_bits_denied | muxState_6_3 & auto_out_3_d_bits_denied;
  assign auto_in_1_d_bits_data =
    (muxState_6_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_6_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_6_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_6_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_1_d_bits_corrupt =
    muxState_6_0 & auto_out_0_d_bits_corrupt | muxState_6_1 & auto_out_1_d_bits_corrupt
    | muxState_6_2 & auto_out_2_d_bits_corrupt | muxState_6_3 & auto_out_3_d_bits_corrupt;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready
    & allowed_1_0 | requestAIO_0_2 & auto_out_2_a_ready & allowed_2_0
    | (&(auto_in_0_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_3_0;
  assign auto_in_0_b_valid = in_0_b_valid;
  assign auto_in_0_b_bits_opcode =
    (muxState_4_0 ? auto_out_0_b_bits_opcode : 3'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_opcode : 3'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_opcode : 3'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_opcode : 3'h0);
  assign auto_in_0_b_bits_param =
    (muxState_4_0 ? auto_out_0_b_bits_param : 2'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_param : 2'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_param : 2'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_param : 2'h0);
  assign auto_in_0_b_bits_size =
    (muxState_4_0 ? auto_out_0_b_bits_size : 3'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_size : 3'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_size : 3'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_size : 3'h0);
  assign auto_in_0_b_bits_source =
    (muxState_4_0 ? auto_out_0_b_bits_source[5:0] : 6'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_source[5:0] : 6'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_source[5:0] : 6'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_source[5:0] : 6'h0);
  assign auto_in_0_b_bits_address =
    (muxState_4_0 ? auto_out_0_b_bits_address : 48'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_address : 48'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_address : 48'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_address : 48'h0);
  assign auto_in_0_b_bits_mask =
    (muxState_4_0 ? auto_out_0_b_bits_mask : 32'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_mask : 32'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_mask : 32'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_mask : 32'h0);
  assign auto_in_0_b_bits_data =
    (muxState_4_0 ? auto_out_0_b_bits_data : 256'h0)
    | (muxState_4_1 ? auto_out_1_b_bits_data : 256'h0)
    | (muxState_4_2 ? auto_out_2_b_bits_data : 256'h0)
    | (muxState_4_3 ? auto_out_3_b_bits_data : 256'h0);
  assign auto_in_0_b_bits_corrupt =
    muxState_4_0 & auto_out_0_b_bits_corrupt | muxState_4_1 & auto_out_1_b_bits_corrupt
    | muxState_4_2 & auto_out_2_b_bits_corrupt | muxState_4_3 & auto_out_3_b_bits_corrupt;
  assign auto_in_0_c_ready =
    requestCIO_0_0 & auto_out_0_c_ready | requestCIO_0_1 & auto_out_1_c_ready
    | requestCIO_0_2 & auto_out_2_c_ready | (&(auto_in_0_c_bits_address[7:6]))
    & auto_out_3_c_ready;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_5_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_5_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_5_2 ? auto_out_2_d_bits_opcode : 4'h0)
    | (muxState_5_3 ? auto_out_3_d_bits_opcode : 4'h0);
  assign auto_in_0_d_bits_param =
    (muxState_5_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_5_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_5_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_5_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_0_d_bits_size =
    (muxState_5_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_5_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_5_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_5_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_0_d_bits_source =
    (muxState_5_0 ? auto_out_0_d_bits_source[5:0] : 6'h0)
    | (muxState_5_1 ? auto_out_1_d_bits_source[5:0] : 6'h0)
    | (muxState_5_2 ? auto_out_2_d_bits_source[5:0] : 6'h0)
    | (muxState_5_3 ? auto_out_3_d_bits_source[5:0] : 6'h0);
  assign auto_in_0_d_bits_sink =
    (muxState_5_0 ? out_0_d_bits_sink : 10'h0)
    | (muxState_5_1 ? out_1_d_bits_sink : 10'h0)
    | (muxState_5_2 ? out_2_d_bits_sink : 10'h0)
    | (muxState_5_3 ? out_3_d_bits_sink : 10'h0);
  assign auto_in_0_d_bits_denied =
    muxState_5_0 & auto_out_0_d_bits_denied | muxState_5_1 & auto_out_1_d_bits_denied
    | muxState_5_2 & auto_out_2_d_bits_denied | muxState_5_3 & auto_out_3_d_bits_denied;
  assign auto_in_0_d_bits_echo_isKeyword =
    muxState_5_0 & auto_out_0_d_bits_echo_isKeyword | muxState_5_1
    & auto_out_1_d_bits_echo_isKeyword | muxState_5_2 & auto_out_2_d_bits_echo_isKeyword
    | muxState_5_3 & auto_out_3_d_bits_echo_isKeyword;
  assign auto_in_0_d_bits_data =
    (muxState_5_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_5_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_5_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_5_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_0_d_bits_corrupt =
    muxState_5_0 & auto_out_0_d_bits_corrupt | muxState_5_1 & auto_out_1_d_bits_corrupt
    | muxState_5_2 & auto_out_2_d_bits_corrupt | muxState_5_3 & auto_out_3_d_bits_corrupt;
  assign auto_in_0_e_ready =
    (&(auto_in_0_e_bits_sink[9:8])) & auto_out_0_e_ready | requestEIO_0_1
    & auto_out_1_e_ready | requestEIO_0_2 & auto_out_2_e_ready | requestEIO_0_3
    & auto_out_3_e_ready;
  assign auto_out_3_a_valid = out_3_a_valid;
  assign auto_out_3_a_bits_opcode =
    (muxState_3_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_opcode : 4'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_opcode : 4'h0);
  assign auto_out_3_a_bits_param =
    (muxState_3_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_3_a_bits_size =
    (muxState_3_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_3_a_bits_source =
    (muxState_3_0 ? in_0_a_bits_source : 7'h0)
    | (muxState_3_1 ? in_1_a_bits_source : 7'h0)
    | (muxState_3_2 ? in_2_a_bits_source : 7'h0);
  assign auto_out_3_a_bits_address =
    (muxState_3_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_address : 48'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_address : 48'h0);
  assign auto_out_3_a_bits_user_reqSource =
    (muxState_3_0 ? auto_in_0_a_bits_user_reqSource : 4'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_3_a_bits_user_alias =
    (muxState_3_0 ? auto_in_0_a_bits_user_alias : 2'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_user_alias : 2'h0);
  assign auto_out_3_a_bits_user_vaddr =
    muxState_3_0 ? auto_in_0_a_bits_user_vaddr : 44'h0;
  assign auto_out_3_a_bits_user_needHint =
    muxState_3_0 & auto_in_0_a_bits_user_needHint | muxState_3_1
    & auto_in_1_a_bits_user_needHint;
  assign auto_out_3_a_bits_echo_isKeyword =
    muxState_3_0 & auto_in_0_a_bits_echo_isKeyword;
  assign auto_out_3_a_bits_mask =
    (muxState_3_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_3_a_bits_data =
    (muxState_3_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_3_a_bits_corrupt =
    muxState_3_0 & auto_in_0_a_bits_corrupt | muxState_3_1 & auto_in_1_a_bits_corrupt
    | muxState_3_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_3_b_ready =
    ~(auto_out_3_b_bits_source[6]) & auto_in_0_b_ready & allowed_4_3;
  assign auto_out_3_c_valid = auto_in_0_c_valid & (&(auto_in_0_c_bits_address[7:6]));
  assign auto_out_3_c_bits_opcode = auto_in_0_c_bits_opcode;
  assign auto_out_3_c_bits_param = auto_in_0_c_bits_param;
  assign auto_out_3_c_bits_size = auto_in_0_c_bits_size;
  assign auto_out_3_c_bits_source = in_0_c_bits_source;
  assign auto_out_3_c_bits_address = auto_in_0_c_bits_address;
  assign auto_out_3_c_bits_user_reqSource = auto_in_0_c_bits_user_reqSource;
  assign auto_out_3_c_bits_user_alias = auto_in_0_c_bits_user_alias;
  assign auto_out_3_c_bits_user_vaddr = auto_in_0_c_bits_user_vaddr;
  assign auto_out_3_c_bits_user_needHint = auto_in_0_c_bits_user_needHint;
  assign auto_out_3_c_bits_echo_isKeyword = auto_in_0_c_bits_echo_isKeyword;
  assign auto_out_3_c_bits_data = auto_in_0_c_bits_data;
  assign auto_out_3_c_bits_corrupt = auto_in_0_c_bits_corrupt;
  assign auto_out_3_d_ready =
    ~(auto_out_3_d_bits_source[6]) & auto_in_0_d_ready & allowed_5_3 | requestDOI_3_1
    & auto_in_1_d_ready & allowed_6_3 | requestDOI_3_2 & auto_in_2_d_ready & allowed_7_3;
  assign auto_out_3_e_valid = auto_in_0_e_valid & requestEIO_0_3;
  assign auto_out_3_e_bits_sink = auto_in_0_e_bits_sink[7:0];
  assign auto_out_2_a_valid = out_2_a_valid;
  assign auto_out_2_a_bits_opcode =
    (muxState_2_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_opcode : 4'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_opcode : 4'h0);
  assign auto_out_2_a_bits_param =
    (muxState_2_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_2_a_bits_size =
    (muxState_2_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_2_a_bits_source =
    (muxState_2_0 ? in_0_a_bits_source : 7'h0)
    | (muxState_2_1 ? in_1_a_bits_source : 7'h0)
    | (muxState_2_2 ? in_2_a_bits_source : 7'h0);
  assign auto_out_2_a_bits_address =
    (muxState_2_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_address : 48'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_address : 48'h0);
  assign auto_out_2_a_bits_user_reqSource =
    (muxState_2_0 ? auto_in_0_a_bits_user_reqSource : 4'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_2_a_bits_user_alias =
    (muxState_2_0 ? auto_in_0_a_bits_user_alias : 2'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_user_alias : 2'h0);
  assign auto_out_2_a_bits_user_vaddr =
    muxState_2_0 ? auto_in_0_a_bits_user_vaddr : 44'h0;
  assign auto_out_2_a_bits_user_needHint =
    muxState_2_0 & auto_in_0_a_bits_user_needHint | muxState_2_1
    & auto_in_1_a_bits_user_needHint;
  assign auto_out_2_a_bits_echo_isKeyword =
    muxState_2_0 & auto_in_0_a_bits_echo_isKeyword;
  assign auto_out_2_a_bits_mask =
    (muxState_2_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_2_a_bits_data =
    (muxState_2_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_2_a_bits_corrupt =
    muxState_2_0 & auto_in_0_a_bits_corrupt | muxState_2_1 & auto_in_1_a_bits_corrupt
    | muxState_2_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_2_b_ready =
    ~(auto_out_2_b_bits_source[6]) & auto_in_0_b_ready & allowed_4_2;
  assign auto_out_2_c_valid = auto_in_0_c_valid & requestCIO_0_2;
  assign auto_out_2_c_bits_opcode = auto_in_0_c_bits_opcode;
  assign auto_out_2_c_bits_param = auto_in_0_c_bits_param;
  assign auto_out_2_c_bits_size = auto_in_0_c_bits_size;
  assign auto_out_2_c_bits_source = in_0_c_bits_source;
  assign auto_out_2_c_bits_address = auto_in_0_c_bits_address;
  assign auto_out_2_c_bits_user_reqSource = auto_in_0_c_bits_user_reqSource;
  assign auto_out_2_c_bits_user_alias = auto_in_0_c_bits_user_alias;
  assign auto_out_2_c_bits_user_vaddr = auto_in_0_c_bits_user_vaddr;
  assign auto_out_2_c_bits_user_needHint = auto_in_0_c_bits_user_needHint;
  assign auto_out_2_c_bits_echo_isKeyword = auto_in_0_c_bits_echo_isKeyword;
  assign auto_out_2_c_bits_data = auto_in_0_c_bits_data;
  assign auto_out_2_c_bits_corrupt = auto_in_0_c_bits_corrupt;
  assign auto_out_2_d_ready =
    ~(auto_out_2_d_bits_source[6]) & auto_in_0_d_ready & allowed_5_2 | requestDOI_2_1
    & auto_in_1_d_ready & allowed_6_2 | requestDOI_2_2 & auto_in_2_d_ready & allowed_7_2;
  assign auto_out_2_e_valid = auto_in_0_e_valid & requestEIO_0_2;
  assign auto_out_2_e_bits_sink = auto_in_0_e_bits_sink[7:0];
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_opcode : 4'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_opcode : 4'h0);
  assign auto_out_1_a_bits_param =
    (muxState_1_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_1_a_bits_size =
    (muxState_1_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_1_a_bits_source =
    (muxState_1_0 ? in_0_a_bits_source : 7'h0)
    | (muxState_1_1 ? in_1_a_bits_source : 7'h0)
    | (muxState_1_2 ? in_2_a_bits_source : 7'h0);
  assign auto_out_1_a_bits_address =
    (muxState_1_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_address : 48'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_address : 48'h0);
  assign auto_out_1_a_bits_user_reqSource =
    (muxState_1_0 ? auto_in_0_a_bits_user_reqSource : 4'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_1_a_bits_user_alias =
    (muxState_1_0 ? auto_in_0_a_bits_user_alias : 2'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_user_alias : 2'h0);
  assign auto_out_1_a_bits_user_vaddr =
    muxState_1_0 ? auto_in_0_a_bits_user_vaddr : 44'h0;
  assign auto_out_1_a_bits_user_needHint =
    muxState_1_0 & auto_in_0_a_bits_user_needHint | muxState_1_1
    & auto_in_1_a_bits_user_needHint;
  assign auto_out_1_a_bits_echo_isKeyword =
    muxState_1_0 & auto_in_0_a_bits_echo_isKeyword;
  assign auto_out_1_a_bits_mask =
    (muxState_1_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_1_a_bits_data =
    (muxState_1_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_1_a_bits_corrupt =
    muxState_1_0 & auto_in_0_a_bits_corrupt | muxState_1_1 & auto_in_1_a_bits_corrupt
    | muxState_1_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_1_b_ready =
    ~(auto_out_1_b_bits_source[6]) & auto_in_0_b_ready & allowed_4_1;
  assign auto_out_1_c_valid = auto_in_0_c_valid & requestCIO_0_1;
  assign auto_out_1_c_bits_opcode = auto_in_0_c_bits_opcode;
  assign auto_out_1_c_bits_param = auto_in_0_c_bits_param;
  assign auto_out_1_c_bits_size = auto_in_0_c_bits_size;
  assign auto_out_1_c_bits_source = in_0_c_bits_source;
  assign auto_out_1_c_bits_address = auto_in_0_c_bits_address;
  assign auto_out_1_c_bits_user_reqSource = auto_in_0_c_bits_user_reqSource;
  assign auto_out_1_c_bits_user_alias = auto_in_0_c_bits_user_alias;
  assign auto_out_1_c_bits_user_vaddr = auto_in_0_c_bits_user_vaddr;
  assign auto_out_1_c_bits_user_needHint = auto_in_0_c_bits_user_needHint;
  assign auto_out_1_c_bits_echo_isKeyword = auto_in_0_c_bits_echo_isKeyword;
  assign auto_out_1_c_bits_data = auto_in_0_c_bits_data;
  assign auto_out_1_c_bits_corrupt = auto_in_0_c_bits_corrupt;
  assign auto_out_1_d_ready =
    ~(auto_out_1_d_bits_source[6]) & auto_in_0_d_ready & allowed_5_1 | requestDOI_1_1
    & auto_in_1_d_ready & allowed_6_1 | requestDOI_1_2 & auto_in_2_d_ready & allowed_7_1;
  assign auto_out_1_e_valid = auto_in_0_e_valid & requestEIO_0_1;
  assign auto_out_1_e_bits_sink = auto_in_0_e_bits_sink[7:0];
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 4'h0)
    | (muxState_2 ? auto_in_2_a_bits_opcode : 4'h0);
  assign auto_out_0_a_bits_param =
    (muxState_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? in_0_a_bits_source : 7'h0) | (muxState_1 ? in_1_a_bits_source : 7'h0)
    | (muxState_2 ? in_2_a_bits_source : 7'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 48'h0)
    | (muxState_2 ? auto_in_2_a_bits_address : 48'h0);
  assign auto_out_0_a_bits_user_reqSource =
    (muxState_0 ? auto_in_0_a_bits_user_reqSource : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_0_a_bits_user_alias =
    (muxState_0 ? auto_in_0_a_bits_user_alias : 2'h0)
    | (muxState_1 ? auto_in_1_a_bits_user_alias : 2'h0);
  assign auto_out_0_a_bits_user_vaddr = muxState_0 ? auto_in_0_a_bits_user_vaddr : 44'h0;
  assign auto_out_0_a_bits_user_needHint =
    muxState_0 & auto_in_0_a_bits_user_needHint | muxState_1
    & auto_in_1_a_bits_user_needHint;
  assign auto_out_0_a_bits_echo_isKeyword = muxState_0 & auto_in_0_a_bits_echo_isKeyword;
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_0_a_bits_corrupt =
    muxState_0 & auto_in_0_a_bits_corrupt | muxState_1 & auto_in_1_a_bits_corrupt
    | muxState_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_0_b_ready =
    ~(auto_out_0_b_bits_source[6]) & auto_in_0_b_ready & allowed_4_0;
  assign auto_out_0_c_valid = auto_in_0_c_valid & requestCIO_0_0;
  assign auto_out_0_c_bits_opcode = auto_in_0_c_bits_opcode;
  assign auto_out_0_c_bits_param = auto_in_0_c_bits_param;
  assign auto_out_0_c_bits_size = auto_in_0_c_bits_size;
  assign auto_out_0_c_bits_source = in_0_c_bits_source;
  assign auto_out_0_c_bits_address = auto_in_0_c_bits_address;
  assign auto_out_0_c_bits_user_reqSource = auto_in_0_c_bits_user_reqSource;
  assign auto_out_0_c_bits_user_alias = auto_in_0_c_bits_user_alias;
  assign auto_out_0_c_bits_user_vaddr = auto_in_0_c_bits_user_vaddr;
  assign auto_out_0_c_bits_user_needHint = auto_in_0_c_bits_user_needHint;
  assign auto_out_0_c_bits_echo_isKeyword = auto_in_0_c_bits_echo_isKeyword;
  assign auto_out_0_c_bits_data = auto_in_0_c_bits_data;
  assign auto_out_0_c_bits_corrupt = auto_in_0_c_bits_corrupt;
  assign auto_out_0_d_ready =
    ~(auto_out_0_d_bits_source[6]) & auto_in_0_d_ready & allowed_5_0 | requestDOI_0_1
    & auto_in_1_d_ready & allowed_6_0 | requestDOI_0_2 & auto_in_2_d_ready & allowed_7_0;
  assign auto_out_0_e_valid = auto_in_0_e_valid & (&(auto_in_0_e_bits_sink[9:8]));
  assign auto_out_0_e_bits_sink = auto_in_0_e_bits_sink[7:0];
endmodule

