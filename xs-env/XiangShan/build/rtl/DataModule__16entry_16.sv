// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DataModule__16entry_16(
  input         clock,
  input  [3:0]  io_raddr_0,
  output [55:0] io_rdata_0_gpaddr,
  output        io_rdata_0_isForVSnonLeafPTE,
  input         io_wen_0,
  input  [3:0]  io_waddr_0,
  input  [55:0] io_wdata_0_gpaddr,
  input         io_wdata_0_isForVSnonLeafPTE
);

  reg  [55:0] data_0_gpaddr;
  reg         data_0_isForVSnonLeafPTE;
  reg  [55:0] data_1_gpaddr;
  reg         data_1_isForVSnonLeafPTE;
  reg  [55:0] data_2_gpaddr;
  reg         data_2_isForVSnonLeafPTE;
  reg  [55:0] data_3_gpaddr;
  reg         data_3_isForVSnonLeafPTE;
  reg  [55:0] data_4_gpaddr;
  reg         data_4_isForVSnonLeafPTE;
  reg  [55:0] data_5_gpaddr;
  reg         data_5_isForVSnonLeafPTE;
  reg  [55:0] data_6_gpaddr;
  reg         data_6_isForVSnonLeafPTE;
  reg  [55:0] data_7_gpaddr;
  reg         data_7_isForVSnonLeafPTE;
  reg  [55:0] data_8_gpaddr;
  reg         data_8_isForVSnonLeafPTE;
  reg  [55:0] data_9_gpaddr;
  reg         data_9_isForVSnonLeafPTE;
  reg  [55:0] data_10_gpaddr;
  reg         data_10_isForVSnonLeafPTE;
  reg  [55:0] data_11_gpaddr;
  reg         data_11_isForVSnonLeafPTE;
  reg  [55:0] data_12_gpaddr;
  reg         data_12_isForVSnonLeafPTE;
  reg  [55:0] data_13_gpaddr;
  reg         data_13_isForVSnonLeafPTE;
  reg  [55:0] data_14_gpaddr;
  reg         data_14_isForVSnonLeafPTE;
  reg  [55:0] data_15_gpaddr;
  reg         data_15_isForVSnonLeafPTE;
  wire        read_by_0 = io_wen_0 & io_waddr_0 == io_raddr_0;
  wire        _io_rdata_0_T = io_raddr_0 == 4'h0;
  wire        _io_rdata_0_T_1 = io_raddr_0 == 4'h1;
  wire        _io_rdata_0_T_2 = io_raddr_0 == 4'h2;
  wire        _io_rdata_0_T_3 = io_raddr_0 == 4'h3;
  wire        _io_rdata_0_T_4 = io_raddr_0 == 4'h4;
  wire        _io_rdata_0_T_5 = io_raddr_0 == 4'h5;
  wire        _io_rdata_0_T_6 = io_raddr_0 == 4'h6;
  wire        _io_rdata_0_T_7 = io_raddr_0 == 4'h7;
  wire        _io_rdata_0_T_8 = io_raddr_0 == 4'h8;
  wire        _io_rdata_0_T_9 = io_raddr_0 == 4'h9;
  wire        _io_rdata_0_T_10 = io_raddr_0 == 4'hA;
  wire        _io_rdata_0_T_11 = io_raddr_0 == 4'hB;
  wire        _io_rdata_0_T_12 = io_raddr_0 == 4'hC;
  wire        _io_rdata_0_T_13 = io_raddr_0 == 4'hD;
  wire        _io_rdata_0_T_14 = io_raddr_0 == 4'hE;
  always @(posedge clock) begin
    if (io_wen_0 & io_waddr_0 == 4'h0) begin
      data_0_gpaddr <= io_wdata_0_gpaddr;
      data_0_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h1) begin
      data_1_gpaddr <= io_wdata_0_gpaddr;
      data_1_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h2) begin
      data_2_gpaddr <= io_wdata_0_gpaddr;
      data_2_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h3) begin
      data_3_gpaddr <= io_wdata_0_gpaddr;
      data_3_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h4) begin
      data_4_gpaddr <= io_wdata_0_gpaddr;
      data_4_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h5) begin
      data_5_gpaddr <= io_wdata_0_gpaddr;
      data_5_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h6) begin
      data_6_gpaddr <= io_wdata_0_gpaddr;
      data_6_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h7) begin
      data_7_gpaddr <= io_wdata_0_gpaddr;
      data_7_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h8) begin
      data_8_gpaddr <= io_wdata_0_gpaddr;
      data_8_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'h9) begin
      data_9_gpaddr <= io_wdata_0_gpaddr;
      data_9_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'hA) begin
      data_10_gpaddr <= io_wdata_0_gpaddr;
      data_10_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'hB) begin
      data_11_gpaddr <= io_wdata_0_gpaddr;
      data_11_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'hC) begin
      data_12_gpaddr <= io_wdata_0_gpaddr;
      data_12_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'hD) begin
      data_13_gpaddr <= io_wdata_0_gpaddr;
      data_13_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & io_waddr_0 == 4'hE) begin
      data_14_gpaddr <= io_wdata_0_gpaddr;
      data_14_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
    if (io_wen_0 & (&io_waddr_0)) begin
      data_15_gpaddr <= io_wdata_0_gpaddr;
      data_15_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:28];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1D; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        data_0_gpaddr = {_RANDOM[5'h0], _RANDOM[5'h1][23:0]};
        data_0_isForVSnonLeafPTE = _RANDOM[5'h1][24];
        data_1_gpaddr = {_RANDOM[5'h1][31:25], _RANDOM[5'h2], _RANDOM[5'h3][16:0]};
        data_1_isForVSnonLeafPTE = _RANDOM[5'h3][17];
        data_2_gpaddr = {_RANDOM[5'h3][31:18], _RANDOM[5'h4], _RANDOM[5'h5][9:0]};
        data_2_isForVSnonLeafPTE = _RANDOM[5'h5][10];
        data_3_gpaddr = {_RANDOM[5'h5][31:11], _RANDOM[5'h6], _RANDOM[5'h7][2:0]};
        data_3_isForVSnonLeafPTE = _RANDOM[5'h7][3];
        data_4_gpaddr = {_RANDOM[5'h7][31:4], _RANDOM[5'h8][27:0]};
        data_4_isForVSnonLeafPTE = _RANDOM[5'h8][28];
        data_5_gpaddr = {_RANDOM[5'h8][31:29], _RANDOM[5'h9], _RANDOM[5'hA][20:0]};
        data_5_isForVSnonLeafPTE = _RANDOM[5'hA][21];
        data_6_gpaddr = {_RANDOM[5'hA][31:22], _RANDOM[5'hB], _RANDOM[5'hC][13:0]};
        data_6_isForVSnonLeafPTE = _RANDOM[5'hC][14];
        data_7_gpaddr = {_RANDOM[5'hC][31:15], _RANDOM[5'hD], _RANDOM[5'hE][6:0]};
        data_7_isForVSnonLeafPTE = _RANDOM[5'hE][7];
        data_8_gpaddr = {_RANDOM[5'hE][31:8], _RANDOM[5'hF]};
        data_8_isForVSnonLeafPTE = _RANDOM[5'h10][0];
        data_9_gpaddr = {_RANDOM[5'h10][31:1], _RANDOM[5'h11][24:0]};
        data_9_isForVSnonLeafPTE = _RANDOM[5'h11][25];
        data_10_gpaddr = {_RANDOM[5'h11][31:26], _RANDOM[5'h12], _RANDOM[5'h13][17:0]};
        data_10_isForVSnonLeafPTE = _RANDOM[5'h13][18];
        data_11_gpaddr = {_RANDOM[5'h13][31:19], _RANDOM[5'h14], _RANDOM[5'h15][10:0]};
        data_11_isForVSnonLeafPTE = _RANDOM[5'h15][11];
        data_12_gpaddr = {_RANDOM[5'h15][31:12], _RANDOM[5'h16], _RANDOM[5'h17][3:0]};
        data_12_isForVSnonLeafPTE = _RANDOM[5'h17][4];
        data_13_gpaddr = {_RANDOM[5'h17][31:5], _RANDOM[5'h18][28:0]};
        data_13_isForVSnonLeafPTE = _RANDOM[5'h18][29];
        data_14_gpaddr = {_RANDOM[5'h18][31:30], _RANDOM[5'h19], _RANDOM[5'h1A][21:0]};
        data_14_isForVSnonLeafPTE = _RANDOM[5'h1A][22];
        data_15_gpaddr = {_RANDOM[5'h1A][31:23], _RANDOM[5'h1B], _RANDOM[5'h1C][14:0]};
        data_15_isForVSnonLeafPTE = _RANDOM[5'h1C][15];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata_0_gpaddr =
    read_by_0
      ? io_wdata_0_gpaddr
      : (_io_rdata_0_T ? data_0_gpaddr : 56'h0)
        | (_io_rdata_0_T_1 ? data_1_gpaddr : 56'h0)
        | (_io_rdata_0_T_2 ? data_2_gpaddr : 56'h0)
        | (_io_rdata_0_T_3 ? data_3_gpaddr : 56'h0)
        | (_io_rdata_0_T_4 ? data_4_gpaddr : 56'h0)
        | (_io_rdata_0_T_5 ? data_5_gpaddr : 56'h0)
        | (_io_rdata_0_T_6 ? data_6_gpaddr : 56'h0)
        | (_io_rdata_0_T_7 ? data_7_gpaddr : 56'h0)
        | (_io_rdata_0_T_8 ? data_8_gpaddr : 56'h0)
        | (_io_rdata_0_T_9 ? data_9_gpaddr : 56'h0)
        | (_io_rdata_0_T_10 ? data_10_gpaddr : 56'h0)
        | (_io_rdata_0_T_11 ? data_11_gpaddr : 56'h0)
        | (_io_rdata_0_T_12 ? data_12_gpaddr : 56'h0)
        | (_io_rdata_0_T_13 ? data_13_gpaddr : 56'h0)
        | (_io_rdata_0_T_14 ? data_14_gpaddr : 56'h0)
        | ((&io_raddr_0) ? data_15_gpaddr : 56'h0);
  assign io_rdata_0_isForVSnonLeafPTE =
    read_by_0
      ? io_wdata_0_isForVSnonLeafPTE
      : _io_rdata_0_T & data_0_isForVSnonLeafPTE | _io_rdata_0_T_1
        & data_1_isForVSnonLeafPTE | _io_rdata_0_T_2 & data_2_isForVSnonLeafPTE
        | _io_rdata_0_T_3 & data_3_isForVSnonLeafPTE | _io_rdata_0_T_4
        & data_4_isForVSnonLeafPTE | _io_rdata_0_T_5 & data_5_isForVSnonLeafPTE
        | _io_rdata_0_T_6 & data_6_isForVSnonLeafPTE | _io_rdata_0_T_7
        & data_7_isForVSnonLeafPTE | _io_rdata_0_T_8 & data_8_isForVSnonLeafPTE
        | _io_rdata_0_T_9 & data_9_isForVSnonLeafPTE | _io_rdata_0_T_10
        & data_10_isForVSnonLeafPTE | _io_rdata_0_T_11 & data_11_isForVSnonLeafPTE
        | _io_rdata_0_T_12 & data_12_isForVSnonLeafPTE | _io_rdata_0_T_13
        & data_13_isForVSnonLeafPTE | _io_rdata_0_T_14 & data_14_isForVSnonLeafPTE
        | (&io_raddr_0) & data_15_isForVSnonLeafPTE;
endmodule

