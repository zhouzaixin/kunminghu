// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AgeDetector_19(
  input        clock,
  input        reset,
  input  [5:0] io_enq_0,
  input  [5:0] io_enq_1,
  input  [5:0] io_canIssue_0,
  output [5:0] io_out_0
);

  reg        age_0_1;
  reg        age_0_2;
  reg        age_0_3;
  reg        age_0_4;
  reg        age_0_5;
  reg        age_1_2;
  reg        age_1_3;
  reg        age_1_4;
  reg        age_1_5;
  reg        age_2_3;
  reg        age_2_4;
  reg        age_2_5;
  reg        age_3_4;
  reg        age_3_5;
  reg        age_4_5;
  wire [5:0] _io_out_0_T_46 = ~io_canIssue_0;
  wire [5:0] _io_out_0_T_9 =
    {age_1_5, age_1_4, age_1_3, age_1_2, 1'h1, ~age_0_1} | _io_out_0_T_46;
  wire [5:0] _io_out_0_T_17 =
    {age_2_5, age_2_4, age_2_3, 1'h1, ~age_1_2, ~age_0_2} | _io_out_0_T_46;
  wire [5:0] _io_out_0_T_26 =
    {age_3_5, age_3_4, 1'h1, ~age_2_3, ~age_1_3, ~age_0_3} | _io_out_0_T_46;
  wire [5:0] _io_out_0_T_36 =
    {age_4_5, 1'h1, ~age_3_4, ~age_2_4, ~age_1_4, ~age_0_4} | _io_out_0_T_46;
  wire [1:0] _GEN = {io_enq_1[0], io_enq_0[0]};
  wire [1:0] _GEN_0 = {io_enq_1[1], io_enq_0[1]};
  wire       _GEN_1 = _GEN == 2'h0;
  wire [1:0] _GEN_2 = {io_enq_1[2], io_enq_0[2]};
  wire [1:0] _GEN_3 = {io_enq_1[3], io_enq_0[3]};
  wire [1:0] _GEN_4 = {io_enq_1[4], io_enq_0[4]};
  wire [1:0] _GEN_5 = {io_enq_1[5], io_enq_0[5]};
  wire       _GEN_6 = _GEN_0 == 2'h0;
  wire       _GEN_7 = _GEN_2 == 2'h0;
  wire       _GEN_8 = _GEN_3 == 2'h0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      age_0_1 <= 1'h0;
      age_0_2 <= 1'h0;
      age_0_3 <= 1'h0;
      age_0_4 <= 1'h0;
      age_0_5 <= 1'h0;
      age_1_2 <= 1'h0;
      age_1_3 <= 1'h0;
      age_1_4 <= 1'h0;
      age_1_5 <= 1'h0;
      age_2_3 <= 1'h0;
      age_2_4 <= 1'h0;
      age_2_5 <= 1'h0;
      age_3_4 <= 1'h0;
      age_3_5 <= 1'h0;
      age_4_5 <= 1'h0;
    end
    else begin
      if ((|{io_enq_1[0], io_enq_0[0]}) | (|{io_enq_1[1], io_enq_0[1]})) begin
        if ((|_GEN) & (|_GEN_0))
          age_0_1 <= ~(io_enq_1[0] & io_enq_0[1]);
        else
          age_0_1 <= _GEN_1 & ((|_GEN_0) | age_0_1);
      end
      if ((|{io_enq_1[0], io_enq_0[0]}) | (|{io_enq_1[2], io_enq_0[2]})) begin
        if ((|_GEN) & (|_GEN_2))
          age_0_2 <= ~(io_enq_1[0] & io_enq_0[2]);
        else
          age_0_2 <= _GEN_1 & ((|_GEN_2) | age_0_2);
      end
      if ((|{io_enq_1[0], io_enq_0[0]}) | (|{io_enq_1[3], io_enq_0[3]})) begin
        if ((|_GEN) & (|_GEN_3))
          age_0_3 <= ~(io_enq_1[0] & io_enq_0[3]);
        else
          age_0_3 <= _GEN_1 & ((|_GEN_3) | age_0_3);
      end
      if ((|{io_enq_1[0], io_enq_0[0]}) | (|{io_enq_1[4], io_enq_0[4]})) begin
        if ((|_GEN) & (|_GEN_4))
          age_0_4 <= ~(io_enq_1[0] & io_enq_0[4]);
        else
          age_0_4 <= _GEN_1 & ((|_GEN_4) | age_0_4);
      end
      if ((|{io_enq_1[0], io_enq_0[0]}) | (|{io_enq_1[5], io_enq_0[5]})) begin
        if ((|_GEN) & (|_GEN_5))
          age_0_5 <= ~(io_enq_1[0] & io_enq_0[5]);
        else
          age_0_5 <= _GEN_1 & ((|_GEN_5) | age_0_5);
      end
      if ((|{io_enq_1[1], io_enq_0[1]}) | (|{io_enq_1[2], io_enq_0[2]})) begin
        if ((|_GEN_0) & (|_GEN_2))
          age_1_2 <= ~(io_enq_1[1] & io_enq_0[2]);
        else
          age_1_2 <= _GEN_6 & ((|_GEN_2) | age_1_2);
      end
      if ((|{io_enq_1[1], io_enq_0[1]}) | (|{io_enq_1[3], io_enq_0[3]})) begin
        if ((|_GEN_0) & (|_GEN_3))
          age_1_3 <= ~(io_enq_1[1] & io_enq_0[3]);
        else
          age_1_3 <= _GEN_6 & ((|_GEN_3) | age_1_3);
      end
      if ((|{io_enq_1[1], io_enq_0[1]}) | (|{io_enq_1[4], io_enq_0[4]})) begin
        if ((|_GEN_0) & (|_GEN_4))
          age_1_4 <= ~(io_enq_1[1] & io_enq_0[4]);
        else
          age_1_4 <= _GEN_6 & ((|_GEN_4) | age_1_4);
      end
      if ((|{io_enq_1[1], io_enq_0[1]}) | (|{io_enq_1[5], io_enq_0[5]})) begin
        if ((|_GEN_0) & (|_GEN_5))
          age_1_5 <= ~(io_enq_1[1] & io_enq_0[5]);
        else
          age_1_5 <= _GEN_6 & ((|_GEN_5) | age_1_5);
      end
      if ((|{io_enq_1[2], io_enq_0[2]}) | (|{io_enq_1[3], io_enq_0[3]})) begin
        if ((|_GEN_2) & (|_GEN_3))
          age_2_3 <= ~(io_enq_1[2] & io_enq_0[3]);
        else
          age_2_3 <= _GEN_7 & ((|_GEN_3) | age_2_3);
      end
      if ((|{io_enq_1[2], io_enq_0[2]}) | (|{io_enq_1[4], io_enq_0[4]})) begin
        if ((|_GEN_2) & (|_GEN_4))
          age_2_4 <= ~(io_enq_1[2] & io_enq_0[4]);
        else
          age_2_4 <= _GEN_7 & ((|_GEN_4) | age_2_4);
      end
      if ((|{io_enq_1[2], io_enq_0[2]}) | (|{io_enq_1[5], io_enq_0[5]})) begin
        if ((|_GEN_2) & (|_GEN_5))
          age_2_5 <= ~(io_enq_1[2] & io_enq_0[5]);
        else
          age_2_5 <= _GEN_7 & ((|_GEN_5) | age_2_5);
      end
      if ((|{io_enq_1[3], io_enq_0[3]}) | (|{io_enq_1[4], io_enq_0[4]})) begin
        if ((|_GEN_3) & (|_GEN_4))
          age_3_4 <= ~(io_enq_1[3] & io_enq_0[4]);
        else
          age_3_4 <= _GEN_8 & ((|_GEN_4) | age_3_4);
      end
      if ((|{io_enq_1[3], io_enq_0[3]}) | (|{io_enq_1[5], io_enq_0[5]})) begin
        if ((|_GEN_3) & (|_GEN_5))
          age_3_5 <= ~(io_enq_1[3] & io_enq_0[5]);
        else
          age_3_5 <= _GEN_8 & ((|_GEN_5) | age_3_5);
      end
      if ((|{io_enq_1[4], io_enq_0[4]}) | (|{io_enq_1[5], io_enq_0[5]})) begin
        if ((|_GEN_4) & (|_GEN_5))
          age_4_5 <= ~(io_enq_1[4] & io_enq_0[5]);
        else
          age_4_5 <= _GEN_4 == 2'h0 & ((|_GEN_5) | age_4_5);
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        age_0_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        age_0_2 = _RANDOM[/*Zero width*/ 1'b0][2];
        age_0_3 = _RANDOM[/*Zero width*/ 1'b0][3];
        age_0_4 = _RANDOM[/*Zero width*/ 1'b0][4];
        age_0_5 = _RANDOM[/*Zero width*/ 1'b0][5];
        age_1_2 = _RANDOM[/*Zero width*/ 1'b0][8];
        age_1_3 = _RANDOM[/*Zero width*/ 1'b0][9];
        age_1_4 = _RANDOM[/*Zero width*/ 1'b0][10];
        age_1_5 = _RANDOM[/*Zero width*/ 1'b0][11];
        age_2_3 = _RANDOM[/*Zero width*/ 1'b0][15];
        age_2_4 = _RANDOM[/*Zero width*/ 1'b0][16];
        age_2_5 = _RANDOM[/*Zero width*/ 1'b0][17];
        age_3_4 = _RANDOM[/*Zero width*/ 1'b0][22];
        age_3_5 = _RANDOM[/*Zero width*/ 1'b0][23];
        age_4_5 = _RANDOM[/*Zero width*/ 1'b0][29];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        age_0_1 = 1'h0;
        age_0_2 = 1'h0;
        age_0_3 = 1'h0;
        age_0_4 = 1'h0;
        age_0_5 = 1'h0;
        age_1_2 = 1'h0;
        age_1_3 = 1'h0;
        age_1_4 = 1'h0;
        age_1_5 = 1'h0;
        age_2_3 = 1'h0;
        age_2_4 = 1'h0;
        age_2_5 = 1'h0;
        age_3_4 = 1'h0;
        age_3_5 = 1'h0;
        age_4_5 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_0 =
    {(&({~age_4_5, ~age_3_5, ~age_2_5, ~age_1_5, ~age_0_5} | _io_out_0_T_46[4:0]))
       & io_canIssue_0[5],
     (&{_io_out_0_T_36[5], _io_out_0_T_36[3:0]}) & io_canIssue_0[4],
     (&{_io_out_0_T_26[5:4], _io_out_0_T_26[2:0]}) & io_canIssue_0[3],
     (&{_io_out_0_T_17[5:3], _io_out_0_T_17[1:0]}) & io_canIssue_0[2],
     (&{_io_out_0_T_9[5:2], _io_out_0_T_9[0]}) & io_canIssue_0[1],
     (&({age_0_5, age_0_4, age_0_3, age_0_2, age_0_1} | _io_out_0_T_46[5:1]))
       & io_canIssue_0[0]};
endmodule

