// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module InstrUncache(
  input         clock,
  input         reset,
  input         auto_client_out_a_ready,
  output        auto_client_out_a_valid,
  output [47:0] auto_client_out_a_bits_address,
  output        auto_client_out_d_ready,
  input         auto_client_out_d_valid,
  input         auto_client_out_d_bits_source,
  input  [63:0] auto_client_out_d_bits_data,
  output        io_req_ready,
  input         io_req_valid,
  input  [47:0] io_req_bits_addr,
  output        io_resp_valid,
  output [31:0] io_resp_bits_data
);

  wire        _entries_0_io_resp_valid;
  wire [31:0] _entries_0_io_resp_bits_data;
  wire        _entries_0_io_mmio_grant_ready;
  Arbiter1_InsUncacheResp resp_arb (
    .io_in_0_valid     (_entries_0_io_resp_valid),
    .io_in_0_bits_data (_entries_0_io_resp_bits_data),
    .io_out_valid      (io_resp_valid),
    .io_out_bits_data  (io_resp_bits_data)
  );
  InstrMMIOEntry entries_0 (
    .clock                        (clock),
    .reset                        (reset),
    .io_req_ready                 (io_req_ready),
    .io_req_valid                 (io_req_valid),
    .io_req_bits_addr             (io_req_bits_addr),
    .io_resp_valid                (_entries_0_io_resp_valid),
    .io_resp_bits_data            (_entries_0_io_resp_bits_data),
    .io_mmio_acquire_ready        (auto_client_out_a_ready),
    .io_mmio_acquire_valid        (auto_client_out_a_valid),
    .io_mmio_acquire_bits_address (auto_client_out_a_bits_address),
    .io_mmio_grant_ready          (_entries_0_io_mmio_grant_ready),
    .io_mmio_grant_valid
      (~auto_client_out_d_bits_source & auto_client_out_d_valid),
    .io_mmio_grant_bits_data      (auto_client_out_d_bits_data)
  );
  assign auto_client_out_d_ready =
    ~auto_client_out_d_bits_source & _entries_0_io_mmio_grant_ready;
endmodule

