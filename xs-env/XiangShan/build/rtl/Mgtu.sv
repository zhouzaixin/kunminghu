// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Mgtu(
  input  [127:0] io_in_vd,
  input  [7:0]   io_in_vl,
  output [127:0] io_out_vd
);

  assign io_out_vd =
    {~(io_in_vl[7]) | io_in_vd[127],
     io_in_vl < 8'h7F | io_in_vd[126],
     io_in_vl < 8'h7E | io_in_vd[125],
     io_in_vl < 8'h7D | io_in_vd[124],
     io_in_vl < 8'h7C | io_in_vd[123],
     io_in_vl < 8'h7B | io_in_vd[122],
     io_in_vl < 8'h7A | io_in_vd[121],
     io_in_vl < 8'h79 | io_in_vd[120],
     io_in_vl < 8'h78 | io_in_vd[119],
     io_in_vl < 8'h77 | io_in_vd[118],
     io_in_vl < 8'h76 | io_in_vd[117],
     io_in_vl < 8'h75 | io_in_vd[116],
     io_in_vl < 8'h74 | io_in_vd[115],
     io_in_vl < 8'h73 | io_in_vd[114],
     io_in_vl < 8'h72 | io_in_vd[113],
     io_in_vl < 8'h71 | io_in_vd[112],
     io_in_vl < 8'h70 | io_in_vd[111],
     io_in_vl < 8'h6F | io_in_vd[110],
     io_in_vl < 8'h6E | io_in_vd[109],
     io_in_vl < 8'h6D | io_in_vd[108],
     io_in_vl < 8'h6C | io_in_vd[107],
     io_in_vl < 8'h6B | io_in_vd[106],
     io_in_vl < 8'h6A | io_in_vd[105],
     io_in_vl < 8'h69 | io_in_vd[104],
     io_in_vl < 8'h68 | io_in_vd[103],
     io_in_vl < 8'h67 | io_in_vd[102],
     io_in_vl < 8'h66 | io_in_vd[101],
     io_in_vl < 8'h65 | io_in_vd[100],
     io_in_vl < 8'h64 | io_in_vd[99],
     io_in_vl < 8'h63 | io_in_vd[98],
     io_in_vl < 8'h62 | io_in_vd[97],
     io_in_vl < 8'h61 | io_in_vd[96],
     io_in_vl < 8'h60 | io_in_vd[95],
     io_in_vl < 8'h5F | io_in_vd[94],
     io_in_vl < 8'h5E | io_in_vd[93],
     io_in_vl < 8'h5D | io_in_vd[92],
     io_in_vl < 8'h5C | io_in_vd[91],
     io_in_vl < 8'h5B | io_in_vd[90],
     io_in_vl < 8'h5A | io_in_vd[89],
     io_in_vl < 8'h59 | io_in_vd[88],
     io_in_vl < 8'h58 | io_in_vd[87],
     io_in_vl < 8'h57 | io_in_vd[86],
     io_in_vl < 8'h56 | io_in_vd[85],
     io_in_vl < 8'h55 | io_in_vd[84],
     io_in_vl < 8'h54 | io_in_vd[83],
     io_in_vl < 8'h53 | io_in_vd[82],
     io_in_vl < 8'h52 | io_in_vd[81],
     io_in_vl < 8'h51 | io_in_vd[80],
     io_in_vl < 8'h50 | io_in_vd[79],
     io_in_vl < 8'h4F | io_in_vd[78],
     io_in_vl < 8'h4E | io_in_vd[77],
     io_in_vl < 8'h4D | io_in_vd[76],
     io_in_vl < 8'h4C | io_in_vd[75],
     io_in_vl < 8'h4B | io_in_vd[74],
     io_in_vl < 8'h4A | io_in_vd[73],
     io_in_vl < 8'h49 | io_in_vd[72],
     io_in_vl < 8'h48 | io_in_vd[71],
     io_in_vl < 8'h47 | io_in_vd[70],
     io_in_vl < 8'h46 | io_in_vd[69],
     io_in_vl < 8'h45 | io_in_vd[68],
     io_in_vl < 8'h44 | io_in_vd[67],
     io_in_vl < 8'h43 | io_in_vd[66],
     io_in_vl < 8'h42 | io_in_vd[65],
     io_in_vl < 8'h41 | io_in_vd[64],
     io_in_vl[7:6] == 2'h0 | io_in_vd[63],
     io_in_vl < 8'h3F | io_in_vd[62],
     io_in_vl < 8'h3E | io_in_vd[61],
     io_in_vl < 8'h3D | io_in_vd[60],
     io_in_vl < 8'h3C | io_in_vd[59],
     io_in_vl < 8'h3B | io_in_vd[58],
     io_in_vl < 8'h3A | io_in_vd[57],
     io_in_vl < 8'h39 | io_in_vd[56],
     io_in_vl < 8'h38 | io_in_vd[55],
     io_in_vl < 8'h37 | io_in_vd[54],
     io_in_vl < 8'h36 | io_in_vd[53],
     io_in_vl < 8'h35 | io_in_vd[52],
     io_in_vl < 8'h34 | io_in_vd[51],
     io_in_vl < 8'h33 | io_in_vd[50],
     io_in_vl < 8'h32 | io_in_vd[49],
     io_in_vl < 8'h31 | io_in_vd[48],
     io_in_vl < 8'h30 | io_in_vd[47],
     io_in_vl < 8'h2F | io_in_vd[46],
     io_in_vl < 8'h2E | io_in_vd[45],
     io_in_vl < 8'h2D | io_in_vd[44],
     io_in_vl < 8'h2C | io_in_vd[43],
     io_in_vl < 8'h2B | io_in_vd[42],
     io_in_vl < 8'h2A | io_in_vd[41],
     io_in_vl < 8'h29 | io_in_vd[40],
     io_in_vl < 8'h28 | io_in_vd[39],
     io_in_vl < 8'h27 | io_in_vd[38],
     io_in_vl < 8'h26 | io_in_vd[37],
     io_in_vl < 8'h25 | io_in_vd[36],
     io_in_vl < 8'h24 | io_in_vd[35],
     io_in_vl < 8'h23 | io_in_vd[34],
     io_in_vl < 8'h22 | io_in_vd[33],
     io_in_vl < 8'h21 | io_in_vd[32],
     io_in_vl[7:5] == 3'h0 | io_in_vd[31],
     io_in_vl < 8'h1F | io_in_vd[30],
     io_in_vl < 8'h1E | io_in_vd[29],
     io_in_vl < 8'h1D | io_in_vd[28],
     io_in_vl < 8'h1C | io_in_vd[27],
     io_in_vl < 8'h1B | io_in_vd[26],
     io_in_vl < 8'h1A | io_in_vd[25],
     io_in_vl < 8'h19 | io_in_vd[24],
     io_in_vl < 8'h18 | io_in_vd[23],
     io_in_vl < 8'h17 | io_in_vd[22],
     io_in_vl < 8'h16 | io_in_vd[21],
     io_in_vl < 8'h15 | io_in_vd[20],
     io_in_vl < 8'h14 | io_in_vd[19],
     io_in_vl < 8'h13 | io_in_vd[18],
     io_in_vl < 8'h12 | io_in_vd[17],
     io_in_vl < 8'h11 | io_in_vd[16],
     io_in_vl[7:4] == 4'h0 | io_in_vd[15],
     io_in_vl < 8'hF | io_in_vd[14],
     io_in_vl < 8'hE | io_in_vd[13],
     io_in_vl < 8'hD | io_in_vd[12],
     io_in_vl < 8'hC | io_in_vd[11],
     io_in_vl < 8'hB | io_in_vd[10],
     io_in_vl < 8'hA | io_in_vd[9],
     io_in_vl < 8'h9 | io_in_vd[8],
     io_in_vl[7:3] == 5'h0 | io_in_vd[7],
     io_in_vl < 8'h7 | io_in_vd[6],
     io_in_vl < 8'h6 | io_in_vd[5],
     io_in_vl < 8'h5 | io_in_vd[4],
     io_in_vl[7:2] == 6'h0 | io_in_vd[3],
     io_in_vl < 8'h3 | io_in_vd[2],
     io_in_vl[7:1] == 7'h0 | io_in_vd[1],
     io_in_vl == 8'h0 | io_in_vd[0]};
endmodule

