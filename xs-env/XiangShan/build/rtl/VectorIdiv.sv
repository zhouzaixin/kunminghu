// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VectorIdiv(
  input          clock,
  input          reset,
  input  [1:0]   io_sew,
  input          io_sign,
  input  [127:0] io_dividend_v,
  input  [127:0] io_divisor_v,
  input          io_flush,
  input          io_div_in_valid,
  output         io_div_in_ready,
  input          io_div_out_ready,
  output         io_div_out_valid,
  output [127:0] io_div_out_q_v,
  output [127:0] io_div_out_rem_v
);

  wire              io_div_in_ready_0;
  wire              __64bit_divide_1_io_div_out_valid;
  wire [63:0]       __64bit_divide_1_io_div_out_q;
  wire [63:0]       __64bit_divide_1_io_div_out_rem;
  wire              __64bit_divide_0_io_div_out_valid;
  wire [63:0]       __64bit_divide_0_io_div_out_q;
  wire [63:0]       __64bit_divide_0_io_div_out_rem;
  wire              __32bit_divide_1_io_div_out_valid;
  wire [31:0]       __32bit_divide_1_io_div_out_q;
  wire [31:0]       __32bit_divide_1_io_div_out_rem;
  wire              __32bit_divide_0_io_div_out_valid;
  wire [31:0]       __32bit_divide_0_io_div_out_q;
  wire [31:0]       __32bit_divide_0_io_div_out_rem;
  wire              __16bit_divide_3_io_div_out_valid;
  wire [15:0]       __16bit_divide_3_io_div_out_q;
  wire [15:0]       __16bit_divide_3_io_div_out_rem;
  wire              __16bit_divide_2_io_div_out_valid;
  wire [15:0]       __16bit_divide_2_io_div_out_q;
  wire [15:0]       __16bit_divide_2_io_div_out_rem;
  wire              __16bit_divide_1_io_div_out_valid;
  wire [15:0]       __16bit_divide_1_io_div_out_q;
  wire [15:0]       __16bit_divide_1_io_div_out_rem;
  wire              __16bit_divide_0_io_div_out_valid;
  wire [15:0]       __16bit_divide_0_io_div_out_q;
  wire [15:0]       __16bit_divide_0_io_div_out_rem;
  wire              __8bit_divide_7_io_div_out_valid;
  wire [7:0]        __8bit_divide_7_io_div_out_q;
  wire [7:0]        __8bit_divide_7_io_div_out_rem;
  wire              __8bit_divide_6_io_div_out_valid;
  wire [7:0]        __8bit_divide_6_io_div_out_q;
  wire [7:0]        __8bit_divide_6_io_div_out_rem;
  wire              __8bit_divide_5_io_div_out_valid;
  wire [7:0]        __8bit_divide_5_io_div_out_q;
  wire [7:0]        __8bit_divide_5_io_div_out_rem;
  wire              __8bit_divide_4_io_div_out_valid;
  wire [7:0]        __8bit_divide_4_io_div_out_q;
  wire [7:0]        __8bit_divide_4_io_div_out_rem;
  wire              __8bit_divide_3_io_div_out_valid;
  wire [7:0]        __8bit_divide_3_io_div_out_q;
  wire [7:0]        __8bit_divide_3_io_div_out_rem;
  wire              __8bit_divide_2_io_div_out_valid;
  wire [7:0]        __8bit_divide_2_io_div_out_q;
  wire [7:0]        __8bit_divide_2_io_div_out_rem;
  wire              __8bit_divide_1_io_div_out_valid;
  wire [7:0]        __8bit_divide_1_io_div_out_q;
  wire [7:0]        __8bit_divide_1_io_div_out_rem;
  wire              __8bit_divide_0_io_div_out_valid;
  wire [7:0]        __8bit_divide_0_io_div_out_q;
  wire [7:0]        __8bit_divide_0_io_div_out_rem;
  reg  [2:0]        stateReg;
  wire              in_handshake = io_div_in_valid & io_div_in_ready_0;
  assign io_div_in_ready_0 = stateReg[0];
  reg  [127:0]      x_reg;
  reg  [127:0]      d_reg;
  reg               sign_reg;
  reg  [1:0]        sew_reg;
  wire              _div_out_rem_result_T = sew_reg == 2'h0;
  wire              _div_out_rem_result_T_3 = sew_reg == 2'h1;
  wire [3:0][63:0]  _GEN =
    {{x_reg[63:0]},
     {{32'h0, x_reg[95:64]}},
     {{48'h0, x_reg[111:96]}},
     {{56'h0, x_reg[119:112]}}};
  wire [3:0][63:0]  _GEN_0 =
    {{d_reg[63:0]},
     {{32'h0, d_reg[95:64]}},
     {{48'h0, d_reg[111:96]}},
     {{56'h0, d_reg[119:112]}}};
  wire [3:0][63:0]  _GEN_1 =
    {{x_reg[127:64]},
     {{32'h0, x_reg[127:96]}},
     {{48'h0, x_reg[127:112]}},
     {{56'h0, x_reg[127:120]}}};
  wire [3:0][63:0]  _GEN_2 =
    {{d_reg[127:64]},
     {{32'h0, d_reg[127:96]}},
     {{48'h0, d_reg[127:112]}},
     {{56'h0, d_reg[127:120]}}};
  reg  [127:0]      div_out_q_result_reg;
  reg  [127:0]      div_out_rem_result_reg;
  always @(posedge clock or posedge reset) begin
    if (reset)
      stateReg <= 3'h1;
    else if (io_flush)
      stateReg <= 3'h1;
    else if (stateReg == 3'h1) begin
      if (in_handshake)
        stateReg <= 3'h2;
    end
    else if (stateReg == 3'h2)
      stateReg <=
        __8bit_divide_0_io_div_out_valid & __8bit_divide_1_io_div_out_valid
        & __8bit_divide_2_io_div_out_valid & __8bit_divide_3_io_div_out_valid
        & __8bit_divide_4_io_div_out_valid & __8bit_divide_5_io_div_out_valid
        & __8bit_divide_6_io_div_out_valid & __8bit_divide_7_io_div_out_valid
        & __16bit_divide_0_io_div_out_valid & __16bit_divide_1_io_div_out_valid
        & __16bit_divide_2_io_div_out_valid & __16bit_divide_3_io_div_out_valid
        & __32bit_divide_0_io_div_out_valid & __32bit_divide_1_io_div_out_valid
        & __64bit_divide_0_io_div_out_valid & __64bit_divide_1_io_div_out_valid
          ? 3'h4
          : 3'h2;
    else if (stateReg == 3'h4 & stateReg[2] & io_div_out_ready)
      stateReg <= 3'h1;
  end // always @(posedge, posedge)
  wire [3:0][127:0] _GEN_3 =
    {{{__64bit_divide_1_io_div_out_q, __64bit_divide_0_io_div_out_q}},
     {{__64bit_divide_1_io_div_out_q[31:0],
       __64bit_divide_0_io_div_out_q[31:0],
       __32bit_divide_1_io_div_out_q,
       __32bit_divide_0_io_div_out_q}},
     {{__64bit_divide_1_io_div_out_q[15:0],
       __64bit_divide_0_io_div_out_q[15:0],
       __32bit_divide_1_io_div_out_q[15:0],
       __32bit_divide_0_io_div_out_q[15:0],
       __16bit_divide_3_io_div_out_q,
       __16bit_divide_2_io_div_out_q,
       __16bit_divide_1_io_div_out_q,
       __16bit_divide_0_io_div_out_q}},
     {{__64bit_divide_1_io_div_out_q[7:0],
       __64bit_divide_0_io_div_out_q[7:0],
       __32bit_divide_1_io_div_out_q[7:0],
       __32bit_divide_0_io_div_out_q[7:0],
       __16bit_divide_3_io_div_out_q[7:0],
       __16bit_divide_2_io_div_out_q[7:0],
       __16bit_divide_1_io_div_out_q[7:0],
       __16bit_divide_0_io_div_out_q[7:0],
       __8bit_divide_7_io_div_out_q,
       __8bit_divide_6_io_div_out_q,
       __8bit_divide_5_io_div_out_q,
       __8bit_divide_4_io_div_out_q,
       __8bit_divide_3_io_div_out_q,
       __8bit_divide_2_io_div_out_q,
       __8bit_divide_1_io_div_out_q,
       __8bit_divide_0_io_div_out_q}}};
  wire [3:0][127:0] _GEN_4 =
    {{{__64bit_divide_1_io_div_out_rem, __64bit_divide_0_io_div_out_rem}},
     {{__64bit_divide_1_io_div_out_rem[31:0],
       __64bit_divide_0_io_div_out_rem[31:0],
       __32bit_divide_1_io_div_out_rem,
       __32bit_divide_0_io_div_out_rem}},
     {{__64bit_divide_1_io_div_out_rem[15:0],
       __64bit_divide_0_io_div_out_rem[15:0],
       __32bit_divide_1_io_div_out_rem[15:0],
       __32bit_divide_0_io_div_out_rem[15:0],
       __16bit_divide_3_io_div_out_rem,
       __16bit_divide_2_io_div_out_rem,
       __16bit_divide_1_io_div_out_rem,
       __16bit_divide_0_io_div_out_rem}},
     {{__64bit_divide_1_io_div_out_rem[7:0],
       __64bit_divide_0_io_div_out_rem[7:0],
       __32bit_divide_1_io_div_out_rem[7:0],
       __32bit_divide_0_io_div_out_rem[7:0],
       __16bit_divide_3_io_div_out_rem[7:0],
       __16bit_divide_2_io_div_out_rem[7:0],
       __16bit_divide_1_io_div_out_rem[7:0],
       __16bit_divide_0_io_div_out_rem[7:0],
       __8bit_divide_7_io_div_out_rem,
       __8bit_divide_6_io_div_out_rem,
       __8bit_divide_5_io_div_out_rem,
       __8bit_divide_4_io_div_out_rem,
       __8bit_divide_3_io_div_out_rem,
       __8bit_divide_2_io_div_out_rem,
       __8bit_divide_1_io_div_out_rem,
       __8bit_divide_0_io_div_out_rem}}};
  always @(posedge clock) begin
    if (in_handshake) begin
      x_reg <= io_dividend_v;
      d_reg <= io_divisor_v;
      sign_reg <= io_sign;
      sew_reg <= io_sew;
    end
    if (stateReg[1])
      div_out_q_result_reg <= _GEN_3[sew_reg];
    if (stateReg[1])
      div_out_rem_result_reg <= _GEN_4[sew_reg];
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        stateReg = _RANDOM[5'h0][2:0];
        x_reg =
          {_RANDOM[5'h0][31:3],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4][2:0]};
        d_reg =
          {_RANDOM[5'h4][31:3],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8][2:0]};
        sign_reg = _RANDOM[5'h8][3];
        sew_reg = _RANDOM[5'h8][5:4];
        div_out_q_result_reg =
          {_RANDOM[5'h8][31:6],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC][5:0]};
        div_out_rem_result_reg =
          {_RANDOM[5'hC][31:6],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10][5:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        stateReg = 3'h1;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  I8DivNr4 _8bit_divide_0 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[7:0]),
    .io_divisor       (d_reg[7:0]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_0_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_0_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_0_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_1 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[15:8]),
    .io_divisor       (d_reg[15:8]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_1_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_1_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_1_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_2 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[23:16]),
    .io_divisor       (d_reg[23:16]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_2_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_2_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_2_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_3 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[31:24]),
    .io_divisor       (d_reg[31:24]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_3_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_3_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_3_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_4 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[39:32]),
    .io_divisor       (d_reg[39:32]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_4_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_4_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_4_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_5 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[47:40]),
    .io_divisor       (d_reg[47:40]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_5_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_5_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_5_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_6 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[55:48]),
    .io_divisor       (d_reg[55:48]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_6_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_6_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_6_io_div_out_rem)
  );
  I8DivNr4 _8bit_divide_7 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (x_reg[63:56]),
    .io_divisor       (d_reg[63:56]),
    .io_flush         (io_flush),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__8bit_divide_7_io_div_out_valid),
    .io_div_out_q     (__8bit_divide_7_io_div_out_q),
    .io_div_out_rem   (__8bit_divide_7_io_div_out_rem)
  );
  SRT16Divint _16bit_divide_0 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_div_out_rem_result_T ? {8'h0, x_reg[71:64]} : x_reg[15:0]),
    .io_divisor       (_div_out_rem_result_T ? {8'h0, d_reg[71:64]} : d_reg[15:0]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__16bit_divide_0_io_div_out_valid),
    .io_div_out_q     (__16bit_divide_0_io_div_out_q),
    .io_div_out_rem   (__16bit_divide_0_io_div_out_rem)
  );
  SRT16Divint _16bit_divide_1 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_div_out_rem_result_T ? {8'h0, x_reg[79:72]} : x_reg[31:16]),
    .io_divisor       (_div_out_rem_result_T ? {8'h0, d_reg[79:72]} : d_reg[31:16]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__16bit_divide_1_io_div_out_valid),
    .io_div_out_q     (__16bit_divide_1_io_div_out_q),
    .io_div_out_rem   (__16bit_divide_1_io_div_out_rem)
  );
  SRT16Divint _16bit_divide_2 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_div_out_rem_result_T ? {8'h0, x_reg[87:80]} : x_reg[47:32]),
    .io_divisor       (_div_out_rem_result_T ? {8'h0, d_reg[87:80]} : d_reg[47:32]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__16bit_divide_2_io_div_out_valid),
    .io_div_out_q     (__16bit_divide_2_io_div_out_q),
    .io_div_out_rem   (__16bit_divide_2_io_div_out_rem)
  );
  SRT16Divint _16bit_divide_3 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_div_out_rem_result_T ? {8'h0, x_reg[95:88]} : x_reg[63:48]),
    .io_divisor       (_div_out_rem_result_T ? {8'h0, d_reg[95:88]} : d_reg[63:48]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__16bit_divide_3_io_div_out_valid),
    .io_div_out_q     (__16bit_divide_3_io_div_out_q),
    .io_div_out_rem   (__16bit_divide_3_io_div_out_rem)
  );
  SRT16Divint_4 _32bit_divide_0 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend
      (_div_out_rem_result_T
         ? {24'h0, x_reg[103:96]}
         : _div_out_rem_result_T_3 ? {16'h0, x_reg[79:64]} : x_reg[31:0]),
    .io_divisor
      (_div_out_rem_result_T
         ? {24'h0, d_reg[103:96]}
         : _div_out_rem_result_T_3 ? {16'h0, d_reg[79:64]} : d_reg[31:0]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__32bit_divide_0_io_div_out_valid),
    .io_div_out_q     (__32bit_divide_0_io_div_out_q),
    .io_div_out_rem   (__32bit_divide_0_io_div_out_rem)
  );
  SRT16Divint_4 _32bit_divide_1 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend
      (_div_out_rem_result_T
         ? {24'h0, x_reg[111:104]}
         : _div_out_rem_result_T_3 ? {16'h0, x_reg[95:80]} : x_reg[63:32]),
    .io_divisor
      (_div_out_rem_result_T
         ? {24'h0, d_reg[111:104]}
         : _div_out_rem_result_T_3 ? {16'h0, d_reg[95:80]} : d_reg[63:32]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__32bit_divide_1_io_div_out_valid),
    .io_div_out_q     (__32bit_divide_1_io_div_out_q),
    .io_div_out_rem   (__32bit_divide_1_io_div_out_rem)
  );
  SRT16Divint_6 _64bit_divide_0 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_GEN[sew_reg]),
    .io_divisor       (_GEN_0[sew_reg]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__64bit_divide_0_io_div_out_valid),
    .io_div_out_q     (__64bit_divide_0_io_div_out_q),
    .io_div_out_rem   (__64bit_divide_0_io_div_out_rem)
  );
  SRT16Divint_6 _64bit_divide_1 (
    .clock            (clock),
    .reset            (reset),
    .io_sign          (sign_reg),
    .io_dividend      (_GEN_1[sew_reg]),
    .io_divisor       (_GEN_2[sew_reg]),
    .io_flush         (io_flush),
    .io_sew           (sew_reg),
    .io_div_in_valid  (stateReg[1]),
    .io_div_out_ready (stateReg[2]),
    .io_div_out_valid (__64bit_divide_1_io_div_out_valid),
    .io_div_out_q     (__64bit_divide_1_io_div_out_q),
    .io_div_out_rem   (__64bit_divide_1_io_div_out_rem)
  );
  assign io_div_in_ready = io_div_in_ready_0;
  assign io_div_out_valid = stateReg[2];
  assign io_div_out_q_v = div_out_q_result_reg;
  assign io_div_out_rem_v = div_out_rem_result_reg;
endmodule

