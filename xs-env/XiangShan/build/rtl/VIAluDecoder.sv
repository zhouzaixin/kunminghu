// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VIAluDecoder(
  input  [7:0] io_in_fuOpType,
  output [5:0] io_out_opcode,
  output [2:0] io_out_srcType2,
  output [2:0] io_out_vdType
);

  wire [7:0] _GEN = ~io_in_fuOpType;
  wire [7:0] _GEN_0 =
    {io_in_fuOpType[0],
     io_in_fuOpType[1],
     _GEN[2],
     io_in_fuOpType[3],
     io_in_fuOpType[4],
     io_in_fuOpType[5],
     _GEN[6],
     _GEN[7]};
  wire [6:0] _GEN_1 =
    {_GEN[1],
     io_in_fuOpType[2],
     io_in_fuOpType[3],
     io_in_fuOpType[4],
     io_in_fuOpType[5],
     _GEN[6],
     _GEN[7]};
  wire [7:0] _GEN_2 =
    {io_in_fuOpType[0],
     _GEN[1],
     io_in_fuOpType[2],
     io_in_fuOpType[3],
     io_in_fuOpType[4],
     io_in_fuOpType[5],
     _GEN[6],
     _GEN[7]};
  wire [7:0] _GEN_3 =
    {_GEN[0],
     io_in_fuOpType[1],
     _GEN[2],
     _GEN[3],
     _GEN[4],
     _GEN[5],
     io_in_fuOpType[6],
     _GEN[7]};
  wire [6:0] _GEN_4 =
    {io_in_fuOpType[0],
     io_in_fuOpType[1],
     io_in_fuOpType[3],
     _GEN[4],
     _GEN[5],
     io_in_fuOpType[6],
     _GEN[7]};
  wire [5:0] _GEN_5 =
    {io_in_fuOpType[2], io_in_fuOpType[3], _GEN[4], _GEN[5], io_in_fuOpType[6], _GEN[7]};
  wire [6:0] _GEN_6 =
    {io_in_fuOpType[0],
     io_in_fuOpType[2],
     io_in_fuOpType[3],
     _GEN[4],
     _GEN[5],
     io_in_fuOpType[6],
     _GEN[7]};
  wire [6:0] _GEN_7 =
    {io_in_fuOpType[1],
     io_in_fuOpType[2],
     io_in_fuOpType[3],
     _GEN[4],
     _GEN[5],
     io_in_fuOpType[6],
     _GEN[7]};
  wire [6:0] _GEN_8 =
    {io_in_fuOpType[0],
     _GEN[2],
     _GEN[3],
     io_in_fuOpType[4],
     _GEN[5],
     io_in_fuOpType[6],
     _GEN[7]};
  assign io_out_opcode =
    {|{&{io_in_fuOpType[0],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &{io_in_fuOpType[1],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &{io_in_fuOpType[2],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &{_GEN[1], _GEN[2], _GEN[3], _GEN[5], io_in_fuOpType[6], _GEN[7]},
       &{_GEN[0], _GEN[2], _GEN[3], _GEN[4], _GEN[5], io_in_fuOpType[6], _GEN[7]},
       &_GEN_4,
       &_GEN_5,
       &_GEN_8},
     1'h0,
     |{&_GEN_5,
       &{_GEN[1],
         _GEN[2],
         _GEN[3],
         io_in_fuOpType[4],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]},
       &_GEN_8},
     |{&{io_in_fuOpType[1],
         io_in_fuOpType[2],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &{_GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[5], io_in_fuOpType[6], _GEN[7]},
       &{io_in_fuOpType[0],
         io_in_fuOpType[1],
         _GEN[2],
         io_in_fuOpType[3],
         _GEN[4],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]},
       &_GEN_8},
     |{&{io_in_fuOpType[1],
         _GEN[2],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &_GEN_1,
       &{_GEN[0],
         _GEN[1],
         _GEN[2],
         _GEN[3],
         _GEN[4],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]},
       &_GEN_4,
       &_GEN_7,
       &{io_in_fuOpType[0],
         io_in_fuOpType[1],
         _GEN[2],
         _GEN[3],
         io_in_fuOpType[4],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]}},
     |{&{io_in_fuOpType[0],
         _GEN[1],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &_GEN_1,
       &{io_in_fuOpType[0],
         io_in_fuOpType[2],
         io_in_fuOpType[3],
         io_in_fuOpType[4],
         io_in_fuOpType[5],
         _GEN[6],
         _GEN[7]},
       &{io_in_fuOpType[0],
         _GEN[1],
         _GEN[2],
         _GEN[3],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]},
       &_GEN_3,
       &_GEN_4,
       &_GEN_6,
       &_GEN_8}};
  assign io_out_srcType2 = {|{&_GEN_4, &_GEN_5}, |{&_GEN_0, &_GEN_2, &_GEN_3}, 1'h0};
  assign io_out_vdType =
    {|{&_GEN_6, &_GEN_7},
     |{&_GEN_0, &_GEN_2, &_GEN_3},
     |{&{io_in_fuOpType[0],
         _GEN[1],
         _GEN[2],
         _GEN[3],
         _GEN[4],
         _GEN[5],
         io_in_fuOpType[6],
         _GEN[7]},
       &_GEN_3}};
endmodule

