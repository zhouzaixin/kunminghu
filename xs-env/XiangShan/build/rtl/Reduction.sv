// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Reduction(
  input          clock,
  input          reset,
  input          io_in_valid,
  input  [5:0]   io_in_bits_opcode_op,
  input          io_in_bits_info_vm,
  input          io_in_bits_info_ta,
  input  [2:0]   io_in_bits_info_vlmul,
  input  [7:0]   io_in_bits_info_vl,
  input  [5:0]   io_in_bits_info_uopIdx,
  input  [3:0]   io_in_bits_srcType_0,
  input  [3:0]   io_in_bits_vdType,
  input  [127:0] io_in_bits_vs1,
  input  [127:0] io_in_bits_vs2,
  input  [127:0] io_in_bits_old_vd,
  input  [127:0] io_in_bits_mask,
  output [127:0] io_out_vd
);

  wire              _cin_15_T_10;
  wire              cout_15;
  wire              _cin_14_T_10;
  wire              cout_14;
  wire              _cin_13_T_10;
  wire              cout_13;
  wire              _cin_12_T_10;
  wire              cout_12;
  wire              _cin_11_T_10;
  wire              cout_11;
  wire              _cin_10_T_10;
  wire              cout_10;
  wire              _cin_9_T_10;
  wire              cout_9;
  wire              _cin_8_T_10;
  wire              cout_8;
  wire              _cin_7_T_10;
  wire              cout_7;
  wire              _cin_6_T_10;
  wire              cout_6;
  wire              _cin_5_T_10;
  wire              cout_5;
  wire              _cin_4_T_10;
  wire              cout_4;
  wire              _cin_3_T_10;
  wire              cout_3;
  wire              _cin_2_T_10;
  wire              cout_2;
  wire              _cin_1_T_10;
  wire              cout_1;
  wire              _cin_0_T_10;
  wire              cout_0;
  wire [7:0]        _vlRemain_T_3;
  wire [7:0]        _compare1_2to1_sew8_io_c;
  wire [7:0]        _compare_3to1_sew8_6_io_d;
  wire [7:0]        _compare_3to1_sew8_5_io_d;
  wire [7:0]        _compare0_2to1_sew8_io_c;
  wire [7:0]        _compare_3to1_sew8_4_io_d;
  wire [7:0]        _compare_3to1_sew8_3_io_d;
  wire [7:0]        _compare_3to1_sew8_2_io_d;
  wire [7:0]        _compare_3to1_sew8_1_io_d;
  wire [7:0]        _compare_3to1_sew8_io_d;
  wire [15:0]       _compare1_3to1_sew16_io_d;
  wire [15:0]       _compare_3to1_sew16_2_io_d;
  wire [15:0]       _compare_3to1_sew16_1_io_d;
  wire [15:0]       _compare_3to1_sew16_io_d;
  wire [31:0]       _compare1_2to1_sew32_io_c;
  wire [31:0]       _compare0_2to1_sew32_io_c;
  wire [31:0]       _compare_3to1_sew32_io_d;
  wire [63:0]       _compare_3to1_sew64_io_d;
  wire [7:0]        _csa_4to2_sew8_4_io_out_sum;
  wire [7:0]        _csa_4to2_sew8_4_io_out_car;
  wire [7:0]        _csa_3to2_sew8_4_io_out_sum;
  wire [7:0]        _csa_3to2_sew8_4_io_out_car;
  wire [7:0]        _csa_3to2_sew8_3_io_out_sum;
  wire [7:0]        _csa_3to2_sew8_3_io_out_car;
  wire [7:0]        _csa_3to2_sew8_2_io_out_sum;
  wire [7:0]        _csa_3to2_sew8_2_io_out_car;
  wire [7:0]        _csa_3to2_sew8_1_io_out_sum;
  wire [7:0]        _csa_3to2_sew8_1_io_out_car;
  wire [7:0]        _csa_3to2_sew8_io_out_sum;
  wire [7:0]        _csa_3to2_sew8_io_out_car;
  wire [7:0]        _csa_4to2_sew8_3_io_out_sum;
  wire [7:0]        _csa_4to2_sew8_3_io_out_car;
  wire [7:0]        _csa_4to2_sew8_2_io_out_sum;
  wire [7:0]        _csa_4to2_sew8_2_io_out_car;
  wire [7:0]        _csa_4to2_sew8_1_io_out_sum;
  wire [7:0]        _csa_4to2_sew8_1_io_out_car;
  wire [7:0]        _csa_4to2_sew8_io_out_sum;
  wire [7:0]        _csa_4to2_sew8_io_out_car;
  wire [15:0]       _csa_4to2_sew16_io_out_sum;
  wire [15:0]       _csa_4to2_sew16_io_out_car;
  wire [15:0]       _csa_3to2_sew16_4_io_out_sum;
  wire [15:0]       _csa_3to2_sew16_4_io_out_car;
  wire [15:0]       _csa_3to2_sew16_3_io_out_sum;
  wire [15:0]       _csa_3to2_sew16_3_io_out_car;
  wire [15:0]       _csa_3to2_sew16_2_io_out_sum;
  wire [15:0]       _csa_3to2_sew16_2_io_out_car;
  wire [15:0]       _csa_3to2_sew16_1_io_out_sum;
  wire [15:0]       _csa_3to2_sew16_1_io_out_car;
  wire [15:0]       _csa_3to2_sew16_io_out_sum;
  wire [15:0]       _csa_3to2_sew16_io_out_car;
  wire [31:0]       _csa_3to2_sew32_1_io_out_sum;
  wire [31:0]       _csa_3to2_sew32_1_io_out_car;
  wire [31:0]       _csa_3to2_sew32_0_io_out_sum;
  wire [31:0]       _csa_3to2_sew32_0_io_out_car;
  wire [63:0]       _csa_3to2_sew64_io_out_sum;
  wire [63:0]       _csa_3to2_sew64_io_out_car;
  wire [2:0]        _GEN = {1'h0, ~(io_in_bits_srcType_0[1:0])};
  wire              widen =
    io_in_bits_vdType[1:0] == 2'(io_in_bits_srcType_0[1:0] + 2'h1);
  wire [10:0]       vlRemainBytes = {3'h0, _vlRemain_T_3} << io_in_bits_srcType_0[1:0];
  wire              _isVredmax_reg_s1_T = io_in_bits_opcode_op == 6'h22;
  wire              vredmax_vs = _isVredmax_reg_s1_T & io_in_bits_srcType_0[2];
  wire              _isVredmin_reg_s1_T = io_in_bits_opcode_op == 6'h23;
  wire              vredmin_vs = _isVredmin_reg_s1_T & io_in_bits_srcType_0[2];
  wire              vredand_vs = io_in_bits_opcode_op == 6'h24;
  reg               fire_reg_s1;
  reg  [127:0]      old_vd_reg_s1;
  reg               ta_reg_s1;
  reg  [7:0]        vl_reg_s1;
  reg  [1:0]        vd_vsew_reg_s1;
  reg  [2:0]        eewVs2_reg_s1;
  reg               signed_reg_s1;
  reg               vredand_vs_reg_s1;
  reg               vredor_vs_reg_s1;
  reg               vredxor_vs_reg_s1;
  reg  [3:0]        vdType_reg_s1;
  reg               isVredmax_reg_s1;
  reg               isVredmin_reg_s1;
  wire [12:0]       _GEN_0 = {7'h0, io_in_bits_info_uopIdx};
  wire [12:0]       shift = widen ? _GEN_0 << 3'(_GEN + 3'h1) : _GEN_0 << 3'(_GEN + 3'h2);
  wire [127:0]      vmask_bits = io_in_bits_mask >> shift;
  assign _vlRemain_T_3 =
    {5'h0, io_in_bits_info_vl} >= shift ? 8'(io_in_bits_info_vl - shift[7:0]) : 8'h0;
  wire              _widen_alu_uop_T = io_in_bits_info_uopIdx == 6'h0;
  wire              _widen_alu_uop_T_5 = io_in_bits_info_vlmul == 3'h2;
  wire              _widen_reduction_uop_T_2 = io_in_bits_info_uopIdx < 6'h2;
  wire              _widen_alu_uop_T_9 = io_in_bits_info_vlmul == 3'h3;
  wire              _widen_reduction_uop_T_6 = io_in_bits_info_uopIdx < 6'h4;
  wire              _widen_alu_uop_T_1 = io_in_bits_info_vlmul == 3'h1;
  wire              widen_reduction_uop =
    widen
    & (_widen_alu_uop_T | _widen_alu_uop_T_1 & _widen_reduction_uop_T_2
       | _widen_alu_uop_T_5 & _widen_reduction_uop_T_6 | _widen_alu_uop_T_9
       & io_in_bits_info_uopIdx < 6'h8);
  wire              _GEN_1 =
    _isVredmin_reg_s1_T & ~(io_in_bits_srcType_0[2]) | vredand_vs;
  wire [7:0]        ele8 =
    io_in_valid ? (vredmax_vs ? 8'h80 : vredmin_vs ? 8'h7F : {8{_GEN_1}}) : 8'h0;
  wire [15:0]       ele16 =
    io_in_valid ? (vredmax_vs ? 16'h8000 : vredmin_vs ? 16'h7FFF : {16{_GEN_1}}) : 16'h0;
  wire [31:0]       ele32 =
    io_in_valid
      ? (vredmax_vs ? 32'h80000000 : vredmin_vs ? 32'h7FFFFFFF : {32{_GEN_1}})
      : 32'h0;
  wire [63:0]       ele64 =
    io_in_valid
      ? (vredmax_vs
           ? 64'h8000000000000000
           : vredmin_vs ? 64'h7FFFFFFFFFFFFFFF : {64{_GEN_1}})
      : 64'h0;
  reg  [255:0]      vs12m_bits_reg_s1;
  reg               widen_reduction_uop_reg_s1;
  reg               alu_uop_reg_s1;
  reg               widen_alu_uop_reg_s1;
  wire              _GEN_2 = ~io_in_bits_info_vm & ~(vmask_bits[0]);
  wire              _GEN_3 =
    ~widen
    & (_widen_alu_uop_T | _widen_alu_uop_T_5 & _widen_reduction_uop_T_2
       | _widen_alu_uop_T_9 & _widen_reduction_uop_T_6) | widen_reduction_uop;
  wire              _GEN_4 = (_GEN_2 | vlRemainBytes == 11'h0) & _GEN_3;
  wire              _GEN_5 = ~io_in_bits_info_vm & ~(vmask_bits[1]);
  wire              _GEN_6 = vlRemainBytes < 11'h2;
  wire              _GEN_7 = ~io_in_bits_info_vm & ~(vmask_bits[2]);
  wire              _GEN_8 = vlRemainBytes < 11'h3;
  wire              _GEN_9 = ~io_in_bits_info_vm & ~(vmask_bits[3]);
  wire              _GEN_10 = vlRemainBytes < 11'h4;
  wire              _GEN_11 = ~io_in_bits_info_vm & ~(vmask_bits[4]);
  wire              _GEN_12 = vlRemainBytes < 11'h5;
  wire              _GEN_13 = ~io_in_bits_info_vm & ~(vmask_bits[5]);
  wire              _GEN_14 = vlRemainBytes < 11'h6;
  wire              _GEN_15 = ~io_in_bits_info_vm & ~(vmask_bits[6]);
  wire              _GEN_16 = vlRemainBytes < 11'h7;
  wire              _GEN_17 = ~io_in_bits_info_vm & ~(vmask_bits[7]);
  wire              _GEN_18 = vlRemainBytes < 11'h8;
  wire              _GEN_19 = ~io_in_bits_info_vm & ~(vmask_bits[8]);
  wire              _GEN_20 = vlRemainBytes < 11'h9;
  wire              _GEN_21 = ~io_in_bits_info_vm & ~(vmask_bits[9]);
  wire              _GEN_22 = vlRemainBytes < 11'hA;
  wire              _GEN_23 = ~io_in_bits_info_vm & ~(vmask_bits[10]);
  wire              _GEN_24 = vlRemainBytes < 11'hB;
  wire              _GEN_25 = ~io_in_bits_info_vm & ~(vmask_bits[11]);
  wire              _GEN_26 = vlRemainBytes < 11'hC;
  wire              _GEN_27 = ~io_in_bits_info_vm & ~(vmask_bits[12]);
  wire              _GEN_28 = vlRemainBytes < 11'hD;
  wire              _GEN_29 = ~io_in_bits_info_vm & ~(vmask_bits[13]);
  wire              _GEN_30 = vlRemainBytes < 11'hE;
  wire              _GEN_31 = ~io_in_bits_info_vm & ~(vmask_bits[14]);
  wire              _GEN_32 = vlRemainBytes < 11'hF;
  wire              _GEN_33 = ~io_in_bits_info_vm & ~(vmask_bits[15]);
  wire              _GEN_34 = vlRemainBytes < 11'h10;
  wire              _GEN_35 = vlRemainBytes < 11'h11;
  wire              _GEN_36 = vlRemainBytes < 11'h12;
  wire              _GEN_37 = vlRemainBytes < 11'h13;
  wire              _GEN_38 = vlRemainBytes < 11'h14;
  wire              _GEN_39 = vlRemainBytes < 11'h15;
  wire              _GEN_40 = vlRemainBytes < 11'h16;
  wire              _GEN_41 = vlRemainBytes < 11'h17;
  wire              _GEN_42 = vlRemainBytes < 11'h18;
  wire              _GEN_43 = vlRemainBytes < 11'h19;
  wire              _GEN_44 = vlRemainBytes < 11'h1A;
  wire              _GEN_45 = vlRemainBytes < 11'h1B;
  wire              _GEN_46 = vlRemainBytes < 11'h1C;
  wire              _GEN_47 = vlRemainBytes < 11'h1D;
  wire              _GEN_48 = vlRemainBytes < 11'h1E;
  wire              _GEN_49 = vlRemainBytes < 11'h1F;
  wire              _GEN_50 = vlRemainBytes < 11'h20;
  wire              _GEN_51 = (_GEN_2 | _GEN_6) & _GEN_3;
  wire              _GEN_52 = (_GEN_2 | _GEN_8) & _GEN_3;
  wire              _GEN_53 = (_GEN_2 | _GEN_10) & _GEN_3;
  reg  [63:0]       vs1_zero_reg_s1;
  reg  [63:0]       vs1_zero_logical_reg_s1;
  reg  [127:0]      vd_reg;
  reg  [127:0]      old_vd_reg;
  reg               signed_reg;
  reg  [1:0]        vd_vsew_reg;
  reg               ta_reg;
  reg  [7:0]        vl_reg;
  reg               isVredmax_reg;
  reg               isVredmin_reg;
  reg               reg_vredand_vs;
  reg               reg_vredor_vs;
  reg               reg_vredxor_vs;
  reg               alu_uop_reg;
  reg               widen_alu_uop_reg;
  reg  [1:0]        vdType_reg;
  wire [6:0]        vd_vsew_bits_reg = 7'h8 << vd_vsew_reg;
  wire              sub_reg = isVredmax_reg | isVredmin_reg;
  wire              _eewVd_reg_sew_oneHot_T = vdType_reg == 2'h0;
  wire              _eewVd_reg_sew_oneHot_T_1 = vdType_reg == 2'h1;
  wire              _eewVd_reg_sew_oneHot_T_2 = vdType_reg == 2'h2;
  wire              _reg_vred_logical_T = reg_vredand_vs | reg_vredor_vs;
  wire [127:0]      vs_lo_adjust = old_vd_reg ^ {128{sub_reg}};
  wire              sel_lo_1 =
    (signed_reg ? vd_reg[15] ^ vs_lo_adjust[15] ^ cout_1 : ~cout_1) == isVredmax_reg;
  wire              sel_lo_3 =
    (signed_reg ? vd_reg[31] ^ vs_lo_adjust[31] ^ cout_3 : ~cout_3) == isVredmax_reg;
  wire              sel_lo_5 =
    (signed_reg ? vd_reg[47] ^ vs_lo_adjust[47] ^ cout_5 : ~cout_5) == isVredmax_reg;
  wire              sel_lo_7 =
    (signed_reg ? vd_reg[63] ^ vs_lo_adjust[63] ^ cout_7 : ~cout_7) == isVredmax_reg;
  wire              sel_lo_9 =
    (signed_reg ? vd_reg[79] ^ vs_lo_adjust[79] ^ cout_9 : ~cout_9) == isVredmax_reg;
  wire              sel_lo_11 =
    (signed_reg ? vd_reg[95] ^ vs_lo_adjust[95] ^ cout_11 : ~cout_11) == isVredmax_reg;
  wire              sel_lo_13 =
    (signed_reg ? vd_reg[111] ^ vs_lo_adjust[111] ^ cout_13 : ~cout_13) == isVredmax_reg;
  wire              sel_lo_15 =
    (signed_reg ? vd_reg[127] ^ vs_lo_adjust[127] ^ cout_15 : ~cout_15) == isVredmax_reg;
  wire [9:0]        _bits_T_2 =
    10'({1'h0, vs_lo_adjust[7:0], _cin_0_T_10} + {1'h0, vd_reg[7:0], _cin_0_T_10});
  assign cout_0 = _bits_T_2[9];
  assign _cin_0_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & sub_reg | (&vdType_reg) & sub_reg;
  wire [9:0]        _bits_T_5 =
    10'({1'h0, vs_lo_adjust[15:8], _cin_1_T_10} + {1'h0, vd_reg[15:8], _cin_1_T_10});
  assign cout_1 = _bits_T_5[9];
  assign _cin_1_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_0
    | _eewVd_reg_sew_oneHot_T_2 & cout_0 | (&vdType_reg) & cout_0;
  wire [9:0]        _bits_T_8 =
    10'({1'h0, vs_lo_adjust[23:16], _cin_2_T_10} + {1'h0, vd_reg[23:16], _cin_2_T_10});
  assign cout_2 = _bits_T_8[9];
  assign _cin_2_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & cout_1 | (&vdType_reg) & cout_1;
  wire [9:0]        _bits_T_11 =
    10'({1'h0, vs_lo_adjust[31:24], _cin_3_T_10} + {1'h0, vd_reg[31:24], _cin_3_T_10});
  assign cout_3 = _bits_T_11[9];
  assign _cin_3_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_2
    | _eewVd_reg_sew_oneHot_T_2 & cout_2 | (&vdType_reg) & cout_2;
  wire [9:0]        _bits_T_14 =
    10'({1'h0, vs_lo_adjust[39:32], _cin_4_T_10} + {1'h0, vd_reg[39:32], _cin_4_T_10});
  assign cout_4 = _bits_T_14[9];
  assign _cin_4_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & sub_reg | (&vdType_reg) & cout_3;
  wire [9:0]        _bits_T_17 =
    10'({1'h0, vs_lo_adjust[47:40], _cin_5_T_10} + {1'h0, vd_reg[47:40], _cin_5_T_10});
  assign cout_5 = _bits_T_17[9];
  assign _cin_5_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_4
    | _eewVd_reg_sew_oneHot_T_2 & cout_4 | (&vdType_reg) & cout_4;
  wire [9:0]        _bits_T_20 =
    10'({1'h0, vs_lo_adjust[55:48], _cin_6_T_10} + {1'h0, vd_reg[55:48], _cin_6_T_10});
  assign cout_6 = _bits_T_20[9];
  assign _cin_6_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & cout_5 | (&vdType_reg) & cout_5;
  wire [9:0]        _bits_T_23 =
    10'({1'h0, vs_lo_adjust[63:56], _cin_7_T_10} + {1'h0, vd_reg[63:56], _cin_7_T_10});
  assign cout_7 = _bits_T_23[9];
  assign _cin_7_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_6
    | _eewVd_reg_sew_oneHot_T_2 & cout_6 | (&vdType_reg) & cout_6;
  wire [9:0]        _bits_T_26 =
    10'({1'h0, vs_lo_adjust[71:64], _cin_8_T_10} + {1'h0, vd_reg[71:64], _cin_8_T_10});
  assign cout_8 = _bits_T_26[9];
  assign _cin_8_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & sub_reg | (&vdType_reg) & sub_reg;
  wire [9:0]        _bits_T_29 =
    10'({1'h0, vs_lo_adjust[79:72], _cin_9_T_10} + {1'h0, vd_reg[79:72], _cin_9_T_10});
  assign cout_9 = _bits_T_29[9];
  assign _cin_9_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_8
    | _eewVd_reg_sew_oneHot_T_2 & cout_8 | (&vdType_reg) & cout_8;
  wire [9:0]        _bits_T_32 =
    10'({1'h0, vs_lo_adjust[87:80], _cin_10_T_10} + {1'h0, vd_reg[87:80], _cin_10_T_10});
  assign cout_10 = _bits_T_32[9];
  assign _cin_10_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & cout_9 | (&vdType_reg) & cout_9;
  wire [9:0]        _bits_T_35 =
    10'({1'h0, vs_lo_adjust[95:88], _cin_11_T_10} + {1'h0, vd_reg[95:88], _cin_11_T_10});
  assign cout_11 = _bits_T_35[9];
  assign _cin_11_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_10
    | _eewVd_reg_sew_oneHot_T_2 & cout_10 | (&vdType_reg) & cout_10;
  wire [9:0]        _bits_T_38 =
    10'({1'h0, vs_lo_adjust[103:96], _cin_12_T_10}
        + {1'h0, vd_reg[103:96], _cin_12_T_10});
  assign cout_12 = _bits_T_38[9];
  assign _cin_12_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & sub_reg | (&vdType_reg) & cout_11;
  wire [9:0]        _bits_T_41 =
    10'({1'h0, vs_lo_adjust[111:104], _cin_13_T_10}
        + {1'h0, vd_reg[111:104], _cin_13_T_10});
  assign cout_13 = _bits_T_41[9];
  assign _cin_13_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_12
    | _eewVd_reg_sew_oneHot_T_2 & cout_12 | (&vdType_reg) & cout_12;
  wire [9:0]        _bits_T_44 =
    10'({1'h0, vs_lo_adjust[119:112], _cin_14_T_10}
        + {1'h0, vd_reg[119:112], _cin_14_T_10});
  assign cout_14 = _bits_T_44[9];
  assign _cin_14_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & sub_reg
    | _eewVd_reg_sew_oneHot_T_2 & cout_13 | (&vdType_reg) & cout_13;
  wire [9:0]        _bits_T_47 =
    10'({1'h0, vs_lo_adjust[127:120], _cin_15_T_10}
        + {1'h0, vd_reg[127:120], _cin_15_T_10});
  assign cout_15 = _bits_T_47[9];
  assign _cin_15_T_10 =
    _eewVd_reg_sew_oneHot_T & sub_reg | _eewVd_reg_sew_oneHot_T_1 & cout_14
    | _eewVd_reg_sew_oneHot_T_2 & cout_14 | (&vdType_reg) & cout_14;
  wire [3:0][63:0]  _GEN_54 =
    {{64'(vd_reg[127:64] + vd_reg[63:0])},
     {{32'h0, 32'(vd_reg[63:32] + vd_reg[31:0])}},
     {{48'h0, 16'(vd_reg[31:16] + vd_reg[15:0])}},
     {{56'h0, 8'(vd_reg[15:8] + vd_reg[7:0])}}};
  wire [3:0][63:0]  _GEN_55 =
    {{vd_reg[63:0]},
     {{32'h0, _compare1_2to1_sew32_io_c}},
     {{48'h0, _compare1_3to1_sew16_io_d}},
     {{56'h0, _compare1_2to1_sew8_io_c}}};
  wire [127:0]      red_vd =
    _reg_vred_logical_T | reg_vredxor_vs
      ? vd_reg
      : {64'h0, sub_reg ? _GEN_55[vd_vsew_reg] : _GEN_54[vd_vsew_reg]};
  wire [254:0]      _red_vd_tail_vd_T =
    255'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF << vd_vsew_bits_reg;
  wire [127:0]      _GEN_56 = {120'h0, 8'(8'h80 - {1'h0, vd_vsew_bits_reg})};
  always @(posedge clock)
    fire_reg_s1 <= io_in_valid;
  wire              _eewVd_sew_oneHot_T = io_in_bits_vdType[1:0] == 2'h0;
  wire              _eewVd_sew_oneHot_T_1 = io_in_bits_vdType[1:0] == 2'h1;
  wire              _eewVd_sew_oneHot_T_2 = io_in_bits_vdType[1:0] == 2'h2;
  wire              _widen_alu_uop_T_2 = io_in_bits_info_uopIdx < 6'h3;
  wire              _widen_alu_uop_T_6 = io_in_bits_info_uopIdx < 6'h7;
  wire [3:0][255:0] _GEN_57 =
    {{{(_GEN_9 | _GEN_50) & _GEN_3 ? ele64[63:56] : io_in_bits_vs1[127:120],
       (_GEN_9 | _GEN_49) & _GEN_3 ? ele64[55:48] : io_in_bits_vs1[119:112],
       (_GEN_9 | _GEN_48) & _GEN_3 ? ele64[47:40] : io_in_bits_vs1[111:104],
       (_GEN_9 | _GEN_47) & _GEN_3 ? ele64[39:32] : io_in_bits_vs1[103:96],
       (_GEN_9 | _GEN_46) & _GEN_3 ? ele64[31:24] : io_in_bits_vs1[95:88],
       (_GEN_9 | _GEN_45) & _GEN_3 ? ele64[23:16] : io_in_bits_vs1[87:80],
       (_GEN_9 | _GEN_44) & _GEN_3 ? ele64[15:8] : io_in_bits_vs1[79:72],
       (_GEN_9 | _GEN_43) & _GEN_3 ? ele64[7:0] : io_in_bits_vs1[71:64],
       (_GEN_7 | _GEN_42) & _GEN_3 ? ele64[63:56] : io_in_bits_vs1[63:56],
       (_GEN_7 | _GEN_41) & _GEN_3 ? ele64[55:48] : io_in_bits_vs1[55:48],
       (_GEN_7 | _GEN_40) & _GEN_3 ? ele64[47:40] : io_in_bits_vs1[47:40],
       (_GEN_7 | _GEN_39) & _GEN_3 ? ele64[39:32] : io_in_bits_vs1[39:32],
       (_GEN_7 | _GEN_38) & _GEN_3 ? ele64[31:24] : io_in_bits_vs1[31:24],
       (_GEN_7 | _GEN_37) & _GEN_3 ? ele64[23:16] : io_in_bits_vs1[23:16],
       (_GEN_7 | _GEN_36) & _GEN_3 ? ele64[15:8] : io_in_bits_vs1[15:8],
       (_GEN_7 | _GEN_35) & _GEN_3 ? ele64[7:0] : io_in_bits_vs1[7:0],
       (_GEN_5 | _GEN_34) & _GEN_3 ? ele64[63:56] : io_in_bits_vs2[127:120],
       (_GEN_5 | _GEN_32) & _GEN_3 ? ele64[55:48] : io_in_bits_vs2[119:112],
       (_GEN_5 | _GEN_30) & _GEN_3 ? ele64[47:40] : io_in_bits_vs2[111:104],
       (_GEN_5 | _GEN_28) & _GEN_3 ? ele64[39:32] : io_in_bits_vs2[103:96],
       (_GEN_5 | _GEN_26) & _GEN_3 ? ele64[31:24] : io_in_bits_vs2[95:88],
       (_GEN_5 | _GEN_24) & _GEN_3 ? ele64[23:16] : io_in_bits_vs2[87:80],
       (_GEN_5 | _GEN_22) & _GEN_3 ? ele64[15:8] : io_in_bits_vs2[79:72],
       (_GEN_5 | _GEN_20) & _GEN_3 ? ele64[7:0] : io_in_bits_vs2[71:64],
       (_GEN_2 | _GEN_18) & _GEN_3 ? ele64[63:56] : io_in_bits_vs2[63:56],
       (_GEN_2 | _GEN_16) & _GEN_3 ? ele64[55:48] : io_in_bits_vs2[55:48],
       (_GEN_2 | _GEN_14) & _GEN_3 ? ele64[47:40] : io_in_bits_vs2[47:40],
       (_GEN_2 | _GEN_12) & _GEN_3 ? ele64[39:32] : io_in_bits_vs2[39:32],
       _GEN_53 ? ele64[31:24] : io_in_bits_vs2[31:24],
       _GEN_52 ? ele64[23:16] : io_in_bits_vs2[23:16],
       _GEN_51 ? ele64[15:8] : io_in_bits_vs2[15:8],
       _GEN_4 ? ele64[7:0] : io_in_bits_vs2[7:0]}},
     {{(_GEN_17 | _GEN_50) & _GEN_3 ? ele32[31:24] : io_in_bits_vs1[127:120],
       (_GEN_17 | _GEN_49) & _GEN_3 ? ele32[23:16] : io_in_bits_vs1[119:112],
       (_GEN_17 | _GEN_48) & _GEN_3 ? ele32[15:8] : io_in_bits_vs1[111:104],
       (_GEN_17 | _GEN_47) & _GEN_3 ? ele32[7:0] : io_in_bits_vs1[103:96],
       (_GEN_15 | _GEN_46) & _GEN_3 ? ele32[31:24] : io_in_bits_vs1[95:88],
       (_GEN_15 | _GEN_45) & _GEN_3 ? ele32[23:16] : io_in_bits_vs1[87:80],
       (_GEN_15 | _GEN_44) & _GEN_3 ? ele32[15:8] : io_in_bits_vs1[79:72],
       (_GEN_15 | _GEN_43) & _GEN_3 ? ele32[7:0] : io_in_bits_vs1[71:64],
       (_GEN_13 | _GEN_42) & _GEN_3 ? ele32[31:24] : io_in_bits_vs1[63:56],
       (_GEN_13 | _GEN_41) & _GEN_3 ? ele32[23:16] : io_in_bits_vs1[55:48],
       (_GEN_13 | _GEN_40) & _GEN_3 ? ele32[15:8] : io_in_bits_vs1[47:40],
       (_GEN_13 | _GEN_39) & _GEN_3 ? ele32[7:0] : io_in_bits_vs1[39:32],
       (_GEN_11 | _GEN_38) & _GEN_3 ? ele32[31:24] : io_in_bits_vs1[31:24],
       (_GEN_11 | _GEN_37) & _GEN_3 ? ele32[23:16] : io_in_bits_vs1[23:16],
       (_GEN_11 | _GEN_36) & _GEN_3 ? ele32[15:8] : io_in_bits_vs1[15:8],
       (_GEN_11 | _GEN_35) & _GEN_3 ? ele32[7:0] : io_in_bits_vs1[7:0],
       (_GEN_9 | _GEN_34) & _GEN_3 ? ele32[31:24] : io_in_bits_vs2[127:120],
       (_GEN_9 | _GEN_32) & _GEN_3 ? ele32[23:16] : io_in_bits_vs2[119:112],
       (_GEN_9 | _GEN_30) & _GEN_3 ? ele32[15:8] : io_in_bits_vs2[111:104],
       (_GEN_9 | _GEN_28) & _GEN_3 ? ele32[7:0] : io_in_bits_vs2[103:96],
       (_GEN_7 | _GEN_26) & _GEN_3 ? ele32[31:24] : io_in_bits_vs2[95:88],
       (_GEN_7 | _GEN_24) & _GEN_3 ? ele32[23:16] : io_in_bits_vs2[87:80],
       (_GEN_7 | _GEN_22) & _GEN_3 ? ele32[15:8] : io_in_bits_vs2[79:72],
       (_GEN_7 | _GEN_20) & _GEN_3 ? ele32[7:0] : io_in_bits_vs2[71:64],
       (_GEN_5 | _GEN_18) & _GEN_3 ? ele32[31:24] : io_in_bits_vs2[63:56],
       (_GEN_5 | _GEN_16) & _GEN_3 ? ele32[23:16] : io_in_bits_vs2[55:48],
       (_GEN_5 | _GEN_14) & _GEN_3 ? ele32[15:8] : io_in_bits_vs2[47:40],
       (_GEN_5 | _GEN_12) & _GEN_3 ? ele32[7:0] : io_in_bits_vs2[39:32],
       _GEN_53 ? ele32[31:24] : io_in_bits_vs2[31:24],
       _GEN_52 ? ele32[23:16] : io_in_bits_vs2[23:16],
       _GEN_51 ? ele32[15:8] : io_in_bits_vs2[15:8],
       _GEN_4 ? ele32[7:0] : io_in_bits_vs2[7:0]}},
     {{(_GEN_33 | _GEN_50) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[127:120],
       (_GEN_33 | _GEN_49) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[119:112],
       (_GEN_31 | _GEN_48) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[111:104],
       (_GEN_31 | _GEN_47) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[103:96],
       (_GEN_29 | _GEN_46) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[95:88],
       (_GEN_29 | _GEN_45) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[87:80],
       (_GEN_27 | _GEN_44) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[79:72],
       (_GEN_27 | _GEN_43) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[71:64],
       (_GEN_25 | _GEN_42) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[63:56],
       (_GEN_25 | _GEN_41) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[55:48],
       (_GEN_23 | _GEN_40) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[47:40],
       (_GEN_23 | _GEN_39) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[39:32],
       (_GEN_21 | _GEN_38) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[31:24],
       (_GEN_21 | _GEN_37) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[23:16],
       (_GEN_19 | _GEN_36) & _GEN_3 ? ele16[15:8] : io_in_bits_vs1[15:8],
       (_GEN_19 | _GEN_35) & _GEN_3 ? ele16[7:0] : io_in_bits_vs1[7:0],
       (_GEN_17 | _GEN_34) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[127:120],
       (_GEN_17 | _GEN_32) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[119:112],
       (_GEN_15 | _GEN_30) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[111:104],
       (_GEN_15 | _GEN_28) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[103:96],
       (_GEN_13 | _GEN_26) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[95:88],
       (_GEN_13 | _GEN_24) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[87:80],
       (_GEN_11 | _GEN_22) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[79:72],
       (_GEN_11 | _GEN_20) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[71:64],
       (_GEN_9 | _GEN_18) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[63:56],
       (_GEN_9 | _GEN_16) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[55:48],
       (_GEN_7 | _GEN_14) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[47:40],
       (_GEN_7 | _GEN_12) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[39:32],
       (_GEN_5 | _GEN_10) & _GEN_3 ? ele16[15:8] : io_in_bits_vs2[31:24],
       (_GEN_5 | _GEN_8) & _GEN_3 ? ele16[7:0] : io_in_bits_vs2[23:16],
       _GEN_51 ? ele16[15:8] : io_in_bits_vs2[15:8],
       _GEN_4 ? ele16[7:0] : io_in_bits_vs2[7:0]}},
     {{(~io_in_bits_info_vm & ~(vmask_bits[31]) | _GEN_50) & _GEN_3
         ? ele8
         : io_in_bits_vs1[127:120],
       (~io_in_bits_info_vm & ~(vmask_bits[30]) | _GEN_49) & _GEN_3
         ? ele8
         : io_in_bits_vs1[119:112],
       (~io_in_bits_info_vm & ~(vmask_bits[29]) | _GEN_48) & _GEN_3
         ? ele8
         : io_in_bits_vs1[111:104],
       (~io_in_bits_info_vm & ~(vmask_bits[28]) | _GEN_47) & _GEN_3
         ? ele8
         : io_in_bits_vs1[103:96],
       (~io_in_bits_info_vm & ~(vmask_bits[27]) | _GEN_46) & _GEN_3
         ? ele8
         : io_in_bits_vs1[95:88],
       (~io_in_bits_info_vm & ~(vmask_bits[26]) | _GEN_45) & _GEN_3
         ? ele8
         : io_in_bits_vs1[87:80],
       (~io_in_bits_info_vm & ~(vmask_bits[25]) | _GEN_44) & _GEN_3
         ? ele8
         : io_in_bits_vs1[79:72],
       (~io_in_bits_info_vm & ~(vmask_bits[24]) | _GEN_43) & _GEN_3
         ? ele8
         : io_in_bits_vs1[71:64],
       (~io_in_bits_info_vm & ~(vmask_bits[23]) | _GEN_42) & _GEN_3
         ? ele8
         : io_in_bits_vs1[63:56],
       (~io_in_bits_info_vm & ~(vmask_bits[22]) | _GEN_41) & _GEN_3
         ? ele8
         : io_in_bits_vs1[55:48],
       (~io_in_bits_info_vm & ~(vmask_bits[21]) | _GEN_40) & _GEN_3
         ? ele8
         : io_in_bits_vs1[47:40],
       (~io_in_bits_info_vm & ~(vmask_bits[20]) | _GEN_39) & _GEN_3
         ? ele8
         : io_in_bits_vs1[39:32],
       (~io_in_bits_info_vm & ~(vmask_bits[19]) | _GEN_38) & _GEN_3
         ? ele8
         : io_in_bits_vs1[31:24],
       (~io_in_bits_info_vm & ~(vmask_bits[18]) | _GEN_37) & _GEN_3
         ? ele8
         : io_in_bits_vs1[23:16],
       (~io_in_bits_info_vm & ~(vmask_bits[17]) | _GEN_36) & _GEN_3
         ? ele8
         : io_in_bits_vs1[15:8],
       (~io_in_bits_info_vm & ~(vmask_bits[16]) | _GEN_35) & _GEN_3
         ? ele8
         : io_in_bits_vs1[7:0],
       (_GEN_33 | _GEN_34) & _GEN_3 ? ele8 : io_in_bits_vs2[127:120],
       (_GEN_31 | _GEN_32) & _GEN_3 ? ele8 : io_in_bits_vs2[119:112],
       (_GEN_29 | _GEN_30) & _GEN_3 ? ele8 : io_in_bits_vs2[111:104],
       (_GEN_27 | _GEN_28) & _GEN_3 ? ele8 : io_in_bits_vs2[103:96],
       (_GEN_25 | _GEN_26) & _GEN_3 ? ele8 : io_in_bits_vs2[95:88],
       (_GEN_23 | _GEN_24) & _GEN_3 ? ele8 : io_in_bits_vs2[87:80],
       (_GEN_21 | _GEN_22) & _GEN_3 ? ele8 : io_in_bits_vs2[79:72],
       (_GEN_19 | _GEN_20) & _GEN_3 ? ele8 : io_in_bits_vs2[71:64],
       (_GEN_17 | _GEN_18) & _GEN_3 ? ele8 : io_in_bits_vs2[63:56],
       (_GEN_15 | _GEN_16) & _GEN_3 ? ele8 : io_in_bits_vs2[55:48],
       (_GEN_13 | _GEN_14) & _GEN_3 ? ele8 : io_in_bits_vs2[47:40],
       (_GEN_11 | _GEN_12) & _GEN_3 ? ele8 : io_in_bits_vs2[39:32],
       (_GEN_9 | _GEN_10) & _GEN_3 ? ele8 : io_in_bits_vs2[31:24],
       (_GEN_7 | _GEN_8) & _GEN_3 ? ele8 : io_in_bits_vs2[23:16],
       (_GEN_5 | _GEN_6) & _GEN_3 ? ele8 : io_in_bits_vs2[15:8],
       _GEN_4 ? ele8 : io_in_bits_vs2[7:0]}}};
  wire [3:0][63:0]  _GEN_58 = '{64'h0, 64'h0, 64'h0, 64'h0};
  wire [127:0]      hi_vs =
    widen_reduction_uop_reg_s1
      ? (eewVs2_reg_s1[0]
           ? {{8{vs12m_bits_reg_s1[127] & signed_reg_s1}},
              vs12m_bits_reg_s1[127:120],
              {8{vs12m_bits_reg_s1[119] & signed_reg_s1}},
              vs12m_bits_reg_s1[119:112],
              {8{vs12m_bits_reg_s1[111] & signed_reg_s1}},
              vs12m_bits_reg_s1[111:104],
              {8{vs12m_bits_reg_s1[103] & signed_reg_s1}},
              vs12m_bits_reg_s1[103:96],
              {8{vs12m_bits_reg_s1[95] & signed_reg_s1}},
              vs12m_bits_reg_s1[95:88],
              {8{vs12m_bits_reg_s1[87] & signed_reg_s1}},
              vs12m_bits_reg_s1[87:80],
              {8{vs12m_bits_reg_s1[79] & signed_reg_s1}},
              vs12m_bits_reg_s1[79:72],
              {8{vs12m_bits_reg_s1[71] & signed_reg_s1}},
              vs12m_bits_reg_s1[71:64]}
           : 128'h0)
        | (eewVs2_reg_s1[1]
             ? {{16{vs12m_bits_reg_s1[127] & signed_reg_s1}},
                vs12m_bits_reg_s1[127:112],
                {16{vs12m_bits_reg_s1[111] & signed_reg_s1}},
                vs12m_bits_reg_s1[111:96],
                {16{vs12m_bits_reg_s1[95] & signed_reg_s1}},
                vs12m_bits_reg_s1[95:80],
                {16{vs12m_bits_reg_s1[79] & signed_reg_s1}},
                vs12m_bits_reg_s1[79:64]}
             : 128'h0)
        | (eewVs2_reg_s1[2]
             ? {{32{vs12m_bits_reg_s1[127] & signed_reg_s1}},
                vs12m_bits_reg_s1[127:96],
                {32{vs12m_bits_reg_s1[95] & signed_reg_s1}},
                vs12m_bits_reg_s1[95:64]}
             : 128'h0)
      : vs12m_bits_reg_s1[255:128];
  wire [63:0]       _vd_logical_0_T_3 =
    vs1_zero_logical_reg_s1 & vs12m_bits_reg_s1[127:64] & vs12m_bits_reg_s1[63:0];
  wire [63:0]       _vd_logical_0_T_7 =
    vs1_zero_logical_reg_s1 | vs12m_bits_reg_s1[127:64] | vs12m_bits_reg_s1[63:0];
  wire [63:0]       _vd_logical_0_T_11 =
    vs1_zero_logical_reg_s1 ^ vs12m_bits_reg_s1[127:64] ^ vs12m_bits_reg_s1[63:0];
  wire [63:0]       vd_logical_0 =
    vredand_vs_reg_s1
      ? _vd_logical_0_T_3
      : vredor_vs_reg_s1
          ? _vd_logical_0_T_7
          : vredxor_vs_reg_s1 ? _vd_logical_0_T_11 : 64'h0;
  wire [31:0]       _vd_logical_1_T_2 = vd_logical_0[63:32] & vd_logical_0[31:0];
  wire [31:0]       _vd_logical_1_T_5 = vd_logical_0[63:32] | vd_logical_0[31:0];
  wire [31:0]       _vd_logical_1_T_8 = vd_logical_0[63:32] ^ vd_logical_0[31:0];
  wire [31:0]       vd_logical_1 =
    vredand_vs_reg_s1
      ? _vd_logical_1_T_2
      : vredor_vs_reg_s1
          ? _vd_logical_1_T_5
          : vredxor_vs_reg_s1 ? _vd_logical_1_T_8 : 32'h0;
  wire [15:0]       _vd_logical_2_T_2 = vd_logical_1[31:16] & vd_logical_1[15:0];
  wire [15:0]       _vd_logical_2_T_5 = vd_logical_1[31:16] | vd_logical_1[15:0];
  wire [15:0]       _vd_logical_2_T_8 = vd_logical_1[31:16] ^ vd_logical_1[15:0];
  wire [15:0]       vd_logical_2 =
    vredand_vs_reg_s1
      ? _vd_logical_2_T_2
      : vredor_vs_reg_s1
          ? _vd_logical_2_T_5
          : vredxor_vs_reg_s1 ? _vd_logical_2_T_8 : 16'h0;
  wire              _old_vd_reg_T = alu_uop_reg_s1 | widen_alu_uop_reg_s1;
  wire [3:0][127:0] _GEN_59 =
    {{{_csa_3to2_sew64_io_out_sum, _csa_3to2_sew64_io_out_car}},
     {{64'h0, _csa_3to2_sew32_1_io_out_sum, _csa_3to2_sew32_1_io_out_car}},
     {{96'h0, _csa_4to2_sew16_io_out_sum, _csa_4to2_sew16_io_out_car}},
     {{112'h0, _csa_4to2_sew8_4_io_out_sum, _csa_4to2_sew8_4_io_out_car}}};
  wire [3:0][127:0] _GEN_60 =
    {{{64'h0, _compare_3to1_sew64_io_d}},
     {{64'h0, _compare0_2to1_sew32_io_c, _compare_3to1_sew32_io_d}},
     {{80'h0,
       _compare_3to1_sew16_2_io_d,
       _compare_3to1_sew16_1_io_d,
       _compare_3to1_sew16_io_d}},
     {{80'h0,
       _compare0_2to1_sew8_io_c,
       _compare_3to1_sew8_4_io_d,
       _compare_3to1_sew8_3_io_d,
       _compare_3to1_sew8_2_io_d,
       _compare_3to1_sew8_1_io_d,
       _compare_3to1_sew8_io_d}}};
  wire [3:0][63:0]  _GEN_61 =
    vredand_vs_reg_s1
      ? {{{56'h0, vd_logical_2[15:8] & vd_logical_2[7:0]}},
         {{48'h0, _vd_logical_2_T_2}},
         {{32'h0, _vd_logical_1_T_2}},
         {_vd_logical_0_T_3}}
      : vredor_vs_reg_s1
          ? {{{56'h0, vd_logical_2[15:8] | vd_logical_2[7:0]}},
             {{48'h0, _vd_logical_2_T_5}},
             {{32'h0, _vd_logical_1_T_5}},
             {_vd_logical_0_T_7}}
          : vredxor_vs_reg_s1
              ? {{{56'h0, vd_logical_2[15:8] ^ vd_logical_2[7:0]}},
                 {{48'h0, _vd_logical_2_T_8}},
                 {{32'h0, _vd_logical_1_T_8}},
                 {_vd_logical_0_T_11}}
              : _GEN_58;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      old_vd_reg_s1 <= 128'h0;
      ta_reg_s1 <= 1'h0;
      vl_reg_s1 <= 8'h0;
      vd_vsew_reg_s1 <= 2'h0;
      eewVs2_reg_s1 <= 3'h0;
      signed_reg_s1 <= 1'h0;
      vredand_vs_reg_s1 <= 1'h0;
      vredor_vs_reg_s1 <= 1'h0;
      vredxor_vs_reg_s1 <= 1'h0;
      vdType_reg_s1 <= 4'h0;
      isVredmax_reg_s1 <= 1'h0;
      isVredmin_reg_s1 <= 1'h0;
      vs12m_bits_reg_s1 <= 256'h0;
      widen_reduction_uop_reg_s1 <= 1'h0;
      alu_uop_reg_s1 <= 1'h0;
      widen_alu_uop_reg_s1 <= 1'h0;
      vs1_zero_reg_s1 <= 64'h0;
      vs1_zero_logical_reg_s1 <= 64'h0;
      vd_reg <= 128'h0;
      old_vd_reg <= 128'h0;
      signed_reg <= 1'h0;
      vd_vsew_reg <= 2'h0;
      ta_reg <= 1'h0;
      vl_reg <= 8'h0;
      isVredmax_reg <= 1'h0;
      isVredmin_reg <= 1'h0;
      reg_vredand_vs <= 1'h0;
      reg_vredor_vs <= 1'h0;
      reg_vredxor_vs <= 1'h0;
      alu_uop_reg <= 1'h0;
      widen_alu_uop_reg <= 1'h0;
      vdType_reg <= 2'h0;
    end
    else begin
      if (io_in_valid) begin
        old_vd_reg_s1 <= io_in_bits_old_vd;
        ta_reg_s1 <= io_in_bits_info_ta;
        vl_reg_s1 <= io_in_bits_info_vl;
        vd_vsew_reg_s1 <= io_in_bits_vdType[1:0];
        eewVs2_reg_s1 <=
          {io_in_bits_srcType_0[1:0] == 2'h2,
           io_in_bits_srcType_0[1:0] == 2'h1,
           io_in_bits_srcType_0[1:0] == 2'h0};
        signed_reg_s1 <= io_in_bits_srcType_0[3:2] == 2'h1;
        vredand_vs_reg_s1 <= vredand_vs;
        vredor_vs_reg_s1 <= io_in_bits_opcode_op == 6'h25;
        vredxor_vs_reg_s1 <= io_in_bits_opcode_op == 6'h26;
        vdType_reg_s1 <= io_in_bits_vdType;
        isVredmax_reg_s1 <= _isVredmax_reg_s1_T;
        isVredmin_reg_s1 <= _isVredmin_reg_s1_T;
        vs12m_bits_reg_s1 <= _GEN_57[io_in_bits_srcType_0[1:0]];
        widen_reduction_uop_reg_s1 <= widen_reduction_uop;
        alu_uop_reg_s1 <=
          ~widen
          & (_widen_alu_uop_T_1 & io_in_bits_info_uopIdx == 6'h0 | _widen_alu_uop_T_5
             & _widen_alu_uop_T_2 | _widen_alu_uop_T_9 & _widen_alu_uop_T_6);
        widen_alu_uop_reg_s1 <=
          widen
          & (_widen_alu_uop_T | _widen_alu_uop_T_1 & _widen_alu_uop_T_2
             | _widen_alu_uop_T_5 & _widen_alu_uop_T_6 | _widen_alu_uop_T_9
             & io_in_bits_info_uopIdx < 6'hF);
        vs1_zero_reg_s1 <=
          (_eewVd_sew_oneHot_T ? {56'h0, io_in_bits_vs1[7:0]} : 64'h0)
          | (_eewVd_sew_oneHot_T_1 ? {48'h0, io_in_bits_vs1[15:0]} : 64'h0)
          | (_eewVd_sew_oneHot_T_2 ? {32'h0, io_in_bits_vs1[31:0]} : 64'h0)
          | ((&(io_in_bits_vdType[1:0])) ? io_in_bits_vs1[63:0] : 64'h0);
        vs1_zero_logical_reg_s1 <=
          vredand_vs
            ? (_eewVd_sew_oneHot_T ? {56'hFFFFFFFFFFFFFF, io_in_bits_vs1[7:0]} : 64'h0)
              | (_eewVd_sew_oneHot_T_1 ? {48'hFFFFFFFFFFFF, io_in_bits_vs1[15:0]} : 64'h0)
              | (_eewVd_sew_oneHot_T_2 ? {32'hFFFFFFFF, io_in_bits_vs1[31:0]} : 64'h0)
              | ((&(io_in_bits_vdType[1:0])) ? io_in_bits_vs1[63:0] : 64'h0)
            : (_eewVd_sew_oneHot_T ? {56'h0, io_in_bits_vs1[7:0]} : 64'h0)
              | (_eewVd_sew_oneHot_T_1 ? {48'h0, io_in_bits_vs1[15:0]} : 64'h0)
              | (_eewVd_sew_oneHot_T_2 ? {32'h0, io_in_bits_vs1[31:0]} : 64'h0)
              | ((&(io_in_bits_vdType[1:0])) ? io_in_bits_vs1[63:0] : 64'h0);
      end
      if (fire_reg_s1) begin
        vd_reg <=
          vredand_vs_reg_s1 | vredor_vs_reg_s1 | vredxor_vs_reg_s1
            ? (alu_uop_reg_s1
                 ? (vredand_vs_reg_s1
                      ? vs12m_bits_reg_s1[255:128] & vs12m_bits_reg_s1[127:0]
                      : vredor_vs_reg_s1
                          ? vs12m_bits_reg_s1[255:128] | vs12m_bits_reg_s1[127:0]
                          : vredxor_vs_reg_s1
                              ? vs12m_bits_reg_s1[255:128] ^ vs12m_bits_reg_s1[127:0]
                              : 128'h0)
                 : {64'h0, _GEN_61[~(vdType_reg_s1[1:0])]})
            : isVredmax_reg_s1 | isVredmin_reg_s1
                ? (alu_uop_reg_s1 ? hi_vs : _GEN_60[vd_vsew_reg_s1])
                : _old_vd_reg_T ? hi_vs : _GEN_59[vd_vsew_reg_s1];
        old_vd_reg <=
          _old_vd_reg_T
            ? (widen_reduction_uop_reg_s1
                 ? (eewVs2_reg_s1[0]
                      ? {{8{vs12m_bits_reg_s1[63] & signed_reg_s1}},
                         vs12m_bits_reg_s1[63:56],
                         {8{vs12m_bits_reg_s1[55] & signed_reg_s1}},
                         vs12m_bits_reg_s1[55:48],
                         {8{vs12m_bits_reg_s1[47] & signed_reg_s1}},
                         vs12m_bits_reg_s1[47:40],
                         {8{vs12m_bits_reg_s1[39] & signed_reg_s1}},
                         vs12m_bits_reg_s1[39:32],
                         {8{vs12m_bits_reg_s1[31] & signed_reg_s1}},
                         vs12m_bits_reg_s1[31:24],
                         {8{vs12m_bits_reg_s1[23] & signed_reg_s1}},
                         vs12m_bits_reg_s1[23:16],
                         {8{vs12m_bits_reg_s1[15] & signed_reg_s1}},
                         vs12m_bits_reg_s1[15:8],
                         {8{vs12m_bits_reg_s1[7] & signed_reg_s1}},
                         vs12m_bits_reg_s1[7:0]}
                      : 128'h0)
                   | (eewVs2_reg_s1[1]
                        ? {{16{vs12m_bits_reg_s1[63] & signed_reg_s1}},
                           vs12m_bits_reg_s1[63:48],
                           {16{vs12m_bits_reg_s1[47] & signed_reg_s1}},
                           vs12m_bits_reg_s1[47:32],
                           {16{vs12m_bits_reg_s1[31] & signed_reg_s1}},
                           vs12m_bits_reg_s1[31:16],
                           {16{vs12m_bits_reg_s1[15] & signed_reg_s1}},
                           vs12m_bits_reg_s1[15:0]}
                        : 128'h0)
                   | (eewVs2_reg_s1[2]
                        ? {{32{vs12m_bits_reg_s1[63] & signed_reg_s1}},
                           vs12m_bits_reg_s1[63:32],
                           {32{vs12m_bits_reg_s1[31] & signed_reg_s1}},
                           vs12m_bits_reg_s1[31:0]}
                        : 128'h0)
                 : vs12m_bits_reg_s1[127:0])
            : old_vd_reg_s1;
        signed_reg <= signed_reg_s1;
        vd_vsew_reg <= vd_vsew_reg_s1;
        ta_reg <= ta_reg_s1;
        vl_reg <= vl_reg_s1;
        isVredmax_reg <= isVredmax_reg_s1;
        isVredmin_reg <= isVredmin_reg_s1;
        reg_vredand_vs <= vredand_vs_reg_s1;
        reg_vredor_vs <= vredor_vs_reg_s1;
        reg_vredxor_vs <= vredxor_vs_reg_s1;
        alu_uop_reg <= alu_uop_reg_s1;
        widen_alu_uop_reg <= widen_alu_uop_reg_s1;
        vdType_reg <= vdType_reg_s1[1:0];
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:25];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1A; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fire_reg_s1 = _RANDOM[5'h0][0];
        old_vd_reg_s1 =
          {_RANDOM[5'h0][31:1],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4][0]};
        ta_reg_s1 = _RANDOM[5'h4][1];
        vl_reg_s1 = _RANDOM[5'h4][9:2];
        vd_vsew_reg_s1 = _RANDOM[5'h4][11:10];
        eewVs2_reg_s1 = _RANDOM[5'h4][14:12];
        signed_reg_s1 = _RANDOM[5'h4][15];
        vredand_vs_reg_s1 = _RANDOM[5'h4][16];
        vredor_vs_reg_s1 = _RANDOM[5'h4][17];
        vredxor_vs_reg_s1 = _RANDOM[5'h4][18];
        vdType_reg_s1 = _RANDOM[5'h4][22:19];
        isVredmax_reg_s1 = _RANDOM[5'h4][23];
        isVredmin_reg_s1 = _RANDOM[5'h4][24];
        vs12m_bits_reg_s1 =
          {_RANDOM[5'h4][31:25],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC][24:0]};
        widen_reduction_uop_reg_s1 = _RANDOM[5'hC][25];
        alu_uop_reg_s1 = _RANDOM[5'hC][26];
        widen_alu_uop_reg_s1 = _RANDOM[5'hC][27];
        vs1_zero_reg_s1 = {_RANDOM[5'hC][31:28], _RANDOM[5'hD], _RANDOM[5'hE][27:0]};
        vs1_zero_logical_reg_s1 =
          {_RANDOM[5'hE][31:28], _RANDOM[5'hF], _RANDOM[5'h10][27:0]};
        vd_reg =
          {_RANDOM[5'h10][31:28],
           _RANDOM[5'h11],
           _RANDOM[5'h12],
           _RANDOM[5'h13],
           _RANDOM[5'h14][27:0]};
        old_vd_reg =
          {_RANDOM[5'h14][31:28],
           _RANDOM[5'h15],
           _RANDOM[5'h16],
           _RANDOM[5'h17],
           _RANDOM[5'h18][27:0]};
        signed_reg = _RANDOM[5'h18][28];
        vd_vsew_reg = _RANDOM[5'h18][30:29];
        ta_reg = _RANDOM[5'h18][31];
        vl_reg = _RANDOM[5'h19][7:0];
        isVredmax_reg = _RANDOM[5'h19][8];
        isVredmin_reg = _RANDOM[5'h19][9];
        reg_vredand_vs = _RANDOM[5'h19][10];
        reg_vredor_vs = _RANDOM[5'h19][11];
        reg_vredxor_vs = _RANDOM[5'h19][12];
        alu_uop_reg = _RANDOM[5'h19][13];
        widen_alu_uop_reg = _RANDOM[5'h19][14];
        vdType_reg = _RANDOM[5'h19][16:15];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        old_vd_reg_s1 = 128'h0;
        ta_reg_s1 = 1'h0;
        vl_reg_s1 = 8'h0;
        vd_vsew_reg_s1 = 2'h0;
        eewVs2_reg_s1 = 3'h0;
        signed_reg_s1 = 1'h0;
        vredand_vs_reg_s1 = 1'h0;
        vredor_vs_reg_s1 = 1'h0;
        vredxor_vs_reg_s1 = 1'h0;
        vdType_reg_s1 = 4'h0;
        isVredmax_reg_s1 = 1'h0;
        isVredmin_reg_s1 = 1'h0;
        vs12m_bits_reg_s1 = 256'h0;
        widen_reduction_uop_reg_s1 = 1'h0;
        alu_uop_reg_s1 = 1'h0;
        widen_alu_uop_reg_s1 = 1'h0;
        vs1_zero_reg_s1 = 64'h0;
        vs1_zero_logical_reg_s1 = 64'h0;
        vd_reg = 128'h0;
        old_vd_reg = 128'h0;
        signed_reg = 1'h0;
        vd_vsew_reg = 2'h0;
        ta_reg = 1'h0;
        vl_reg = 8'h0;
        isVredmax_reg = 1'h0;
        isVredmin_reg = 1'h0;
        reg_vredand_vs = 1'h0;
        reg_vredor_vs = 1'h0;
        reg_vredxor_vs = 1'h0;
        alu_uop_reg = 1'h0;
        widen_alu_uop_reg = 1'h0;
        vdType_reg = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  CSA3to2_124 csa_3to2_sew64 (
    .io_in_a    (vs12m_bits_reg_s1[63:0]),
    .io_in_b    (vs12m_bits_reg_s1[127:64]),
    .io_in_c    (vs1_zero_reg_s1),
    .io_out_sum (_csa_3to2_sew64_io_out_sum),
    .io_out_car (_csa_3to2_sew64_io_out_car)
  );
  CSA3to2_125 csa_3to2_sew32_0 (
    .io_in_a    (vs12m_bits_reg_s1[31:0]),
    .io_in_b    (vs12m_bits_reg_s1[63:32]),
    .io_in_c    (vs12m_bits_reg_s1[95:64]),
    .io_out_sum (_csa_3to2_sew32_0_io_out_sum),
    .io_out_car (_csa_3to2_sew32_0_io_out_car)
  );
  CSA3to2_125 csa_3to2_sew32_1 (
    .io_in_a    (_csa_3to2_sew32_0_io_out_sum),
    .io_in_b    (_csa_3to2_sew32_0_io_out_car),
    .io_in_c    (32'(vs12m_bits_reg_s1[127:96] + vs1_zero_reg_s1[31:0])),
    .io_out_sum (_csa_3to2_sew32_1_io_out_sum),
    .io_out_car (_csa_3to2_sew32_1_io_out_car)
  );
  CSA3to2_127 csa_3to2_sew16 (
    .io_in_a    (vs12m_bits_reg_s1[15:0]),
    .io_in_b    (vs12m_bits_reg_s1[31:16]),
    .io_in_c    (vs12m_bits_reg_s1[47:32]),
    .io_out_sum (_csa_3to2_sew16_io_out_sum),
    .io_out_car (_csa_3to2_sew16_io_out_car)
  );
  CSA3to2_127 csa_3to2_sew16_1 (
    .io_in_a    (vs12m_bits_reg_s1[63:48]),
    .io_in_b    (vs12m_bits_reg_s1[79:64]),
    .io_in_c    (vs12m_bits_reg_s1[95:80]),
    .io_out_sum (_csa_3to2_sew16_1_io_out_sum),
    .io_out_car (_csa_3to2_sew16_1_io_out_car)
  );
  CSA3to2_127 csa_3to2_sew16_2 (
    .io_in_a    (vs12m_bits_reg_s1[111:96]),
    .io_in_b    (vs12m_bits_reg_s1[127:112]),
    .io_in_c    (vs1_zero_reg_s1[15:0]),
    .io_out_sum (_csa_3to2_sew16_2_io_out_sum),
    .io_out_car (_csa_3to2_sew16_2_io_out_car)
  );
  CSA3to2_127 csa_3to2_sew16_3 (
    .io_in_a    (_csa_3to2_sew16_io_out_car),
    .io_in_b    (_csa_3to2_sew16_1_io_out_car),
    .io_in_c    (_csa_3to2_sew16_2_io_out_car),
    .io_out_sum (_csa_3to2_sew16_3_io_out_sum),
    .io_out_car (_csa_3to2_sew16_3_io_out_car)
  );
  CSA3to2_127 csa_3to2_sew16_4 (
    .io_in_a    (_csa_3to2_sew16_io_out_sum),
    .io_in_b    (_csa_3to2_sew16_1_io_out_sum),
    .io_in_c    (_csa_3to2_sew16_2_io_out_sum),
    .io_out_sum (_csa_3to2_sew16_4_io_out_sum),
    .io_out_car (_csa_3to2_sew16_4_io_out_car)
  );
  CSA4to2_15 csa_4to2_sew16 (
    .io_in_a    (_csa_3to2_sew16_3_io_out_car),
    .io_in_b    (_csa_3to2_sew16_4_io_out_car),
    .io_in_c    (_csa_3to2_sew16_3_io_out_sum),
    .io_in_d    (_csa_3to2_sew16_4_io_out_sum),
    .io_out_sum (_csa_4to2_sew16_io_out_sum),
    .io_out_car (_csa_4to2_sew16_io_out_car)
  );
  CSA4to2_16 csa_4to2_sew8 (
    .io_in_a    (vs12m_bits_reg_s1[7:0]),
    .io_in_b    (vs12m_bits_reg_s1[15:8]),
    .io_in_c    (vs12m_bits_reg_s1[23:16]),
    .io_in_d    (vs12m_bits_reg_s1[31:24]),
    .io_out_sum (_csa_4to2_sew8_io_out_sum),
    .io_out_car (_csa_4to2_sew8_io_out_car)
  );
  CSA4to2_16 csa_4to2_sew8_1 (
    .io_in_a    (vs12m_bits_reg_s1[39:32]),
    .io_in_b    (vs12m_bits_reg_s1[47:40]),
    .io_in_c    (vs12m_bits_reg_s1[55:48]),
    .io_in_d    (vs12m_bits_reg_s1[63:56]),
    .io_out_sum (_csa_4to2_sew8_1_io_out_sum),
    .io_out_car (_csa_4to2_sew8_1_io_out_car)
  );
  CSA4to2_16 csa_4to2_sew8_2 (
    .io_in_a    (vs12m_bits_reg_s1[71:64]),
    .io_in_b    (vs12m_bits_reg_s1[79:72]),
    .io_in_c    (vs12m_bits_reg_s1[87:80]),
    .io_in_d    (vs12m_bits_reg_s1[95:88]),
    .io_out_sum (_csa_4to2_sew8_2_io_out_sum),
    .io_out_car (_csa_4to2_sew8_2_io_out_car)
  );
  CSA4to2_16 csa_4to2_sew8_3 (
    .io_in_a    (vs12m_bits_reg_s1[103:96]),
    .io_in_b    (vs12m_bits_reg_s1[111:104]),
    .io_in_c    (vs12m_bits_reg_s1[119:112]),
    .io_in_d    (vs12m_bits_reg_s1[127:120]),
    .io_out_sum (_csa_4to2_sew8_3_io_out_sum),
    .io_out_car (_csa_4to2_sew8_3_io_out_car)
  );
  CSA3to2_132 csa_3to2_sew8 (
    .io_in_a    (_csa_4to2_sew8_io_out_car),
    .io_in_b    (_csa_4to2_sew8_1_io_out_car),
    .io_in_c    (_csa_4to2_sew8_2_io_out_car),
    .io_out_sum (_csa_3to2_sew8_io_out_sum),
    .io_out_car (_csa_3to2_sew8_io_out_car)
  );
  CSA3to2_132 csa_3to2_sew8_1 (
    .io_in_a    (_csa_4to2_sew8_3_io_out_car),
    .io_in_b    (_csa_4to2_sew8_io_out_sum),
    .io_in_c    (_csa_4to2_sew8_1_io_out_sum),
    .io_out_sum (_csa_3to2_sew8_1_io_out_sum),
    .io_out_car (_csa_3to2_sew8_1_io_out_car)
  );
  CSA3to2_132 csa_3to2_sew8_2 (
    .io_in_a    (_csa_4to2_sew8_2_io_out_sum),
    .io_in_b    (_csa_4to2_sew8_3_io_out_sum),
    .io_in_c    (vs1_zero_reg_s1[7:0]),
    .io_out_sum (_csa_3to2_sew8_2_io_out_sum),
    .io_out_car (_csa_3to2_sew8_2_io_out_car)
  );
  CSA3to2_132 csa_3to2_sew8_3 (
    .io_in_a    (_csa_3to2_sew8_io_out_car),
    .io_in_b    (_csa_3to2_sew8_1_io_out_car),
    .io_in_c    (_csa_3to2_sew8_2_io_out_car),
    .io_out_sum (_csa_3to2_sew8_3_io_out_sum),
    .io_out_car (_csa_3to2_sew8_3_io_out_car)
  );
  CSA3to2_132 csa_3to2_sew8_4 (
    .io_in_a    (_csa_3to2_sew8_io_out_sum),
    .io_in_b    (_csa_3to2_sew8_1_io_out_sum),
    .io_in_c    (_csa_3to2_sew8_2_io_out_sum),
    .io_out_sum (_csa_3to2_sew8_4_io_out_sum),
    .io_out_car (_csa_3to2_sew8_4_io_out_car)
  );
  CSA4to2_16 csa_4to2_sew8_4 (
    .io_in_a    (_csa_3to2_sew8_3_io_out_car),
    .io_in_b    (_csa_3to2_sew8_4_io_out_car),
    .io_in_c    (_csa_3to2_sew8_3_io_out_sum),
    .io_in_d    (_csa_3to2_sew8_4_io_out_sum),
    .io_out_sum (_csa_4to2_sew8_4_io_out_sum),
    .io_out_car (_csa_4to2_sew8_4_io_out_car)
  );
  compare_3to1 compare_3to1_sew64 (
    .io_a      (vs12m_bits_reg_s1[63:0]),
    .io_b      (vs12m_bits_reg_s1[127:64]),
    .io_c      (vs1_zero_reg_s1),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew64_io_d)
  );
  compare_3to1_1 compare_3to1_sew32 (
    .io_a      (vs12m_bits_reg_s1[31:0]),
    .io_b      (vs12m_bits_reg_s1[63:32]),
    .io_c      (vs12m_bits_reg_s1[95:64]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew32_io_d)
  );
  compare_2to1 compare0_2to1_sew32 (
    .io_a      (vs12m_bits_reg_s1[127:96]),
    .io_b      (vs1_zero_reg_s1[31:0]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_c      (_compare0_2to1_sew32_io_c)
  );
  compare_2to1 compare1_2to1_sew32 (
    .io_a      (vd_reg[31:0]),
    .io_b      (vd_reg[63:32]),
    .io_max    (isVredmax_reg),
    .io_signed (signed_reg),
    .io_c      (_compare1_2to1_sew32_io_c)
  );
  compare_3to1_2 compare_3to1_sew16 (
    .io_a      (vs12m_bits_reg_s1[15:0]),
    .io_b      (vs12m_bits_reg_s1[31:16]),
    .io_c      (vs12m_bits_reg_s1[47:32]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew16_io_d)
  );
  compare_3to1_2 compare_3to1_sew16_1 (
    .io_a      (vs12m_bits_reg_s1[63:48]),
    .io_b      (vs12m_bits_reg_s1[79:64]),
    .io_c      (vs12m_bits_reg_s1[95:80]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew16_1_io_d)
  );
  compare_3to1_2 compare_3to1_sew16_2 (
    .io_a      (vs12m_bits_reg_s1[111:96]),
    .io_b      (vs12m_bits_reg_s1[127:112]),
    .io_c      (vs1_zero_reg_s1[15:0]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew16_2_io_d)
  );
  compare_3to1_2 compare1_3to1_sew16 (
    .io_a      (vd_reg[15:0]),
    .io_b      (vd_reg[31:16]),
    .io_c      (vd_reg[47:32]),
    .io_max    (isVredmax_reg),
    .io_signed (signed_reg),
    .io_d      (_compare1_3to1_sew16_io_d)
  );
  compare_3to1_6 compare_3to1_sew8 (
    .io_a      (vs12m_bits_reg_s1[7:0]),
    .io_b      (vs12m_bits_reg_s1[15:8]),
    .io_c      (vs12m_bits_reg_s1[23:16]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew8_io_d)
  );
  compare_3to1_6 compare_3to1_sew8_1 (
    .io_a      (vs12m_bits_reg_s1[31:24]),
    .io_b      (vs12m_bits_reg_s1[39:32]),
    .io_c      (vs12m_bits_reg_s1[47:40]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew8_1_io_d)
  );
  compare_3to1_6 compare_3to1_sew8_2 (
    .io_a      (vs12m_bits_reg_s1[55:48]),
    .io_b      (vs12m_bits_reg_s1[63:56]),
    .io_c      (vs12m_bits_reg_s1[71:64]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew8_2_io_d)
  );
  compare_3to1_6 compare_3to1_sew8_3 (
    .io_a      (vs12m_bits_reg_s1[79:72]),
    .io_b      (vs12m_bits_reg_s1[87:80]),
    .io_c      (vs12m_bits_reg_s1[95:88]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew8_3_io_d)
  );
  compare_3to1_6 compare_3to1_sew8_4 (
    .io_a      (vs12m_bits_reg_s1[103:96]),
    .io_b      (vs12m_bits_reg_s1[111:104]),
    .io_c      (vs12m_bits_reg_s1[119:112]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_d      (_compare_3to1_sew8_4_io_d)
  );
  compare_2to1_2 compare0_2to1_sew8 (
    .io_a      (vs12m_bits_reg_s1[127:120]),
    .io_b      (vs1_zero_reg_s1[7:0]),
    .io_max    (isVredmax_reg_s1),
    .io_signed (signed_reg_s1),
    .io_c      (_compare0_2to1_sew8_io_c)
  );
  compare_3to1_6 compare_3to1_sew8_5 (
    .io_a      (vd_reg[7:0]),
    .io_b      (vd_reg[15:8]),
    .io_c      (vd_reg[23:16]),
    .io_max    (isVredmax_reg),
    .io_signed (signed_reg),
    .io_d      (_compare_3to1_sew8_5_io_d)
  );
  compare_3to1_6 compare_3to1_sew8_6 (
    .io_a      (vd_reg[31:24]),
    .io_b      (vd_reg[39:32]),
    .io_c      (vd_reg[47:40]),
    .io_max    (isVredmax_reg),
    .io_signed (signed_reg),
    .io_d      (_compare_3to1_sew8_6_io_d)
  );
  compare_2to1_2 compare1_2to1_sew8 (
    .io_a      (_compare_3to1_sew8_6_io_d),
    .io_b      (_compare_3to1_sew8_5_io_d),
    .io_max    (isVredmax_reg),
    .io_signed (signed_reg),
    .io_c      (_compare1_2to1_sew8_io_c)
  );
  assign io_out_vd =
    alu_uop_reg | widen_alu_uop_reg
      ? (_reg_vred_logical_T | reg_vredxor_vs
           ? vd_reg
           : sub_reg
               ? {_eewVd_reg_sew_oneHot_T & sel_lo_15 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_15 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_15 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[127:120]
                    : vd_reg[127:120],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[119] ^ vs_lo_adjust[119] ^ cout_14
                       : ~cout_14) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_15 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_15 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[119:112]
                    : vd_reg[119:112],
                  _eewVd_reg_sew_oneHot_T & sel_lo_13 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_13 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_15 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[111:104]
                    : vd_reg[111:104],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[103] ^ vs_lo_adjust[103] ^ cout_12
                       : ~cout_12) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_13 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_15 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[103:96]
                    : vd_reg[103:96],
                  _eewVd_reg_sew_oneHot_T & sel_lo_11 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_11 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_11 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[95:88]
                    : vd_reg[95:88],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[87] ^ vs_lo_adjust[87] ^ cout_10
                       : ~cout_10) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_11 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_11 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[87:80]
                    : vd_reg[87:80],
                  _eewVd_reg_sew_oneHot_T & sel_lo_9 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_9 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_11 | (&vdType_reg)
                  & sel_lo_15
                    ? old_vd_reg[79:72]
                    : vd_reg[79:72],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[71] ^ vs_lo_adjust[71] ^ cout_8
                       : ~cout_8) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1 & sel_lo_9
                  | _eewVd_reg_sew_oneHot_T_2 & sel_lo_11 | (&vdType_reg) & sel_lo_15
                    ? old_vd_reg[71:64]
                    : vd_reg[71:64],
                  _eewVd_reg_sew_oneHot_T & sel_lo_7 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_7 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_7 | (&vdType_reg)
                  & sel_lo_7
                    ? old_vd_reg[63:56]
                    : vd_reg[63:56],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[55] ^ vs_lo_adjust[55] ^ cout_6
                       : ~cout_6) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1 & sel_lo_7
                  | _eewVd_reg_sew_oneHot_T_2 & sel_lo_7 | (&vdType_reg) & sel_lo_7
                    ? old_vd_reg[55:48]
                    : vd_reg[55:48],
                  _eewVd_reg_sew_oneHot_T & sel_lo_5 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_5 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_7 | (&vdType_reg)
                  & sel_lo_7
                    ? old_vd_reg[47:40]
                    : vd_reg[47:40],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[39] ^ vs_lo_adjust[39] ^ cout_4
                       : ~cout_4) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1 & sel_lo_5
                  | _eewVd_reg_sew_oneHot_T_2 & sel_lo_7 | (&vdType_reg) & sel_lo_7
                    ? old_vd_reg[39:32]
                    : vd_reg[39:32],
                  _eewVd_reg_sew_oneHot_T & sel_lo_3 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_3 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_3 | (&vdType_reg)
                  & sel_lo_7
                    ? old_vd_reg[31:24]
                    : vd_reg[31:24],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[23] ^ vs_lo_adjust[23] ^ cout_2
                       : ~cout_2) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1 & sel_lo_3
                  | _eewVd_reg_sew_oneHot_T_2 & sel_lo_3 | (&vdType_reg) & sel_lo_7
                    ? old_vd_reg[23:16]
                    : vd_reg[23:16],
                  _eewVd_reg_sew_oneHot_T & sel_lo_1 | _eewVd_reg_sew_oneHot_T_1
                  & sel_lo_1 | _eewVd_reg_sew_oneHot_T_2 & sel_lo_3 | (&vdType_reg)
                  & sel_lo_7
                    ? old_vd_reg[15:8]
                    : vd_reg[15:8],
                  _eewVd_reg_sew_oneHot_T
                  & (signed_reg
                       ? vd_reg[7] ^ vs_lo_adjust[7] ^ cout_0
                       : ~cout_0) == isVredmax_reg | _eewVd_reg_sew_oneHot_T_1 & sel_lo_1
                  | _eewVd_reg_sew_oneHot_T_2 & sel_lo_3 | (&vdType_reg) & sel_lo_7
                    ? old_vd_reg[7:0]
                    : vd_reg[7:0]}
               : {_bits_T_47[8:1],
                  _bits_T_44[8:1],
                  _bits_T_41[8:1],
                  _bits_T_38[8:1],
                  _bits_T_35[8:1],
                  _bits_T_32[8:1],
                  _bits_T_29[8:1],
                  _bits_T_26[8:1],
                  _bits_T_23[8:1],
                  _bits_T_20[8:1],
                  _bits_T_17[8:1],
                  _bits_T_14[8:1],
                  _bits_T_11[8:1],
                  _bits_T_8[8:1],
                  _bits_T_5[8:1],
                  _bits_T_2[8:1]})
      : vl_reg == 8'h0
          ? old_vd_reg
          : ta_reg
              ? _red_vd_tail_vd_T[127:0] | red_vd & 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                >> _GEN_56
              : _red_vd_tail_vd_T[127:0] & old_vd_reg | red_vd
                & 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> _GEN_56;
endmodule

