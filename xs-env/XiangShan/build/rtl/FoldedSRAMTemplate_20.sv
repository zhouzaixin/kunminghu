// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FoldedSRAMTemplate_20(
  input         clock,
  input         reset,
  input         io_r_req_valid,
  input  [10:0] io_r_req_bits_setIdx,
  output [1:0]  io_r_resp_data_0,
  output [1:0]  io_r_resp_data_1,
  input         io_w_req_valid,
  input  [10:0] io_w_req_bits_setIdx,
  input  [1:0]  io_w_req_bits_data_0,
  input  [1:0]  io_w_req_bits_data_1,
  input  [1:0]  io_w_req_bits_waymask
);

  reg  [1:0] b_widthIdx;
  reg  [8:0] b_addr;
  reg        b_valid;
  wire [1:0] _array_io_r_resp_data_0;
  wire [1:0] _array_io_r_resp_data_1;
  wire [1:0] _array_io_r_resp_data_2;
  wire [1:0] _array_io_r_resp_data_3;
  wire [1:0] _array_io_r_resp_data_4;
  wire [1:0] _array_io_r_resp_data_5;
  wire [1:0] _array_io_r_resp_data_6;
  wire [1:0] _array_io_r_resp_data_7;
  reg  [1:0] ridx;
  wire       write_conflict =
    io_w_req_valid & io_r_req_valid
    & io_w_req_bits_setIdx[10:2] == io_r_req_bits_setIdx[10:2];
  wire       can_write =
    b_valid & (b_addr != io_r_req_bits_setIdx[10:2] | ~io_r_req_valid);
  reg  [8:0] use_conflict_data_r;
  wire       use_conflict_data =
    b_valid & b_addr == use_conflict_data_r & b_widthIdx == ridx;
  reg  [1:0] b_data_0;
  reg  [1:0] b_data_1;
  reg  [1:0] b_waymask;
  reg        holdRidx_last_REG;
  reg  [1:0] holdRidx_hold_data;
  wire [1:0] holdRidx = holdRidx_last_REG ? ridx : holdRidx_hold_data;
  reg        holdRidx_last_REG_1;
  reg  [1:0] holdRidx_hold_data_1;
  wire [1:0] holdRidx_1 = holdRidx_last_REG_1 ? ridx : holdRidx_hold_data_1;
  wire [1:0] wdata_6 = b_valid ? b_data_0 : io_w_req_bits_data_0;
  wire [1:0] wdata_7 = b_valid ? b_data_1 : io_w_req_bits_data_1;
  wire [1:0] widthIdx = b_valid ? b_widthIdx : io_w_req_bits_setIdx[1:0];
  wire [1:0] waymask = b_valid ? b_waymask : io_w_req_bits_waymask;
  wire       _wmask_T_3 = widthIdx == 2'h0;
  wire       _wmask_T_9 = widthIdx == 2'h1;
  wire       _wmask_T_15 = widthIdx == 2'h2;
  always @(posedge clock) begin
    if (io_r_req_valid) begin
      ridx <= io_r_req_bits_setIdx[1:0];
      use_conflict_data_r <= io_r_req_bits_setIdx[10:2];
    end
    if (holdRidx_last_REG)
      holdRidx_hold_data <= ridx;
    if (holdRidx_last_REG_1)
      holdRidx_hold_data_1 <= ridx;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      b_valid <= 1'h0;
      b_addr <= 9'h0;
      b_data_0 <= 2'h0;
      b_data_1 <= 2'h0;
      b_widthIdx <= 2'h0;
      b_waymask <= 2'h0;
      holdRidx_last_REG <= 1'h0;
      holdRidx_last_REG_1 <= 1'h0;
    end
    else begin
      b_valid <= ~can_write & (write_conflict | b_valid);
      if (write_conflict) begin
        b_addr <= io_w_req_bits_setIdx[10:2];
        b_data_0 <= io_w_req_bits_data_0;
        b_data_1 <= io_w_req_bits_data_1;
        b_widthIdx <= io_w_req_bits_setIdx[1:0];
        b_waymask <= io_w_req_bits_waymask;
      end
      holdRidx_last_REG <= io_r_req_valid;
      holdRidx_last_REG_1 <= io_r_req_valid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        ridx = _RANDOM[1'h0][1:0];
        use_conflict_data_r = _RANDOM[1'h0][10:2];
        b_valid = _RANDOM[1'h0][11];
        b_addr = _RANDOM[1'h0][20:12];
        b_data_0 = _RANDOM[1'h0][22:21];
        b_data_1 = _RANDOM[1'h0][24:23];
        b_widthIdx = _RANDOM[1'h0][26:25];
        b_waymask = _RANDOM[1'h0][28:27];
        holdRidx_last_REG = _RANDOM[1'h0][29];
        holdRidx_hold_data = _RANDOM[1'h0][31:30];
        holdRidx_last_REG_1 = _RANDOM[1'h1][0];
        holdRidx_hold_data_1 = _RANDOM[1'h1][2:1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        b_valid = 1'h0;
        b_addr = 9'h0;
        b_data_0 = 2'h0;
        b_data_1 = 2'h0;
        b_widthIdx = 2'h0;
        b_waymask = 2'h0;
        holdRidx_last_REG = 1'h0;
        holdRidx_last_REG_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_55 array (
    .clock                 (clock),
    .reset                 (reset),
    .io_r_req_valid        (io_r_req_valid),
    .io_r_req_bits_setIdx  (io_r_req_bits_setIdx[10:2]),
    .io_r_resp_data_0      (_array_io_r_resp_data_0),
    .io_r_resp_data_1      (_array_io_r_resp_data_1),
    .io_r_resp_data_2      (_array_io_r_resp_data_2),
    .io_r_resp_data_3      (_array_io_r_resp_data_3),
    .io_r_resp_data_4      (_array_io_r_resp_data_4),
    .io_r_resp_data_5      (_array_io_r_resp_data_5),
    .io_r_resp_data_6      (_array_io_r_resp_data_6),
    .io_r_resp_data_7      (_array_io_r_resp_data_7),
    .io_w_req_valid        (io_w_req_valid & ~write_conflict | can_write),
    .io_w_req_bits_setIdx  (b_valid ? b_addr : io_w_req_bits_setIdx[10:2]),
    .io_w_req_bits_data_0  (wdata_6),
    .io_w_req_bits_data_1  (wdata_7),
    .io_w_req_bits_data_2  (wdata_6),
    .io_w_req_bits_data_3  (wdata_7),
    .io_w_req_bits_data_4  (wdata_6),
    .io_w_req_bits_data_5  (wdata_7),
    .io_w_req_bits_data_6  (wdata_6),
    .io_w_req_bits_data_7  (wdata_7),
    .io_w_req_bits_waymask
      ({(&widthIdx) & waymask[1],
        (&widthIdx) & waymask[0],
        _wmask_T_15 & waymask[1],
        _wmask_T_15 & waymask[0],
        _wmask_T_9 & waymask[1],
        _wmask_T_9 & waymask[0],
        _wmask_T_3 & waymask[1],
        _wmask_T_3 & waymask[0]})
  );
  assign io_r_resp_data_0 =
    use_conflict_data
      ? b_data_0
      : (holdRidx == 2'h0 ? _array_io_r_resp_data_0 : 2'h0)
        | (holdRidx == 2'h1 ? _array_io_r_resp_data_2 : 2'h0)
        | (holdRidx == 2'h2 ? _array_io_r_resp_data_4 : 2'h0)
        | ((&holdRidx) ? _array_io_r_resp_data_6 : 2'h0);
  assign io_r_resp_data_1 =
    use_conflict_data
      ? b_data_1
      : (holdRidx_1 == 2'h0 ? _array_io_r_resp_data_1 : 2'h0)
        | (holdRidx_1 == 2'h1 ? _array_io_r_resp_data_3 : 2'h0)
        | (holdRidx_1 == 2'h2 ? _array_io_r_resp_data_5 : 2'h0)
        | ((&holdRidx_1) ? _array_io_r_resp_data_7 : 2'h0);
endmodule

