// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FliHTable(
  input  [4:0]  src,
  output [15:0] out
);

  wire [4:0] out_invInputs = ~src;
  wire [3:0] _out_andMatrixOutputs_T =
    {out_invInputs[0], out_invInputs[1], out_invInputs[3], out_invInputs[4]};
  wire [4:0] _out_andMatrixOutputs_T_1 =
    {out_invInputs[0],
     out_invInputs[1],
     out_invInputs[2],
     out_invInputs[3],
     out_invInputs[4]};
  wire [4:0] _out_andMatrixOutputs_T_6 =
    {out_invInputs[0], src[1], src[2], out_invInputs[3], out_invInputs[4]};
  wire [2:0] _out_andMatrixOutputs_T_8 = {out_invInputs[2], src[3], out_invInputs[4]};
  wire [1:0] _out_andMatrixOutputs_T_12 = {src[2], src[3]};
  wire [2:0] _out_andMatrixOutputs_T_14 = {out_invInputs[2], out_invInputs[3], src[4]};
  wire [1:0] _out_andMatrixOutputs_T_20 = {src[3], src[4]};
  assign out =
    {&_out_andMatrixOutputs_T_1,
     |{&{src[2], src[4]}, &_out_andMatrixOutputs_T_20},
     |{&_out_andMatrixOutputs_T_1,
       &{src[0], src[2], out_invInputs[4]},
       &_out_andMatrixOutputs_T_6,
       &_out_andMatrixOutputs_T_8,
       &_out_andMatrixOutputs_T_12,
       &_out_andMatrixOutputs_T_14},
     |{&_out_andMatrixOutputs_T,
       &{src[0], src[1], src[2], out_invInputs[4]},
       &_out_andMatrixOutputs_T_8,
       &{src[1], src[3]},
       &_out_andMatrixOutputs_T_12,
       &_out_andMatrixOutputs_T_14},
     |{&_out_andMatrixOutputs_T,
       &_out_andMatrixOutputs_T_6,
       &_out_andMatrixOutputs_T_12,
       &_out_andMatrixOutputs_T_14,
       &_out_andMatrixOutputs_T_20},
     |{&_out_andMatrixOutputs_T,
       &{src[0], out_invInputs[1], out_invInputs[2]},
       &_out_andMatrixOutputs_T_6,
       &_out_andMatrixOutputs_T_8,
       &_out_andMatrixOutputs_T_14,
       &{src[0], src[1], src[4]},
       &{src[0], src[3], src[4]},
       &{src[1], src[2], src[3], src[4]}},
     |{&{src[0], src[1], out_invInputs[2], out_invInputs[3]},
       &{src[1], src[3], out_invInputs[4]},
       &{src[0], src[1], src[2], src[3]},
       &{out_invInputs[0], src[1], out_invInputs[3], src[4]}},
     |{&{out_invInputs[0], src[1], out_invInputs[2], out_invInputs[3], out_invInputs[4]},
       &{src[0], src[3], out_invInputs[4]},
       &{src[0], out_invInputs[1], out_invInputs[3], src[4]},
       &{src[0], out_invInputs[2], out_invInputs[3], src[4]}},
     8'h0};
endmodule

