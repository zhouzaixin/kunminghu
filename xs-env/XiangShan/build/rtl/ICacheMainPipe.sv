// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ICacheMainPipe(
  input          clock,
  input          reset,
  output         io_dataArray_toIData_0_valid,
  output [7:0]   io_dataArray_toIData_0_bits_vSetIdx_0,
  output [7:0]   io_dataArray_toIData_0_bits_vSetIdx_1,
  output         io_dataArray_toIData_0_bits_waymask_0_0,
  output         io_dataArray_toIData_0_bits_waymask_0_1,
  output         io_dataArray_toIData_0_bits_waymask_0_2,
  output         io_dataArray_toIData_0_bits_waymask_0_3,
  output         io_dataArray_toIData_0_bits_waymask_1_0,
  output         io_dataArray_toIData_0_bits_waymask_1_1,
  output         io_dataArray_toIData_0_bits_waymask_1_2,
  output         io_dataArray_toIData_0_bits_waymask_1_3,
  output [5:0]   io_dataArray_toIData_0_bits_blkOffset,
  output         io_dataArray_toIData_1_valid,
  output [7:0]   io_dataArray_toIData_1_bits_vSetIdx_0,
  output [7:0]   io_dataArray_toIData_1_bits_vSetIdx_1,
  output         io_dataArray_toIData_2_valid,
  output [7:0]   io_dataArray_toIData_2_bits_vSetIdx_0,
  output [7:0]   io_dataArray_toIData_2_bits_vSetIdx_1,
  input          io_dataArray_toIData_3_ready,
  output         io_dataArray_toIData_3_valid,
  output [7:0]   io_dataArray_toIData_3_bits_vSetIdx_0,
  output [7:0]   io_dataArray_toIData_3_bits_vSetIdx_1,
  input  [63:0]  io_dataArray_fromIData_datas_0,
  input  [63:0]  io_dataArray_fromIData_datas_1,
  input  [63:0]  io_dataArray_fromIData_datas_2,
  input  [63:0]  io_dataArray_fromIData_datas_3,
  input  [63:0]  io_dataArray_fromIData_datas_4,
  input  [63:0]  io_dataArray_fromIData_datas_5,
  input  [63:0]  io_dataArray_fromIData_datas_6,
  input  [63:0]  io_dataArray_fromIData_datas_7,
  input          io_dataArray_fromIData_codes_0,
  input          io_dataArray_fromIData_codes_1,
  input          io_dataArray_fromIData_codes_2,
  input          io_dataArray_fromIData_codes_3,
  input          io_dataArray_fromIData_codes_4,
  input          io_dataArray_fromIData_codes_5,
  input          io_dataArray_fromIData_codes_6,
  input          io_dataArray_fromIData_codes_7,
  output         io_metaArrayFlush_0_valid,
  output [7:0]   io_metaArrayFlush_0_bits_virIdx,
  output [3:0]   io_metaArrayFlush_0_bits_waymask,
  output         io_metaArrayFlush_1_valid,
  output [7:0]   io_metaArrayFlush_1_bits_virIdx,
  output [3:0]   io_metaArrayFlush_1_bits_waymask,
  output         io_touch_0_valid,
  output [7:0]   io_touch_0_bits_vSetIdx,
  output [1:0]   io_touch_0_bits_way,
  output         io_touch_1_valid,
  output [7:0]   io_touch_1_bits_vSetIdx,
  output [1:0]   io_touch_1_bits_way,
  output         io_wayLookupRead_ready,
  input          io_wayLookupRead_valid,
  input  [3:0]   io_wayLookupRead_bits_entry_waymask_0,
  input  [3:0]   io_wayLookupRead_bits_entry_waymask_1,
  input  [35:0]  io_wayLookupRead_bits_entry_ptag_0,
  input  [35:0]  io_wayLookupRead_bits_entry_ptag_1,
  input  [1:0]   io_wayLookupRead_bits_entry_itlb_exception_0,
  input  [1:0]   io_wayLookupRead_bits_entry_itlb_exception_1,
  input  [1:0]   io_wayLookupRead_bits_entry_itlb_pbmt_0,
  input  [1:0]   io_wayLookupRead_bits_entry_itlb_pbmt_1,
  input          io_wayLookupRead_bits_entry_meta_codes_0,
  input          io_wayLookupRead_bits_entry_meta_codes_1,
  input  [55:0]  io_wayLookupRead_bits_gpf_gpaddr,
  input          io_wayLookupRead_bits_gpf_isForVSnonLeafPTE,
  input          io_mshr_req_ready,
  output         io_mshr_req_valid,
  output [41:0]  io_mshr_req_bits_blkPaddr,
  output [7:0]   io_mshr_req_bits_vSetIdx,
  input          io_mshr_resp_valid,
  input  [41:0]  io_mshr_resp_bits_blkPaddr,
  input  [7:0]   io_mshr_resp_bits_vSetIdx,
  input  [511:0] io_mshr_resp_bits_data,
  input          io_mshr_resp_bits_corrupt,
  input          io_ecc_enable,
  output         io_fetch_req_ready,
  input          io_fetch_req_valid,
  input  [49:0]  io_fetch_req_bits_pcMemRead_0_startAddr,
  input  [49:0]  io_fetch_req_bits_pcMemRead_0_nextlineStart,
  input  [49:0]  io_fetch_req_bits_pcMemRead_1_startAddr,
  input  [49:0]  io_fetch_req_bits_pcMemRead_1_nextlineStart,
  input  [49:0]  io_fetch_req_bits_pcMemRead_2_startAddr,
  input  [49:0]  io_fetch_req_bits_pcMemRead_2_nextlineStart,
  input  [49:0]  io_fetch_req_bits_pcMemRead_3_startAddr,
  input  [49:0]  io_fetch_req_bits_pcMemRead_3_nextlineStart,
  input  [49:0]  io_fetch_req_bits_pcMemRead_4_startAddr,
  input  [49:0]  io_fetch_req_bits_pcMemRead_4_nextlineStart,
  input          io_fetch_req_bits_readValid_0,
  input          io_fetch_req_bits_readValid_1,
  input          io_fetch_req_bits_readValid_2,
  input          io_fetch_req_bits_readValid_3,
  input          io_fetch_req_bits_readValid_4,
  input          io_fetch_req_bits_backendException,
  output         io_fetch_resp_valid,
  output         io_fetch_resp_bits_doubleline,
  output [49:0]  io_fetch_resp_bits_vaddr_0,
  output [49:0]  io_fetch_resp_bits_vaddr_1,
  output [511:0] io_fetch_resp_bits_data,
  output [47:0]  io_fetch_resp_bits_paddr_0,
  output [1:0]   io_fetch_resp_bits_exception_0,
  output [1:0]   io_fetch_resp_bits_exception_1,
  output         io_fetch_resp_bits_pmp_mmio_0,
  output         io_fetch_resp_bits_pmp_mmio_1,
  output [1:0]   io_fetch_resp_bits_itlb_pbmt_0,
  output [1:0]   io_fetch_resp_bits_itlb_pbmt_1,
  output         io_fetch_resp_bits_backendException,
  output [55:0]  io_fetch_resp_bits_gpaddr,
  output         io_fetch_resp_bits_isForVSnonLeafPTE,
  input          io_flush,
  output [47:0]  io_pmp_0_req_bits_addr,
  input          io_pmp_0_resp_instr,
  input          io_pmp_0_resp_mmio,
  output [47:0]  io_pmp_1_req_bits_addr,
  input          io_pmp_1_resp_instr,
  input          io_pmp_1_resp_mmio,
  input          io_respStall,
  output         io_errors_0_valid,
  output [47:0]  io_errors_0_bits_paddr,
  output         io_errors_0_bits_report_to_beu,
  output         io_errors_1_valid,
  output [47:0]  io_errors_1_bits_paddr,
  output         io_errors_1_bits_report_to_beu,
  output         io_perfInfo_only_0_hit,
  output         io_perfInfo_only_0_miss,
  output         io_perfInfo_hit_0_hit_1,
  output         io_perfInfo_hit_0_miss_1,
  output         io_perfInfo_miss_0_hit_1,
  output         io_perfInfo_miss_0_miss_1,
  output         io_perfInfo_bank_hit_1,
  output         io_perfInfo_hit
);

  wire        s2_ready;
  wire        s1_ready;
  wire        _toMSHRArbiter_io_in_0_ready;
  wire        _toMSHRArbiter_io_in_1_ready;
  wire        s0_can_go =
    io_dataArray_toIData_3_ready & io_wayLookupRead_valid & s1_ready;
  wire        s0_fire = io_fetch_req_valid & s0_can_go & ~io_flush;
  reg         s1_valid;
  reg  [49:0] s1_req_vaddr_0;
  reg  [49:0] s1_req_vaddr_1;
  reg  [35:0] s1_req_ptags_0;
  reg  [35:0] s1_req_ptags_1;
  reg  [55:0] s1_req_gpaddr;
  reg         s1_req_isForVSnonLeafPTE;
  reg         s1_doubleline;
  reg         s1_SRAMhits_0;
  reg         s1_SRAMhits_1;
  reg  [1:0]  s1_itlb_exception_0;
  reg  [1:0]  s1_itlb_exception_1;
  reg         s1_backendException;
  reg  [1:0]  s1_itlb_pbmt_0;
  reg  [1:0]  s1_itlb_pbmt_1;
  reg         s1_waymasks_0_0;
  reg         s1_waymasks_0_1;
  reg         s1_waymasks_0_2;
  reg         s1_waymasks_0_3;
  reg         s1_waymasks_1_0;
  reg         s1_waymasks_1_1;
  reg         s1_waymasks_1_2;
  reg         s1_waymasks_1_3;
  reg         s1_meta_codes_0;
  reg         s1_meta_codes_1;
  reg         io_touch_0_valid_REG;
  reg         io_touch_1_valid_REG;
  wire        s1_bankMSHRHit_7 =
    s1_valid & s1_req_vaddr_0[13:6] == io_mshr_resp_bits_vSetIdx
    & s1_req_ptags_0 == io_mshr_resp_bits_blkPaddr[41:6] & io_mshr_resp_valid
    & ~io_mshr_resp_bits_corrupt;
  wire        s1_MSHR_hits_1 =
    s1_valid & s1_req_vaddr_1[13:6] == io_mshr_resp_bits_vSetIdx
    & s1_req_ptags_1 == io_mshr_resp_bits_blkPaddr[41:6] & io_mshr_resp_valid
    & ~io_mshr_resp_bits_corrupt & s1_doubleline;
  reg         s1_hits_REG;
  reg         s1_hits_valid;
  reg         s1_hits_REG_1;
  reg         s1_hits_valid_1;
  wire        s1_bankMSHRHit_0 =
    s1_req_vaddr_0[5:3] == 3'h0 & s1_bankMSHRHit_7 | (|(s1_req_vaddr_0[5:3]))
    & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_1 =
    s1_req_vaddr_0[5:3] < 3'h2 & s1_bankMSHRHit_7 | (|(s1_req_vaddr_0[5:4]))
    & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_2 =
    s1_req_vaddr_0[5:3] < 3'h3 & s1_bankMSHRHit_7 | s1_req_vaddr_0[5:3] > 3'h2
    & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_3 =
    ~(s1_req_vaddr_0[5]) & s1_bankMSHRHit_7 | s1_req_vaddr_0[5] & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_4 =
    s1_req_vaddr_0[5:3] < 3'h5 & s1_bankMSHRHit_7 | s1_req_vaddr_0[5:3] > 3'h4
    & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_5 =
    s1_req_vaddr_0[5:4] != 2'h3 & s1_bankMSHRHit_7 | s1_req_vaddr_0[5:3] > 3'h5
    & s1_MSHR_hits_1;
  wire        s1_bankMSHRHit_6 =
    s1_req_vaddr_0[5:3] != 3'h7 & s1_bankMSHRHit_7 | (&(s1_req_vaddr_0[5:3]))
    & s1_MSHR_hits_1;
  wire [63:0] _s1_datas_T =
    s1_bankMSHRHit_0 ? io_mshr_resp_bits_data[63:0] : io_dataArray_fromIData_datas_0;
  reg         s1_datas_REG;
  wire        _s1_datas_T_1 = s1_bankMSHRHit_0 | s1_datas_REG;
  reg  [63:0] s1_datas_r;
  wire [63:0] _s1_datas_T_3 =
    s1_bankMSHRHit_1 ? io_mshr_resp_bits_data[127:64] : io_dataArray_fromIData_datas_1;
  reg         s1_datas_REG_1;
  wire        _s1_datas_T_4 = s1_bankMSHRHit_1 | s1_datas_REG_1;
  reg  [63:0] s1_datas_r_1;
  wire [63:0] _s1_datas_T_6 =
    s1_bankMSHRHit_2 ? io_mshr_resp_bits_data[191:128] : io_dataArray_fromIData_datas_2;
  reg         s1_datas_REG_2;
  wire        _s1_datas_T_7 = s1_bankMSHRHit_2 | s1_datas_REG_2;
  reg  [63:0] s1_datas_r_2;
  wire [63:0] _s1_datas_T_9 =
    s1_bankMSHRHit_3 ? io_mshr_resp_bits_data[255:192] : io_dataArray_fromIData_datas_3;
  reg         s1_datas_REG_3;
  wire        _s1_datas_T_10 = s1_bankMSHRHit_3 | s1_datas_REG_3;
  reg  [63:0] s1_datas_r_3;
  wire [63:0] _s1_datas_T_12 =
    s1_bankMSHRHit_4 ? io_mshr_resp_bits_data[319:256] : io_dataArray_fromIData_datas_4;
  reg         s1_datas_REG_4;
  wire        _s1_datas_T_13 = s1_bankMSHRHit_4 | s1_datas_REG_4;
  reg  [63:0] s1_datas_r_4;
  wire [63:0] _s1_datas_T_15 =
    s1_bankMSHRHit_5 ? io_mshr_resp_bits_data[383:320] : io_dataArray_fromIData_datas_5;
  reg         s1_datas_REG_5;
  wire        _s1_datas_T_16 = s1_bankMSHRHit_5 | s1_datas_REG_5;
  reg  [63:0] s1_datas_r_5;
  wire [63:0] _s1_datas_T_18 =
    s1_bankMSHRHit_6 ? io_mshr_resp_bits_data[447:384] : io_dataArray_fromIData_datas_6;
  reg         s1_datas_REG_6;
  wire        _s1_datas_T_19 = s1_bankMSHRHit_6 | s1_datas_REG_6;
  reg  [63:0] s1_datas_r_6;
  wire [63:0] _s1_datas_T_21 =
    s1_bankMSHRHit_7 ? io_mshr_resp_bits_data[511:448] : io_dataArray_fromIData_datas_7;
  reg         s1_datas_REG_7;
  wire        _s1_datas_T_22 = s1_bankMSHRHit_7 | s1_datas_REG_7;
  reg  [63:0] s1_datas_r_7;
  reg         s1_data_is_from_MSHR_REG;
  wire        _s1_data_is_from_MSHR_T = s1_bankMSHRHit_0 | s1_data_is_from_MSHR_REG;
  reg         s1_data_is_from_MSHR_r;
  reg         s1_data_is_from_MSHR_REG_1;
  wire        _s1_data_is_from_MSHR_T_2 = s1_bankMSHRHit_1 | s1_data_is_from_MSHR_REG_1;
  reg         s1_data_is_from_MSHR_r_1;
  reg         s1_data_is_from_MSHR_REG_2;
  wire        _s1_data_is_from_MSHR_T_4 = s1_bankMSHRHit_2 | s1_data_is_from_MSHR_REG_2;
  reg         s1_data_is_from_MSHR_r_2;
  reg         s1_data_is_from_MSHR_REG_3;
  wire        _s1_data_is_from_MSHR_T_6 = s1_bankMSHRHit_3 | s1_data_is_from_MSHR_REG_3;
  reg         s1_data_is_from_MSHR_r_3;
  reg         s1_data_is_from_MSHR_REG_4;
  wire        _s1_data_is_from_MSHR_T_8 = s1_bankMSHRHit_4 | s1_data_is_from_MSHR_REG_4;
  reg         s1_data_is_from_MSHR_r_4;
  reg         s1_data_is_from_MSHR_REG_5;
  wire        _s1_data_is_from_MSHR_T_10 = s1_bankMSHRHit_5 | s1_data_is_from_MSHR_REG_5;
  reg         s1_data_is_from_MSHR_r_5;
  reg         s1_data_is_from_MSHR_REG_6;
  wire        _s1_data_is_from_MSHR_T_12 = s1_bankMSHRHit_6 | s1_data_is_from_MSHR_REG_6;
  reg         s1_data_is_from_MSHR_r_6;
  reg         s1_data_is_from_MSHR_REG_7;
  wire        _s1_data_is_from_MSHR_T_14 = s1_bankMSHRHit_7 | s1_data_is_from_MSHR_REG_7;
  reg         s1_data_is_from_MSHR_r_7;
  reg         s1_codes_REG;
  reg         s1_codes_r_0;
  reg         s1_codes_r_1;
  reg         s1_codes_r_2;
  reg         s1_codes_r_3;
  reg         s1_codes_r_4;
  reg         s1_codes_r_5;
  reg         s1_codes_r_6;
  reg         s1_codes_r_7;
  assign s1_ready = s2_ready | ~s1_valid;
  wire        s1_fire = s1_valid & s2_ready & ~io_flush;
  reg         s2_valid;
  reg  [49:0] s2_req_vaddr_0;
  reg  [49:0] s2_req_vaddr_1;
  reg  [35:0] s2_req_ptags_0;
  reg  [35:0] s2_req_ptags_1;
  reg  [55:0] s2_req_gpaddr;
  reg         s2_req_isForVSnonLeafPTE;
  reg         s2_doubleline;
  reg  [1:0]  s2_exception_0;
  reg  [1:0]  s2_exception_1;
  reg         s2_backendException;
  reg         s2_pmp_mmio_0;
  reg         s2_pmp_mmio_1;
  reg  [1:0]  s2_itlb_pbmt_0;
  reg  [1:0]  s2_itlb_pbmt_1;
  reg         s2_waymasks_0_0;
  reg         s2_waymasks_0_1;
  reg         s2_waymasks_0_2;
  reg         s2_waymasks_0_3;
  reg         s2_waymasks_1_0;
  reg         s2_waymasks_1_1;
  reg         s2_waymasks_1_2;
  reg         s2_waymasks_1_3;
  wire [47:0] s2_req_paddr_0 = {s2_req_ptags_0, s2_req_vaddr_0[11:0]};
  wire [47:0] s2_req_paddr_1 = {s2_req_ptags_1, s2_req_vaddr_1[11:0]};
  reg         s2_SRAMhits_0;
  reg         s2_SRAMhits_1;
  reg         s2_codes_0;
  reg         s2_codes_1;
  reg         s2_codes_2;
  reg         s2_codes_3;
  reg         s2_codes_4;
  reg         s2_codes_5;
  reg         s2_codes_6;
  reg         s2_codes_7;
  reg         s2_hits_0;
  reg         s2_hits_1;
  reg  [63:0] s2_datas_0;
  reg  [63:0] s2_datas_1;
  reg  [63:0] s2_datas_2;
  reg  [63:0] s2_datas_3;
  reg  [63:0] s2_datas_4;
  reg  [63:0] s2_datas_5;
  reg  [63:0] s2_datas_6;
  reg  [63:0] s2_datas_7;
  reg         s2_data_is_from_MSHR_0;
  reg         s2_data_is_from_MSHR_1;
  reg         s2_data_is_from_MSHR_2;
  reg         s2_data_is_from_MSHR_3;
  reg         s2_data_is_from_MSHR_4;
  reg         s2_data_is_from_MSHR_5;
  reg         s2_data_is_from_MSHR_6;
  reg         s2_data_is_from_MSHR_7;
  wire [3:0]  s2_bankSel_bankIdxLow = {1'h0, s2_req_vaddr_0[5:3]};
  wire [6:0]  _s2_bankSel_bankIdxHigh_T_1 = 7'({1'h0, s2_req_vaddr_0[5:0]} + 7'h20);
  wire        s2_bank_corrupt_0 = ^s2_datas_0 != s2_codes_0;
  wire        s2_bank_corrupt_1 = ^s2_datas_1 != s2_codes_1;
  wire        s2_bank_corrupt_2 = ^s2_datas_2 != s2_codes_2;
  wire        s2_bank_corrupt_3 = ^s2_datas_3 != s2_codes_3;
  wire        s2_bank_corrupt_4 = ^s2_datas_4 != s2_codes_4;
  wire        s2_bank_corrupt_5 = ^s2_datas_5 != s2_codes_5;
  wire        s2_bank_corrupt_6 = ^s2_datas_6 != s2_codes_6;
  wire        s2_bank_corrupt_7 = ^s2_datas_7 != s2_codes_7;
  reg         s2_meta_corrupt_0;
  reg         s2_meta_corrupt_1;
  wire        s2_corrupt_refetch_0 =
    s2_meta_corrupt_0 | io_ecc_enable
    & (s2_bank_corrupt_0 & s2_req_vaddr_0[5:3] == 3'h0 & ~s2_data_is_from_MSHR_0
       | s2_bank_corrupt_1 & s2_bankSel_bankIdxLow < 4'h2
       & (|(_s2_bankSel_bankIdxHigh_T_1[6:3])) & ~s2_data_is_from_MSHR_1
       | s2_bank_corrupt_2 & s2_bankSel_bankIdxLow < 4'h3
       & (|(_s2_bankSel_bankIdxHigh_T_1[6:4])) & ~s2_data_is_from_MSHR_2
       | s2_bank_corrupt_3 & s2_bankSel_bankIdxLow < 4'h4
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h2 & ~s2_data_is_from_MSHR_3
       | s2_bank_corrupt_4 & s2_bankSel_bankIdxLow < 4'h5
       & (|(_s2_bankSel_bankIdxHigh_T_1[6:5])) & ~s2_data_is_from_MSHR_4
       | s2_bank_corrupt_5 & s2_bankSel_bankIdxLow < 4'h6
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h4 & ~s2_data_is_from_MSHR_5
       | s2_bank_corrupt_6 & s2_bankSel_bankIdxLow < 4'h7
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h5 & ~s2_data_is_from_MSHR_6
       | s2_bank_corrupt_7 & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h6
       & ~s2_data_is_from_MSHR_7) & s2_SRAMhits_0;
  reg         io_errors_0_valid_REG;
  reg         io_errors_0_bits_report_to_beu_REG;
  wire        s2_corrupt_refetch_1 =
    s2_meta_corrupt_1 | io_ecc_enable
    & (s2_bank_corrupt_0 & s2_bankSel_bankIdxLow < 4'h9 & _s2_bankSel_bankIdxHigh_T_1[6]
       & ~s2_data_is_from_MSHR_0 | s2_bank_corrupt_1 & s2_bankSel_bankIdxLow < 4'hA
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h8 & ~s2_data_is_from_MSHR_1
       | s2_bank_corrupt_2 & s2_bankSel_bankIdxLow < 4'hB
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'h9 & ~s2_data_is_from_MSHR_2
       | s2_bank_corrupt_3 & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'hA
       & ~s2_data_is_from_MSHR_3 | s2_bank_corrupt_4 & s2_bankSel_bankIdxLow < 4'hD
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'hB & ~s2_data_is_from_MSHR_4
       | s2_bank_corrupt_5 & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'hC
       & ~s2_data_is_from_MSHR_5 | s2_bank_corrupt_6
       & _s2_bankSel_bankIdxHigh_T_1[6:3] > 4'hD & ~s2_data_is_from_MSHR_6
       | s2_bank_corrupt_7 & (&(_s2_bankSel_bankIdxHigh_T_1[6:3]))
       & ~s2_data_is_from_MSHR_7) & s2_SRAMhits_1;
  reg         io_errors_1_valid_REG;
  reg         io_errors_1_bits_report_to_beu_REG;
  reg         io_metaArrayFlush_0_valid_REG;
  reg         io_metaArrayFlush_1_valid_REG;
  reg         s2_l2_corrupt_0;
  reg         s2_l2_corrupt_1;
  wire        s2_mmio_0 = s2_pmp_mmio_0 | s2_itlb_pbmt_0 == 2'h1 | s2_itlb_pbmt_0 == 2'h2;
  wire        s2_should_fetch_0 =
    (~s2_hits_0 | s2_corrupt_refetch_0) & s2_exception_0 == 2'h0 & ~s2_mmio_0;
  wire        s2_should_fetch_1 =
    (~s2_hits_1 | s2_corrupt_refetch_1) & s2_doubleline
    & ~((|s2_exception_0) | (|s2_exception_1)) & ~s2_mmio_0
    & ~(s2_pmp_mmio_1 | s2_itlb_pbmt_1 == 2'h1 | s2_itlb_pbmt_1 == 2'h2);
  reg         s2_has_send_0;
  reg         s2_has_send_1;
  wire        _toMSHRArbiter_io_in_0_valid_T_4 =
    s2_valid & s2_should_fetch_0 & ~s2_has_send_0 & ~io_flush;
  wire        _toMSHRArbiter_io_in_1_valid_T_4 =
    s2_valid & s2_should_fetch_1 & ~s2_has_send_1 & ~io_flush;
  wire        _io_fetch_topdownIcacheMiss_T = s2_should_fetch_0 | s2_should_fetch_1;
  assign s2_ready = ~_io_fetch_topdownIcacheMiss_T & ~io_respStall | ~s2_valid;
  wire        s2_fire =
    s2_valid & ~_io_fetch_topdownIcacheMiss_T & ~io_respStall & ~io_flush;
  reg         REG_4;
  reg  [47:0] io_errors_0_bits_paddr_REG;
  reg         REG_5;
  reg  [47:0] io_errors_1_bits_paddr_REG;
  wire [2:0]  s1_meta_corrupt_hit_num =
    3'({1'h0, 2'({1'h0, s1_waymasks_0_0} + {1'h0, s1_waymasks_0_1})}
       + {1'h0, 2'({1'h0, s1_waymasks_0_2} + {1'h0, s1_waymasks_0_3})});
  wire [2:0]  s1_meta_corrupt_hit_num_1 =
    3'({1'h0, 2'({1'h0, s1_waymasks_1_0} + {1'h0, s1_waymasks_1_1})}
       + {1'h0, 2'({1'h0, s1_waymasks_1_2} + {1'h0, s1_waymasks_1_3})});
  wire        _s1_hits_T_1 = s1_bankMSHRHit_7 | s1_hits_REG & s1_SRAMhits_0;
  wire        _s1_hits_T_5 = s1_fire | io_flush;
  wire        _s1_hits_T_4 = s1_MSHR_hits_1 | s1_hits_REG_1 & s1_SRAMhits_1;
  wire        s2_bankMSHRHit_7 =
    s2_valid & s2_req_vaddr_0[13:6] == io_mshr_resp_bits_vSetIdx
    & s2_req_ptags_0 == io_mshr_resp_bits_blkPaddr[41:6] & io_mshr_resp_valid;
  wire        s2_MSHR_hits_1 =
    s2_valid & s2_req_vaddr_1[13:6] == io_mshr_resp_bits_vSetIdx
    & s2_req_ptags_1 == io_mshr_resp_bits_blkPaddr[41:6] & io_mshr_resp_valid
    & s2_doubleline;
  wire        s2_bankMSHRHit_0 =
    s2_req_vaddr_0[5:3] == 3'h0 & s2_bankMSHRHit_7 | (|(s2_req_vaddr_0[5:3]))
    & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_1 =
    s2_req_vaddr_0[5:3] < 3'h2 & s2_bankMSHRHit_7 | (|(s2_req_vaddr_0[5:4]))
    & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_2 =
    s2_req_vaddr_0[5:3] < 3'h3 & s2_bankMSHRHit_7 | s2_req_vaddr_0[5:3] > 3'h2
    & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_3 =
    ~(s2_req_vaddr_0[5]) & s2_bankMSHRHit_7 | s2_req_vaddr_0[5] & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_4 =
    s2_req_vaddr_0[5:3] < 3'h5 & s2_bankMSHRHit_7 | s2_req_vaddr_0[5:3] > 3'h4
    & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_5 =
    s2_req_vaddr_0[5:4] != 2'h3 & s2_bankMSHRHit_7 | s2_req_vaddr_0[5:3] > 3'h5
    & s2_MSHR_hits_1;
  wire        s2_bankMSHRHit_6 =
    s2_req_vaddr_0[5:3] != 3'h7 & s2_bankMSHRHit_7 | (&(s2_req_vaddr_0[5:3]))
    & s2_MSHR_hits_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s1_req_vaddr_0 <= 50'h0;
      s1_req_vaddr_1 <= 50'h0;
      s1_req_ptags_0 <= 36'h0;
      s1_req_ptags_1 <= 36'h0;
      s1_req_gpaddr <= 56'h0;
      s1_req_isForVSnonLeafPTE <= 1'h0;
      s1_doubleline <= 1'h0;
      s1_SRAMhits_0 <= 1'h0;
      s1_SRAMhits_1 <= 1'h0;
      s1_itlb_exception_0 <= 2'h0;
      s1_itlb_exception_1 <= 2'h0;
      s1_backendException <= 1'h0;
      s1_itlb_pbmt_0 <= 2'h0;
      s1_itlb_pbmt_1 <= 2'h0;
      s1_waymasks_0_0 <= 1'h0;
      s1_waymasks_0_1 <= 1'h0;
      s1_waymasks_0_2 <= 1'h0;
      s1_waymasks_0_3 <= 1'h0;
      s1_waymasks_1_0 <= 1'h0;
      s1_waymasks_1_1 <= 1'h0;
      s1_waymasks_1_2 <= 1'h0;
      s1_waymasks_1_3 <= 1'h0;
      s1_meta_codes_0 <= 1'h0;
      s1_meta_codes_1 <= 1'h0;
      s1_hits_valid <= 1'h0;
      s1_hits_valid_1 <= 1'h0;
      s2_valid <= 1'h0;
      s2_req_vaddr_0 <= 50'h0;
      s2_req_vaddr_1 <= 50'h0;
      s2_req_ptags_0 <= 36'h0;
      s2_req_ptags_1 <= 36'h0;
      s2_req_gpaddr <= 56'h0;
      s2_req_isForVSnonLeafPTE <= 1'h0;
      s2_doubleline <= 1'h0;
      s2_exception_0 <= 2'h0;
      s2_exception_1 <= 2'h0;
      s2_backendException <= 1'h0;
      s2_pmp_mmio_0 <= 1'h0;
      s2_pmp_mmio_1 <= 1'h0;
      s2_itlb_pbmt_0 <= 2'h0;
      s2_itlb_pbmt_1 <= 2'h0;
      s2_waymasks_0_0 <= 1'h0;
      s2_waymasks_0_1 <= 1'h0;
      s2_waymasks_0_2 <= 1'h0;
      s2_waymasks_0_3 <= 1'h0;
      s2_waymasks_1_0 <= 1'h0;
      s2_waymasks_1_1 <= 1'h0;
      s2_waymasks_1_2 <= 1'h0;
      s2_waymasks_1_3 <= 1'h0;
      s2_SRAMhits_0 <= 1'h0;
      s2_SRAMhits_1 <= 1'h0;
      s2_codes_0 <= 1'h0;
      s2_codes_1 <= 1'h0;
      s2_codes_2 <= 1'h0;
      s2_codes_3 <= 1'h0;
      s2_codes_4 <= 1'h0;
      s2_codes_5 <= 1'h0;
      s2_codes_6 <= 1'h0;
      s2_codes_7 <= 1'h0;
      s2_hits_0 <= 1'h0;
      s2_hits_1 <= 1'h0;
      s2_datas_0 <= 64'h0;
      s2_datas_1 <= 64'h0;
      s2_datas_2 <= 64'h0;
      s2_datas_3 <= 64'h0;
      s2_datas_4 <= 64'h0;
      s2_datas_5 <= 64'h0;
      s2_datas_6 <= 64'h0;
      s2_datas_7 <= 64'h0;
      s2_data_is_from_MSHR_0 <= 1'h0;
      s2_data_is_from_MSHR_1 <= 1'h0;
      s2_data_is_from_MSHR_2 <= 1'h0;
      s2_data_is_from_MSHR_3 <= 1'h0;
      s2_data_is_from_MSHR_4 <= 1'h0;
      s2_data_is_from_MSHR_5 <= 1'h0;
      s2_data_is_from_MSHR_6 <= 1'h0;
      s2_data_is_from_MSHR_7 <= 1'h0;
      s2_meta_corrupt_0 <= 1'h0;
      s2_meta_corrupt_1 <= 1'h0;
      s2_l2_corrupt_0 <= 1'h0;
      s2_l2_corrupt_1 <= 1'h0;
      s2_has_send_0 <= 1'h0;
      s2_has_send_1 <= 1'h0;
    end
    else begin
      s1_valid <= ~io_flush & (s0_fire | ~s1_fire & s1_valid);
      if (s0_fire) begin
        s1_req_vaddr_0 <= io_fetch_req_bits_pcMemRead_4_startAddr;
        s1_req_vaddr_1 <= io_fetch_req_bits_pcMemRead_4_nextlineStart;
        s1_req_ptags_0 <= io_wayLookupRead_bits_entry_ptag_0;
        s1_req_ptags_1 <= io_wayLookupRead_bits_entry_ptag_1;
        s1_req_gpaddr <= io_wayLookupRead_bits_gpf_gpaddr;
        s1_req_isForVSnonLeafPTE <= io_wayLookupRead_bits_gpf_isForVSnonLeafPTE;
        s1_doubleline <=
          io_fetch_req_bits_readValid_4 & io_fetch_req_bits_pcMemRead_4_startAddr[5];
        s1_SRAMhits_0 <= |io_wayLookupRead_bits_entry_waymask_0;
        s1_SRAMhits_1 <= |io_wayLookupRead_bits_entry_waymask_1;
        s1_itlb_exception_0 <= io_wayLookupRead_bits_entry_itlb_exception_0;
        s1_itlb_exception_1 <= io_wayLookupRead_bits_entry_itlb_exception_1;
        s1_backendException <= io_fetch_req_bits_backendException;
        s1_itlb_pbmt_0 <= io_wayLookupRead_bits_entry_itlb_pbmt_0;
        s1_itlb_pbmt_1 <= io_wayLookupRead_bits_entry_itlb_pbmt_1;
        s1_waymasks_0_0 <= io_wayLookupRead_bits_entry_waymask_0[0];
        s1_waymasks_0_1 <= io_wayLookupRead_bits_entry_waymask_0[1];
        s1_waymasks_0_2 <= io_wayLookupRead_bits_entry_waymask_0[2];
        s1_waymasks_0_3 <= io_wayLookupRead_bits_entry_waymask_0[3];
        s1_waymasks_1_0 <= io_wayLookupRead_bits_entry_waymask_1[0];
        s1_waymasks_1_1 <= io_wayLookupRead_bits_entry_waymask_1[1];
        s1_waymasks_1_2 <= io_wayLookupRead_bits_entry_waymask_1[2];
        s1_waymasks_1_3 <= io_wayLookupRead_bits_entry_waymask_1[3];
        s1_meta_codes_0 <= io_wayLookupRead_bits_entry_meta_codes_0;
        s1_meta_codes_1 <= io_wayLookupRead_bits_entry_meta_codes_1;
      end
      s1_hits_valid <= ~_s1_hits_T_5 & (_s1_hits_T_1 | s1_hits_valid);
      s1_hits_valid_1 <= ~_s1_hits_T_5 & (_s1_hits_T_4 | s1_hits_valid_1);
      s2_valid <= ~io_flush & (s1_fire | ~s2_fire & s2_valid);
      if (s1_fire) begin
        s2_req_vaddr_0 <= s1_req_vaddr_0;
        s2_req_vaddr_1 <= s1_req_vaddr_1;
        s2_req_ptags_0 <= s1_req_ptags_0;
        s2_req_ptags_1 <= s1_req_ptags_1;
        s2_req_gpaddr <= s1_req_gpaddr;
        s2_req_isForVSnonLeafPTE <= s1_req_isForVSnonLeafPTE;
        s2_doubleline <= s1_doubleline;
        s2_exception_0 <=
          (|s1_itlb_exception_0) ? s1_itlb_exception_0 : {2{io_pmp_0_resp_instr}};
        s2_exception_1 <=
          (|s1_itlb_exception_1) ? s1_itlb_exception_1 : {2{io_pmp_1_resp_instr}};
        s2_backendException <= s1_backendException;
        s2_pmp_mmio_0 <= io_pmp_0_resp_mmio;
        s2_pmp_mmio_1 <= io_pmp_1_resp_mmio;
        s2_itlb_pbmt_0 <= s1_itlb_pbmt_0;
        s2_itlb_pbmt_1 <= s1_itlb_pbmt_1;
        s2_waymasks_0_0 <= s1_waymasks_0_0;
        s2_waymasks_0_1 <= s1_waymasks_0_1;
        s2_waymasks_0_2 <= s1_waymasks_0_2;
        s2_waymasks_0_3 <= s1_waymasks_0_3;
        s2_waymasks_1_0 <= s1_waymasks_1_0;
        s2_waymasks_1_1 <= s1_waymasks_1_1;
        s2_waymasks_1_2 <= s1_waymasks_1_2;
        s2_waymasks_1_3 <= s1_waymasks_1_3;
        s2_SRAMhits_0 <= s1_SRAMhits_0;
        s2_SRAMhits_1 <= s1_SRAMhits_1;
        s2_codes_0 <= s1_codes_REG ? io_dataArray_fromIData_codes_0 : s1_codes_r_0;
        s2_codes_1 <= s1_codes_REG ? io_dataArray_fromIData_codes_1 : s1_codes_r_1;
        s2_codes_2 <= s1_codes_REG ? io_dataArray_fromIData_codes_2 : s1_codes_r_2;
        s2_codes_3 <= s1_codes_REG ? io_dataArray_fromIData_codes_3 : s1_codes_r_3;
        s2_codes_4 <= s1_codes_REG ? io_dataArray_fromIData_codes_4 : s1_codes_r_4;
        s2_codes_5 <= s1_codes_REG ? io_dataArray_fromIData_codes_5 : s1_codes_r_5;
        s2_codes_6 <= s1_codes_REG ? io_dataArray_fromIData_codes_6 : s1_codes_r_6;
        s2_codes_7 <= s1_codes_REG ? io_dataArray_fromIData_codes_7 : s1_codes_r_7;
        s2_hits_0 <= s1_hits_valid | _s1_hits_T_1;
        s2_hits_1 <= s1_hits_valid_1 | _s1_hits_T_4;
        s2_datas_0 <= _s1_datas_T_1 ? _s1_datas_T : s1_datas_r;
        s2_datas_1 <= _s1_datas_T_4 ? _s1_datas_T_3 : s1_datas_r_1;
        s2_datas_2 <= _s1_datas_T_7 ? _s1_datas_T_6 : s1_datas_r_2;
        s2_datas_3 <= _s1_datas_T_10 ? _s1_datas_T_9 : s1_datas_r_3;
        s2_datas_4 <= _s1_datas_T_13 ? _s1_datas_T_12 : s1_datas_r_4;
        s2_datas_5 <= _s1_datas_T_16 ? _s1_datas_T_15 : s1_datas_r_5;
        s2_datas_6 <= _s1_datas_T_19 ? _s1_datas_T_18 : s1_datas_r_6;
        s2_datas_7 <= _s1_datas_T_22 ? _s1_datas_T_21 : s1_datas_r_7;
        s2_data_is_from_MSHR_0 <=
          _s1_data_is_from_MSHR_T ? s1_bankMSHRHit_0 : s1_data_is_from_MSHR_r;
        s2_data_is_from_MSHR_1 <=
          _s1_data_is_from_MSHR_T_2 ? s1_bankMSHRHit_1 : s1_data_is_from_MSHR_r_1;
        s2_data_is_from_MSHR_2 <=
          _s1_data_is_from_MSHR_T_4 ? s1_bankMSHRHit_2 : s1_data_is_from_MSHR_r_2;
        s2_data_is_from_MSHR_3 <=
          _s1_data_is_from_MSHR_T_6 ? s1_bankMSHRHit_3 : s1_data_is_from_MSHR_r_3;
        s2_data_is_from_MSHR_4 <=
          _s1_data_is_from_MSHR_T_8 ? s1_bankMSHRHit_4 : s1_data_is_from_MSHR_r_4;
        s2_data_is_from_MSHR_5 <=
          _s1_data_is_from_MSHR_T_10 ? s1_bankMSHRHit_5 : s1_data_is_from_MSHR_r_5;
        s2_data_is_from_MSHR_6 <=
          _s1_data_is_from_MSHR_T_12 ? s1_bankMSHRHit_6 : s1_data_is_from_MSHR_r_6;
        s2_data_is_from_MSHR_7 <=
          _s1_data_is_from_MSHR_T_14 ? s1_bankMSHRHit_7 : s1_data_is_from_MSHR_r_7;
        s2_meta_corrupt_0 <=
          io_ecc_enable
          & (^s1_req_ptags_0 != s1_meta_codes_0 & s1_meta_corrupt_hit_num == 3'h1
             | (|(s1_meta_corrupt_hit_num[2:1])));
        s2_meta_corrupt_1 <=
          io_ecc_enable
          & (^s1_req_ptags_1 != s1_meta_codes_1 & s1_meta_corrupt_hit_num_1 == 3'h1
             | (|(s1_meta_corrupt_hit_num_1[2:1])));
      end
      else begin
        s2_hits_0 <= s2_bankMSHRHit_7 | s2_hits_0;
        s2_hits_1 <= s2_MSHR_hits_1 | s2_hits_1;
        if (s2_bankMSHRHit_0)
          s2_datas_0 <= io_mshr_resp_bits_data[63:0];
        if (s2_bankMSHRHit_1)
          s2_datas_1 <= io_mshr_resp_bits_data[127:64];
        if (s2_bankMSHRHit_2)
          s2_datas_2 <= io_mshr_resp_bits_data[191:128];
        if (s2_bankMSHRHit_3)
          s2_datas_3 <= io_mshr_resp_bits_data[255:192];
        if (s2_bankMSHRHit_4)
          s2_datas_4 <= io_mshr_resp_bits_data[319:256];
        if (s2_bankMSHRHit_5)
          s2_datas_5 <= io_mshr_resp_bits_data[383:320];
        if (s2_bankMSHRHit_6)
          s2_datas_6 <= io_mshr_resp_bits_data[447:384];
        if (s2_bankMSHRHit_7)
          s2_datas_7 <= io_mshr_resp_bits_data[511:448];
        s2_data_is_from_MSHR_0 <= s2_bankMSHRHit_0 | s2_data_is_from_MSHR_0;
        s2_data_is_from_MSHR_1 <= s2_bankMSHRHit_1 | s2_data_is_from_MSHR_1;
        s2_data_is_from_MSHR_2 <= s2_bankMSHRHit_2 | s2_data_is_from_MSHR_2;
        s2_data_is_from_MSHR_3 <= s2_bankMSHRHit_3 | s2_data_is_from_MSHR_3;
        s2_data_is_from_MSHR_4 <= s2_bankMSHRHit_4 | s2_data_is_from_MSHR_4;
        s2_data_is_from_MSHR_5 <= s2_bankMSHRHit_5 | s2_data_is_from_MSHR_5;
        s2_data_is_from_MSHR_6 <= s2_bankMSHRHit_6 | s2_data_is_from_MSHR_6;
        s2_data_is_from_MSHR_7 <= s2_bankMSHRHit_7 | s2_data_is_from_MSHR_7;
        s2_meta_corrupt_0 <= ~s2_bankMSHRHit_7 & s2_meta_corrupt_0;
        s2_meta_corrupt_1 <= ~s2_MSHR_hits_1 & s2_meta_corrupt_1;
      end
      s2_l2_corrupt_0 <=
        ~s1_fire & (s2_bankMSHRHit_7 ? io_mshr_resp_bits_corrupt : s2_l2_corrupt_0);
      s2_l2_corrupt_1 <=
        ~s1_fire & (s2_MSHR_hits_1 ? io_mshr_resp_bits_corrupt : s2_l2_corrupt_1);
      s2_has_send_0 <=
        ~s1_fire
        & (_toMSHRArbiter_io_in_0_ready & _toMSHRArbiter_io_in_0_valid_T_4
           | s2_has_send_0);
      s2_has_send_1 <=
        ~s1_fire
        & (_toMSHRArbiter_io_in_1_ready & _toMSHRArbiter_io_in_1_valid_T_4
           | s2_has_send_1);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    io_touch_0_valid_REG <= s0_fire;
    io_touch_1_valid_REG <= s0_fire;
    s1_hits_REG <= s0_fire;
    s1_hits_REG_1 <= s0_fire;
    s1_datas_REG <= s0_fire;
    if (_s1_datas_T_1)
      s1_datas_r <= _s1_datas_T;
    s1_datas_REG_1 <= s0_fire;
    if (_s1_datas_T_4)
      s1_datas_r_1 <= _s1_datas_T_3;
    s1_datas_REG_2 <= s0_fire;
    if (_s1_datas_T_7)
      s1_datas_r_2 <= _s1_datas_T_6;
    s1_datas_REG_3 <= s0_fire;
    if (_s1_datas_T_10)
      s1_datas_r_3 <= _s1_datas_T_9;
    s1_datas_REG_4 <= s0_fire;
    if (_s1_datas_T_13)
      s1_datas_r_4 <= _s1_datas_T_12;
    s1_datas_REG_5 <= s0_fire;
    if (_s1_datas_T_16)
      s1_datas_r_5 <= _s1_datas_T_15;
    s1_datas_REG_6 <= s0_fire;
    if (_s1_datas_T_19)
      s1_datas_r_6 <= _s1_datas_T_18;
    s1_datas_REG_7 <= s0_fire;
    if (_s1_datas_T_22)
      s1_datas_r_7 <= _s1_datas_T_21;
    s1_data_is_from_MSHR_REG <= s0_fire;
    if (_s1_data_is_from_MSHR_T)
      s1_data_is_from_MSHR_r <= s1_bankMSHRHit_0;
    s1_data_is_from_MSHR_REG_1 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_2)
      s1_data_is_from_MSHR_r_1 <= s1_bankMSHRHit_1;
    s1_data_is_from_MSHR_REG_2 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_4)
      s1_data_is_from_MSHR_r_2 <= s1_bankMSHRHit_2;
    s1_data_is_from_MSHR_REG_3 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_6)
      s1_data_is_from_MSHR_r_3 <= s1_bankMSHRHit_3;
    s1_data_is_from_MSHR_REG_4 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_8)
      s1_data_is_from_MSHR_r_4 <= s1_bankMSHRHit_4;
    s1_data_is_from_MSHR_REG_5 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_10)
      s1_data_is_from_MSHR_r_5 <= s1_bankMSHRHit_5;
    s1_data_is_from_MSHR_REG_6 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_12)
      s1_data_is_from_MSHR_r_6 <= s1_bankMSHRHit_6;
    s1_data_is_from_MSHR_REG_7 <= s0_fire;
    if (_s1_data_is_from_MSHR_T_14)
      s1_data_is_from_MSHR_r_7 <= s1_bankMSHRHit_7;
    s1_codes_REG <= s0_fire;
    if (s1_codes_REG) begin
      s1_codes_r_0 <= io_dataArray_fromIData_codes_0;
      s1_codes_r_1 <= io_dataArray_fromIData_codes_1;
      s1_codes_r_2 <= io_dataArray_fromIData_codes_2;
      s1_codes_r_3 <= io_dataArray_fromIData_codes_3;
      s1_codes_r_4 <= io_dataArray_fromIData_codes_4;
      s1_codes_r_5 <= io_dataArray_fromIData_codes_5;
      s1_codes_r_6 <= io_dataArray_fromIData_codes_6;
      s1_codes_r_7 <= io_dataArray_fromIData_codes_7;
    end
    io_errors_0_valid_REG <= s1_fire;
    io_errors_0_bits_report_to_beu_REG <= s1_fire;
    io_errors_1_valid_REG <= s1_fire;
    io_errors_1_bits_report_to_beu_REG <= s1_fire;
    io_metaArrayFlush_0_valid_REG <= s1_fire;
    io_metaArrayFlush_1_valid_REG <= s1_fire;
    REG_4 <= s2_fire & s2_l2_corrupt_0;
    io_errors_0_bits_paddr_REG <= s2_req_paddr_0;
    REG_5 <= s2_fire & s2_l2_corrupt_1;
    io_errors_1_bits_paddr_REG <= s2_req_paddr_1;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:54];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h37; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s1_valid = _RANDOM[6'h1][0];
        s1_req_vaddr_0 = {_RANDOM[6'h1][31:1], _RANDOM[6'h2][18:0]};
        s1_req_vaddr_1 = {_RANDOM[6'h2][31:19], _RANDOM[6'h3], _RANDOM[6'h4][4:0]};
        s1_req_ptags_0 = {_RANDOM[6'h4][31:5], _RANDOM[6'h5][8:0]};
        s1_req_ptags_1 = {_RANDOM[6'h5][31:9], _RANDOM[6'h6][12:0]};
        s1_req_gpaddr = {_RANDOM[6'h6][31:13], _RANDOM[6'h7], _RANDOM[6'h8][4:0]};
        s1_req_isForVSnonLeafPTE = _RANDOM[6'h8][5];
        s1_doubleline = _RANDOM[6'h8][6];
        s1_SRAMhits_0 = _RANDOM[6'h8][7];
        s1_SRAMhits_1 = _RANDOM[6'h8][8];
        s1_itlb_exception_0 = _RANDOM[6'h8][10:9];
        s1_itlb_exception_1 = _RANDOM[6'h8][12:11];
        s1_backendException = _RANDOM[6'h8][13];
        s1_itlb_pbmt_0 = _RANDOM[6'h8][15:14];
        s1_itlb_pbmt_1 = _RANDOM[6'h8][17:16];
        s1_waymasks_0_0 = _RANDOM[6'h8][18];
        s1_waymasks_0_1 = _RANDOM[6'h8][19];
        s1_waymasks_0_2 = _RANDOM[6'h8][20];
        s1_waymasks_0_3 = _RANDOM[6'h8][21];
        s1_waymasks_1_0 = _RANDOM[6'h8][22];
        s1_waymasks_1_1 = _RANDOM[6'h8][23];
        s1_waymasks_1_2 = _RANDOM[6'h8][24];
        s1_waymasks_1_3 = _RANDOM[6'h8][25];
        s1_meta_codes_0 = _RANDOM[6'h8][26];
        s1_meta_codes_1 = _RANDOM[6'h8][27];
        io_touch_0_valid_REG = _RANDOM[6'h8][28];
        io_touch_1_valid_REG = _RANDOM[6'h8][29];
        s1_hits_REG = _RANDOM[6'h8][30];
        s1_hits_valid = _RANDOM[6'h8][31];
        s1_hits_REG_1 = _RANDOM[6'h9][0];
        s1_hits_valid_1 = _RANDOM[6'h9][1];
        s1_datas_REG = _RANDOM[6'h9][2];
        s1_datas_r = {_RANDOM[6'h9][31:3], _RANDOM[6'hA], _RANDOM[6'hB][2:0]};
        s1_datas_REG_1 = _RANDOM[6'hB][3];
        s1_datas_r_1 = {_RANDOM[6'hB][31:4], _RANDOM[6'hC], _RANDOM[6'hD][3:0]};
        s1_datas_REG_2 = _RANDOM[6'hD][4];
        s1_datas_r_2 = {_RANDOM[6'hD][31:5], _RANDOM[6'hE], _RANDOM[6'hF][4:0]};
        s1_datas_REG_3 = _RANDOM[6'hF][5];
        s1_datas_r_3 = {_RANDOM[6'hF][31:6], _RANDOM[6'h10], _RANDOM[6'h11][5:0]};
        s1_datas_REG_4 = _RANDOM[6'h11][6];
        s1_datas_r_4 = {_RANDOM[6'h11][31:7], _RANDOM[6'h12], _RANDOM[6'h13][6:0]};
        s1_datas_REG_5 = _RANDOM[6'h13][7];
        s1_datas_r_5 = {_RANDOM[6'h13][31:8], _RANDOM[6'h14], _RANDOM[6'h15][7:0]};
        s1_datas_REG_6 = _RANDOM[6'h15][8];
        s1_datas_r_6 = {_RANDOM[6'h15][31:9], _RANDOM[6'h16], _RANDOM[6'h17][8:0]};
        s1_datas_REG_7 = _RANDOM[6'h17][9];
        s1_datas_r_7 = {_RANDOM[6'h17][31:10], _RANDOM[6'h18], _RANDOM[6'h19][9:0]};
        s1_data_is_from_MSHR_REG = _RANDOM[6'h19][10];
        s1_data_is_from_MSHR_r = _RANDOM[6'h19][11];
        s1_data_is_from_MSHR_REG_1 = _RANDOM[6'h19][12];
        s1_data_is_from_MSHR_r_1 = _RANDOM[6'h19][13];
        s1_data_is_from_MSHR_REG_2 = _RANDOM[6'h19][14];
        s1_data_is_from_MSHR_r_2 = _RANDOM[6'h19][15];
        s1_data_is_from_MSHR_REG_3 = _RANDOM[6'h19][16];
        s1_data_is_from_MSHR_r_3 = _RANDOM[6'h19][17];
        s1_data_is_from_MSHR_REG_4 = _RANDOM[6'h19][18];
        s1_data_is_from_MSHR_r_4 = _RANDOM[6'h19][19];
        s1_data_is_from_MSHR_REG_5 = _RANDOM[6'h19][20];
        s1_data_is_from_MSHR_r_5 = _RANDOM[6'h19][21];
        s1_data_is_from_MSHR_REG_6 = _RANDOM[6'h19][22];
        s1_data_is_from_MSHR_r_6 = _RANDOM[6'h19][23];
        s1_data_is_from_MSHR_REG_7 = _RANDOM[6'h19][24];
        s1_data_is_from_MSHR_r_7 = _RANDOM[6'h19][25];
        s1_codes_REG = _RANDOM[6'h19][26];
        s1_codes_r_0 = _RANDOM[6'h19][27];
        s1_codes_r_1 = _RANDOM[6'h19][28];
        s1_codes_r_2 = _RANDOM[6'h19][29];
        s1_codes_r_3 = _RANDOM[6'h19][30];
        s1_codes_r_4 = _RANDOM[6'h19][31];
        s1_codes_r_5 = _RANDOM[6'h1A][0];
        s1_codes_r_6 = _RANDOM[6'h1A][1];
        s1_codes_r_7 = _RANDOM[6'h1A][2];
        s2_valid = _RANDOM[6'h1A][3];
        s2_req_vaddr_0 = {_RANDOM[6'h1A][31:4], _RANDOM[6'h1B][21:0]};
        s2_req_vaddr_1 = {_RANDOM[6'h1B][31:22], _RANDOM[6'h1C], _RANDOM[6'h1D][7:0]};
        s2_req_ptags_0 = {_RANDOM[6'h1D][31:8], _RANDOM[6'h1E][11:0]};
        s2_req_ptags_1 = {_RANDOM[6'h1E][31:12], _RANDOM[6'h1F][15:0]};
        s2_req_gpaddr = {_RANDOM[6'h1F][31:16], _RANDOM[6'h20], _RANDOM[6'h21][7:0]};
        s2_req_isForVSnonLeafPTE = _RANDOM[6'h21][8];
        s2_doubleline = _RANDOM[6'h21][9];
        s2_exception_0 = _RANDOM[6'h21][11:10];
        s2_exception_1 = _RANDOM[6'h21][13:12];
        s2_backendException = _RANDOM[6'h21][14];
        s2_pmp_mmio_0 = _RANDOM[6'h21][15];
        s2_pmp_mmio_1 = _RANDOM[6'h21][16];
        s2_itlb_pbmt_0 = _RANDOM[6'h21][18:17];
        s2_itlb_pbmt_1 = _RANDOM[6'h21][20:19];
        s2_waymasks_0_0 = _RANDOM[6'h21][21];
        s2_waymasks_0_1 = _RANDOM[6'h21][22];
        s2_waymasks_0_2 = _RANDOM[6'h21][23];
        s2_waymasks_0_3 = _RANDOM[6'h21][24];
        s2_waymasks_1_0 = _RANDOM[6'h21][25];
        s2_waymasks_1_1 = _RANDOM[6'h21][26];
        s2_waymasks_1_2 = _RANDOM[6'h21][27];
        s2_waymasks_1_3 = _RANDOM[6'h21][28];
        s2_SRAMhits_0 = _RANDOM[6'h21][29];
        s2_SRAMhits_1 = _RANDOM[6'h21][30];
        s2_codes_0 = _RANDOM[6'h21][31];
        s2_codes_1 = _RANDOM[6'h22][0];
        s2_codes_2 = _RANDOM[6'h22][1];
        s2_codes_3 = _RANDOM[6'h22][2];
        s2_codes_4 = _RANDOM[6'h22][3];
        s2_codes_5 = _RANDOM[6'h22][4];
        s2_codes_6 = _RANDOM[6'h22][5];
        s2_codes_7 = _RANDOM[6'h22][6];
        s2_hits_0 = _RANDOM[6'h22][7];
        s2_hits_1 = _RANDOM[6'h22][8];
        s2_datas_0 = {_RANDOM[6'h22][31:9], _RANDOM[6'h23], _RANDOM[6'h24][8:0]};
        s2_datas_1 = {_RANDOM[6'h24][31:9], _RANDOM[6'h25], _RANDOM[6'h26][8:0]};
        s2_datas_2 = {_RANDOM[6'h26][31:9], _RANDOM[6'h27], _RANDOM[6'h28][8:0]};
        s2_datas_3 = {_RANDOM[6'h28][31:9], _RANDOM[6'h29], _RANDOM[6'h2A][8:0]};
        s2_datas_4 = {_RANDOM[6'h2A][31:9], _RANDOM[6'h2B], _RANDOM[6'h2C][8:0]};
        s2_datas_5 = {_RANDOM[6'h2C][31:9], _RANDOM[6'h2D], _RANDOM[6'h2E][8:0]};
        s2_datas_6 = {_RANDOM[6'h2E][31:9], _RANDOM[6'h2F], _RANDOM[6'h30][8:0]};
        s2_datas_7 = {_RANDOM[6'h30][31:9], _RANDOM[6'h31], _RANDOM[6'h32][8:0]};
        s2_data_is_from_MSHR_0 = _RANDOM[6'h32][9];
        s2_data_is_from_MSHR_1 = _RANDOM[6'h32][10];
        s2_data_is_from_MSHR_2 = _RANDOM[6'h32][11];
        s2_data_is_from_MSHR_3 = _RANDOM[6'h32][12];
        s2_data_is_from_MSHR_4 = _RANDOM[6'h32][13];
        s2_data_is_from_MSHR_5 = _RANDOM[6'h32][14];
        s2_data_is_from_MSHR_6 = _RANDOM[6'h32][15];
        s2_data_is_from_MSHR_7 = _RANDOM[6'h32][16];
        s2_meta_corrupt_0 = _RANDOM[6'h32][17];
        s2_meta_corrupt_1 = _RANDOM[6'h32][18];
        io_errors_0_valid_REG = _RANDOM[6'h32][19];
        io_errors_0_bits_report_to_beu_REG = _RANDOM[6'h32][20];
        io_errors_1_valid_REG = _RANDOM[6'h32][21];
        io_errors_1_bits_report_to_beu_REG = _RANDOM[6'h32][22];
        io_metaArrayFlush_0_valid_REG = _RANDOM[6'h32][23];
        io_metaArrayFlush_1_valid_REG = _RANDOM[6'h32][24];
        s2_l2_corrupt_0 = _RANDOM[6'h32][29];
        s2_l2_corrupt_1 = _RANDOM[6'h32][30];
        s2_has_send_0 = _RANDOM[6'h32][31];
        s2_has_send_1 = _RANDOM[6'h33][0];
        REG_4 = _RANDOM[6'h33][1];
        io_errors_0_bits_paddr_REG = {_RANDOM[6'h33][31:2], _RANDOM[6'h34][17:0]};
        REG_5 = _RANDOM[6'h34][18];
        io_errors_1_bits_paddr_REG =
          {_RANDOM[6'h34][31:19], _RANDOM[6'h35], _RANDOM[6'h36][2:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s1_valid = 1'h0;
        s1_req_vaddr_0 = 50'h0;
        s1_req_vaddr_1 = 50'h0;
        s1_req_ptags_0 = 36'h0;
        s1_req_ptags_1 = 36'h0;
        s1_req_gpaddr = 56'h0;
        s1_req_isForVSnonLeafPTE = 1'h0;
        s1_doubleline = 1'h0;
        s1_SRAMhits_0 = 1'h0;
        s1_SRAMhits_1 = 1'h0;
        s1_itlb_exception_0 = 2'h0;
        s1_itlb_exception_1 = 2'h0;
        s1_backendException = 1'h0;
        s1_itlb_pbmt_0 = 2'h0;
        s1_itlb_pbmt_1 = 2'h0;
        s1_waymasks_0_0 = 1'h0;
        s1_waymasks_0_1 = 1'h0;
        s1_waymasks_0_2 = 1'h0;
        s1_waymasks_0_3 = 1'h0;
        s1_waymasks_1_0 = 1'h0;
        s1_waymasks_1_1 = 1'h0;
        s1_waymasks_1_2 = 1'h0;
        s1_waymasks_1_3 = 1'h0;
        s1_meta_codes_0 = 1'h0;
        s1_meta_codes_1 = 1'h0;
        s1_hits_valid = 1'h0;
        s1_hits_valid_1 = 1'h0;
        s2_valid = 1'h0;
        s2_req_vaddr_0 = 50'h0;
        s2_req_vaddr_1 = 50'h0;
        s2_req_ptags_0 = 36'h0;
        s2_req_ptags_1 = 36'h0;
        s2_req_gpaddr = 56'h0;
        s2_req_isForVSnonLeafPTE = 1'h0;
        s2_doubleline = 1'h0;
        s2_exception_0 = 2'h0;
        s2_exception_1 = 2'h0;
        s2_backendException = 1'h0;
        s2_pmp_mmio_0 = 1'h0;
        s2_pmp_mmio_1 = 1'h0;
        s2_itlb_pbmt_0 = 2'h0;
        s2_itlb_pbmt_1 = 2'h0;
        s2_waymasks_0_0 = 1'h0;
        s2_waymasks_0_1 = 1'h0;
        s2_waymasks_0_2 = 1'h0;
        s2_waymasks_0_3 = 1'h0;
        s2_waymasks_1_0 = 1'h0;
        s2_waymasks_1_1 = 1'h0;
        s2_waymasks_1_2 = 1'h0;
        s2_waymasks_1_3 = 1'h0;
        s2_SRAMhits_0 = 1'h0;
        s2_SRAMhits_1 = 1'h0;
        s2_codes_0 = 1'h0;
        s2_codes_1 = 1'h0;
        s2_codes_2 = 1'h0;
        s2_codes_3 = 1'h0;
        s2_codes_4 = 1'h0;
        s2_codes_5 = 1'h0;
        s2_codes_6 = 1'h0;
        s2_codes_7 = 1'h0;
        s2_hits_0 = 1'h0;
        s2_hits_1 = 1'h0;
        s2_datas_0 = 64'h0;
        s2_datas_1 = 64'h0;
        s2_datas_2 = 64'h0;
        s2_datas_3 = 64'h0;
        s2_datas_4 = 64'h0;
        s2_datas_5 = 64'h0;
        s2_datas_6 = 64'h0;
        s2_datas_7 = 64'h0;
        s2_data_is_from_MSHR_0 = 1'h0;
        s2_data_is_from_MSHR_1 = 1'h0;
        s2_data_is_from_MSHR_2 = 1'h0;
        s2_data_is_from_MSHR_3 = 1'h0;
        s2_data_is_from_MSHR_4 = 1'h0;
        s2_data_is_from_MSHR_5 = 1'h0;
        s2_data_is_from_MSHR_6 = 1'h0;
        s2_data_is_from_MSHR_7 = 1'h0;
        s2_meta_corrupt_0 = 1'h0;
        s2_meta_corrupt_1 = 1'h0;
        s2_l2_corrupt_0 = 1'h0;
        s2_l2_corrupt_1 = 1'h0;
        s2_has_send_0 = 1'h0;
        s2_has_send_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Arbiter2_ICacheMissReq toMSHRArbiter (
    .io_in_0_ready         (_toMSHRArbiter_io_in_0_ready),
    .io_in_0_valid         (_toMSHRArbiter_io_in_0_valid_T_4),
    .io_in_0_bits_blkPaddr ({s2_req_ptags_0, s2_req_vaddr_0[11:6]}),
    .io_in_0_bits_vSetIdx  (s2_req_vaddr_0[13:6]),
    .io_in_1_ready         (_toMSHRArbiter_io_in_1_ready),
    .io_in_1_valid         (_toMSHRArbiter_io_in_1_valid_T_4),
    .io_in_1_bits_blkPaddr ({s2_req_ptags_1, s2_req_vaddr_1[11:6]}),
    .io_in_1_bits_vSetIdx  (s2_req_vaddr_1[13:6]),
    .io_out_ready          (io_mshr_req_ready),
    .io_out_valid          (io_mshr_req_valid),
    .io_out_bits_blkPaddr  (io_mshr_req_bits_blkPaddr),
    .io_out_bits_vSetIdx   (io_mshr_req_bits_vSetIdx)
  );
  assign io_dataArray_toIData_0_valid = io_fetch_req_bits_readValid_0;
  assign io_dataArray_toIData_0_bits_vSetIdx_0 =
    io_fetch_req_bits_pcMemRead_0_startAddr[13:6];
  assign io_dataArray_toIData_0_bits_vSetIdx_1 =
    io_fetch_req_bits_pcMemRead_0_nextlineStart[13:6];
  assign io_dataArray_toIData_0_bits_waymask_0_0 =
    io_wayLookupRead_bits_entry_waymask_0[0];
  assign io_dataArray_toIData_0_bits_waymask_0_1 =
    io_wayLookupRead_bits_entry_waymask_0[1];
  assign io_dataArray_toIData_0_bits_waymask_0_2 =
    io_wayLookupRead_bits_entry_waymask_0[2];
  assign io_dataArray_toIData_0_bits_waymask_0_3 =
    io_wayLookupRead_bits_entry_waymask_0[3];
  assign io_dataArray_toIData_0_bits_waymask_1_0 =
    io_wayLookupRead_bits_entry_waymask_1[0];
  assign io_dataArray_toIData_0_bits_waymask_1_1 =
    io_wayLookupRead_bits_entry_waymask_1[1];
  assign io_dataArray_toIData_0_bits_waymask_1_2 =
    io_wayLookupRead_bits_entry_waymask_1[2];
  assign io_dataArray_toIData_0_bits_waymask_1_3 =
    io_wayLookupRead_bits_entry_waymask_1[3];
  assign io_dataArray_toIData_0_bits_blkOffset =
    io_fetch_req_bits_pcMemRead_0_startAddr[5:0];
  assign io_dataArray_toIData_1_valid = io_fetch_req_bits_readValid_1;
  assign io_dataArray_toIData_1_bits_vSetIdx_0 =
    io_fetch_req_bits_pcMemRead_1_startAddr[13:6];
  assign io_dataArray_toIData_1_bits_vSetIdx_1 =
    io_fetch_req_bits_pcMemRead_1_nextlineStart[13:6];
  assign io_dataArray_toIData_2_valid = io_fetch_req_bits_readValid_2;
  assign io_dataArray_toIData_2_bits_vSetIdx_0 =
    io_fetch_req_bits_pcMemRead_2_startAddr[13:6];
  assign io_dataArray_toIData_2_bits_vSetIdx_1 =
    io_fetch_req_bits_pcMemRead_2_nextlineStart[13:6];
  assign io_dataArray_toIData_3_valid = io_fetch_req_bits_readValid_3;
  assign io_dataArray_toIData_3_bits_vSetIdx_0 =
    io_fetch_req_bits_pcMemRead_3_startAddr[13:6];
  assign io_dataArray_toIData_3_bits_vSetIdx_1 =
    io_fetch_req_bits_pcMemRead_3_nextlineStart[13:6];
  assign io_metaArrayFlush_0_valid = s2_corrupt_refetch_0 & io_metaArrayFlush_0_valid_REG;
  assign io_metaArrayFlush_0_bits_virIdx = s2_req_vaddr_0[13:6];
  assign io_metaArrayFlush_0_bits_waymask =
    s2_meta_corrupt_0
      ? 4'hF
      : {s2_waymasks_0_3, s2_waymasks_0_2, s2_waymasks_0_1, s2_waymasks_0_0};
  assign io_metaArrayFlush_1_valid = s2_corrupt_refetch_1 & io_metaArrayFlush_1_valid_REG;
  assign io_metaArrayFlush_1_bits_virIdx = s2_req_vaddr_1[13:6];
  assign io_metaArrayFlush_1_bits_waymask =
    s2_meta_corrupt_1
      ? 4'hF
      : {s2_waymasks_1_3, s2_waymasks_1_2, s2_waymasks_1_1, s2_waymasks_1_0};
  assign io_touch_0_valid = io_touch_0_valid_REG & s1_SRAMhits_0;
  assign io_touch_0_bits_vSetIdx = s1_req_vaddr_0[13:6];
  assign io_touch_0_bits_way =
    {|{s1_waymasks_0_3, s1_waymasks_0_2}, s1_waymasks_0_3 | s1_waymasks_0_1};
  assign io_touch_1_valid = io_touch_1_valid_REG & s1_SRAMhits_1 & s1_doubleline;
  assign io_touch_1_bits_vSetIdx = s1_req_vaddr_1[13:6];
  assign io_touch_1_bits_way =
    {|{s1_waymasks_1_3, s1_waymasks_1_2}, s1_waymasks_1_3 | s1_waymasks_1_1};
  assign io_wayLookupRead_ready = s0_fire;
  assign io_fetch_req_ready = s0_can_go;
  assign io_fetch_resp_valid = s2_fire;
  assign io_fetch_resp_bits_doubleline = s2_doubleline;
  assign io_fetch_resp_bits_vaddr_0 = s2_req_vaddr_0;
  assign io_fetch_resp_bits_vaddr_1 = s2_req_vaddr_1;
  assign io_fetch_resp_bits_data =
    {s2_datas_7,
     s2_datas_6,
     s2_datas_5,
     s2_datas_4,
     s2_datas_3,
     s2_datas_2,
     s2_datas_1,
     s2_datas_0};
  assign io_fetch_resp_bits_paddr_0 = s2_req_paddr_0;
  assign io_fetch_resp_bits_exception_0 =
    (|s2_exception_0) ? s2_exception_0 : {2{s2_l2_corrupt_0}};
  assign io_fetch_resp_bits_exception_1 =
    s2_doubleline ? ((|s2_exception_1) ? s2_exception_1 : {2{s2_l2_corrupt_1}}) : 2'h0;
  assign io_fetch_resp_bits_pmp_mmio_0 = s2_pmp_mmio_0;
  assign io_fetch_resp_bits_pmp_mmio_1 = s2_doubleline & s2_pmp_mmio_1;
  assign io_fetch_resp_bits_itlb_pbmt_0 = s2_itlb_pbmt_0;
  assign io_fetch_resp_bits_itlb_pbmt_1 = s2_doubleline ? s2_itlb_pbmt_1 : 2'h0;
  assign io_fetch_resp_bits_backendException = s2_backendException;
  assign io_fetch_resp_bits_gpaddr = s2_req_gpaddr;
  assign io_fetch_resp_bits_isForVSnonLeafPTE = s2_req_isForVSnonLeafPTE;
  assign io_pmp_0_req_bits_addr = {s1_req_ptags_0, s1_req_vaddr_0[11:0]};
  assign io_pmp_1_req_bits_addr = {s1_req_ptags_1, s1_req_vaddr_1[11:0]};
  assign io_errors_0_valid = REG_4 | s2_corrupt_refetch_0 & io_errors_0_valid_REG;
  assign io_errors_0_bits_paddr = REG_4 ? io_errors_0_bits_paddr_REG : s2_req_paddr_0;
  assign io_errors_0_bits_report_to_beu =
    ~REG_4 & s2_corrupt_refetch_0 & io_errors_0_bits_report_to_beu_REG;
  assign io_errors_1_valid = REG_5 | s2_corrupt_refetch_1 & io_errors_1_valid_REG;
  assign io_errors_1_bits_paddr = REG_5 ? io_errors_1_bits_paddr_REG : s2_req_paddr_1;
  assign io_errors_1_bits_report_to_beu =
    ~REG_5 & s2_corrupt_refetch_1 & io_errors_1_bits_report_to_beu_REG;
  assign io_perfInfo_only_0_hit = s2_hits_0 & ~s2_doubleline;
  assign io_perfInfo_only_0_miss = ~s2_hits_0 & ~s2_doubleline;
  assign io_perfInfo_hit_0_hit_1 = s2_hits_0 & s2_hits_1 & s2_doubleline;
  assign io_perfInfo_hit_0_miss_1 = s2_hits_0 & ~s2_hits_1 & s2_doubleline;
  assign io_perfInfo_miss_0_hit_1 = ~s2_hits_0 & s2_hits_1 & s2_doubleline;
  assign io_perfInfo_miss_0_miss_1 = ~s2_hits_0 & ~s2_hits_1 & s2_doubleline;
  assign io_perfInfo_bank_hit_1 = s2_hits_1 & s2_doubleline;
  assign io_perfInfo_hit = s2_hits_0 & (~s2_doubleline | s2_hits_1);
endmodule

