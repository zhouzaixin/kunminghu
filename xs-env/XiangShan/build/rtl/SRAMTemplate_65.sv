// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_65(
  input          clock,
  input          reset,
  input          io_r_req_valid,
  input  [5:0]   io_r_req_bits_setIdx,
  output [259:0] io_r_resp_data_0_meta,
  output         io_r_resp_data_0_ftb_entry_isCall,
  output         io_r_resp_data_0_ftb_entry_isRet,
  output         io_r_resp_data_0_ftb_entry_isJalr,
  output         io_r_resp_data_0_ftb_entry_valid,
  output [3:0]   io_r_resp_data_0_ftb_entry_brSlots_0_offset,
  output         io_r_resp_data_0_ftb_entry_brSlots_0_sharing,
  output         io_r_resp_data_0_ftb_entry_brSlots_0_valid,
  output [11:0]  io_r_resp_data_0_ftb_entry_brSlots_0_lower,
  output [1:0]   io_r_resp_data_0_ftb_entry_brSlots_0_tarStat,
  output [3:0]   io_r_resp_data_0_ftb_entry_tailSlot_offset,
  output         io_r_resp_data_0_ftb_entry_tailSlot_sharing,
  output         io_r_resp_data_0_ftb_entry_tailSlot_valid,
  output [19:0]  io_r_resp_data_0_ftb_entry_tailSlot_lower,
  output [1:0]   io_r_resp_data_0_ftb_entry_tailSlot_tarStat,
  output [3:0]   io_r_resp_data_0_ftb_entry_pftAddr,
  output         io_r_resp_data_0_ftb_entry_carry,
  output         io_r_resp_data_0_ftb_entry_last_may_be_rvi_call,
  output         io_r_resp_data_0_ftb_entry_strong_bias_0,
  output         io_r_resp_data_0_ftb_entry_strong_bias_1,
  input          io_w_req_valid,
  input  [5:0]   io_w_req_bits_setIdx,
  input  [259:0] io_w_req_bits_data_0_meta,
  input          io_w_req_bits_data_0_ftb_entry_isCall,
  input          io_w_req_bits_data_0_ftb_entry_isRet,
  input          io_w_req_bits_data_0_ftb_entry_isJalr,
  input          io_w_req_bits_data_0_ftb_entry_valid,
  input  [3:0]   io_w_req_bits_data_0_ftb_entry_brSlots_0_offset,
  input          io_w_req_bits_data_0_ftb_entry_brSlots_0_sharing,
  input          io_w_req_bits_data_0_ftb_entry_brSlots_0_valid,
  input  [11:0]  io_w_req_bits_data_0_ftb_entry_brSlots_0_lower,
  input  [1:0]   io_w_req_bits_data_0_ftb_entry_brSlots_0_tarStat,
  input  [3:0]   io_w_req_bits_data_0_ftb_entry_tailSlot_offset,
  input          io_w_req_bits_data_0_ftb_entry_tailSlot_sharing,
  input          io_w_req_bits_data_0_ftb_entry_tailSlot_valid,
  input  [19:0]  io_w_req_bits_data_0_ftb_entry_tailSlot_lower,
  input  [1:0]   io_w_req_bits_data_0_ftb_entry_tailSlot_tarStat,
  input  [3:0]   io_w_req_bits_data_0_ftb_entry_pftAddr,
  input          io_w_req_bits_data_0_ftb_entry_carry,
  input          io_w_req_bits_data_0_ftb_entry_last_may_be_rvi_call,
  input          io_w_req_bits_data_0_ftb_entry_strong_bias_0,
  input          io_w_req_bits_data_0_ftb_entry_strong_bias_1
);

  wire         _ClockGate_Q;
  wire [319:0] _array_0_R0_data;
  reg  [63:0]  bypass_wdata_lfsr;
  wire         bypass_mask_need_check = io_r_req_valid & io_w_req_valid;
  reg          bypass_mask_need_check_reg_last_REG;
  reg  [5:0]   bypass_mask_waddr_reg;
  reg  [5:0]   bypass_mask_raddr_reg;
  wire [319:0] mem_rdata_0 =
    bypass_mask_need_check_reg_last_REG & bypass_mask_waddr_reg == bypass_mask_raddr_reg
      ? {256'h0, bypass_wdata_lfsr}
      : _array_0_R0_data;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      bypass_wdata_lfsr <= 64'h1234567887654321;
      bypass_mask_need_check_reg_last_REG <= 1'h0;
    end
    else begin
      if (bypass_wdata_lfsr == 64'h0)
        bypass_wdata_lfsr <= 64'h1;
      else
        bypass_wdata_lfsr <=
          {bypass_wdata_lfsr[0] ^ bypass_wdata_lfsr[1] ^ bypass_wdata_lfsr[3]
             ^ bypass_wdata_lfsr[4],
           bypass_wdata_lfsr[63:1]};
      bypass_mask_need_check_reg_last_REG <= bypass_mask_need_check;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (bypass_mask_need_check) begin
      bypass_mask_waddr_reg <= io_w_req_bits_setIdx;
      bypass_mask_raddr_reg <= io_r_req_bits_setIdx;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        bypass_wdata_lfsr = {_RANDOM[2'h0], _RANDOM[2'h1]};
        bypass_mask_need_check_reg_last_REG = _RANDOM[2'h2][0];
        bypass_mask_waddr_reg = _RANDOM[2'h2][6:1];
        bypass_mask_raddr_reg = _RANDOM[2'h2][12:7];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        bypass_wdata_lfsr = 64'h1234567887654321;
        bypass_mask_need_check_reg_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_0_0 array_0 (
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (io_r_req_valid),
    .R0_clk  (_ClockGate_Q),
    .R0_data (_array_0_R0_data),
    .W0_addr (io_w_req_bits_setIdx),
    .W0_en   (io_w_req_valid),
    .W0_clk  (_ClockGate_Q),
    .W0_data
      ({io_w_req_bits_data_0_meta,
        io_w_req_bits_data_0_ftb_entry_isCall,
        io_w_req_bits_data_0_ftb_entry_isRet,
        io_w_req_bits_data_0_ftb_entry_isJalr,
        io_w_req_bits_data_0_ftb_entry_valid,
        io_w_req_bits_data_0_ftb_entry_brSlots_0_offset,
        io_w_req_bits_data_0_ftb_entry_brSlots_0_sharing,
        io_w_req_bits_data_0_ftb_entry_brSlots_0_valid,
        io_w_req_bits_data_0_ftb_entry_brSlots_0_lower,
        io_w_req_bits_data_0_ftb_entry_brSlots_0_tarStat,
        io_w_req_bits_data_0_ftb_entry_tailSlot_offset,
        io_w_req_bits_data_0_ftb_entry_tailSlot_sharing,
        io_w_req_bits_data_0_ftb_entry_tailSlot_valid,
        io_w_req_bits_data_0_ftb_entry_tailSlot_lower,
        io_w_req_bits_data_0_ftb_entry_tailSlot_tarStat,
        io_w_req_bits_data_0_ftb_entry_pftAddr,
        io_w_req_bits_data_0_ftb_entry_carry,
        io_w_req_bits_data_0_ftb_entry_last_may_be_rvi_call,
        io_w_req_bits_data_0_ftb_entry_strong_bias_1,
        io_w_req_bits_data_0_ftb_entry_strong_bias_0})
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_r_req_valid | io_w_req_valid),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  assign io_r_resp_data_0_meta = mem_rdata_0[319:60];
  assign io_r_resp_data_0_ftb_entry_isCall = mem_rdata_0[59];
  assign io_r_resp_data_0_ftb_entry_isRet = mem_rdata_0[58];
  assign io_r_resp_data_0_ftb_entry_isJalr = mem_rdata_0[57];
  assign io_r_resp_data_0_ftb_entry_valid = mem_rdata_0[56];
  assign io_r_resp_data_0_ftb_entry_brSlots_0_offset = mem_rdata_0[55:52];
  assign io_r_resp_data_0_ftb_entry_brSlots_0_sharing = mem_rdata_0[51];
  assign io_r_resp_data_0_ftb_entry_brSlots_0_valid = mem_rdata_0[50];
  assign io_r_resp_data_0_ftb_entry_brSlots_0_lower = mem_rdata_0[49:38];
  assign io_r_resp_data_0_ftb_entry_brSlots_0_tarStat = mem_rdata_0[37:36];
  assign io_r_resp_data_0_ftb_entry_tailSlot_offset = mem_rdata_0[35:32];
  assign io_r_resp_data_0_ftb_entry_tailSlot_sharing = mem_rdata_0[31];
  assign io_r_resp_data_0_ftb_entry_tailSlot_valid = mem_rdata_0[30];
  assign io_r_resp_data_0_ftb_entry_tailSlot_lower = mem_rdata_0[29:10];
  assign io_r_resp_data_0_ftb_entry_tailSlot_tarStat = mem_rdata_0[9:8];
  assign io_r_resp_data_0_ftb_entry_pftAddr = mem_rdata_0[7:4];
  assign io_r_resp_data_0_ftb_entry_carry = mem_rdata_0[3];
  assign io_r_resp_data_0_ftb_entry_last_may_be_rvi_call = mem_rdata_0[2];
  assign io_r_resp_data_0_ftb_entry_strong_bias_0 = mem_rdata_0[0];
  assign io_r_resp_data_0_ftb_entry_strong_bias_1 = mem_rdata_0[1];
endmodule

