// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module r4_qds(
  input  [6:0] rem_i,
  input  [6:0] m_neg_1_i,
  input  [6:0] m_neg_0_i,
  input  [6:0] m_pos_1_i,
  input  [6:0] m_pos_2_i,
  output [4:0] rt_dig_o
);

  wire [6:0] _qds_sign_T = 7'(rem_i + m_pos_2_i);
  wire [6:0] _qds_sign_T_3 = 7'(rem_i + m_pos_1_i);
  wire [6:0] _qds_sign_T_6 = 7'(rem_i + m_neg_0_i);
  wire [6:0] _qds_sign_T_9 = 7'(rem_i + m_neg_1_i);
  wire [1:0] _rt_dig_o_T_2 = {_qds_sign_T_6[6], _qds_sign_T_9[6]};
  wire [1:0] _rt_dig_o_T_8 = {_qds_sign_T[6], _qds_sign_T_3[6]};
  assign rt_dig_o =
    {&_rt_dig_o_T_2,
     _rt_dig_o_T_2 == 2'h2,
     {_qds_sign_T_3[6], _qds_sign_T_6[6]} == 2'h2,
     _rt_dig_o_T_8 == 2'h2,
     _rt_dig_o_T_8 == 2'h0};
endmodule

