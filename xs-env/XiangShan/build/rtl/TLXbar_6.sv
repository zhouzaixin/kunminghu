// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar_6(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [3:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [1:0]  auto_in_a_bits_source,
  input  [47:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [3:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [1:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [3:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_param,
  output [2:0]  auto_out_1_a_bits_size,
  output [1:0]  auto_out_1_a_bits_source,
  output [47:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_a_bits_corrupt,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [3:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [1:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [3:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_param,
  output [1:0]  auto_out_0_a_bits_size,
  output [1:0]  auto_out_0_a_bits_source,
  output [29:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [3:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [1:0]  auto_out_0_d_bits_size,
  input  [1:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);

  wire        requestAIO_0_0 =
    {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:7] ^ 23'h700440} == 41'h0;
  wire        requestAIO_0_1 =
    auto_in_a_bits_address[47:29] == 19'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:28] ^ 2'h2} == 20'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:27] ^ 3'h6} == 21'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:17] ^ 13'h1C00} == 31'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:13] ^ 17'h1C010} == 35'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:7] ^ 23'h700441} == 41'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:8] ^ 22'h380221} == 40'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:9] ^ 21'h1C0111} == 39'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:10] ^ 20'hE0089} == 38'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:11] ^ 19'h70045} == 37'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:12] ^ 18'h38023} == 36'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:14] ^ 16'hE009} == 34'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:15] ^ 15'h7005} == 33'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:16] ^ 14'h3803} == 32'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:18] ^ 12'hE01} == 30'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:19] ^ 11'h701} == 29'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:20] ^ 10'h381} == 28'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:21] ^ 9'h1C1} == 27'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:22] ^ 8'hE1} == 26'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:23] ^ 7'h71} == 25'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:24] ^ 6'h39} == 24'h0
    | {auto_in_a_bits_address[47:30], auto_in_a_bits_address[29:25] ^ 5'h1D} == 23'h0
    | {auto_in_a_bits_address[47:30], ~(auto_in_a_bits_address[29:26])} == 22'h0
    | {auto_in_a_bits_address[47:31], ~(auto_in_a_bits_address[30])} == 18'h0
    | {auto_in_a_bits_address[47:32], ~(auto_in_a_bits_address[31])} == 17'h0
    | {auto_in_a_bits_address[47:33], ~(auto_in_a_bits_address[32])} == 16'h0
    | {auto_in_a_bits_address[47:34], ~(auto_in_a_bits_address[33])} == 15'h0
    | {auto_in_a_bits_address[47:35], ~(auto_in_a_bits_address[34])} == 14'h0
    | {auto_in_a_bits_address[47:36], ~(auto_in_a_bits_address[35])} == 13'h0
    | {auto_in_a_bits_address[47:37], ~(auto_in_a_bits_address[36])} == 12'h0
    | {auto_in_a_bits_address[47:38], ~(auto_in_a_bits_address[37])} == 11'h0
    | {auto_in_a_bits_address[47:39], ~(auto_in_a_bits_address[38])} == 10'h0
    | {auto_in_a_bits_address[47:40], ~(auto_in_a_bits_address[39])} == 9'h0
    | {auto_in_a_bits_address[47:41], ~(auto_in_a_bits_address[40])} == 8'h0
    | {auto_in_a_bits_address[47:42], ~(auto_in_a_bits_address[41])} == 7'h0
    | {auto_in_a_bits_address[47:43], ~(auto_in_a_bits_address[42])} == 6'h0
    | {auto_in_a_bits_address[47:44], ~(auto_in_a_bits_address[43])} == 5'h0
    | {auto_in_a_bits_address[47:45], ~(auto_in_a_bits_address[44])} == 4'h0
    | {auto_in_a_bits_address[47:46], ~(auto_in_a_bits_address[45])} == 3'h0
    | {auto_in_a_bits_address[47], ~(auto_in_a_bits_address[46])} == 2'h0
    | auto_in_a_bits_address[47];
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire [1:0]  readys_valid = {auto_out_1_d_valid, auto_out_0_d_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], auto_out_1_d_valid} | _readys_filter_T_1));
  wire        winner_0 = readys_readys[0] & auto_out_0_d_valid;
  wire        winner_1 = readys_readys[1] & auto_out_1_d_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        in_0_d_valid =
    idle
      ? auto_out_0_d_valid | auto_out_1_d_valid
      : state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid;
  wire [12:0] _beatsDO_decode_T_3 = 13'h3F << auto_out_1_d_bits_size;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire        latch = idle & auto_in_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 3'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          winner_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_3[5:3]) : 3'h0;
      else
        beatsLeft <= 3'(beatsLeft - {2'h0, auto_in_d_ready & in_0_d_valid});
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][2:0];
        readys_mask = _RANDOM[/*Zero width*/ 1'b0][4:3];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][5];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 3'h0;
        readys_mask = 2'h3;
        state_0 = 1'h0;
        state_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign auto_in_d_valid = in_0_d_valid;
  assign auto_in_d_bits_opcode =
    (muxState_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_1 ? auto_out_1_d_bits_opcode : 4'h0);
  assign auto_in_d_bits_param =
    (muxState_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_1 ? auto_out_1_d_bits_param : 2'h0);
  assign auto_in_d_bits_size =
    (muxState_0 ? {1'h0, auto_out_0_d_bits_size} : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_size : 3'h0);
  assign auto_in_d_bits_source =
    (muxState_0 ? auto_out_0_d_bits_source : 2'h0)
    | (muxState_1 ? auto_out_1_d_bits_source : 2'h0);
  assign auto_in_d_bits_sink =
    muxState_0 & auto_out_0_d_bits_sink | muxState_1 & auto_out_1_d_bits_sink;
  assign auto_in_d_bits_denied =
    muxState_0 & auto_out_0_d_bits_denied | muxState_1 & auto_out_1_d_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_1 ? auto_out_1_d_bits_data : 64'h0);
  assign auto_in_d_bits_corrupt =
    muxState_0 & auto_out_0_d_bits_corrupt | muxState_1 & auto_out_1_d_bits_corrupt;
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_param = auto_in_a_bits_param;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address;
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_1_d_ready = auto_in_d_ready & (idle ? readys_readys[1] : state_1);
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_param = auto_in_a_bits_param;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size[1:0];
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address[29:0];
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_0_d_ready = auto_in_d_ready & (idle ? readys_readys[0] : state_0);
endmodule

