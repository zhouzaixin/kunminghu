// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VectorCvt(
  input         clock,
  input         reset,
  input         io_fire,
  input  [63:0] io_src,
  input  [7:0]  io_opType,
  input  [1:0]  io_sew,
  input  [2:0]  io_rm,
  output [63:0] io_result,
  output [19:0] io_fflags
);

  wire [15:0] _vcvtWraper_3_io_result;
  wire [4:0]  _vcvtWraper_3_io_fflags;
  wire [15:0] _vcvtWraper_2_io_result;
  wire [4:0]  _vcvtWraper_2_io_fflags;
  wire [31:0] _vcvtWraper_1_io_result;
  wire [4:0]  _vcvtWraper_1_io_fflags;
  wire [63:0] _vcvtWraper_io_result;
  wire [4:0]  _vcvtWraper_io_fflags;
  wire [3:0]  input1H_plaInput = {io_opType[4:3], io_sew};
  wire [3:0]  input1H_invInputs = ~input1H_plaInput;
  wire [3:0]  input1H =
    {|{&{io_sew[0], io_sew[1], input1H_invInputs[2], input1H_invInputs[3]},
       &{input1H_invInputs[0], io_sew[1], input1H_invInputs[2], io_opType[4]}},
     |{&{input1H_invInputs[0], io_sew[1], input1H_invInputs[3]},
       &{io_sew[0], input1H_invInputs[1], input1H_invInputs[2], io_opType[4]}},
     |{&{io_sew[0], input1H_invInputs[1], input1H_invInputs[3]},
       &{input1H_invInputs[0], input1H_invInputs[1], input1H_invInputs[2], io_opType[4]}},
     &{input1H_invInputs[0], input1H_invInputs[1], io_opType[3], input1H_invInputs[3]}};
  wire [3:0]  output1H_invInputs = ~input1H_plaInput;
  wire [3:0]  output1H =
    {|{&{io_sew[0], io_sew[1], output1H_invInputs[2], output1H_invInputs[3]},
       &{output1H_invInputs[0], io_sew[1], io_opType[3], output1H_invInputs[3]}},
     |{&{output1H_invInputs[0], io_sew[1], output1H_invInputs[2]},
       &{io_sew[0], output1H_invInputs[1], io_opType[3], output1H_invInputs[3]}},
     |{&{io_sew[0], output1H_invInputs[1], output1H_invInputs[2]},
       &{output1H_invInputs[0],
         output1H_invInputs[1],
         io_opType[3],
         output1H_invInputs[3]}},
     &{output1H_invInputs[0],
       output1H_invInputs[1],
       output1H_invInputs[2],
       io_opType[4]}};
  reg  [3:0]  outputWidth1H_r;
  reg         outputWidth1H_last_r;
  reg  [3:0]  outputWidth1H;
  wire [19:0] _io_fflags_T_15 =
    (outputWidth1H[0]
       ? {_vcvtWraper_3_io_fflags,
          _vcvtWraper_2_io_fflags,
          _vcvtWraper_1_io_fflags,
          _vcvtWraper_io_fflags}
       : 20'h0)
    | (outputWidth1H[1]
         ? {_vcvtWraper_3_io_fflags,
            _vcvtWraper_2_io_fflags,
            _vcvtWraper_1_io_fflags,
            _vcvtWraper_io_fflags}
         : 20'h0);
  wire [9:0]  _GEN =
    _io_fflags_T_15[9:0]
    | (outputWidth1H[2] ? {_vcvtWraper_1_io_fflags, _vcvtWraper_io_fflags} : 10'h0);
  always @(posedge clock) begin
    if (io_fire)
      outputWidth1H_r <= output1H;
    if (outputWidth1H_last_r)
      outputWidth1H <= outputWidth1H_r;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      outputWidth1H_last_r <= 1'h0;
    else if (io_fire | outputWidth1H_last_r)
      outputWidth1H_last_r <= io_fire;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        outputWidth1H_r = _RANDOM[/*Zero width*/ 1'b0][3:0];
        outputWidth1H_last_r = _RANDOM[/*Zero width*/ 1'b0][4];
        outputWidth1H = _RANDOM[/*Zero width*/ 1'b0][8:5];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        outputWidth1H_last_r = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VCVT vcvtWraper (
    .clock       (clock),
    .reset       (reset),
    .io_fire     (io_fire),
    .io_src      (io_src),
    .io_opType   (io_opType),
    .io_rm       (io_rm),
    .io_input1H  (input1H),
    .io_output1H (output1H),
    .io_result   (_vcvtWraper_io_result),
    .io_fflags   (_vcvtWraper_io_fflags)
  );
  VCVT_1 vcvtWraper_1 (
    .clock     (clock),
    .reset     (reset),
    .io_fire   (io_fire),
    .io_src
      ({16'h0,
        {8'h0, input1H[0] ? io_src[15:8] : 8'h0} | (input1H[1] ? io_src[31:16] : 16'h0)}
       | (input1H[2] ? io_src[63:32] : 32'h0)),
    .io_opType (io_opType),
    .io_sew    (io_sew),
    .io_rm     (io_rm),
    .io_result (_vcvtWraper_1_io_result),
    .io_fflags (_vcvtWraper_1_io_fflags)
  );
  VCVT_2 vcvtWraper_2 (
    .clock     (clock),
    .reset     (reset),
    .io_fire   (io_fire),
    .io_src
      ({8'h0, input1H[0] ? io_src[23:16] : 8'h0} | (input1H[1] ? io_src[47:32] : 16'h0)),
    .io_opType (io_opType),
    .io_sew    (io_sew),
    .io_rm     (io_rm),
    .io_result (_vcvtWraper_2_io_result),
    .io_fflags (_vcvtWraper_2_io_fflags)
  );
  VCVT_2 vcvtWraper_3 (
    .clock     (clock),
    .reset     (reset),
    .io_fire   (io_fire),
    .io_src
      ({8'h0, input1H[0] ? io_src[31:24] : 8'h0} | (input1H[1] ? io_src[63:48] : 16'h0)),
    .io_opType (io_opType),
    .io_sew    (io_sew),
    .io_rm     (io_rm),
    .io_result (_vcvtWraper_3_io_result),
    .io_fflags (_vcvtWraper_3_io_fflags)
  );
  assign io_result =
    {32'h0,
     outputWidth1H[0]
       ? {_vcvtWraper_3_io_result[7:0],
          _vcvtWraper_2_io_result[7:0],
          _vcvtWraper_1_io_result[7:0],
          _vcvtWraper_io_result[7:0]}
       : 32'h0}
    | (outputWidth1H[1]
         ? {_vcvtWraper_3_io_result,
            _vcvtWraper_2_io_result,
            _vcvtWraper_1_io_result[15:0],
            _vcvtWraper_io_result[15:0]}
         : 64'h0)
    | (outputWidth1H[2] ? {_vcvtWraper_1_io_result, _vcvtWraper_io_result[31:0]} : 64'h0)
    | (outputWidth1H[3] ? _vcvtWraper_io_result : 64'h0);
  assign io_fflags =
    {_io_fflags_T_15[19:10],
     _GEN[9:5],
     _GEN[4:0] | (outputWidth1H[3] ? _vcvtWraper_io_fflags : 5'h0)};
endmodule

