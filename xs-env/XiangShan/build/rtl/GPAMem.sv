// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module GPAMem(
  input         clock,
  input         reset,
  input         io_fromIFU_gpaddrMem_wen,
  input  [5:0]  io_fromIFU_gpaddrMem_waddr,
  input  [55:0] io_fromIFU_gpaddrMem_wdata_gpaddr,
  input         io_fromIFU_gpaddrMem_wdata_isForVSnonLeafPTE,
  input         io_exceptionReadAddr_valid,
  input  [5:0]  io_exceptionReadAddr_bits_ftqPtr_value,
  input  [3:0]  io_exceptionReadAddr_bits_ftqOffset,
  output [55:0] io_exceptionReadData_gpaddr,
  output        io_exceptionReadData_isForVSnonLeafPTE
);

  wire [55:0] _mem_io_rdata_0_gpaddr;
  reg  [3:0]  ftqOffset;
  always @(posedge clock) begin
    if (io_exceptionReadAddr_valid)
      ftqOffset <= io_exceptionReadAddr_bits_ftqOffset;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ftqOffset = _RANDOM[/*Zero width*/ 1'b0][3:0];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SyncDataModuleTemplate__64entry_4 mem (
    .clock                        (clock),
    .reset                        (reset),
    .io_ren_0                     (io_exceptionReadAddr_valid),
    .io_raddr_0                   (io_exceptionReadAddr_bits_ftqPtr_value),
    .io_rdata_0_gpaddr            (_mem_io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (io_exceptionReadData_isForVSnonLeafPTE),
    .io_wen_0                     (io_fromIFU_gpaddrMem_wen),
    .io_waddr_0                   (io_fromIFU_gpaddrMem_waddr),
    .io_wdata_0_gpaddr            (io_fromIFU_gpaddrMem_wdata_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (io_fromIFU_gpaddrMem_wdata_isForVSnonLeafPTE)
  );
  assign io_exceptionReadData_gpaddr =
    56'(_mem_io_rdata_0_gpaddr + {51'h0, ftqOffset, 1'h0});
endmodule

