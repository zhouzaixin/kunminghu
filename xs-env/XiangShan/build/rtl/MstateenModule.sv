// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MstateenModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_C,
  output        regOut_SE0,
  output        regOut_ENVCFG,
  output        regOut_AIA,
  output        regOut_IMSIC
);

  reg reg_C;
  reg reg_SE0;
  reg reg_ENVCFG;
  reg reg_AIA;
  reg reg_IMSIC;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_C <= 1'h1;
      reg_SE0 <= 1'h1;
      reg_ENVCFG <= 1'h1;
      reg_AIA <= 1'h1;
      reg_IMSIC <= 1'h1;
    end
    else if (w_wen) begin
      reg_C <= w_wdata[0];
      reg_SE0 <= w_wdata[63];
      reg_ENVCFG <= w_wdata[62];
      reg_AIA <= w_wdata[59];
      reg_IMSIC <= w_wdata[58];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_C = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_SE0 = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_ENVCFG = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_AIA = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_IMSIC = _RANDOM[/*Zero width*/ 1'b0][7];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_C = 1'h1;
        reg_SE0 = 1'h1;
        reg_ENVCFG = 1'h1;
        reg_AIA = 1'h1;
        reg_IMSIC = 1'h1;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata = {reg_SE0, reg_ENVCFG, 2'h1, reg_AIA, reg_IMSIC, 57'h0, reg_C};
  assign regOut_C = reg_C;
  assign regOut_SE0 = reg_SE0;
  assign regOut_ENVCFG = reg_ENVCFG;
  assign regOut_AIA = reg_AIA;
  assign regOut_IMSIC = reg_IMSIC;
endmodule

