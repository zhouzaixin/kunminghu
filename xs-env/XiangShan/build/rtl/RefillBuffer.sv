// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RefillBuffer(
  input          clock,
  input          reset,
  input          io_r_valid,
  input          io_r_beat,
  input  [3:0]   io_r_id,
  output         io_r_ready,
  output [255:0] io_r_buffer_data_data,
  output         io_r_buffer_data_corrupt,
  input          io_r_last,
  input          io_w_valid,
  input          io_w_beat,
  input  [255:0] io_w_data_data,
  output         io_w_ready,
  output [3:0]   io_w_id
);

  wire [513:0] _buffer_ext_R0_data;
  reg          valids_0_0;
  reg          valids_0_1;
  reg          valids_1_0;
  reg          valids_1_1;
  reg          valids_2_0;
  reg          valids_2_1;
  reg          valids_3_0;
  reg          valids_3_1;
  reg          valids_4_0;
  reg          valids_4_1;
  reg          valids_5_0;
  reg          valids_5_1;
  reg          valids_6_0;
  reg          valids_6_1;
  wire [7:0]   _GEN =
    {{valids_0_0},
     {valids_6_0},
     {valids_5_0},
     {valids_4_0},
     {valids_3_0},
     {valids_2_0},
     {valids_1_0},
     {valids_0_0}};
  wire [7:0]   _GEN_0 =
    {{valids_0_1},
     {valids_6_1},
     {valids_5_1},
     {valids_4_1},
     {valids_3_1},
     {valids_2_1},
     {valids_1_1},
     {valids_0_1}};
  wire         io_r_ready_0 = io_r_beat ? _GEN_0[io_r_id[2:0]] : _GEN[io_r_id[2:0]];
  reg          io_w_ready_REG;
  wire         io_w_ready_0 = io_w_beat | io_w_ready_REG;
  reg  [2:0]   io_w_id_REG;
  wire         buffer_MPORT_en = io_w_valid & io_w_ready_0;
  reg  [3:0]   io_w_id_r;
  wire [3:0]   _GEN_1 = {1'h0, io_w_id_REG};
  wire [3:0]   io_w_id_0 = io_w_beat ? io_w_id_r : _GEN_1;
  wire         _GEN_2 = io_r_valid & io_r_ready_0 & io_r_last;
  wire         _GEN_3 = _GEN_2 & io_r_id[2:0] == 3'h0;
  wire         _GEN_4 = _GEN_2 & io_r_id[2:0] == 3'h1;
  wire         _GEN_5 = _GEN_2 & io_r_id[2:0] == 3'h2;
  wire         _GEN_6 = _GEN_2 & io_r_id[2:0] == 3'h3;
  wire         _GEN_7 = _GEN_2 & io_r_id[2:0] == 3'h4;
  wire         _GEN_8 = _GEN_2 & io_r_id[2:0] == 3'h5;
  wire         _GEN_9 = _GEN_2 & io_r_id[2:0] == 3'h6;
  wire [1:0]   _validMask_T = {valids_0_1, valids_0_0};
  wire [1:0]   _validMask_T_2 = {valids_1_1, valids_1_0};
  wire [1:0]   _validMask_T_4 = {valids_2_1, valids_2_0};
  wire [1:0]   _validMask_T_6 = {valids_3_1, valids_3_0};
  wire [1:0]   _validMask_T_8 = {valids_4_1, valids_4_0};
  wire [1:0]   _validMask_T_10 = {valids_5_1, valids_5_0};
  wire [5:0]   _freeIdx_T =
    ~{|_validMask_T_10,
      |_validMask_T_8,
      |_validMask_T_6,
      |_validMask_T_4,
      |_validMask_T_2,
      |_validMask_T};
  wire         _GEN_10 = io_w_id_0[2:0] == 3'h0;
  wire         _GEN_11 = io_w_id_0[2:0] == 3'h1;
  wire         _GEN_12 = io_w_id_0[2:0] == 3'h2;
  wire         _GEN_13 = io_w_id_0[2:0] == 3'h3;
  wire         _GEN_14 = io_w_id_0[2:0] == 3'h4;
  wire         _GEN_15 = io_w_id_0[2:0] == 3'h5;
  wire         _GEN_16 = io_w_id_0[2:0] == 3'h6;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valids_0_0 <= 1'h0;
      valids_0_1 <= 1'h0;
      valids_1_0 <= 1'h0;
      valids_1_1 <= 1'h0;
      valids_2_0 <= 1'h0;
      valids_2_1 <= 1'h0;
      valids_3_0 <= 1'h0;
      valids_3_1 <= 1'h0;
      valids_4_0 <= 1'h0;
      valids_4_1 <= 1'h0;
      valids_5_0 <= 1'h0;
      valids_5_1 <= 1'h0;
      valids_6_0 <= 1'h0;
      valids_6_1 <= 1'h0;
      io_w_ready_REG <= 1'h1;
      io_w_id_REG <= 3'h0;
    end
    else begin
      valids_0_0 <= buffer_MPORT_en & _GEN_10 & ~io_w_beat | ~_GEN_3 & valids_0_0;
      valids_0_1 <= buffer_MPORT_en & _GEN_10 & io_w_beat | ~_GEN_3 & valids_0_1;
      valids_1_0 <= buffer_MPORT_en & _GEN_11 & ~io_w_beat | ~_GEN_4 & valids_1_0;
      valids_1_1 <= buffer_MPORT_en & _GEN_11 & io_w_beat | ~_GEN_4 & valids_1_1;
      valids_2_0 <= buffer_MPORT_en & _GEN_12 & ~io_w_beat | ~_GEN_5 & valids_2_0;
      valids_2_1 <= buffer_MPORT_en & _GEN_12 & io_w_beat | ~_GEN_5 & valids_2_1;
      valids_3_0 <= buffer_MPORT_en & _GEN_13 & ~io_w_beat | ~_GEN_6 & valids_3_0;
      valids_3_1 <= buffer_MPORT_en & _GEN_13 & io_w_beat | ~_GEN_6 & valids_3_1;
      valids_4_0 <= buffer_MPORT_en & _GEN_14 & ~io_w_beat | ~_GEN_7 & valids_4_0;
      valids_4_1 <= buffer_MPORT_en & _GEN_14 & io_w_beat | ~_GEN_7 & valids_4_1;
      valids_5_0 <= buffer_MPORT_en & _GEN_15 & ~io_w_beat | ~_GEN_8 & valids_5_0;
      valids_5_1 <= buffer_MPORT_en & _GEN_15 & io_w_beat | ~_GEN_8 & valids_5_1;
      valids_6_0 <= buffer_MPORT_en & _GEN_16 & ~io_w_beat | ~_GEN_9 & valids_6_0;
      valids_6_1 <= buffer_MPORT_en & _GEN_16 & io_w_beat | ~_GEN_9 & valids_6_1;
      io_w_ready_REG <=
        {|{valids_6_1, valids_6_0},
         |_validMask_T_10,
         |_validMask_T_8,
         |_validMask_T_6,
         |_validMask_T_4,
         |_validMask_T_2,
         |_validMask_T} != 7'h7F;
      io_w_id_REG <=
        _freeIdx_T[0]
          ? 3'h0
          : _freeIdx_T[1]
              ? 3'h1
              : _freeIdx_T[2]
                  ? 3'h2
                  : _freeIdx_T[3]
                      ? 3'h3
                      : _freeIdx_T[4] ? 3'h4 : _freeIdx_T[5] ? 3'h5 : 3'h6;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (~(buffer_MPORT_en & ~io_w_beat) | io_w_beat) begin
    end
    else
      io_w_id_r <= _GEN_1;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        valids_0_0 = _RANDOM[/*Zero width*/ 1'b0][0];
        valids_0_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        valids_1_0 = _RANDOM[/*Zero width*/ 1'b0][2];
        valids_1_1 = _RANDOM[/*Zero width*/ 1'b0][3];
        valids_2_0 = _RANDOM[/*Zero width*/ 1'b0][4];
        valids_2_1 = _RANDOM[/*Zero width*/ 1'b0][5];
        valids_3_0 = _RANDOM[/*Zero width*/ 1'b0][6];
        valids_3_1 = _RANDOM[/*Zero width*/ 1'b0][7];
        valids_4_0 = _RANDOM[/*Zero width*/ 1'b0][8];
        valids_4_1 = _RANDOM[/*Zero width*/ 1'b0][9];
        valids_5_0 = _RANDOM[/*Zero width*/ 1'b0][10];
        valids_5_1 = _RANDOM[/*Zero width*/ 1'b0][11];
        valids_6_0 = _RANDOM[/*Zero width*/ 1'b0][12];
        valids_6_1 = _RANDOM[/*Zero width*/ 1'b0][13];
        io_w_ready_REG = _RANDOM[/*Zero width*/ 1'b0][14];
        io_w_id_REG = _RANDOM[/*Zero width*/ 1'b0][17:15];
        io_w_id_r = _RANDOM[/*Zero width*/ 1'b0][21:18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        valids_0_0 = 1'h0;
        valids_0_1 = 1'h0;
        valids_1_0 = 1'h0;
        valids_1_1 = 1'h0;
        valids_2_0 = 1'h0;
        valids_2_1 = 1'h0;
        valids_3_0 = 1'h0;
        valids_3_1 = 1'h0;
        valids_4_0 = 1'h0;
        valids_4_1 = 1'h0;
        valids_5_0 = 1'h0;
        valids_5_1 = 1'h0;
        valids_6_0 = 1'h0;
        valids_6_1 = 1'h0;
        io_w_ready_REG = 1'h1;
        io_w_id_REG = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  buffer_7x514 buffer_ext (
    .R0_addr (io_r_id[2:0]),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_buffer_ext_R0_data),
    .W0_addr (io_w_id_0[2:0]),
    .W0_en   (buffer_MPORT_en),
    .W0_clk  (clock),
    .W0_data ({1'h0, io_w_data_data, 1'h0, io_w_data_data}),
    .W0_mask ({{257{io_w_beat}}, {257{~io_w_beat}}})
  );
  assign io_r_ready = io_r_ready_0;
  assign io_r_buffer_data_data =
    io_r_beat ? _buffer_ext_R0_data[512:257] : _buffer_ext_R0_data[255:0];
  assign io_r_buffer_data_corrupt =
    io_r_beat ? _buffer_ext_R0_data[513] : _buffer_ext_R0_data[256];
  assign io_w_ready = io_w_ready_0;
  assign io_w_id = io_w_id_0;
endmodule

