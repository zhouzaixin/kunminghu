// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar_8(
  input         clock,
  input         reset,
  output        auto_in_1_a_ready,
  input         auto_in_1_a_valid,
  input  [3:0]  auto_in_1_a_bits_opcode,
  input  [2:0]  auto_in_1_a_bits_param,
  input  [2:0]  auto_in_1_a_bits_size,
  input  [1:0]  auto_in_1_a_bits_source,
  input  [47:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_a_bits_corrupt,
  input         auto_in_1_d_ready,
  output        auto_in_1_d_valid,
  output [3:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [2:0]  auto_in_1_d_bits_size,
  output [1:0]  auto_in_1_d_bits_source,
  output        auto_in_1_d_bits_sink,
  output        auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
  output        auto_in_0_a_ready,
  input         auto_in_0_a_valid,
  input  [3:0]  auto_in_0_a_bits_opcode,
  input  [2:0]  auto_in_0_a_bits_param,
  input  [2:0]  auto_in_0_a_bits_size,
  input         auto_in_0_a_bits_source,
  input  [47:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_a_bits_corrupt,
  input         auto_in_0_d_ready,
  output        auto_in_0_d_valid,
  output [3:0]  auto_in_0_d_bits_opcode,
  output [1:0]  auto_in_0_d_bits_param,
  output [2:0]  auto_in_0_d_bits_size,
  output        auto_in_0_d_bits_sink,
  output        auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_d_bits_corrupt,
  input         auto_out_2_a_ready,
  output        auto_out_2_a_valid,
  output [3:0]  auto_out_2_a_bits_opcode,
  output [2:0]  auto_out_2_a_bits_param,
  output [2:0]  auto_out_2_a_bits_size,
  output [2:0]  auto_out_2_a_bits_source,
  output [47:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_a_bits_corrupt,
  output        auto_out_2_d_ready,
  input         auto_out_2_d_valid,
  input  [3:0]  auto_out_2_d_bits_opcode,
  input  [1:0]  auto_out_2_d_bits_param,
  input  [2:0]  auto_out_2_d_bits_size,
  input  [2:0]  auto_out_2_d_bits_source,
  input         auto_out_2_d_bits_sink,
  input         auto_out_2_d_bits_denied,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_2_d_bits_corrupt,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [3:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_param,
  output [1:0]  auto_out_1_a_bits_size,
  output [2:0]  auto_out_1_a_bits_source,
  output [29:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_a_bits_corrupt,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [3:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [1:0]  auto_out_1_d_bits_size,
  input  [2:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [3:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_param,
  output [1:0]  auto_out_0_a_bits_size,
  output [2:0]  auto_out_0_a_bits_source,
  output [29:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [3:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [1:0]  auto_out_0_d_bits_size,
  input  [2:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);

  wire        allowed_4_2;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        allowed_3_2;
  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_1;
  wire        allowed_0;
  wire [2:0]  in_0_a_bits_source = {2'h2, auto_in_0_a_bits_source};
  wire [2:0]  in_1_a_bits_source = {1'h0, auto_in_1_a_bits_source};
  wire [2:0]  out_0_d_bits_size = {1'h0, auto_out_0_d_bits_size};
  wire [2:0]  out_1_d_bits_size = {1'h0, auto_out_1_d_bits_size};
  wire        requestAIO_0_0 =
    {auto_in_0_a_bits_address[47:30],
     auto_in_0_a_bits_address[29:12] ^ 18'h38010} == 36'h0;
  wire        requestAIO_0_1 =
    {auto_in_0_a_bits_address[47:30],
     auto_in_0_a_bits_address[29:7] ^ 23'h700441} == 41'h0;
  wire        requestAIO_0_2 =
    auto_in_0_a_bits_address[47:29] == 19'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:28] ^ 2'h2} == 20'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:27] ^ 3'h6} == 21'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:16] ^ 14'h3800} == 32'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:12] ^ 18'h38011} == 36'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:13] ^ 17'h1C009} == 35'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:14] ^ 16'hE005} == 34'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:15] ^ 15'h7003} == 33'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:13] ^ 17'h1C010} == 35'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:8] ^ 22'h380221} == 40'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:9] ^ 21'h1C0111} == 39'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:10] ^ 20'hE0089} == 38'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:11] ^ 19'h70045} == 37'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:12] ^ 18'h38023} == 36'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:14] ^ 16'hE009} == 34'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:15] ^ 15'h7005} == 33'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:16] ^ 14'h3803} == 32'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:18] ^ 12'hE01} == 30'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:19] ^ 11'h701} == 29'h0
    | {auto_in_0_a_bits_address[47:30],
       auto_in_0_a_bits_address[29:20] ^ 10'h381} == 28'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:21] ^ 9'h1C1} == 27'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:22] ^ 8'hE1} == 26'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:23] ^ 7'h71} == 25'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:24] ^ 6'h39} == 24'h0
    | {auto_in_0_a_bits_address[47:30], auto_in_0_a_bits_address[29:25] ^ 5'h1D} == 23'h0
    | {auto_in_0_a_bits_address[47:30], ~(auto_in_0_a_bits_address[29:26])} == 22'h0
    | {auto_in_0_a_bits_address[47:31], ~(auto_in_0_a_bits_address[30])} == 18'h0
    | {auto_in_0_a_bits_address[47:32], ~(auto_in_0_a_bits_address[31])} == 17'h0
    | {auto_in_0_a_bits_address[47:33], ~(auto_in_0_a_bits_address[32])} == 16'h0
    | {auto_in_0_a_bits_address[47:34], ~(auto_in_0_a_bits_address[33])} == 15'h0
    | {auto_in_0_a_bits_address[47:35], ~(auto_in_0_a_bits_address[34])} == 14'h0
    | {auto_in_0_a_bits_address[47:36], ~(auto_in_0_a_bits_address[35])} == 13'h0
    | {auto_in_0_a_bits_address[47:37], ~(auto_in_0_a_bits_address[36])} == 12'h0
    | {auto_in_0_a_bits_address[47:38], ~(auto_in_0_a_bits_address[37])} == 11'h0
    | {auto_in_0_a_bits_address[47:39], ~(auto_in_0_a_bits_address[38])} == 10'h0
    | {auto_in_0_a_bits_address[47:40], ~(auto_in_0_a_bits_address[39])} == 9'h0
    | {auto_in_0_a_bits_address[47:41], ~(auto_in_0_a_bits_address[40])} == 8'h0
    | {auto_in_0_a_bits_address[47:42], ~(auto_in_0_a_bits_address[41])} == 7'h0
    | {auto_in_0_a_bits_address[47:43], ~(auto_in_0_a_bits_address[42])} == 6'h0
    | {auto_in_0_a_bits_address[47:44], ~(auto_in_0_a_bits_address[43])} == 5'h0
    | {auto_in_0_a_bits_address[47:45], ~(auto_in_0_a_bits_address[44])} == 4'h0
    | {auto_in_0_a_bits_address[47:46], ~(auto_in_0_a_bits_address[45])} == 3'h0
    | {auto_in_0_a_bits_address[47], ~(auto_in_0_a_bits_address[46])} == 2'h0
    | auto_in_0_a_bits_address[47];
  wire        requestAIO_1_0 =
    {auto_in_1_a_bits_address[47:30],
     auto_in_1_a_bits_address[29:12] ^ 18'h38010} == 36'h0;
  wire        requestAIO_1_1 =
    {auto_in_1_a_bits_address[47:30],
     auto_in_1_a_bits_address[29:7] ^ 23'h700441} == 41'h0;
  wire        requestAIO_1_2 =
    auto_in_1_a_bits_address[47:29] == 19'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:28] ^ 2'h2} == 20'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:27] ^ 3'h6} == 21'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:16] ^ 14'h3800} == 32'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:12] ^ 18'h38011} == 36'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:13] ^ 17'h1C009} == 35'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:14] ^ 16'hE005} == 34'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:15] ^ 15'h7003} == 33'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:13] ^ 17'h1C010} == 35'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:8] ^ 22'h380221} == 40'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:9] ^ 21'h1C0111} == 39'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:10] ^ 20'hE0089} == 38'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:11] ^ 19'h70045} == 37'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:12] ^ 18'h38023} == 36'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:14] ^ 16'hE009} == 34'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:15] ^ 15'h7005} == 33'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:16] ^ 14'h3803} == 32'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:18] ^ 12'hE01} == 30'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:19] ^ 11'h701} == 29'h0
    | {auto_in_1_a_bits_address[47:30],
       auto_in_1_a_bits_address[29:20] ^ 10'h381} == 28'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:21] ^ 9'h1C1} == 27'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:22] ^ 8'hE1} == 26'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:23] ^ 7'h71} == 25'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:24] ^ 6'h39} == 24'h0
    | {auto_in_1_a_bits_address[47:30], auto_in_1_a_bits_address[29:25] ^ 5'h1D} == 23'h0
    | {auto_in_1_a_bits_address[47:30], ~(auto_in_1_a_bits_address[29:26])} == 22'h0
    | {auto_in_1_a_bits_address[47:31], ~(auto_in_1_a_bits_address[30])} == 18'h0
    | {auto_in_1_a_bits_address[47:32], ~(auto_in_1_a_bits_address[31])} == 17'h0
    | {auto_in_1_a_bits_address[47:33], ~(auto_in_1_a_bits_address[32])} == 16'h0
    | {auto_in_1_a_bits_address[47:34], ~(auto_in_1_a_bits_address[33])} == 15'h0
    | {auto_in_1_a_bits_address[47:35], ~(auto_in_1_a_bits_address[34])} == 14'h0
    | {auto_in_1_a_bits_address[47:36], ~(auto_in_1_a_bits_address[35])} == 13'h0
    | {auto_in_1_a_bits_address[47:37], ~(auto_in_1_a_bits_address[36])} == 12'h0
    | {auto_in_1_a_bits_address[47:38], ~(auto_in_1_a_bits_address[37])} == 11'h0
    | {auto_in_1_a_bits_address[47:39], ~(auto_in_1_a_bits_address[38])} == 10'h0
    | {auto_in_1_a_bits_address[47:40], ~(auto_in_1_a_bits_address[39])} == 9'h0
    | {auto_in_1_a_bits_address[47:41], ~(auto_in_1_a_bits_address[40])} == 8'h0
    | {auto_in_1_a_bits_address[47:42], ~(auto_in_1_a_bits_address[41])} == 7'h0
    | {auto_in_1_a_bits_address[47:43], ~(auto_in_1_a_bits_address[42])} == 6'h0
    | {auto_in_1_a_bits_address[47:44], ~(auto_in_1_a_bits_address[43])} == 5'h0
    | {auto_in_1_a_bits_address[47:45], ~(auto_in_1_a_bits_address[44])} == 4'h0
    | {auto_in_1_a_bits_address[47:46], ~(auto_in_1_a_bits_address[45])} == 3'h0
    | {auto_in_1_a_bits_address[47], ~(auto_in_1_a_bits_address[46])} == 2'h0
    | auto_in_1_a_bits_address[47];
  wire        requestDOI_0_0 = auto_out_0_d_bits_source == 3'h4;
  wire        requestDOI_1_0 = auto_out_1_d_bits_source == 3'h4;
  wire        requestDOI_2_0 = auto_out_2_d_bits_source == 3'h4;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid = auto_in_0_a_valid & requestAIO_0_1;
  wire        portsAOI_filtered_2_valid = auto_in_0_a_valid & requestAIO_0_2;
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid = auto_in_1_a_valid & requestAIO_1_1;
  wire        portsAOI_filtered_1_2_valid = auto_in_1_a_valid & requestAIO_1_2;
  wire        portsDIO_filtered_0_valid = auto_out_0_d_valid & requestDOI_0_0;
  wire        portsDIO_filtered_1_valid =
    auto_out_0_d_valid & ~(auto_out_0_d_bits_source[2]);
  wire        portsDIO_filtered_1_0_valid = auto_out_1_d_valid & requestDOI_1_0;
  wire        portsDIO_filtered_1_1_valid =
    auto_out_1_d_valid & ~(auto_out_1_d_bits_source[2]);
  wire        portsDIO_filtered_2_0_valid = auto_out_2_d_valid & requestDOI_2_0;
  wire        portsDIO_filtered_2_1_valid =
    auto_out_2_d_valid & ~(auto_out_2_d_bits_source[2]);
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire [1:0]  readys_valid = {portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], portsAOI_filtered_1_0_valid} | _readys_filter_T_1));
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign allowed_0 = idle ? readys_readys[0] : state_0;
  assign allowed_1 = idle ? readys_readys[1] : state_1;
  wire        out_0_a_valid =
    idle
      ? portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid
      : state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid;
  reg  [2:0]  beatsLeft_1;
  wire        idle_1 = beatsLeft_1 == 3'h0;
  wire [1:0]  readys_valid_1 = {portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], portsAOI_filtered_1_1_valid} | _readys_filter_T_3));
  wire        winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  reg         state_1_0;
  reg         state_1_1;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire        muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;
  wire        out_1_a_valid =
    idle_1
      ? portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid
      : state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid;
  reg  [2:0]  beatsLeft_2;
  wire        idle_2 = beatsLeft_2 == 3'h0;
  wire [1:0]  readys_valid_2 = {portsAOI_filtered_1_2_valid, portsAOI_filtered_2_valid};
  reg  [1:0]  readys_mask_2;
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0]  readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & ({_readys_filter_T_5[0], portsAOI_filtered_1_2_valid} | _readys_filter_T_5));
  wire        winner_2_0 = readys_readys_2[0] & portsAOI_filtered_2_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsAOI_filtered_1_2_valid;
  reg         state_2_0;
  reg         state_2_1;
  wire        muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  wire        muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;
  wire        out_2_a_valid =
    idle_2
      ? portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid
      : state_2_0 & portsAOI_filtered_2_valid | state_2_1 & portsAOI_filtered_1_2_valid;
  reg  [2:0]  beatsLeft_3;
  wire        idle_3 = beatsLeft_3 == 3'h0;
  wire [2:0]  readys_valid_3 =
    {portsDIO_filtered_2_0_valid, portsDIO_filtered_1_0_valid, portsDIO_filtered_0_valid};
  reg  [2:0]  readys_mask_3;
  wire [2:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [3:0]  _GEN =
    {_readys_filter_T_7[1:0], portsDIO_filtered_2_0_valid, portsDIO_filtered_1_0_valid}
    | {_readys_filter_T_7, portsDIO_filtered_2_0_valid};
  wire [2:0]  readys_readys_3 =
    ~({readys_mask_3[2],
       _readys_filter_T_7[2] | readys_mask_3[1],
       _GEN[3] | readys_mask_3[0]} & (_GEN[2:0] | {_readys_filter_T_7[2], _GEN[3:2]}));
  wire        winner_3_0 = readys_readys_3[0] & portsDIO_filtered_0_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsDIO_filtered_1_0_valid;
  wire        winner_3_2 = readys_readys_3[2] & portsDIO_filtered_2_0_valid;
  reg         state_3_0;
  reg         state_3_1;
  reg         state_3_2;
  wire        muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;
  wire        muxState_3_1 = idle_3 ? winner_3_1 : state_3_1;
  wire        muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;
  assign allowed_3_2 = idle_3 ? readys_readys_3[2] : state_3_2;
  wire        in_0_d_valid =
    idle_3
      ? portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid
        | portsDIO_filtered_2_0_valid
      : state_3_0 & portsDIO_filtered_0_valid | state_3_1 & portsDIO_filtered_1_0_valid
        | state_3_2 & portsDIO_filtered_2_0_valid;
  reg  [2:0]  beatsLeft_4;
  wire        idle_4 = beatsLeft_4 == 3'h0;
  wire [2:0]  readys_valid_4 =
    {portsDIO_filtered_2_1_valid, portsDIO_filtered_1_1_valid, portsDIO_filtered_1_valid};
  reg  [2:0]  readys_mask_4;
  wire [2:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [3:0]  _GEN_0 =
    {_readys_filter_T_9[1:0], portsDIO_filtered_2_1_valid, portsDIO_filtered_1_1_valid}
    | {_readys_filter_T_9, portsDIO_filtered_2_1_valid};
  wire [2:0]  readys_readys_4 =
    ~({readys_mask_4[2],
       _readys_filter_T_9[2] | readys_mask_4[1],
       _GEN_0[3] | readys_mask_4[0]}
      & (_GEN_0[2:0] | {_readys_filter_T_9[2], _GEN_0[3:2]}));
  wire        winner_4_0 = readys_readys_4[0] & portsDIO_filtered_1_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsDIO_filtered_1_1_valid;
  wire        winner_4_2 = readys_readys_4[2] & portsDIO_filtered_2_1_valid;
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  wire        muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;
  wire        muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire        muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;
  assign allowed_4_2 = idle_4 ? readys_readys_4[2] : state_4_2;
  wire        in_1_d_valid =
    idle_4
      ? portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid
        | portsDIO_filtered_2_1_valid
      : state_4_0 & portsDIO_filtered_1_valid | state_4_1 & portsDIO_filtered_1_1_valid
        | state_4_2 & portsDIO_filtered_2_1_valid;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  wire [1:0]  _readys_mask_T_10 = readys_readys_2 & readys_valid_2;
  wire [2:0]  _readys_mask_T_15 = readys_readys_3 & readys_valid_3;
  wire [2:0]  _readys_mask_T_18 = _readys_mask_T_15 | {_readys_mask_T_15[1:0], 1'h0};
  wire [2:0]  _readys_mask_T_23 = readys_readys_4 & readys_valid_4;
  wire [2:0]  _readys_mask_T_26 = _readys_mask_T_23 | {_readys_mask_T_23[1:0], 1'h0};
  wire [12:0] _beatsAI_decode_T = 13'h3F << auto_in_0_a_bits_size;
  wire [12:0] _beatsAI_decode_T_3 = 13'h3F << auto_in_1_a_bits_size;
  wire [12:0] _beatsDO_decode_T_6 = 13'h3F << auto_out_2_d_bits_size;
  wire        latch = idle & auto_out_0_a_ready;
  wire        latch_1 = idle_1 & auto_out_1_a_ready;
  wire        latch_2 = idle_2 & auto_out_2_a_ready;
  wire        latch_3 = idle_3 & auto_in_0_d_ready;
  wire        latch_4 = idle_4 & auto_in_1_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 3'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 3'h0;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      beatsLeft_2 <= 3'h0;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      beatsLeft_3 <= 3'h0;
      readys_mask_3 <= 3'h7;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      beatsLeft_4 <= 3'h0;
      readys_mask_4 <= 3'h7;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0);
      else
        beatsLeft <= 3'(beatsLeft - {2'h0, auto_out_0_a_ready & out_0_a_valid});
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (latch_1)
        beatsLeft_1 <=
          (winner_1_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_1_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0);
      else
        beatsLeft_1 <= 3'(beatsLeft_1 - {2'h0, auto_out_1_a_ready & out_1_a_valid});
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      if (latch_2)
        beatsLeft_2 <=
          (winner_2_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_2_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0);
      else
        beatsLeft_2 <= 3'(beatsLeft_2 - {2'h0, auto_out_2_a_ready & out_2_a_valid});
      if (latch_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};
      if (idle_2) begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      if (latch_3)
        beatsLeft_3 <=
          winner_3_2 & auto_out_2_d_bits_opcode[0] ? ~(_beatsDO_decode_T_6[5:3]) : 3'h0;
      else
        beatsLeft_3 <= 3'(beatsLeft_3 - {2'h0, auto_in_0_d_ready & in_0_d_valid});
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_18 | {_readys_mask_T_18[0], 2'h0};
      if (idle_3) begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
      end
      if (latch_4)
        beatsLeft_4 <=
          winner_4_2 & auto_out_2_d_bits_opcode[0] ? ~(_beatsDO_decode_T_6[5:3]) : 3'h0;
      else
        beatsLeft_4 <= 3'(beatsLeft_4 - {2'h0, auto_in_1_d_ready & in_1_d_valid});
      if (latch_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_26 | {_readys_mask_T_26[0], 2'h0};
      if (idle_4) begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        beatsLeft = _RANDOM[1'h0][2:0];
        readys_mask = _RANDOM[1'h0][4:3];
        state_0 = _RANDOM[1'h0][5];
        state_1 = _RANDOM[1'h0][6];
        beatsLeft_1 = _RANDOM[1'h0][9:7];
        readys_mask_1 = _RANDOM[1'h0][11:10];
        state_1_0 = _RANDOM[1'h0][12];
        state_1_1 = _RANDOM[1'h0][13];
        beatsLeft_2 = _RANDOM[1'h0][16:14];
        readys_mask_2 = _RANDOM[1'h0][18:17];
        state_2_0 = _RANDOM[1'h0][19];
        state_2_1 = _RANDOM[1'h0][20];
        beatsLeft_3 = _RANDOM[1'h0][23:21];
        readys_mask_3 = _RANDOM[1'h0][26:24];
        state_3_0 = _RANDOM[1'h0][27];
        state_3_1 = _RANDOM[1'h0][28];
        state_3_2 = _RANDOM[1'h0][29];
        beatsLeft_4 = {_RANDOM[1'h0][31:30], _RANDOM[1'h1][0]};
        readys_mask_4 = _RANDOM[1'h1][3:1];
        state_4_0 = _RANDOM[1'h1][4];
        state_4_1 = _RANDOM[1'h1][5];
        state_4_2 = _RANDOM[1'h1][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 3'h0;
        readys_mask = 2'h3;
        state_0 = 1'h0;
        state_1 = 1'h0;
        beatsLeft_1 = 3'h0;
        readys_mask_1 = 2'h3;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        beatsLeft_2 = 3'h0;
        readys_mask_2 = 2'h3;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        beatsLeft_3 = 3'h0;
        readys_mask_3 = 3'h7;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
        state_3_2 = 1'h0;
        beatsLeft_4 = 3'h0;
        readys_mask_4 = 3'h7;
        state_4_0 = 1'h0;
        state_4_1 = 1'h0;
        state_4_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready
    & allowed_1_1 | requestAIO_1_2 & auto_out_2_a_ready & allowed_2_1;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_4_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_opcode : 4'h0);
  assign auto_in_1_d_bits_param =
    (muxState_4_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_param : 2'h0);
  assign auto_in_1_d_bits_size =
    (muxState_4_0 ? out_0_d_bits_size : 3'h0) | (muxState_4_1 ? out_1_d_bits_size : 3'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_size : 3'h0);
  assign auto_in_1_d_bits_source =
    (muxState_4_0 ? auto_out_0_d_bits_source[1:0] : 2'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_source[1:0] : 2'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_source[1:0] : 2'h0);
  assign auto_in_1_d_bits_sink =
    muxState_4_0 & auto_out_0_d_bits_sink | muxState_4_1 & auto_out_1_d_bits_sink
    | muxState_4_2 & auto_out_2_d_bits_sink;
  assign auto_in_1_d_bits_denied =
    muxState_4_0 & auto_out_0_d_bits_denied | muxState_4_1 & auto_out_1_d_bits_denied
    | muxState_4_2 & auto_out_2_d_bits_denied;
  assign auto_in_1_d_bits_data =
    (muxState_4_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_data : 64'h0);
  assign auto_in_1_d_bits_corrupt =
    muxState_4_0 & auto_out_0_d_bits_corrupt | muxState_4_1 & auto_out_1_d_bits_corrupt
    | muxState_4_2 & auto_out_2_d_bits_corrupt;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready
    & allowed_1_0 | requestAIO_0_2 & auto_out_2_a_ready & allowed_2_0;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_3_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_opcode : 4'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_opcode : 4'h0);
  assign auto_in_0_d_bits_param =
    (muxState_3_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_param : 2'h0);
  assign auto_in_0_d_bits_size =
    (muxState_3_0 ? out_0_d_bits_size : 3'h0) | (muxState_3_1 ? out_1_d_bits_size : 3'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_size : 3'h0);
  assign auto_in_0_d_bits_sink =
    muxState_3_0 & auto_out_0_d_bits_sink | muxState_3_1 & auto_out_1_d_bits_sink
    | muxState_3_2 & auto_out_2_d_bits_sink;
  assign auto_in_0_d_bits_denied =
    muxState_3_0 & auto_out_0_d_bits_denied | muxState_3_1 & auto_out_1_d_bits_denied
    | muxState_3_2 & auto_out_2_d_bits_denied;
  assign auto_in_0_d_bits_data =
    (muxState_3_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_data : 64'h0);
  assign auto_in_0_d_bits_corrupt =
    muxState_3_0 & auto_out_0_d_bits_corrupt | muxState_3_1 & auto_out_1_d_bits_corrupt
    | muxState_3_2 & auto_out_2_d_bits_corrupt;
  assign auto_out_2_a_valid = out_2_a_valid;
  assign auto_out_2_a_bits_opcode =
    (muxState_2_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_opcode : 4'h0);
  assign auto_out_2_a_bits_param =
    (muxState_2_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_param : 3'h0);
  assign auto_out_2_a_bits_size =
    (muxState_2_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_size : 3'h0);
  assign auto_out_2_a_bits_source =
    (muxState_2_0 ? in_0_a_bits_source : 3'h0)
    | (muxState_2_1 ? in_1_a_bits_source : 3'h0);
  assign auto_out_2_a_bits_address =
    (muxState_2_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_address : 48'h0);
  assign auto_out_2_a_bits_mask =
    (muxState_2_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_2_a_bits_data =
    (muxState_2_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_2_a_bits_corrupt =
    muxState_2_0 & auto_in_0_a_bits_corrupt | muxState_2_1 & auto_in_1_a_bits_corrupt;
  assign auto_out_2_d_ready =
    requestDOI_2_0 & auto_in_0_d_ready & allowed_3_2 | ~(auto_out_2_d_bits_source[2])
    & auto_in_1_d_ready & allowed_4_2;
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_opcode : 4'h0);
  assign auto_out_1_a_bits_param =
    (muxState_1_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_param : 3'h0);
  assign auto_out_1_a_bits_size =
    (muxState_1_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_size[1:0] : 2'h0);
  assign auto_out_1_a_bits_source =
    (muxState_1_0 ? in_0_a_bits_source : 3'h0)
    | (muxState_1_1 ? in_1_a_bits_source : 3'h0);
  assign auto_out_1_a_bits_address =
    (muxState_1_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_address[29:0] : 30'h0);
  assign auto_out_1_a_bits_mask =
    (muxState_1_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_1_a_bits_data =
    (muxState_1_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_1_a_bits_corrupt =
    muxState_1_0 & auto_in_0_a_bits_corrupt | muxState_1_1 & auto_in_1_a_bits_corrupt;
  assign auto_out_1_d_ready =
    requestDOI_1_0 & auto_in_0_d_ready & allowed_3_1 | ~(auto_out_1_d_bits_source[2])
    & auto_in_1_d_ready & allowed_4_1;
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 4'h0);
  assign auto_out_0_a_bits_param =
    (muxState_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_param : 3'h0);
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_1 ? auto_in_1_a_bits_size[1:0] : 2'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? in_0_a_bits_source : 3'h0) | (muxState_1 ? in_1_a_bits_source : 3'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_1 ? auto_in_1_a_bits_address[29:0] : 30'h0);
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_0_a_bits_corrupt =
    muxState_0 & auto_in_0_a_bits_corrupt | muxState_1 & auto_in_1_a_bits_corrupt;
  assign auto_out_0_d_ready =
    requestDOI_0_0 & auto_in_0_d_ready & allowed_3_0 | ~(auto_out_0_d_bits_source[2])
    & auto_in_1_d_ready & allowed_4_0;
endmodule

