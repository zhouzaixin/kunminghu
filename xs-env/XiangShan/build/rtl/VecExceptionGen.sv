// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VecExceptionGen(
  input  [31:0] io_inst,
  input  [3:0]  io_decodedInst_srcType_0,
  input  [3:0]  io_decodedInst_srcType_1,
  input  [3:0]  io_decodedInst_srcType_2,
  input  [34:0] io_decodedInst_fuType,
  input         io_decodedInst_vecWen,
  input         io_vtype_illegal,
  input  [1:0]  io_vtype_vsew,
  input  [2:0]  io_vtype_vlmul,
  input  [7:0]  io_vstart,
  output        io_illegalInst
);

  wire        isVArithMem =
    io_decodedInst_fuType[18] | io_decodedInst_fuType[19] | io_decodedInst_fuType[20]
    | io_decodedInst_fuType[21] | io_decodedInst_fuType[22] | io_decodedInst_fuType[23]
    | io_decodedInst_fuType[24] | io_decodedInst_fuType[25] | io_decodedInst_fuType[26]
    | io_decodedInst_fuType[27] | io_decodedInst_fuType[31] | io_decodedInst_fuType[32]
    | io_decodedInst_fuType[33] | io_decodedInst_fuType[34];
  wire [2:0]  LMUL = {~(io_vtype_vlmul[2]), io_vtype_vlmul[1:0]};
  wire [17:0] _GEN = {io_inst[28:26], io_inst[24:20], io_inst[14:12], io_inst[6:0]};
  wire [12:0] _GEN_0 = {io_inst[28:26], io_inst[14:12], io_inst[6:0]};
  wire        lsStrideInst =
    _GEN == 18'h7 | _GEN == 18'h287 | _GEN == 18'h307 | _GEN == 18'h387 | _GEN == 18'h27
    | _GEN == 18'h2A7 | _GEN == 18'h327 | _GEN == 18'h3A7 | _GEN_0 == 13'h807
    | _GEN_0 == 13'hA87 | _GEN_0 == 13'hB07 | _GEN_0 == 13'hB87 | _GEN_0 == 13'h827
    | _GEN_0 == 13'hAA7 | _GEN_0 == 13'hB27 | _GEN_0 == 13'hBA7 | _GEN == 18'h4007
    | _GEN == 18'h4287 | _GEN == 18'h4307 | _GEN == 18'h4387;
  wire [21:0] _GEN_1 = {io_inst[31:20], io_inst[14:12], io_inst[6:0]};
  wire        lsIndexInst =
    _GEN_0 == 13'h407 | _GEN_0 == 13'h687 | _GEN_0 == 13'h707 | _GEN_0 == 13'h787
    | _GEN_0 == 13'hC07 | _GEN_0 == 13'hE87 | _GEN_0 == 13'hF07 | _GEN_0 == 13'hF87
    | _GEN_0 == 13'h427 | _GEN_0 == 13'h6A7 | _GEN_0 == 13'h727 | _GEN_0 == 13'h7A7
    | _GEN_0 == 13'hC27 | _GEN_0 == 13'hEA7 | _GEN_0 == 13'hF27 | _GEN_0 == 13'hFA7;
  wire        lsWholeInst =
    _GEN_1 == 22'hA007 | _GEN_1 == 22'hA287 | _GEN_1 == 22'hA307 | _GEN_1 == 22'hA387
    | _GEN_1 == 22'h8A007 | _GEN_1 == 22'h8A287 | _GEN_1 == 22'h8A307
    | _GEN_1 == 22'h8A387 | _GEN_1 == 22'h18A007 | _GEN_1 == 22'h18A287
    | _GEN_1 == 22'h18A307 | _GEN_1 == 22'h18A387 | _GEN_1 == 22'h38A007
    | _GEN_1 == 22'h38A287 | _GEN_1 == 22'h38A307 | _GEN_1 == 22'h38A387
    | _GEN_1 == 22'hA027 | _GEN_1 == 22'h8A027 | _GEN_1 == 22'h18A027
    | _GEN_1 == 22'h38A027;
  wire [15:0] _GEN_2 = {io_inst[31:26], io_inst[14:12], io_inst[6:0]};
  wire [20:0] _GEN_3 = {io_inst[31:26], io_inst[19:12], io_inst[6:0]};
  wire        vdWideningInst =
    _GEN_2 == 16'hC557 | _GEN_2 == 16'hC757 | _GEN_2 == 16'hD557 | _GEN_2 == 16'hD757
    | _GEN_2 == 16'hC157 | _GEN_2 == 16'hC357 | _GEN_2 == 16'hD157 | _GEN_2 == 16'hD357
    | _GEN_2 == 16'hF557 | _GEN_2 == 16'hF757 | _GEN_2 == 16'hFD57 | _GEN_2 == 16'hFF57
    | _GEN_2 == 16'hF157 | _GEN_2 == 16'hF357 | _GEN_2 == 16'hFB57 | _GEN_2 == 16'hED57
    | _GEN_2 == 16'hEF57 | _GEN_2 == 16'hE957 | _GEN_2 == 16'hEB57 | _GEN_2 == 16'hE157
    | _GEN_2 == 16'hE357 | _GEN_2 == 16'hCD57 | _GEN_2 == 16'hCF57 | _GEN_2 == 16'hDD57
    | _GEN_2 == 16'hDF57 | _GEN_2 == 16'hC957 | _GEN_2 == 16'hCB57 | _GEN_2 == 16'hD957
    | _GEN_2 == 16'hDB57 | _GEN_2 == 16'hC2D7 | _GEN_2 == 16'hC0D7 | _GEN_2 == 16'hD2D7
    | _GEN_2 == 16'hD0D7 | _GEN_2 == 16'hCAD7 | _GEN_2 == 16'hC8D7 | _GEN_2 == 16'hDAD7
    | _GEN_2 == 16'hD8D7 | _GEN_2 == 16'hE2D7 | _GEN_2 == 16'hE0D7 | _GEN_2 == 16'hF2D7
    | _GEN_2 == 16'hF0D7 | _GEN_2 == 16'hFAD7 | _GEN_2 == 16'hF8D7 | _GEN_2 == 16'hF6D7
    | _GEN_2 == 16'hF4D7 | _GEN_2 == 16'hFED7 | _GEN_2 == 16'hFCD7 | _GEN_3 == 21'h930D7
    | _GEN_3 == 21'h92CD7 | _GEN_3 == 21'h928D7 | _GEN_3 == 21'h93CD7
    | _GEN_3 == 21'h938D7 | _GEN_3 == 21'h924D7 | _GEN_3 == 21'h920D7 | _GEN_2 == 16'hD457
    | _GEN_2 == 16'hD657 | _GEN_2 == 16'hD5D7;
  wire        narrowingInst =
    _GEN_2 == 16'hBDD7 | _GEN_2 == 16'hBC57 | _GEN_2 == 16'hBE57 | _GEN_2 == 16'hB9D7
    | _GEN_2 == 16'hB857 | _GEN_2 == 16'hBA57 | _GEN_2 == 16'hB5D7 | _GEN_2 == 16'hB457
    | _GEN_2 == 16'hB657 | _GEN_2 == 16'hB1D7 | _GEN_2 == 16'hB057 | _GEN_2 == 16'hB257
    | _GEN_3 == 21'h950D7 | _GEN_3 == 21'h94CD7 | _GEN_3 == 21'h948D7
    | _GEN_3 == 21'h954D7 | _GEN_3 == 21'h95CD7 | _GEN_3 == 21'h958D7
    | _GEN_3 == 21'h944D7 | _GEN_3 == 21'h940D7;
  wire [16:0] _GEN_4 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};
  wire        redWideningInst =
    _GEN_2 == 16'hC457 | _GEN_2 == 16'hC057 | _GEN_2 == 16'hCCD7 | _GEN_2 == 16'hC4D7;
  wire        maskLogicalInst =
    _GEN_4 == 17'hCD57 | _GEN_4 == 17'hED57 | _GEN_4 == 17'hC557 | _GEN_4 == 17'hDD57
    | _GEN_4 == 17'hD557 | _GEN_4 == 17'hF557 | _GEN_4 == 17'hE557 | _GEN_4 == 17'hFD57;
  wire        maskArithmeticInst =
    _GEN_3 == 21'h84157 | _GEN_3 == 21'h84557 | _GEN_3 == 21'hA0557 | _GEN_3 == 21'hA0D57
    | _GEN_3 == 21'hA0957 | maskLogicalInst;
  wire [21:0] _GEN_5 = {io_inst[31:25], io_inst[19:12], io_inst[6:0]};
  wire        vmvSingleInst =
    _GEN_5 == 22'h108157 | _GEN_1 == 22'h108357 | _GEN_5 == 22'h1080D7
    | _GEN_1 == 22'h1082D7;
  wire        vmvWholeInst =
    _GEN_5 == 22'h2781D7 | _GEN_5 == 22'h2785D7 | _GEN_5 == 22'h278DD7
    | _GEN_5 == 22'h279DD7;
  wire        vrgather16 = _GEN_2 == 16'h3857;
  wire        intExt2 = _GEN_3 == 21'h91D57 | _GEN_3 == 21'h91957;
  wire        intExt4 = _GEN_3 == 21'h91557 | _GEN_3 == 21'h91157;
  wire        intExt8 = _GEN_3 == 21'h90D57 | _GEN_3 == 21'h90957;
  wire        notDependVtypeInst =
    {io_inst[31], io_inst[14:12], io_inst[6:0]} == 11'h3D7
    | {io_inst[31:30], io_inst[14:12], io_inst[6:0]} == 12'hFD7 | _GEN_4 == 17'h103D7
    | lsWholeInst;
  wire        instIllegal = maskLogicalInst & ~(io_inst[25]);
  wire        villIllegal = io_vtype_illegal & isVArithMem & ~notDependVtypeInst;
  wire        _intExtEewIllegal_T = io_vtype_vsew == 2'h0;
  wire        _wnEmulIllegal_T = vdWideningInst | narrowingInst;
  wire        eewIllegal =
    io_inst[13:12] == 2'h1 & io_inst[6:0] == 7'h57 & _intExtEewIllegal_T
    & ~(_GEN_3 == 21'h92CD7 | _GEN_3 == 21'h928D7 | _GEN_3 == 21'h95CD7
        | _GEN_3 == 21'h958D7 | _GEN_3 == 21'h944D7 | _GEN_3 == 21'h940D7) | intExt2
    & _intExtEewIllegal_T | intExt4 & ~(io_vtype_vsew[1]) | intExt8
    & io_vtype_vsew != 2'h3 | (_wnEmulIllegal_T | redWideningInst) & (&io_vtype_vsew);
  wire        _vdRegHi_T = lsStrideInst | lsIndexInst;
  wire [3:0]  _GEN_6 = {1'h0, ~(io_vtype_vlmul[2]), io_vtype_vlmul[1:0]};
  wire [2:0]  _GEN_7 = {1'h0, io_vtype_vsew};
  wire [2:0]  _vdEew_T_3 = 3'(_GEN_7 + 3'h1);
  wire [3:0]  _GEN_8 = {2'h0, io_vtype_vsew};
  wire [2:0]  _GEN_9 = {~(io_vtype_vlmul[2]), io_vtype_vlmul[1:0]};
  wire [2:0]  segEmul =
    lsIndexInst ? _GEN_9 : 3'(3'(_GEN_9 + {1'h0, io_inst[13:12]}) - _GEN_7);
  wire [6:0]  segRegNum =
    {3'h0, 4'({1'h0, io_inst[31:29]} + 4'h1)} << (segEmul[2] ? segEmul[1:0] : 2'h0);
  wire [7:0]  segRegMax = 8'({3'h0, io_inst[11:7]} + {1'h0, segRegNum});
  wire        emulIllegal =
    _vdRegHi_T
    & (4'(_GEN_6 + {2'h0, io_inst[13:12]}) < {1'h0, _vdEew_T_3}
       | 4'(_GEN_6 + {2'h0, io_inst[13:12]}) > 4'(_GEN_8 + 4'h7)) | intExt2 & LMUL == 3'h1
    | intExt4 & LMUL < 3'h3 | intExt8 & io_vtype_vlmul[2] | _wnEmulIllegal_T & (&LMUL)
    | vrgather16 & (LMUL < _GEN_7 | _GEN_6 > 4'(_GEN_8 + 4'h6)) | _vdRegHi_T
    & (|(io_inst[31:29])) & (segRegNum > 7'h8 | segRegMax > 8'h20);
  wire        vs1IsMask = maskArithmeticInst | _GEN_4 == 17'hBD57;
  wire        vs1IsSingleElem =
    _GEN_2 == 16'h557 | _GEN_2 == 16'h1D57 | _GEN_2 == 16'h1957 | _GEN_2 == 16'h1557
    | _GEN_2 == 16'h1157 | _GEN_2 == 16'h957 | _GEN_2 == 16'h157 | _GEN_2 == 16'hD57
    | _GEN_2 == 16'h1CD7 | _GEN_2 == 16'h14D7 | _GEN_2 == 16'hCD7 | _GEN_2 == 16'h4D7
    | redWideningInst;
  wire [1:0]  vs1Eew = vrgather16 ? 2'h1 : io_vtype_vsew;
  wire [3:0]  _vdEmul_T = 4'(_GEN_6 + 4'h1);
  wire [3:0]  vs1Emul =
    vs1IsMask | vs1IsSingleElem ? 4'h4 : vrgather16 ? 4'(_vdEmul_T - _GEN_8) : _GEN_6;
  wire        vs2IsMask =
    maskArithmeticInst | _GEN_3 == 21'hA4157
    | {io_inst[31:26], io_inst[24:12], io_inst[6:0]} == 26'h1404557;
  wire        _vs2EmulSel_T_1 =
    _GEN_2 == 16'hD557 | _GEN_2 == 16'hD757 | _GEN_2 == 16'hD157 | _GEN_2 == 16'hD357
    | _GEN_2 == 16'hDD57 | _GEN_2 == 16'hDF57 | _GEN_2 == 16'hD957 | _GEN_2 == 16'hDB57
    | _GEN_2 == 16'hD2D7 | _GEN_2 == 16'hD0D7 | _GEN_2 == 16'hDAD7 | _GEN_2 == 16'hD8D7
    | narrowingInst;
  wire [4:0]  vs2EewSel =
    {lsIndexInst, _vs2EmulSel_T_1 | redWideningInst, intExt2, intExt4, intExt8};
  wire [1:0]  vs2Eew =
    vs2EewSel == 5'h1
      ? 2'(io_vtype_vsew + 2'h1)
      : vs2EewSel == 5'h2
          ? 2'(io_vtype_vsew - 2'h2)
          : vs2EewSel == 5'h4
              ? 2'(io_vtype_vsew - 2'h1)
              : vs2EewSel == 5'h8
                  ? _vdEew_T_3[1:0]
                  : vs2EewSel == 5'h10 ? io_inst[13:12] : io_vtype_vsew;
  wire [3:0]  vs2EmulSel =
    {vs2IsMask | vmvSingleInst,
     _vs2EmulSel_T_1,
     vmvWholeInst,
     _GEN_3 == 21'h91D57 | _GEN_3 == 21'h91557 | _GEN_3 == 21'h90D57 | _GEN_3 == 21'h91957
       | _GEN_3 == 21'h91157 | _GEN_3 == 21'h90957 | lsIndexInst};
  wire [3:0]  vs2Emul =
    vs2EmulSel == 4'h1
      ? 4'(4'(_GEN_6 + {2'h0, vs2Eew}) - _GEN_8)
      : {1'h0,
         vs2EmulSel == 4'h2
           ? {io_inst[17:15] == 3'h0, 2'h0} | (io_inst[17:15] == 3'h1 ? 3'h5 : 3'h0)
             | (io_inst[17:15] == 3'h3 ? 3'h6 : 3'h0) | {3{&(io_inst[17:15])}}
           : vs2EmulSel == 4'h4 ? _vdEmul_T[2:0] : vs2EmulSel == 4'h8 ? 3'h4 : LMUL};
  wire        vdIsMask =
    _GEN_1 == 22'hAC07 | _GEN_1 == 22'hAC27 | _GEN_4 == 17'h8DD7 | _GEN_4 == 17'h89D7
    | _GEN_4 == 17'h8C57 | _GEN_4 == 17'h8857 | _GEN_4 == 17'h8E57 | _GEN_4 == 17'h8A57
    | _GEN_4 == 17'h9C57 | _GEN_4 == 17'h9857 | _GEN_4 == 17'h9E57 | _GEN_4 == 17'h9A57
    | _GEN_2 == 16'h61D7 | _GEN_2 == 16'h6057 | _GEN_2 == 16'h6257 | _GEN_2 == 16'h7DD7
    | _GEN_2 == 16'h7E57 | _GEN_2 == 16'h79D7 | _GEN_2 == 16'h7A57 | _GEN_2 == 16'h75D7
    | _GEN_2 == 16'h7457 | _GEN_2 == 16'h7657 | _GEN_2 == 16'h71D7 | _GEN_2 == 16'h7057
    | _GEN_2 == 16'h7257 | _GEN_2 == 16'h6C57 | _GEN_2 == 16'h6E57 | _GEN_2 == 16'h6857
    | _GEN_2 == 16'h6A57 | _GEN_2 == 16'h65D7 | _GEN_2 == 16'h6457 | _GEN_2 == 16'h6657
    | _GEN_2 == 16'h62D7 | _GEN_2 == 16'h60D7 | _GEN_2 == 16'h72D7 | _GEN_2 == 16'h70D7
    | _GEN_2 == 16'h7ED7 | _GEN_2 == 16'h76D7 | _GEN_2 == 16'h66D7 | _GEN_2 == 16'h64D7
    | _GEN_2 == 16'h6ED7 | _GEN_2 == 16'h6CD7 | maskArithmeticInst;
  wire        vdIsSingleElem = vs1IsSingleElem | vmvSingleInst;
  wire [1:0]  vdEew =
    lsStrideInst
      ? io_inst[13:12]
      : vdWideningInst | redWideningInst ? _vdEew_T_3[1:0] : io_vtype_vsew;
  wire        _v0AllowOverlap_T = vdIsMask | vdIsSingleElem;
  wire [4:0]  vdEmulSel =
    {_v0AllowOverlap_T, vdWideningInst, vmvWholeInst, lsWholeInst, lsStrideInst};
  wire [3:0]  vdEmul =
    vdEmulSel == 5'h1
      ? 4'(4'(_GEN_6 + {2'h0, vdEew}) - _GEN_8)
      : {1'h0,
         vdEmulSel == 5'h2
           ? {io_inst[31:29] == 3'h0, 2'h0} | (io_inst[31:29] == 3'h1 ? 3'h5 : 3'h0)
             | (io_inst[31:29] == 3'h3 ? 3'h6 : 3'h0) | {3{&(io_inst[31:29])}}
           : vdEmulSel == 5'h4
               ? {io_inst[17:15] == 3'h0, 2'h0} | (io_inst[17:15] == 3'h1 ? 3'h5 : 3'h0)
                 | (io_inst[17:15] == 3'h3 ? 3'h6 : 3'h0) | {3{&(io_inst[17:15])}}
               : vdEmulSel == 5'h8 ? _vdEmul_T[2:0] : vdEmulSel == 5'h10 ? 3'h4 : LMUL};
  wire        regNumIllegal =
    isVArithMem
    & (io_decodedInst_srcType_0[2]
       & (vs1Emul == 4'h5 & io_inst[15] | vs1Emul == 4'h6 & (|(io_inst[16:15]))
          | vs1Emul == 4'h7 & (|(io_inst[17:15]))) | io_decodedInst_srcType_1[2]
       & (vs2Emul == 4'h5 & io_inst[20] | vs2Emul == 4'h6 & (|(io_inst[21:20]))
          | vs2Emul == 4'h7 & (|(io_inst[22:20])))
       | (io_decodedInst_srcType_2[2] | io_decodedInst_vecWen)
       & (vdEmul == 4'h5 & io_inst[7] | vdEmul == 4'h6 & (|(io_inst[8:7]))
          | vdEmul == 4'h7 & (|(io_inst[9:7]))));
  wire [5:0]  _vs1RegHi_T_2 =
    6'({1'h0, io_inst[19:15]}
       + 6'({2'h0, 4'h1 << (vs1Emul[2] ? vs1Emul[1:0] : 2'h0)} - 6'h1));
  wire [5:0]  _vs2RegHi_T_2 =
    6'({1'h0, io_inst[24:20]}
       + 6'({2'h0, 4'h1 << (vs2Emul[2] ? vs2Emul[1:0] : 2'h0)} - 6'h1));
  wire [5:0]  _GEN_10 = {1'h0, io_inst[11:7]};
  wire [7:0]  vdRegHi =
    _vdRegHi_T
      ? 8'(segRegMax - 8'h1)
      : {3'h0,
         5'(io_inst[11:7] + 5'({1'h0, 4'h1 << (vdEmul[2] ? vdEmul[1:0] : 2'h0)} - 5'h1))};
  wire        notAllowOverlapInst =
    lsIndexInst & (|(io_inst[31:29])) | _GEN_3 == 21'hA0557 | _GEN_3 == 21'hA0D57
    | _GEN_3 == 21'hA0957 | _GEN_3 == 21'hA4157 | _GEN_2 == 16'h3A57 | _GEN_2 == 16'h39D7
    | _GEN_2 == 16'h3B57 | _GEN_2 == 16'h3AD7 | _GEN_2 == 16'h3057 | _GEN_2 == 16'h3857
    | _GEN_2 == 16'h3257 | _GEN_2 == 16'h31D7 | _GEN_4 == 17'hBD57;
  wire        vstartIllegal =
    (io_decodedInst_fuType[18] | io_decodedInst_fuType[19] | io_decodedInst_fuType[20]
     | io_decodedInst_fuType[21] | io_decodedInst_fuType[22] | io_decodedInst_fuType[23]
     | io_decodedInst_fuType[24] | io_decodedInst_fuType[25] | io_decodedInst_fuType[26]
     | io_decodedInst_fuType[27]) & (|io_vstart);
  wire [7:0]  _GEN_11 = {2'h0, _vs1RegHi_T_2};
  wire [7:0]  _GEN_12 = {2'h0, _vs2RegHi_T_2};
  wire        regOverlapIllegal =
    isVArithMem & io_decodedInst_vecWen & ~(io_inst[25]) & io_inst[11:7] == 5'h0
    & ~(_v0AllowOverlap_T
        & ~(_GEN_3 == 21'hA0557 | _GEN_3 == 21'hA0D57 | _GEN_3 == 21'hA0957))
    | io_decodedInst_srcType_0[2] & io_decodedInst_vecWen
    & ~(_vs1RegHi_T_2 < _GEN_10 | vdRegHi < {3'h0, io_inst[19:15]})
    & ~((vs1IsMask & vdIsMask | ~vs1IsMask & ~vdIsMask & vs1Eew == vdEew
         | (vdIsMask & ~vs1IsMask | ~vs1IsMask & ~vdIsMask & vs1Eew > vdEew)
         & io_inst[11:7] == io_inst[19:15] & vdRegHi <= _GEN_11
         | (~vdIsMask & vs1IsMask | ~vs1IsMask & ~vdIsMask & vs1Eew < vdEew)
         & (|(vs1Emul[3:2])) & vdRegHi == _GEN_11 & io_inst[11:7] <= io_inst[19:15]
         | vdIsSingleElem) & ~notAllowOverlapInst) | io_decodedInst_srcType_1[2]
    & io_decodedInst_vecWen
    & ~(_vs2RegHi_T_2 < _GEN_10 | vdRegHi < {3'h0, io_inst[24:20]})
    & ~((vs2IsMask & vdIsMask | ~vs2IsMask & ~vdIsMask & vs2Eew == vdEew
         | (vdIsMask & ~vs2IsMask | ~vs2IsMask & ~vdIsMask & vs2Eew > vdEew)
         & io_inst[11:7] == io_inst[24:20] & vdRegHi <= _GEN_12
         | (~vdIsMask & vs2IsMask | ~vs2IsMask & ~vdIsMask & vs2Eew < vdEew)
         & (|(vs2Emul[3:2])) & vdRegHi == _GEN_12 & io_inst[11:7] <= io_inst[24:20]
         | vdIsSingleElem) & ~notAllowOverlapInst);
  assign io_illegalInst =
    instIllegal | villIllegal | eewIllegal | emulIllegal | regNumIllegal
    | regOverlapIllegal | vstartIllegal;
endmodule

