// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module WritebackEntry(
  input          clock,
  input          reset,
  input  [4:0]   io_id,
  input          io_req_valid,
  input  [2:0]   io_req_bits_param,
  input          io_req_bits_voluntary,
  input          io_req_bits_hasData,
  input          io_req_bits_corrupt,
  input  [47:0]  io_req_bits_addr,
  input  [511:0] io_req_data_data,
  input          io_mem_release_ready,
  output         io_mem_release_valid,
  output [2:0]   io_mem_release_bits_opcode,
  output [2:0]   io_mem_release_bits_param,
  output [5:0]   io_mem_release_bits_source,
  output [47:0]  io_mem_release_bits_address,
  output [255:0] io_mem_release_bits_data,
  output         io_mem_release_bits_corrupt,
  input          io_mem_grant_valid,
  input          io_primary_valid,
  output         io_primary_ready,
  output         io_block_addr_valid,
  output [47:0]  io_block_addr_bits
);

  reg  [1:0]   state;
  reg  [1:0]   remain;
  reg  [1:0]   remain_dup_0;
  reg  [1:0]   remain_dup_1;
  reg  [511:0] data;
  reg  [47:0]  paddr_dup_1;
  reg  [47:0]  paddr_dup_2;
  reg          s_data_override;
  wire         busy = (|remain) & s_data_override;
  reg  [2:0]   req_param;
  reg          req_voluntary;
  reg          req_hasData;
  reg          req_corrupt;
  reg  [47:0]  req_addr;
  wire         io_primary_ready_0 = state == 2'h0;
  wire         alloc = io_req_valid & io_primary_valid & io_primary_ready_0;
  wire [1:0]   remain_set = alloc ? {io_req_bits_hasData, 1'h1} : 2'h0;
  wire         _release_done_T = io_mem_release_ready & busy;
  wire [1:0]   remain_clr =
    _release_done_T ? (remain_dup_1[0] ? 2'h1 : {remain_dup_1[1], 1'h0}) : 2'h0;
  reg          release_done_r_counter;
  reg          REG;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      state <= 2'h0;
      remain <= 2'h0;
      remain_dup_0 <= 2'h0;
      remain_dup_1 <= 2'h0;
      s_data_override <= 1'h1;
      release_done_r_counter <= 1'h0;
    end
    else begin
      if (state == 2'h2 & io_mem_grant_valid)
        state <= 2'h0;
      else if (state == 2'h1 & (release_done_r_counter | ~req_hasData) & _release_done_T)
        state <= {req_voluntary, 1'h0};
      else if (alloc)
        state <= 2'h1;
      remain <= (remain | remain_set) & ~remain_clr;
      remain_dup_0 <= (remain_dup_0 | remain_set) & ~remain_clr;
      remain_dup_1 <= (remain_dup_1 | remain_set) & ~remain_clr;
      s_data_override <= ~alloc;
      if (_release_done_T) begin
        if (release_done_r_counter)
          release_done_r_counter <= 1'(release_done_r_counter - 1'h1);
        else
          release_done_r_counter <= req_hasData;
      end
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (~s_data_override & (req_hasData | REG))
      data <= io_req_data_data;
    if (alloc) begin
      paddr_dup_1 <= io_req_bits_addr;
      paddr_dup_2 <= io_req_bits_addr;
      req_param <= io_req_bits_param;
      req_voluntary <= io_req_bits_voluntary;
      req_hasData <= io_req_bits_hasData;
      req_corrupt <= io_req_bits_corrupt;
      req_addr <= io_req_bits_addr;
    end
    REG <= alloc;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:23];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h18; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[5'h0][1:0];
        remain = _RANDOM[5'h0][31:30];
        remain_dup_0 = _RANDOM[5'h1][1:0];
        remain_dup_1 = _RANDOM[5'h1][3:2];
        data =
          {_RANDOM[5'h1][31:4],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11][3:0]};
        paddr_dup_1 = {_RANDOM[5'h12][31:20], _RANDOM[5'h13], _RANDOM[5'h14][3:0]};
        paddr_dup_2 = {_RANDOM[5'h14][31:4], _RANDOM[5'h15][19:0]};
        s_data_override = _RANDOM[5'h15][20];
        req_param = _RANDOM[5'h15][23:21];
        req_voluntary = _RANDOM[5'h15][24];
        req_hasData = _RANDOM[5'h15][25];
        req_corrupt = _RANDOM[5'h15][26];
        req_addr = {_RANDOM[5'h16][31:1], _RANDOM[5'h17][16:0]};
        release_done_r_counter = _RANDOM[5'h17][17];
        REG = _RANDOM[5'h17][18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        state = 2'h0;
        remain = 2'h0;
        remain_dup_0 = 2'h0;
        remain_dup_1 = 2'h0;
        s_data_override = 1'h1;
        release_done_r_counter = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_mem_release_valid = busy;
  assign io_mem_release_bits_opcode = {1'h1, req_voluntary, req_hasData};
  assign io_mem_release_bits_param = req_param;
  assign io_mem_release_bits_source = {1'h0, io_id};
  assign io_mem_release_bits_address = req_voluntary ? paddr_dup_2 : paddr_dup_1;
  assign io_mem_release_bits_data =
    req_hasData ? (remain_dup_0[0] ? data[255:0] : data[511:256]) : 256'h0;
  assign io_mem_release_bits_corrupt = req_corrupt;
  assign io_primary_ready = io_primary_ready_0;
  assign io_block_addr_valid = |state;
  assign io_block_addr_bits = req_addr;
endmodule

