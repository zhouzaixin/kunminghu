// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FP_INCVT(
  input         clock,
  input         reset,
  input         io_fire,
  input  [63:0] io_src,
  input  [7:0]  io_opType,
  input  [2:0]  io_rm,
  input  [3:0]  io_input1H,
  input  [3:0]  io_output1H,
  input         io_isFpToVecInst,
  input  [1:0]  io_isFround,
  input         io_isFcvtmod,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire         _subRounder_io_inexact;
  wire         _subRounder_io_r_up;
  wire         _rounder_io_inexact;
  wire         _rounder_io_r_up;
  wire [64:0]  _shiftRightJam_io_out;
  wire         _shiftRightJam_io_sticky;
  wire [6:0]   _leadZerosNext_clz_io_out;
  reg          fireReg_last_r;
  wire         isCrossLow = io_opType[4] & io_opType[3] & io_opType[6] & io_output1H[1];
  wire [63:0]  input_0 =
    (io_input1H[1] ? {io_src[15], 6'h0, io_src[14:0], 42'h0} : 64'h0)
    | (io_input1H[2] ? {io_src[31], 3'h0, io_src[30:0], 29'h0} : 64'h0)
    | (io_input1H[3] ? io_src : 64'h0);
  wire [2:0]   decodeFloatSrc =
    (io_input1H[1] ? {|(input_0[51:42]), &(input_0[56:52]), |(input_0[56:52])} : 3'h0)
    | (io_input1H[2] ? {|(input_0[51:29]), &(input_0[59:52]), |(input_0[59:52])} : 3'h0)
    | (io_input1H[3] ? {|(input_0[51:0]), &(input_0[62:52]), |(input_0[62:52])} : 3'h0);
  wire         isSubnormalSrcNext = ~(decodeFloatSrc[0]) & decodeFloatSrc[2];
  wire         isFpWidenNext = io_opType[6] & ~(io_opType[4]) & io_opType[3];
  wire         isFpNarrowNext = io_opType[6] & io_opType[4] & ~(io_opType[3]);
  wire         isFpCrossHighNext =
    io_opType[6] & io_opType[4] & io_opType[3] & io_output1H[3];
  wire         isFpCrossLowNext = io_opType[6] & isCrossLow;
  reg          expNotZeroSrc;
  reg          expIsOnesSrc;
  reg          fracNotZeroSrc;
  reg          isInfSrc;
  reg          isZeroSrc;
  reg          isSubnormalSrc;
  reg          isnormalSrc;
  reg          isSNaNSrc;
  reg          isFpWiden;
  reg          isFpNarrow;
  reg          isFp2Int;
  reg          isFpCrossHigh;
  reg          isFpCrossLow;
  reg          isNaNSrc;
  reg          s1_fpCanonicalNAN;
  reg          isFroundnxReg;
  reg          isFroundOrFroundnxReg;
  reg          isFcvtmodReg;
  reg          froundOrFroundnxIsZeroOrInf;
  reg          trunSticky;
  reg          signSrc;
  reg  [2:0]   rm;
  reg          hasSignInt;
  reg  [3:0]   output1HReg;
  reg  [4:0]   fflags;
  reg  [63:0]  result;
  reg  [12:0]  expAdderIn0;
  reg  [12:0]  expAdderIn1;
  wire [63:0]  fracSrcLeftNext = {input_0[51:0], 12'h0};
  reg  [6:0]   leadZeros;
  reg  [63:0]  fracSrcLeft;
  wire [191:0] _shiftLeft_T_1 = {127'h0, fracSrcLeft, 1'h0} << leadZeros;
  wire         _fracValueSrc_T_1 = decodeFloatSrc[0] & ~(decodeFloatSrc[1]);
  reg  [64:0]  shamtIn;
  reg  [10:0]  shamt;
  reg          froundExpLessThanBias;
  reg          froundExpGreaterThanMaxExp;
  reg  [10:0]  fracShiftMask;
  reg  [10:0]  froundOldExp;
  reg  [51:0]  froundOldFrac;
  reg  [63:0]  fcvtmodFracReg;
  reg  [10:0]  fcvtmodTrueExpReg;
  reg          fcvtmodNxReg;
  reg          fcvtmodExpLessThanBias;
  wire         _rounderMapIn_T = isFpNarrow | isFpCrossLow;
  wire [63:0]  rounderMapIn = _rounderMapIn_T ? fracSrcLeft : _shiftLeft_T_1[63:0];
  wire         selectInRounder = isFp2Int | isFroundOrFroundnxReg;
  wire [63:0]  rounderInput =
    selectInRounder
      ? _shiftRightJam_io_out[64:1]
      : {12'h0,
         {29'h0,
          {13'h0, output1HReg[1] ? rounderMapIn[63:54] : 10'h0}
            | (output1HReg[2] ? rounderMapIn[63:41] : 23'h0)}
           | (output1HReg[3] ? rounderMapIn[63:12] : 52'h0)};
  wire         _subRounderMap_T_9 = trunSticky | _shiftRightJam_io_sticky;
  wire [22:0]  subRounderInput =
    {13'h0, output1HReg[1] ? _shiftRightJam_io_out[63:54] : 10'h0}
    | (output1HReg[2] ? _shiftRightJam_io_out[63:41] : 23'h0);
  wire         isNaNSrcNext = decodeFloatSrc[1] & decodeFloatSrc[2];
  wire         isZeroSrcNext = ~(decodeFloatSrc[0]) & ~(decodeFloatSrc[2]);
  wire         isInfSrcNext = decodeFloatSrc[1] & ~(decodeFloatSrc[2]);
  wire         fcvtmodExpGreatThanShiftMask = input_0[62:52] > 11'h432;
  wire [63:0]  fcvtmodFracTmp = {11'h0, _fracValueSrc_T_1, input_0[51:0]};
  wire [10:0]  _fcvtmodShiftDelta_T = 11'(input_0[62:52] + 11'h3CD);
  wire [10:0]  fcvtmodShift =
    fcvtmodExpGreatThanShiftMask
      ? _fcvtmodShiftDelta_T
      : 11'(~_fcvtmodShiftDelta_T + 11'h1);
  wire [10:0]  _fcvtmodShiftLeftMask_T = 11'(input_0[62:52] - 11'h3F3);
  wire         _GEN = fcvtmodExpGreatThanShiftMask & (|(fcvtmodShift[10:6]));
  wire         _GEN_0 = fcvtmodExpGreatThanShiftMask & ~(|(fcvtmodShift[10:6]));
  wire         _GEN_1 = ~fcvtmodExpGreatThanShiftMask & ~(|(fcvtmodShift[10:6]));
  wire [63:0]  _fcvtmodFrac_T_318 =
    (fcvtmodShift == 11'h0 ? fcvtmodFracTmp : 64'h0)
    | (fcvtmodShift == 11'h1 ? {10'h0, _fracValueSrc_T_1, input_0[51:0], 1'h0} : 64'h0)
    | (fcvtmodShift == 11'h2 ? {9'h0, _fracValueSrc_T_1, input_0[51:0], 2'h0} : 64'h0)
    | (fcvtmodShift == 11'h3 ? {8'h0, _fracValueSrc_T_1, input_0[51:0], 3'h0} : 64'h0)
    | (fcvtmodShift == 11'h4 ? {7'h0, _fracValueSrc_T_1, input_0[51:0], 4'h0} : 64'h0)
    | (fcvtmodShift == 11'h5 ? {6'h0, _fracValueSrc_T_1, input_0[51:0], 5'h0} : 64'h0)
    | (fcvtmodShift == 11'h6 ? {5'h0, _fracValueSrc_T_1, input_0[51:0], 6'h0} : 64'h0)
    | (fcvtmodShift == 11'h7 ? {4'h0, _fracValueSrc_T_1, input_0[51:0], 7'h0} : 64'h0)
    | (fcvtmodShift == 11'h8 ? {3'h0, _fracValueSrc_T_1, input_0[51:0], 8'h0} : 64'h0)
    | (fcvtmodShift == 11'h9 ? {2'h0, _fracValueSrc_T_1, input_0[51:0], 9'h0} : 64'h0)
    | (fcvtmodShift == 11'hA ? {1'h0, _fracValueSrc_T_1, input_0[51:0], 10'h0} : 64'h0)
    | (fcvtmodShift == 11'hB ? {_fracValueSrc_T_1, input_0[51:0], 11'h0} : 64'h0)
    | (fcvtmodShift == 11'hC ? {input_0[51:0], 12'h0} : 64'h0)
    | (fcvtmodShift == 11'hD ? {input_0[50:0], 13'h0} : 64'h0)
    | (fcvtmodShift == 11'hE ? {input_0[49:0], 14'h0} : 64'h0)
    | (fcvtmodShift == 11'hF ? {input_0[48:0], 15'h0} : 64'h0)
    | (fcvtmodShift == 11'h10 ? {input_0[47:0], 16'h0} : 64'h0)
    | (fcvtmodShift == 11'h11 ? {input_0[46:0], 17'h0} : 64'h0)
    | (fcvtmodShift == 11'h12 ? {input_0[45:0], 18'h0} : 64'h0)
    | (fcvtmodShift == 11'h13 ? {input_0[44:0], 19'h0} : 64'h0)
    | (fcvtmodShift == 11'h14 ? {input_0[43:0], 20'h0} : 64'h0)
    | (fcvtmodShift == 11'h15 ? {input_0[42:0], 21'h0} : 64'h0)
    | (fcvtmodShift == 11'h16 ? {input_0[41:0], 22'h0} : 64'h0)
    | (fcvtmodShift == 11'h17 ? {input_0[40:0], 23'h0} : 64'h0)
    | (fcvtmodShift == 11'h18 ? {input_0[39:0], 24'h0} : 64'h0)
    | (fcvtmodShift == 11'h19 ? {input_0[38:0], 25'h0} : 64'h0)
    | (fcvtmodShift == 11'h1A ? {input_0[37:0], 26'h0} : 64'h0)
    | (fcvtmodShift == 11'h1B ? {input_0[36:0], 27'h0} : 64'h0)
    | (fcvtmodShift == 11'h1C ? {input_0[35:0], 28'h0} : 64'h0)
    | (fcvtmodShift == 11'h1D ? {input_0[34:0], 29'h0} : 64'h0)
    | (fcvtmodShift == 11'h1E ? {input_0[33:0], 30'h0} : 64'h0)
    | (fcvtmodShift == 11'h1F ? {input_0[32:0], 31'h0} : 64'h0)
    | (fcvtmodShift == 11'h20 ? {input_0[31:0], 32'h0} : 64'h0)
    | (fcvtmodShift == 11'h21 ? {input_0[30:0], 33'h0} : 64'h0)
    | (fcvtmodShift == 11'h22 ? {input_0[29:0], 34'h0} : 64'h0)
    | (fcvtmodShift == 11'h23 ? {input_0[28:0], 35'h0} : 64'h0)
    | (fcvtmodShift == 11'h24 ? {input_0[27:0], 36'h0} : 64'h0)
    | (fcvtmodShift == 11'h25 ? {input_0[26:0], 37'h0} : 64'h0)
    | (fcvtmodShift == 11'h26 ? {input_0[25:0], 38'h0} : 64'h0)
    | (fcvtmodShift == 11'h27 ? {input_0[24:0], 39'h0} : 64'h0)
    | (fcvtmodShift == 11'h28 ? {input_0[23:0], 40'h0} : 64'h0)
    | (fcvtmodShift == 11'h29 ? {input_0[22:0], 41'h0} : 64'h0)
    | (fcvtmodShift == 11'h2A ? {input_0[21:0], 42'h0} : 64'h0)
    | (fcvtmodShift == 11'h2B ? {input_0[20:0], 43'h0} : 64'h0)
    | (fcvtmodShift == 11'h2C ? {input_0[19:0], 44'h0} : 64'h0)
    | (fcvtmodShift == 11'h2D ? {input_0[18:0], 45'h0} : 64'h0)
    | (fcvtmodShift == 11'h2E ? {input_0[17:0], 46'h0} : 64'h0)
    | (fcvtmodShift == 11'h2F ? {input_0[16:0], 47'h0} : 64'h0)
    | (fcvtmodShift == 11'h30 ? {input_0[15:0], 48'h0} : 64'h0)
    | (fcvtmodShift == 11'h31 ? {input_0[14:0], 49'h0} : 64'h0)
    | (fcvtmodShift == 11'h32 ? {input_0[13:0], 50'h0} : 64'h0)
    | (fcvtmodShift == 11'h33 ? {input_0[12:0], 51'h0} : 64'h0)
    | (fcvtmodShift == 11'h34 ? {input_0[11:0], 52'h0} : 64'h0)
    | (fcvtmodShift == 11'h35 ? {input_0[10:0], 53'h0} : 64'h0)
    | (fcvtmodShift == 11'h36 ? {input_0[9:0], 54'h0} : 64'h0)
    | (fcvtmodShift == 11'h37 ? {input_0[8:0], 55'h0} : 64'h0)
    | (fcvtmodShift == 11'h38 ? {input_0[7:0], 56'h0} : 64'h0)
    | (fcvtmodShift == 11'h39 ? {input_0[6:0], 57'h0} : 64'h0)
    | (fcvtmodShift == 11'h3A ? {input_0[5:0], 58'h0} : 64'h0)
    | (fcvtmodShift == 11'h3B ? {input_0[4:0], 59'h0} : 64'h0)
    | (fcvtmodShift == 11'h3C ? {input_0[3:0], 60'h0} : 64'h0)
    | (fcvtmodShift == 11'h3D ? {input_0[2:0], 61'h0} : 64'h0)
    | (fcvtmodShift == 11'h3E ? {input_0[1:0], 62'h0} : 64'h0)
    | (fcvtmodShift == 11'h3F ? {input_0[0], 63'h0} : 64'h0);
  wire [63:0]  _fcvtmodNx_T_318 =
    (_fcvtmodShiftLeftMask_T == 11'h0 ? fcvtmodFracTmp : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1
         ? {10'h0, _fracValueSrc_T_1, input_0[51:0], 1'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2
         ? {9'h0, _fracValueSrc_T_1, input_0[51:0], 2'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3
         ? {8'h0, _fracValueSrc_T_1, input_0[51:0], 3'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h4
         ? {7'h0, _fracValueSrc_T_1, input_0[51:0], 4'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h5
         ? {6'h0, _fracValueSrc_T_1, input_0[51:0], 5'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h6
         ? {5'h0, _fracValueSrc_T_1, input_0[51:0], 6'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h7
         ? {4'h0, _fracValueSrc_T_1, input_0[51:0], 7'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h8
         ? {3'h0, _fracValueSrc_T_1, input_0[51:0], 8'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h9
         ? {2'h0, _fracValueSrc_T_1, input_0[51:0], 9'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'hA
         ? {1'h0, _fracValueSrc_T_1, input_0[51:0], 10'h0}
         : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'hB
         ? {_fracValueSrc_T_1, input_0[51:0], 11'h0}
         : 64'h0) | (_fcvtmodShiftLeftMask_T == 11'hC ? {input_0[51:0], 12'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'hD ? {input_0[50:0], 13'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'hE ? {input_0[49:0], 14'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'hF ? {input_0[48:0], 15'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h10 ? {input_0[47:0], 16'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h11 ? {input_0[46:0], 17'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h12 ? {input_0[45:0], 18'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h13 ? {input_0[44:0], 19'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h14 ? {input_0[43:0], 20'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h15 ? {input_0[42:0], 21'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h16 ? {input_0[41:0], 22'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h17 ? {input_0[40:0], 23'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h18 ? {input_0[39:0], 24'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h19 ? {input_0[38:0], 25'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1A ? {input_0[37:0], 26'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1B ? {input_0[36:0], 27'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1C ? {input_0[35:0], 28'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1D ? {input_0[34:0], 29'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1E ? {input_0[33:0], 30'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h1F ? {input_0[32:0], 31'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h20 ? {input_0[31:0], 32'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h21 ? {input_0[30:0], 33'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h22 ? {input_0[29:0], 34'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h23 ? {input_0[28:0], 35'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h24 ? {input_0[27:0], 36'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h25 ? {input_0[26:0], 37'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h26 ? {input_0[25:0], 38'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h27 ? {input_0[24:0], 39'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h28 ? {input_0[23:0], 40'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h29 ? {input_0[22:0], 41'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2A ? {input_0[21:0], 42'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2B ? {input_0[20:0], 43'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2C ? {input_0[19:0], 44'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2D ? {input_0[18:0], 45'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2E ? {input_0[17:0], 46'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h2F ? {input_0[16:0], 47'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h30 ? {input_0[15:0], 48'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h31 ? {input_0[14:0], 49'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h32 ? {input_0[13:0], 50'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h33 ? {input_0[12:0], 51'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h34 ? {input_0[11:0], 52'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h35 ? {input_0[10:0], 53'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h36 ? {input_0[9:0], 54'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h37 ? {input_0[8:0], 55'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h38 ? {input_0[7:0], 56'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h39 ? {input_0[6:0], 57'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3A ? {input_0[5:0], 58'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3B ? {input_0[4:0], 59'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3C ? {input_0[3:0], 60'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3D ? {input_0[2:0], 61'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3E ? {input_0[1:0], 62'h0} : 64'h0)
    | (_fcvtmodShiftLeftMask_T == 11'h3F ? {input_0[0], 63'h0} : 64'h0);
  wire         signNonNan = ~isNaNSrc & signSrc;
  wire [12:0]  _exp_T = 13'(expAdderIn0 + expAdderIn1);
  wire [51:0]  fracNormaled = isSubnormalSrc ? _shiftLeft_T_1[63:12] : fracSrcLeft[63:12];
  wire         _froundUpShiftMask_T = fracShiftMask == 11'h0;
  wire         _froundUpShiftMask_T_2 = fracShiftMask == 11'h1;
  wire         _froundUpShiftMask_T_4 = fracShiftMask == 11'h2;
  wire         _froundUpShiftMask_T_6 = fracShiftMask == 11'h3;
  wire         _froundUpShiftMask_T_8 = fracShiftMask == 11'h4;
  wire         _froundUpShiftMask_T_10 = fracShiftMask == 11'h5;
  wire         _froundUpShiftMask_T_12 = fracShiftMask == 11'h6;
  wire         _froundUpShiftMask_T_14 = fracShiftMask == 11'h7;
  wire         _froundUpShiftMask_T_16 = fracShiftMask == 11'h8;
  wire         _froundUpShiftMask_T_18 = fracShiftMask == 11'h9;
  wire         _froundUpShiftMask_T_20 = fracShiftMask == 11'hA;
  wire         _froundUpShiftMask_T_22 = fracShiftMask == 11'hB;
  wire         _froundUpShiftMask_T_24 = fracShiftMask == 11'hC;
  wire         _froundUpShiftMask_T_26 = fracShiftMask == 11'hD;
  wire         _froundUpShiftMask_T_28 = fracShiftMask == 11'hE;
  wire         _froundUpShiftMask_T_30 = fracShiftMask == 11'hF;
  wire         _froundUpShiftMask_T_32 = fracShiftMask == 11'h10;
  wire         _froundUpShiftMask_T_34 = fracShiftMask == 11'h11;
  wire         _froundUpShiftMask_T_36 = fracShiftMask == 11'h12;
  wire         _froundUpShiftMask_T_38 = fracShiftMask == 11'h13;
  wire         _froundUpShiftMask_T_40 = fracShiftMask == 11'h14;
  wire         _froundUpShiftMask_T_42 = fracShiftMask == 11'h15;
  wire         _froundUpShiftMask_T_44 = fracShiftMask == 11'h16;
  wire         _froundUpShiftMask_T_46 = fracShiftMask == 11'h17;
  wire         _froundUpShiftMask_T_48 = fracShiftMask == 11'h18;
  wire         _froundUpShiftMask_T_50 = fracShiftMask == 11'h19;
  wire         _froundUpShiftMask_T_52 = fracShiftMask == 11'h1A;
  wire         _froundUpShiftMask_T_54 = fracShiftMask == 11'h1B;
  wire         _froundUpShiftMask_T_56 = fracShiftMask == 11'h1C;
  wire         _froundUpShiftMask_T_58 = fracShiftMask == 11'h1D;
  wire         _froundUpShiftMask_T_60 = fracShiftMask == 11'h1E;
  wire         _froundUpShiftMask_T_62 = fracShiftMask == 11'h1F;
  wire         _froundUpShiftMask_T_64 = fracShiftMask == 11'h20;
  wire         _froundUpShiftMask_T_66 = fracShiftMask == 11'h21;
  wire         _froundUpShiftMask_T_68 = fracShiftMask == 11'h22;
  wire         _froundUpShiftMask_T_70 = fracShiftMask == 11'h23;
  wire         _froundUpShiftMask_T_72 = fracShiftMask == 11'h24;
  wire         _froundUpShiftMask_T_74 = fracShiftMask == 11'h25;
  wire         _froundUpShiftMask_T_76 = fracShiftMask == 11'h26;
  wire         _froundUpShiftMask_T_78 = fracShiftMask == 11'h27;
  wire         _froundUpShiftMask_T_80 = fracShiftMask == 11'h28;
  wire         _froundUpShiftMask_T_82 = fracShiftMask == 11'h29;
  wire         _froundUpShiftMask_T_84 = fracShiftMask == 11'h2A;
  wire         _froundUpShiftMask_T_86 = fracShiftMask == 11'h2B;
  wire         _froundUpShiftMask_T_88 = fracShiftMask == 11'h2C;
  wire         _froundUpShiftMask_T_90 = fracShiftMask == 11'h2D;
  wire         _froundUpShiftMask_T_92 = fracShiftMask == 11'h2E;
  wire         _froundUpShiftMask_T_94 = fracShiftMask == 11'h2F;
  wire         _froundUpShiftMask_T_96 = fracShiftMask == 11'h30;
  wire         _froundUpShiftMask_T_98 = fracShiftMask == 11'h31;
  wire         _froundUpShiftMask_T_100 = fracShiftMask == 11'h32;
  wire         _froundUpShiftMask_T_102 = fracShiftMask == 11'h33;
  wire         _froundUpShiftMask_T_104 = fracShiftMask == 11'h34;
  wire         _froundUpShiftMask_T_106 = fracShiftMask == 11'h35;
  wire         _froundUpShiftMask_T_108 = fracShiftMask == 11'h36;
  wire         _froundUpShiftMask_T_110 = fracShiftMask == 11'h37;
  wire         _froundUpShiftMask_T_112 = fracShiftMask == 11'h38;
  wire         _froundUpShiftMask_T_114 = fracShiftMask == 11'h39;
  wire         _froundUpShiftMask_T_116 = fracShiftMask == 11'h3A;
  wire         _froundUpShiftMask_T_118 = fracShiftMask == 11'h3B;
  wire         _froundUpShiftMask_T_120 = fracShiftMask == 11'h3C;
  wire         _froundUpShiftMask_T_122 = fracShiftMask == 11'h3D;
  wire         _froundUpShiftMask_T_124 = fracShiftMask == 11'h3E;
  wire         _froundUpShiftMask_T_126 = fracShiftMask == 11'h3F;
  wire [63:0]  froundOldInput =
    {signSrc, froundOldExp, froundOldFrac}
    & ({64{_froundUpShiftMask_T}}
       | (_froundUpShiftMask_T_2 ? 64'hFFFFFFFFFFFFFFFE : 64'h0)
       | (_froundUpShiftMask_T_4 ? 64'hFFFFFFFFFFFFFFFC : 64'h0)
       | (_froundUpShiftMask_T_6 ? 64'hFFFFFFFFFFFFFFF8 : 64'h0)
       | (_froundUpShiftMask_T_8 ? 64'hFFFFFFFFFFFFFFF0 : 64'h0)
       | (_froundUpShiftMask_T_10 ? 64'hFFFFFFFFFFFFFFE0 : 64'h0)
       | (_froundUpShiftMask_T_12 ? 64'hFFFFFFFFFFFFFFC0 : 64'h0)
       | (_froundUpShiftMask_T_14 ? 64'hFFFFFFFFFFFFFF80 : 64'h0)
       | (_froundUpShiftMask_T_16 ? 64'hFFFFFFFFFFFFFF00 : 64'h0)
       | (_froundUpShiftMask_T_18 ? 64'hFFFFFFFFFFFFFE00 : 64'h0)
       | (_froundUpShiftMask_T_20 ? 64'hFFFFFFFFFFFFFC00 : 64'h0)
       | (_froundUpShiftMask_T_22 ? 64'hFFFFFFFFFFFFF800 : 64'h0)
       | (_froundUpShiftMask_T_24 ? 64'hFFFFFFFFFFFFF000 : 64'h0)
       | (_froundUpShiftMask_T_26 ? 64'hFFFFFFFFFFFFE000 : 64'h0)
       | (_froundUpShiftMask_T_28 ? 64'hFFFFFFFFFFFFC000 : 64'h0)
       | (_froundUpShiftMask_T_30 ? 64'hFFFFFFFFFFFF8000 : 64'h0)
       | (_froundUpShiftMask_T_32 ? 64'hFFFFFFFFFFFF0000 : 64'h0)
       | (_froundUpShiftMask_T_34 ? 64'hFFFFFFFFFFFE0000 : 64'h0)
       | (_froundUpShiftMask_T_36 ? 64'hFFFFFFFFFFFC0000 : 64'h0)
       | (_froundUpShiftMask_T_38 ? 64'hFFFFFFFFFFF80000 : 64'h0)
       | (_froundUpShiftMask_T_40 ? 64'hFFFFFFFFFFF00000 : 64'h0)
       | (_froundUpShiftMask_T_42 ? 64'hFFFFFFFFFFE00000 : 64'h0)
       | (_froundUpShiftMask_T_44 ? 64'hFFFFFFFFFFC00000 : 64'h0)
       | (_froundUpShiftMask_T_46 ? 64'hFFFFFFFFFF800000 : 64'h0)
       | (_froundUpShiftMask_T_48 ? 64'hFFFFFFFFFF000000 : 64'h0)
       | (_froundUpShiftMask_T_50 ? 64'hFFFFFFFFFE000000 : 64'h0)
       | (_froundUpShiftMask_T_52 ? 64'hFFFFFFFFFC000000 : 64'h0)
       | (_froundUpShiftMask_T_54 ? 64'hFFFFFFFFF8000000 : 64'h0)
       | (_froundUpShiftMask_T_56 ? 64'hFFFFFFFFF0000000 : 64'h0)
       | (_froundUpShiftMask_T_58 ? 64'hFFFFFFFFE0000000 : 64'h0)
       | (_froundUpShiftMask_T_60 ? 64'hFFFFFFFFC0000000 : 64'h0)
       | (_froundUpShiftMask_T_62 ? 64'hFFFFFFFF80000000 : 64'h0)
       | (_froundUpShiftMask_T_64 ? 64'hFFFFFFFF00000000 : 64'h0)
       | (_froundUpShiftMask_T_66 ? 64'hFFFFFFFE00000000 : 64'h0)
       | (_froundUpShiftMask_T_68 ? 64'hFFFFFFFC00000000 : 64'h0)
       | (_froundUpShiftMask_T_70 ? 64'hFFFFFFF800000000 : 64'h0)
       | (_froundUpShiftMask_T_72 ? 64'hFFFFFFF000000000 : 64'h0)
       | (_froundUpShiftMask_T_74 ? 64'hFFFFFFE000000000 : 64'h0)
       | (_froundUpShiftMask_T_76 ? 64'hFFFFFFC000000000 : 64'h0)
       | (_froundUpShiftMask_T_78 ? 64'hFFFFFF8000000000 : 64'h0)
       | (_froundUpShiftMask_T_80 ? 64'hFFFFFF0000000000 : 64'h0)
       | (_froundUpShiftMask_T_82 ? 64'hFFFFFE0000000000 : 64'h0)
       | (_froundUpShiftMask_T_84 ? 64'hFFFFFC0000000000 : 64'h0)
       | (_froundUpShiftMask_T_86 ? 64'hFFFFF80000000000 : 64'h0)
       | (_froundUpShiftMask_T_88 ? 64'hFFFFF00000000000 : 64'h0)
       | (_froundUpShiftMask_T_90 ? 64'hFFFFE00000000000 : 64'h0)
       | (_froundUpShiftMask_T_92 ? 64'hFFFFC00000000000 : 64'h0)
       | (_froundUpShiftMask_T_94 ? 64'hFFFF800000000000 : 64'h0)
       | (_froundUpShiftMask_T_96 ? 64'hFFFF000000000000 : 64'h0)
       | (_froundUpShiftMask_T_98 ? 64'hFFFE000000000000 : 64'h0)
       | (_froundUpShiftMask_T_100 ? 64'hFFFC000000000000 : 64'h0)
       | (_froundUpShiftMask_T_102 ? 64'hFFF8000000000000 : 64'h0)
       | (_froundUpShiftMask_T_104 ? 64'hFFF0000000000000 : 64'h0)
       | (_froundUpShiftMask_T_106 ? 64'hFFE0000000000000 : 64'h0)
       | (_froundUpShiftMask_T_108 ? 64'hFFC0000000000000 : 64'h0)
       | (_froundUpShiftMask_T_110 ? 64'hFF80000000000000 : 64'h0)
       | (_froundUpShiftMask_T_112 ? 64'hFF00000000000000 : 64'h0)
       | (_froundUpShiftMask_T_114 ? 64'hFE00000000000000 : 64'h0)
       | (_froundUpShiftMask_T_116 ? 64'hFC00000000000000 : 64'h0)
       | (_froundUpShiftMask_T_118 ? 64'hF800000000000000 : 64'h0)
       | (_froundUpShiftMask_T_120 ? 64'hF000000000000000 : 64'h0)
       | (_froundUpShiftMask_T_122 ? 64'hE000000000000000 : 64'h0)
       | (_froundUpShiftMask_T_124 ? 64'hC000000000000000 : 64'h0)
       | {_froundUpShiftMask_T_126, 63'h0});
  wire [63:0]  _froundUpInput_T =
    64'(froundOldInput
        + {_froundUpShiftMask_T_126,
           _froundUpShiftMask_T_124,
           _froundUpShiftMask_T_122,
           _froundUpShiftMask_T_120,
           _froundUpShiftMask_T_118,
           _froundUpShiftMask_T_116,
           _froundUpShiftMask_T_114,
           _froundUpShiftMask_T_112,
           _froundUpShiftMask_T_110,
           _froundUpShiftMask_T_108,
           _froundUpShiftMask_T_106,
           _froundUpShiftMask_T_104,
           _froundUpShiftMask_T_102,
           _froundUpShiftMask_T_100,
           _froundUpShiftMask_T_98,
           _froundUpShiftMask_T_96,
           _froundUpShiftMask_T_94,
           _froundUpShiftMask_T_92,
           _froundUpShiftMask_T_90,
           _froundUpShiftMask_T_88,
           _froundUpShiftMask_T_86,
           _froundUpShiftMask_T_84,
           _froundUpShiftMask_T_82,
           _froundUpShiftMask_T_80,
           _froundUpShiftMask_T_78,
           _froundUpShiftMask_T_76,
           _froundUpShiftMask_T_74,
           _froundUpShiftMask_T_72,
           _froundUpShiftMask_T_70,
           _froundUpShiftMask_T_68,
           _froundUpShiftMask_T_66,
           _froundUpShiftMask_T_64,
           _froundUpShiftMask_T_62,
           _froundUpShiftMask_T_60,
           _froundUpShiftMask_T_58,
           _froundUpShiftMask_T_56,
           _froundUpShiftMask_T_54,
           _froundUpShiftMask_T_52,
           _froundUpShiftMask_T_50,
           _froundUpShiftMask_T_48,
           _froundUpShiftMask_T_46,
           _froundUpShiftMask_T_44,
           _froundUpShiftMask_T_42,
           _froundUpShiftMask_T_40,
           _froundUpShiftMask_T_38,
           _froundUpShiftMask_T_36,
           _froundUpShiftMask_T_34,
           _froundUpShiftMask_T_32,
           _froundUpShiftMask_T_30,
           _froundUpShiftMask_T_28,
           _froundUpShiftMask_T_26,
           _froundUpShiftMask_T_24,
           _froundUpShiftMask_T_22,
           _froundUpShiftMask_T_20,
           _froundUpShiftMask_T_18,
           _froundUpShiftMask_T_16,
           _froundUpShiftMask_T_14,
           _froundUpShiftMask_T_12,
           _froundUpShiftMask_T_10,
           _froundUpShiftMask_T_8,
           _froundUpShiftMask_T_6,
           _froundUpShiftMask_T_4,
           _froundUpShiftMask_T_2,
           _froundUpShiftMask_T});
  wire         cout =
    _rounder_io_r_up
    & (isFp2Int
         ? output1HReg[0] & ~hasSignInt & (&(rounderInput[7:0])) | output1HReg[0]
           & hasSignInt & (&(rounderInput[6:0])) | output1HReg[1] & ~hasSignInt
           & (&(rounderInput[15:0])) | output1HReg[1] & hasSignInt
           & (&(rounderInput[14:0])) | output1HReg[2] & ~hasSignInt
           & (&(rounderInput[31:0])) | output1HReg[2] & hasSignInt
           & (&(rounderInput[30:0])) | output1HReg[3] & ~hasSignInt & (&rounderInput)
           | output1HReg[3] & hasSignInt & (&(rounderInput[62:0]))
         : output1HReg[1] & (&(rounderMapIn[63:54])) | output1HReg[2]
           & (&(rounderMapIn[63:41])) | output1HReg[3] & (&(rounderMapIn[63:12])));
  wire [7:0]   _expRounded_T = cout ? 8'(_exp_T[7:0] + 8'h1) : _exp_T[7:0];
  wire [63:0]  fracRounded = _rounder_io_r_up ? 64'(rounderInput + 64'h1) : rounderInput;
  wire         rmin = rm == 3'h1 | signSrc & rm == 3'h3 | ~signSrc & rm == 3'h2;
  wire         _GEN_2 = isFpWiden | isFpCrossHigh;
  wire         _result1H_T = isSubnormalSrc | isnormalSrc;
  wire         ofRounded =
    ~(_exp_T[12])
    & (output1HReg[1]
       & (cout
            ? (&(_exp_T[4:1])) | (|(_exp_T[11:5]))
            : (&(_exp_T[4:0])) | (|(_exp_T[11:5]))) | output1HReg[2]
       & (cout
            ? (&(_exp_T[7:1])) | (|(_exp_T[11:8]))
            : (&(_exp_T[7:0])) | (|(_exp_T[11:8]))) | output1HReg[3]
       & (cout ? (&(_exp_T[10:1])) | _exp_T[11] : (&(_exp_T[10:0])) | _exp_T[11]));
  wire         maybeSub = _exp_T[12] | ~(|_exp_T);
  wire [22:0]  subFracRounded =
    _subRounder_io_r_up ? 23'(subRounderInput + 23'h1) : subRounderInput;
  wire         subCout =
    _subRounder_io_r_up
    & (output1HReg[1] & (&(_shiftRightJam_io_out[63:54])) | output1HReg[2]
       & (&(_shiftRightJam_io_out[63:41])));
  wire         _result1H_T_12 = rm == 3'h6;
  wire         _result1H_T_7 =
    ~expIsOnesSrc & ~maybeSub & ofRounded & (rmin | _result1H_T_12);
  wire         _result1H_T_15 =
    ~expIsOnesSrc & ~maybeSub & ofRounded & ~(rmin | _result1H_T_12);
  wire         _result1H_T_20 = ~expIsOnesSrc & ~maybeSub & ~ofRounded;
  wire         _result1H_T_22 = ~expIsOnesSrc & maybeSub;
  wire [63:0]  oldInputReg =
    {32'h0,
     {16'h0, output1HReg[1] ? {signSrc, froundOldExp[4:0], froundOldFrac[51:42]} : 16'h0}
       | (output1HReg[2] ? {signSrc, froundOldExp[7:0], froundOldFrac[51:29]} : 32'h0)}
    | (output1HReg[3] ? {signSrc, froundOldExp, froundOldFrac} : 64'h0);
  wire         _result1H_T_25 =
    froundOrFroundnxIsZeroOrInf | froundExpGreaterThanMaxExp & ~isNaNSrc;
  wire         _result1H_T_27 = froundExpLessThanBias & ~froundOrFroundnxIsZeroOrInf;
  wire         _result1H_T_30 = ~froundExpLessThanBias & ~froundExpGreaterThanMaxExp;
  wire         fcvtmodIsOf =
    ~fcvtmodExpLessThanBias & (|(fcvtmodTrueExpReg[10:5]))
    | (signSrc
         ? (|(fcvtmodFracReg[63:32])) | fcvtmodFracReg[63:32] == 32'h0
           & fcvtmodFracReg[31] & (|(fcvtmodFracReg[30:0]))
         : (|(fcvtmodFracReg[63:31])));
  wire [31:0]  fcvtmodResult =
    signSrc ? 32'(~(fcvtmodFracReg[31:0]) + 32'h1) : fcvtmodFracReg[31:0];
  wire [1:0]   _GEN_3 = {hasSignInt, cout};
  wire         ofExpRounded =
    ~(_exp_T[12])
    & (output1HReg[0]
       & (_GEN_3 == 2'h0 & (|(_exp_T[11:3])) | _GEN_3 == 2'h1
          & ((|(_exp_T[11:3])) | (&(_exp_T[2:0]))) | _GEN_3 == 2'h2
          & ((|(_exp_T[11:3])) | (&(_exp_T[2:0]))) | (&_GEN_3)
          & ((|(_exp_T[11:3])) | (&(_exp_T[2:1])))) | output1HReg[1]
       & (_GEN_3 == 2'h0 & (|(_exp_T[11:4])) | _GEN_3 == 2'h1
          & ((|(_exp_T[11:4])) | (&(_exp_T[3:0]))) | _GEN_3 == 2'h2
          & ((|(_exp_T[11:4])) | (&(_exp_T[3:0]))) | (&_GEN_3)
          & ((|(_exp_T[11:4])) | (&(_exp_T[3:1])))) | output1HReg[2]
       & (_GEN_3 == 2'h0 & (|(_exp_T[11:5])) | _GEN_3 == 2'h1
          & ((|(_exp_T[11:5])) | (&(_exp_T[4:0]))) | _GEN_3 == 2'h2
          & ((|(_exp_T[11:5])) | (&(_exp_T[4:0]))) | (&_GEN_3)
          & ((|(_exp_T[11:5])) | (&(_exp_T[4:1])))) | output1HReg[3]
       & (_GEN_3 == 2'h0 & (|(_exp_T[11:6])) | _GEN_3 == 2'h1
          & ((|(_exp_T[11:6])) | (&(_exp_T[5:0]))) | _GEN_3 == 2'h2
          & ((|(_exp_T[11:6])) | (&(_exp_T[5:0]))) | (&_GEN_3)
          & ((|(_exp_T[11:6])) | (&(_exp_T[5:1])))));
  wire         toUnv =
    ofExpRounded | expIsOnesSrc | signSrc
    & ~(isZeroSrc | ~(|fracRounded) & ~ofExpRounded);
  wire         toInv =
    ofExpRounded
    & ~(signSrc
        & (output1HReg[0] & _exp_T[12:3] == 10'h0
           & (cout ? (&(_exp_T[2:1])) & ~(_exp_T[0]) : (&(_exp_T[2:0]))) | output1HReg[1]
           & _exp_T[12:4] == 9'h0
           & (cout ? (&(_exp_T[3:1])) & ~(_exp_T[0]) : (&(_exp_T[3:0]))) | output1HReg[2]
           & _exp_T[12:5] == 8'h0
           & (cout ? (&(_exp_T[4:1])) & ~(_exp_T[0]) : (&(_exp_T[4:0]))) | output1HReg[3]
           & _exp_T[12:6] == 7'h0
           & (cout ? (&(_exp_T[5:1])) & ~(_exp_T[0]) : (&(_exp_T[5:0]))))
        & (output1HReg[0] & fracRounded[7] & fracRounded[6:0] == 7'h0 | output1HReg[1]
           & fracRounded[15] & fracRounded[14:0] == 15'h0 | output1HReg[2]
           & fracRounded[31] & fracRounded[30:0] == 31'h0 | output1HReg[3]
           & fracRounded[63] & fracRounded[62:0] == 63'h0)) | expIsOnesSrc;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fireReg_last_r <= 1'h0;
      expNotZeroSrc <= 1'h0;
      expIsOnesSrc <= 1'h0;
      fracNotZeroSrc <= 1'h0;
      isInfSrc <= 1'h0;
      isZeroSrc <= 1'h0;
      isSubnormalSrc <= 1'h0;
      isnormalSrc <= 1'h0;
      isSNaNSrc <= 1'h0;
      isFpWiden <= 1'h0;
      isFpNarrow <= 1'h0;
      isFp2Int <= 1'h0;
      isFpCrossHigh <= 1'h0;
      isFpCrossLow <= 1'h0;
      isNaNSrc <= 1'h0;
      isFroundnxReg <= 1'h0;
      isFroundOrFroundnxReg <= 1'h0;
      isFcvtmodReg <= 1'h0;
      froundOrFroundnxIsZeroOrInf <= 1'h0;
      trunSticky <= 1'h0;
      signSrc <= 1'h0;
      rm <= 3'h0;
      hasSignInt <= 1'h0;
      output1HReg <= 4'h0;
      fflags <= 5'h0;
      result <= 64'h0;
      fracSrcLeft <= 64'h0;
      froundExpLessThanBias <= 1'h0;
      froundExpGreaterThanMaxExp <= 1'h0;
      fracShiftMask <= 11'h0;
      froundOldExp <= 11'h0;
      froundOldFrac <= 52'h0;
      fcvtmodFracReg <= 64'h0;
      fcvtmodTrueExpReg <= 11'h0;
      fcvtmodNxReg <= 1'h0;
      fcvtmodExpLessThanBias <= 1'h0;
    end
    else begin
      if (io_fire | fireReg_last_r)
        fireReg_last_r <= io_fire;
      if (io_fire) begin
        expNotZeroSrc <= decodeFloatSrc[0];
        expIsOnesSrc <= decodeFloatSrc[1];
        fracNotZeroSrc <= decodeFloatSrc[2];
        isInfSrc <= isInfSrcNext;
        isZeroSrc <= isZeroSrcNext;
        isSubnormalSrc <= isSubnormalSrcNext;
        isnormalSrc <= ~(decodeFloatSrc[1]) & decodeFloatSrc[0];
        isSNaNSrc <= isNaNSrcNext & ~(input_0[51]);
        isFpWiden <= isFpWidenNext;
        isFpNarrow <= isFpNarrowNext;
        isFp2Int <= ~(io_opType[6]);
        isFpCrossHigh <= isFpCrossHighNext;
        isFpCrossLow <= isFpCrossLowNext;
        isNaNSrc <= isNaNSrcNext;
        isFroundnxReg <= io_isFround[1];
        isFroundOrFroundnxReg <= |io_isFround;
        isFcvtmodReg <= io_isFcvtmod;
        froundOrFroundnxIsZeroOrInf <= (|io_isFround) & (isZeroSrcNext | isInfSrcNext);
        trunSticky <= |(input_0[28:0]);
        signSrc <= input_0[63];
        rm <= io_rm;
        hasSignInt <= io_opType[0];
        output1HReg <= io_output1H;
        fracSrcLeft <= fracSrcLeftNext;
        froundExpLessThanBias <=
          io_output1H[1] & ~(input_0[56]) & input_0[55:52] != 4'hF | io_output1H[2]
          & ~(input_0[59]) & input_0[58:52] != 7'h7F | io_output1H[3] & ~(input_0[62])
          & input_0[61:52] != 10'h3FF;
        froundExpGreaterThanMaxExp <=
          input_0[62:52] >= ({3'h0,
                              {3'h0, io_output1H[1] ? 5'h19 : 5'h0}
                                | (io_output1H[2] ? 8'h96 : 8'h0)}
                             | (io_output1H[3] ? 11'h433 : 11'h0));
        fracShiftMask <=
          11'(({3'h0,
                {1'h0, io_output1H[1] ? 7'h43 : 7'h0} | (io_output1H[2] ? 8'hB3 : 8'h0)}
               | (io_output1H[3] ? 11'h433 : 11'h0)) - input_0[62:52]);
        froundOldExp <= input_0[62:52];
        froundOldFrac <= input_0[51:0];
        fcvtmodFracReg <=
          _GEN
            ? 64'h0
            : _GEN_0
                ? _fcvtmodFrac_T_318
                : _GEN_1 ? fcvtmodFracTmp >> fcvtmodShift : 64'h0;
        fcvtmodTrueExpReg <= 11'(input_0[62:52] - 11'h3FF);
        fcvtmodNxReg <= ~(_GEN | _GEN_0) & (~_GEN_1 | (|_fcvtmodNx_T_318));
        fcvtmodExpLessThanBias <= ~(input_0[62]) & input_0[61:52] != 10'h3FF;
      end
      if (fireReg_last_r) begin
        fflags <=
          {_GEN_2
             ? isSNaNSrc & ~s1_fpCanonicalNAN
             : _rounderMapIn_T
                 ? isSNaNSrc & ~s1_fpCanonicalNAN
                 : isFroundOrFroundnxReg
                     ? isSNaNSrc
                     : isFcvtmodReg
                         ? expIsOnesSrc | fcvtmodIsOf
                         : hasSignInt ? toInv : toUnv,
           1'h0,
           ~_GEN_2 & _rounderMapIn_T & ~expIsOnesSrc & ofRounded & ~s1_fpCanonicalNAN,
           ~_GEN_2 & _rounderMapIn_T & ~expIsOnesSrc & maybeSub
             & (~cout & ~(|_exp_T) | _exp_T[12]) & _subRounder_io_inexact
             & ~s1_fpCanonicalNAN,
           ~_GEN_2
             & (_rounderMapIn_T
                  ? ~expIsOnesSrc
                    & (~maybeSub & (_rounder_io_inexact | ofRounded) | maybeSub
                       & _subRounder_io_inexact) & ~s1_fpCanonicalNAN
                  : isFroundOrFroundnxReg
                      ? isFroundnxReg & _rounder_io_inexact & ~froundOrFroundnxIsZeroOrInf
                        & ~froundExpGreaterThanMaxExp
                      : isFcvtmodReg
                          ? ~expNotZeroSrc & fracNotZeroSrc | expNotZeroSrc
                            & ~expIsOnesSrc & ~fcvtmodIsOf & fcvtmodNxReg
                          : hasSignInt
                              ? ~toInv & _rounder_io_inexact
                              : ~toUnv & _rounder_io_inexact)};
        result <=
          _GEN_2
            ? {32'h0,
               output1HReg[2]
                 ? (expIsOnesSrc ? {signNonNan, 8'hFF, fracNotZeroSrc, 22'h0} : 32'h0)
                   | (isZeroSrc ? {signNonNan, 31'h0} : 32'h0)
                   | (_result1H_T
                        ? {signNonNan, _exp_T[7:0], fracNormaled[51:29]}
                        : 32'h0)
                 : 32'h0}
              | (output1HReg[3]
                   ? (expIsOnesSrc ? {signNonNan, 11'h7FF, fracNotZeroSrc, 51'h0} : 64'h0)
                     | (isZeroSrc ? {signNonNan, 63'h0} : 64'h0)
                     | (_result1H_T ? {signNonNan, _exp_T[10:0], fracNormaled} : 64'h0)
                   : 64'h0)
            : _rounderMapIn_T
                ? {32'h0,
                   {16'h0,
                    output1HReg[1]
                      ? (expIsOnesSrc ? {signNonNan, 5'h1F, fracNotZeroSrc, 9'h0} : 16'h0)
                        | (_result1H_T_7 ? {signNonNan, 15'h7BFF} : 16'h0)
                        | (_result1H_T_15 ? {signNonNan, 15'h7C00} : 16'h0)
                        | (_result1H_T_20
                             ? {signNonNan, _expRounded_T[4:0], fracRounded[9:0]}
                             : 16'h0)
                        | (_result1H_T_22
                             ? {signNonNan, 4'h0, subCout, subFracRounded[9:0]}
                             : 16'h0)
                      : 16'h0}
                     | (output1HReg[2]
                          ? (expIsOnesSrc
                               ? {signNonNan, 8'hFF, fracNotZeroSrc, 22'h0}
                               : 32'h0)
                            | (_result1H_T_7 ? {signNonNan, 31'h7F7FFFFF} : 32'h0)
                            | (_result1H_T_15 ? {signNonNan, 31'h7F800000} : 32'h0)
                            | (_result1H_T_20
                                 ? {signNonNan, _expRounded_T, fracRounded[22:0]}
                                 : 32'h0)
                            | (_result1H_T_22
                                 ? {signNonNan, 7'h0, subCout, subFracRounded}
                                 : 32'h0)
                          : 32'h0)}
                : isFroundOrFroundnxReg
                    ? (output1HReg[1]
                         ? (_result1H_T_25 ? oldInputReg : 64'h0)
                           | (isNaNSrc ? 64'h7E00 : 64'h0)
                           | (_result1H_T_27
                                ? {48'h0, signSrc, _rounder_io_r_up ? 5'hF : 5'h0, 10'h0}
                                : 64'h0)
                           | (_result1H_T_30
                                ? {48'h0,
                                   _rounder_io_r_up
                                     ? {_froundUpInput_T[63], _froundUpInput_T[56:42]}
                                     : {froundOldInput[63], froundOldInput[56:42]}}
                                : 64'h0)
                         : 64'h0)
                      | (output1HReg[2]
                           ? (_result1H_T_25 ? oldInputReg : 64'h0)
                             | (isNaNSrc ? 64'h7FC00000 : 64'h0)
                             | (_result1H_T_27
                                  ? {32'h0,
                                     signSrc,
                                     _rounder_io_r_up ? 8'h7F : 8'h0,
                                     23'h0}
                                  : 64'h0)
                             | (_result1H_T_30
                                  ? {32'h0,
                                     _rounder_io_r_up
                                       ? {_froundUpInput_T[63], _froundUpInput_T[59:29]}
                                       : {froundOldInput[63], froundOldInput[59:29]}}
                                  : 64'h0)
                           : 64'h0)
                      | (output1HReg[3]
                           ? (_result1H_T_25 ? oldInputReg : 64'h0)
                             | (isNaNSrc ? 64'h7FF8000000000000 : 64'h0)
                             | (_result1H_T_27
                                  ? {signSrc, _rounder_io_r_up ? 11'h3FF : 11'h0, 52'h0}
                                  : 64'h0)
                             | (_result1H_T_30
                                  ? (_rounder_io_r_up ? _froundUpInput_T : froundOldInput)
                                  : 64'h0)
                           : 64'h0)
                    : isFcvtmodReg
                        ? {{32{fcvtmodResult[31]}}, fcvtmodResult}
                        : (~hasSignInt & ~toUnv | hasSignInt & ~toInv
                             ? (signSrc & (|fracRounded)
                                  ? 64'(~fracRounded + 64'h1)
                                  : fracRounded)
                             : 64'h0)
                          | {64{~hasSignInt & toUnv
                                  & (isNaNSrc | ~signSrc & (isInfSrc | ofExpRounded))}}
                          | (hasSignInt & toInv
                               ? {32'h0,
                                  {16'h0,
                                   {8'h0,
                                    output1HReg[0]
                                      ? {signNonNan, {7{~signNonNan}}}
                                      : 8'h0}
                                     | (output1HReg[1]
                                          ? {signNonNan, {15{~signNonNan}}}
                                          : 16'h0)}
                                    | (output1HReg[2]
                                         ? {signNonNan, {31{~signNonNan}}}
                                         : 32'h0)}
                                 | (output1HReg[3]
                                      ? {signNonNan, {63{~signNonNan}}}
                                      : 64'h0)
                               : 64'h0);
      end
    end
  end // always @(posedge, posedge)
  wire [11:0]  _expAdderIn0Next_T_11 = {1'h0, input_0[62:52]};
  wire         _expAdderIn1Next_T_2 = isFpWidenNext | isFpCrossHighNext;
  wire [10:0]  _minusExp_T_10 =
    11'({1'h1,
         ~({3'h0, _expAdderIn1Next_T_2 ? _leadZerosNext_clz_io_out : 7'h0}
           | (isFpNarrowNext
                ? {3'h0, io_output1H[1] ? 7'h70 : 7'h0}
                  | (io_output1H[2] ? 10'h380 : 10'h0)
                : 10'h0) | (isFpCrossLowNext ? 10'h3F0 : 10'h0)
           | (io_opType[6]
                ? 10'h0
                : {3'h0, {3'h0, {4{io_input1H[1]}}} | {7{io_input1H[2]}}}
                  | {10{io_input1H[3]}}))} + 11'h1);
  wire [12:0]  minusExp = {{2{_minusExp_T_10[10]}}, _minusExp_T_10};
  wire [10:0]  _shamtWidth_T_18 =
    11'((~(io_opType[6]) | (|io_isFround)
           ? {3'h0, {1'h0, io_input1H[1] ? 7'h4E : 7'h0} | (io_input1H[2] ? 8'hBE : 8'h0)}
             | (io_input1H[3] ? 11'h43E : 11'h0)
           : {1'h0,
              isCrossLow
                ? 10'h3F1
                : {3'h0, io_output1H[1] ? 7'h71 : 7'h0}
                  | (io_output1H[2] ? 10'h381 : 10'h0)}) - input_0[62:52]);
  always @(posedge clock) begin
    if (io_fire) begin
      s1_fpCanonicalNAN <=
        io_isFpToVecInst
        & (io_input1H[1] & io_src[63:16] != 48'hFFFFFFFFFFFF | io_input1H[2]
           & io_src[63:32] != 32'hFFFFFFFF);
      expAdderIn0 <=
        {1'h0,
         {2'h0,
          (isFpWidenNext
             ? {3'h0, io_output1H[2] ? 7'h70 : 7'h0} | (io_output1H[3] ? 10'h380 : 10'h0)
             : 10'h0) | (isFpCrossHighNext ? 10'h3F0 : 10'h0)}
           | (isFpNarrowNext | isFpCrossLowNext
                ? (isSubnormalSrcNext ? 12'h1 : _expAdderIn0Next_T_11)
                : 12'h0)
           | (io_opType[6] ? 12'h0 : isSubnormalSrcNext ? 12'h1 : _expAdderIn0Next_T_11)};
      expAdderIn1 <=
        (isFpNarrowNext | ~(io_opType[6]) | isFpCrossLowNext ? minusExp : 13'h0)
        | (_expAdderIn1Next_T_2
             ? (isSubnormalSrcNext ? minusExp : {2'h0, input_0[62:52]})
             : 13'h0);
      leadZeros <= _leadZerosNext_clz_io_out;
      shamtIn <= {_fracValueSrc_T_1, input_0[51:0], 12'h0};
      shamt <= _shamtWidth_T_18 > 11'h40 ? 11'h41 : _shamtWidth_T_18;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:13];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hE; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fireReg_last_r = _RANDOM[4'h0][0];
        expNotZeroSrc = _RANDOM[4'h0][1];
        expIsOnesSrc = _RANDOM[4'h0][2];
        fracNotZeroSrc = _RANDOM[4'h0][3];
        isInfSrc = _RANDOM[4'h0][4];
        isZeroSrc = _RANDOM[4'h0][5];
        isSubnormalSrc = _RANDOM[4'h0][6];
        isnormalSrc = _RANDOM[4'h0][7];
        isSNaNSrc = _RANDOM[4'h0][8];
        isFpWiden = _RANDOM[4'h0][9];
        isFpNarrow = _RANDOM[4'h0][10];
        isFp2Int = _RANDOM[4'h0][11];
        isFpCrossHigh = _RANDOM[4'h0][12];
        isFpCrossLow = _RANDOM[4'h0][13];
        isNaNSrc = _RANDOM[4'h0][14];
        s1_fpCanonicalNAN = _RANDOM[4'h0][15];
        isFroundnxReg = _RANDOM[4'h0][16];
        isFroundOrFroundnxReg = _RANDOM[4'h0][17];
        isFcvtmodReg = _RANDOM[4'h0][18];
        froundOrFroundnxIsZeroOrInf = _RANDOM[4'h0][19];
        trunSticky = _RANDOM[4'h0][20];
        signSrc = _RANDOM[4'h0][21];
        rm = _RANDOM[4'h0][24:22];
        hasSignInt = _RANDOM[4'h0][25];
        output1HReg = _RANDOM[4'h0][29:26];
        fflags = {_RANDOM[4'h0][31:30], _RANDOM[4'h1][2:0]};
        result = {_RANDOM[4'h1][31:3], _RANDOM[4'h2], _RANDOM[4'h3][2:0]};
        expAdderIn0 = _RANDOM[4'h3][15:3];
        expAdderIn1 = _RANDOM[4'h3][28:16];
        leadZeros = {_RANDOM[4'h3][31:29], _RANDOM[4'h4][3:0]};
        fracSrcLeft = {_RANDOM[4'h4][31:4], _RANDOM[4'h5], _RANDOM[4'h6][3:0]};
        shamtIn = {_RANDOM[4'h6][31:4], _RANDOM[4'h7], _RANDOM[4'h8][4:0]};
        shamt = _RANDOM[4'h8][15:5];
        froundExpLessThanBias = _RANDOM[4'h8][16];
        froundExpGreaterThanMaxExp = _RANDOM[4'h8][17];
        fracShiftMask = _RANDOM[4'h8][28:18];
        froundOldExp = {_RANDOM[4'h8][31:29], _RANDOM[4'h9][7:0]};
        froundOldFrac = {_RANDOM[4'h9][31:8], _RANDOM[4'hA][27:0]};
        fcvtmodFracReg = {_RANDOM[4'hA][31:28], _RANDOM[4'hB], _RANDOM[4'hC][27:0]};
        fcvtmodTrueExpReg = {_RANDOM[4'hC][31:28], _RANDOM[4'hD][6:0]};
        fcvtmodNxReg = _RANDOM[4'hD][7];
        fcvtmodExpLessThanBias = _RANDOM[4'hD][8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fireReg_last_r = 1'h0;
        expNotZeroSrc = 1'h0;
        expIsOnesSrc = 1'h0;
        fracNotZeroSrc = 1'h0;
        isInfSrc = 1'h0;
        isZeroSrc = 1'h0;
        isSubnormalSrc = 1'h0;
        isnormalSrc = 1'h0;
        isSNaNSrc = 1'h0;
        isFpWiden = 1'h0;
        isFpNarrow = 1'h0;
        isFp2Int = 1'h0;
        isFpCrossHigh = 1'h0;
        isFpCrossLow = 1'h0;
        isNaNSrc = 1'h0;
        isFroundnxReg = 1'h0;
        isFroundOrFroundnxReg = 1'h0;
        isFcvtmodReg = 1'h0;
        froundOrFroundnxIsZeroOrInf = 1'h0;
        trunSticky = 1'h0;
        signSrc = 1'h0;
        rm = 3'h0;
        hasSignInt = 1'h0;
        output1HReg = 4'h0;
        fflags = 5'h0;
        result = 64'h0;
        fracSrcLeft = 64'h0;
        froundExpLessThanBias = 1'h0;
        froundExpGreaterThanMaxExp = 1'h0;
        fracShiftMask = 11'h0;
        froundOldExp = 11'h0;
        froundOldFrac = 52'h0;
        fcvtmodFracReg = 64'h0;
        fcvtmodTrueExpReg = 11'h0;
        fcvtmodNxReg = 1'h0;
        fcvtmodExpLessThanBias = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  CLZ_6 leadZerosNext_clz (
    .io_in  (fracSrcLeftNext),
    .io_out (_leadZerosNext_clz_io_out)
  );
  ShiftRightJam shiftRightJam (
    .io_in     (shamtIn),
    .io_shamt  (shamt),
    .io_out    (_shiftRightJam_io_out),
    .io_sticky (_shiftRightJam_io_sticky)
  );
  RoundingUnit_3 rounder (
    .io_in       (rounderInput),
    .io_roundIn
      (selectInRounder
         ? _shiftRightJam_io_out[0]
         : output1HReg[1] & rounderMapIn[53] | output1HReg[2] & rounderMapIn[40]
           | output1HReg[3] & rounderMapIn[11]),
    .io_stickyIn
      (selectInRounder
         ? _shiftRightJam_io_sticky
         : output1HReg[1] & (|(rounderMapIn[52:0])) | output1HReg[2]
           & (|(rounderMapIn[39:0])) | output1HReg[3] & (|(rounderMapIn[10:0]))),
    .io_signIn   (signSrc),
    .io_rm       (rm),
    .io_inexact  (_rounder_io_inexact),
    .io_r_up     (_rounder_io_r_up)
  );
  RoundingUnit_4 subRounder (
    .io_in       (subRounderInput),
    .io_roundIn
      (output1HReg[1] & _shiftRightJam_io_out[53] | output1HReg[2]
       & _shiftRightJam_io_out[40]),
    .io_stickyIn
      (output1HReg[1] & (_subRounderMap_T_9 | (|(_shiftRightJam_io_out[52:0])))
       | output1HReg[2] & (_subRounderMap_T_9 | (|(_shiftRightJam_io_out[39:0])))),
    .io_signIn   (signSrc),
    .io_rm       (rm),
    .io_inexact  (_subRounder_io_inexact),
    .io_r_up     (_subRounder_io_r_up)
  );
  assign io_result = result;
  assign io_fflags = fflags;
endmodule

