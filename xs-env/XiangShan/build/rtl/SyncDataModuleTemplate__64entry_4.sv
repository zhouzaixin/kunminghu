// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate__64entry_4(
  input         clock,
  input         reset,
  input         io_ren_0,
  input  [5:0]  io_raddr_0,
  output [55:0] io_rdata_0_gpaddr,
  output        io_rdata_0_isForVSnonLeafPTE,
  input         io_wen_0,
  input  [5:0]  io_waddr_0,
  input  [55:0] io_wdata_0_gpaddr,
  input         io_wdata_0_isForVSnonLeafPTE
);

  wire [55:0] _dataBanks_3_io_rdata_0_gpaddr;
  wire        _dataBanks_3_io_rdata_0_isForVSnonLeafPTE;
  wire [55:0] _dataBanks_2_io_rdata_0_gpaddr;
  wire        _dataBanks_2_io_rdata_0_isForVSnonLeafPTE;
  wire [55:0] _dataBanks_1_io_rdata_0_gpaddr;
  wire        _dataBanks_1_io_rdata_0_isForVSnonLeafPTE;
  wire [55:0] _dataBanks_0_io_rdata_0_gpaddr;
  wire        _dataBanks_0_io_rdata_0_isForVSnonLeafPTE;
  reg  [5:0]  raddr_dup_0;
  reg         wen_dup_last_REG;
  reg  [5:0]  waddr_dup_0;
  reg  [55:0] r_gpaddr;
  reg         r_isForVSnonLeafPTE;
  reg  [5:0]  raddr_dup_0_1;
  reg         wen_dup_last_REG_1;
  reg  [5:0]  waddr_dup_0_1;
  reg  [55:0] r_1_gpaddr;
  reg         r_1_isForVSnonLeafPTE;
  reg  [5:0]  raddr_dup_0_2;
  reg         wen_dup_last_REG_2;
  reg  [5:0]  waddr_dup_0_2;
  reg  [55:0] r_2_gpaddr;
  reg         r_2_isForVSnonLeafPTE;
  reg  [5:0]  raddr_dup_0_3;
  reg         wen_dup_last_REG_3;
  reg  [5:0]  waddr_dup_0_3;
  reg  [55:0] r_3_gpaddr;
  reg         r_3_isForVSnonLeafPTE;
  reg  [5:0]  raddr_dup;
  wire        _io_rdata_0_T = raddr_dup[5:4] == 2'h0;
  wire        _io_rdata_0_T_1 = raddr_dup[5:4] == 2'h1;
  wire        _io_rdata_0_T_2 = raddr_dup[5:4] == 2'h2;
  always @(posedge clock) begin
    if (io_ren_0) begin
      raddr_dup_0 <= io_raddr_0;
      raddr_dup_0_1 <= io_raddr_0;
      raddr_dup_0_2 <= io_raddr_0;
      raddr_dup_0_3 <= io_raddr_0;
      raddr_dup <= io_raddr_0;
    end
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_gpaddr <= io_wdata_0_gpaddr;
      r_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
      waddr_dup_0_1 <= io_waddr_0;
      r_1_gpaddr <= io_wdata_0_gpaddr;
      r_1_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
      waddr_dup_0_2 <= io_waddr_0;
      r_2_gpaddr <= io_wdata_0_gpaddr;
      r_2_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
      waddr_dup_0_3 <= io_waddr_0;
      r_3_gpaddr <= io_wdata_0_gpaddr;
      r_3_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      wen_dup_last_REG <= 1'h0;
      wen_dup_last_REG_1 <= 1'h0;
      wen_dup_last_REG_2 <= 1'h0;
      wen_dup_last_REG_3 <= 1'h0;
    end
    else begin
      wen_dup_last_REG <= io_wen_0;
      wen_dup_last_REG_1 <= io_wen_0;
      wen_dup_last_REG_2 <= io_wen_0;
      wen_dup_last_REG_3 <= io_wen_0;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        raddr_dup_0 = _RANDOM[4'h0][5:0];
        wen_dup_last_REG = _RANDOM[4'h0][6];
        waddr_dup_0 = _RANDOM[4'h0][12:7];
        r_gpaddr = {_RANDOM[4'h0][31:13], _RANDOM[4'h1], _RANDOM[4'h2][4:0]};
        r_isForVSnonLeafPTE = _RANDOM[4'h2][5];
        raddr_dup_0_1 = _RANDOM[4'h2][11:6];
        wen_dup_last_REG_1 = _RANDOM[4'h2][12];
        waddr_dup_0_1 = _RANDOM[4'h2][18:13];
        r_1_gpaddr = {_RANDOM[4'h2][31:19], _RANDOM[4'h3], _RANDOM[4'h4][10:0]};
        r_1_isForVSnonLeafPTE = _RANDOM[4'h4][11];
        raddr_dup_0_2 = _RANDOM[4'h4][17:12];
        wen_dup_last_REG_2 = _RANDOM[4'h4][18];
        waddr_dup_0_2 = _RANDOM[4'h4][24:19];
        r_2_gpaddr = {_RANDOM[4'h4][31:25], _RANDOM[4'h5], _RANDOM[4'h6][16:0]};
        r_2_isForVSnonLeafPTE = _RANDOM[4'h6][17];
        raddr_dup_0_3 = _RANDOM[4'h6][23:18];
        wen_dup_last_REG_3 = _RANDOM[4'h6][24];
        waddr_dup_0_3 = _RANDOM[4'h6][30:25];
        r_3_gpaddr = {_RANDOM[4'h6][31], _RANDOM[4'h7], _RANDOM[4'h8][22:0]};
        r_3_isForVSnonLeafPTE = _RANDOM[4'h8][23];
        raddr_dup = _RANDOM[4'h8][29:24];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        wen_dup_last_REG = 1'h0;
        wen_dup_last_REG_1 = 1'h0;
        wen_dup_last_REG_2 = 1'h0;
        wen_dup_last_REG_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule__16entry_16 dataBanks_0 (
    .clock                        (clock),
    .io_raddr_0                   (raddr_dup_0[3:0]),
    .io_rdata_0_gpaddr            (_dataBanks_0_io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (_dataBanks_0_io_rdata_0_isForVSnonLeafPTE),
    .io_wen_0                     (wen_dup_last_REG & waddr_dup_0[5:4] == 2'h0),
    .io_waddr_0                   (waddr_dup_0[3:0]),
    .io_wdata_0_gpaddr            (r_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (r_isForVSnonLeafPTE)
  );
  DataModule__16entry_16 dataBanks_1 (
    .clock                        (clock),
    .io_raddr_0                   (raddr_dup_0_1[3:0]),
    .io_rdata_0_gpaddr            (_dataBanks_1_io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (_dataBanks_1_io_rdata_0_isForVSnonLeafPTE),
    .io_wen_0                     (wen_dup_last_REG_1 & waddr_dup_0_1[5:4] == 2'h1),
    .io_waddr_0                   (waddr_dup_0_1[3:0]),
    .io_wdata_0_gpaddr            (r_1_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (r_1_isForVSnonLeafPTE)
  );
  DataModule__16entry_16 dataBanks_2 (
    .clock                        (clock),
    .io_raddr_0                   (raddr_dup_0_2[3:0]),
    .io_rdata_0_gpaddr            (_dataBanks_2_io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (_dataBanks_2_io_rdata_0_isForVSnonLeafPTE),
    .io_wen_0                     (wen_dup_last_REG_2 & waddr_dup_0_2[5:4] == 2'h2),
    .io_waddr_0                   (waddr_dup_0_2[3:0]),
    .io_wdata_0_gpaddr            (r_2_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (r_2_isForVSnonLeafPTE)
  );
  DataModule__16entry_16 dataBanks_3 (
    .clock                        (clock),
    .io_raddr_0                   (raddr_dup_0_3[3:0]),
    .io_rdata_0_gpaddr            (_dataBanks_3_io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (_dataBanks_3_io_rdata_0_isForVSnonLeafPTE),
    .io_wen_0                     (wen_dup_last_REG_3 & (&(waddr_dup_0_3[5:4]))),
    .io_waddr_0                   (waddr_dup_0_3[3:0]),
    .io_wdata_0_gpaddr            (r_3_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (r_3_isForVSnonLeafPTE)
  );
  assign io_rdata_0_gpaddr =
    (_io_rdata_0_T ? _dataBanks_0_io_rdata_0_gpaddr : 56'h0)
    | (_io_rdata_0_T_1 ? _dataBanks_1_io_rdata_0_gpaddr : 56'h0)
    | (_io_rdata_0_T_2 ? _dataBanks_2_io_rdata_0_gpaddr : 56'h0)
    | ((&(raddr_dup[5:4])) ? _dataBanks_3_io_rdata_0_gpaddr : 56'h0);
  assign io_rdata_0_isForVSnonLeafPTE =
    _io_rdata_0_T & _dataBanks_0_io_rdata_0_isForVSnonLeafPTE | _io_rdata_0_T_1
    & _dataBanks_1_io_rdata_0_isForVSnonLeafPTE | _io_rdata_0_T_2
    & _dataBanks_2_io_rdata_0_isForVSnonLeafPTE | (&(raddr_dup[5:4]))
    & _dataBanks_3_io_rdata_0_isForVSnonLeafPTE;
endmodule

