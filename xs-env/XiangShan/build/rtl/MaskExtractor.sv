// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MaskExtractor(
  input  [15:0] io_in_mask,
  input  [1:0]  io_in_vsew,
  output [15:0] io_out_mask
);

  assign io_out_mask =
    (io_in_vsew == 2'h0 ? io_in_mask : 16'h0)
    | (io_in_vsew == 2'h1
         ? {{2{io_in_mask[7]}},
            {2{io_in_mask[6]}},
            {2{io_in_mask[5]}},
            {2{io_in_mask[4]}},
            {2{io_in_mask[3]}},
            {2{io_in_mask[2]}},
            {2{io_in_mask[1]}},
            {2{io_in_mask[0]}}}
         : 16'h0)
    | (io_in_vsew == 2'h2
         ? {{4{io_in_mask[3]}},
            {4{io_in_mask[2]}},
            {4{io_in_mask[1]}},
            {4{io_in_mask[0]}}}
         : 16'h0) | ((&io_in_vsew) ? {{8{io_in_mask[1]}}, {8{io_in_mask[0]}}} : 16'h0);
endmodule

