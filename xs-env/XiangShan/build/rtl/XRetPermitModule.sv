// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module XRetPermitModule(
  input  [1:0] io_in_privState_PRVM,
  input        io_in_privState_V,
  input        io_in_debugMode,
  input        io_in_xRet_mnret,
  input        io_in_xRet_mret,
  input        io_in_xRet_sret,
  input        io_in_xRet_dret,
  input        io_in_status_tsr,
  input        io_in_status_vtsr,
  output       io_out_Xret_EX_II,
  output       io_out_Xret_EX_VI,
  output       io_out_hasLegalMNret,
  output       io_out_hasLegalMret,
  output       io_out_hasLegalSret,
  output       io_out_hasLegalDret
);

  wire mnret_EX_II_v_PrvmIsM = &io_in_privState_PRVM;
  wire mnret_EX_II_isModeM = mnret_EX_II_v_PrvmIsM;
  wire mnret_EX_II = io_in_xRet_mnret & ~mnret_EX_II_isModeM;
  wire mret_EX_II = io_in_xRet_mret & ~mnret_EX_II_isModeM;
  wire PrvmIsU = io_in_privState_PRVM == 2'h0;
  wire sret_EX_II_isModeHU = ~io_in_privState_V & PrvmIsU;
  wire PrvmIsS = io_in_privState_PRVM == 2'h1;
  wire sret_EX_II_isModeHS = ~io_in_privState_V & PrvmIsS;
  wire sret_EX_II =
    io_in_xRet_sret & (sret_EX_II_isModeHU | sret_EX_II_isModeHS & io_in_status_tsr);
  wire sret_EX_VI_isModeVU = io_in_privState_V & PrvmIsU;
  wire sret_EX_VI_isModeVS = io_in_privState_V & PrvmIsS;
  wire sret_EX_VI =
    io_in_xRet_sret & (sret_EX_VI_isModeVU | sret_EX_VI_isModeVS & io_in_status_vtsr);
  wire dret_EX_II = io_in_xRet_dret & ~io_in_debugMode;
  assign io_out_Xret_EX_II = mnret_EX_II | mret_EX_II | sret_EX_II | dret_EX_II;
  assign io_out_Xret_EX_VI = sret_EX_VI;
  assign io_out_hasLegalMNret = io_in_xRet_mnret & ~mnret_EX_II;
  assign io_out_hasLegalMret = io_in_xRet_mret & ~mret_EX_II;
  assign io_out_hasLegalSret = io_in_xRet_sret & ~(sret_EX_II | sret_EX_VI);
  assign io_out_hasLegalDret = io_in_xRet_dret & ~dret_EX_II;
endmodule

