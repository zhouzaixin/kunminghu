// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_55(
  input        clock,
  input        reset,
  input        io_r_req_valid,
  input  [8:0] io_r_req_bits_setIdx,
  output [1:0] io_r_resp_data_0,
  output [1:0] io_r_resp_data_1,
  output [1:0] io_r_resp_data_2,
  output [1:0] io_r_resp_data_3,
  output [1:0] io_r_resp_data_4,
  output [1:0] io_r_resp_data_5,
  output [1:0] io_r_resp_data_6,
  output [1:0] io_r_resp_data_7,
  input        io_w_req_valid,
  input  [8:0] io_w_req_bits_setIdx,
  input  [1:0] io_w_req_bits_data_0,
  input  [1:0] io_w_req_bits_data_1,
  input  [1:0] io_w_req_bits_data_2,
  input  [1:0] io_w_req_bits_data_3,
  input  [1:0] io_w_req_bits_data_4,
  input  [1:0] io_w_req_bits_data_5,
  input  [1:0] io_w_req_bits_data_6,
  input  [1:0] io_w_req_bits_data_7,
  input  [7:0] io_w_req_bits_waymask
);

  wire        _ClockGate_Q;
  wire [15:0] _array_R0_data;
  reg  [1:0]  bypass_wdata_r_0;
  reg  [1:0]  bypass_wdata_r_1;
  reg  [1:0]  bypass_wdata_r_2;
  reg  [1:0]  bypass_wdata_r_3;
  reg  [1:0]  bypass_wdata_r_4;
  reg  [1:0]  bypass_wdata_r_5;
  reg  [1:0]  bypass_wdata_r_6;
  reg  [1:0]  bypass_wdata_r_7;
  wire        bypass_mask_need_check = io_r_req_valid & io_w_req_valid;
  reg         bypass_mask_need_check_reg_last_REG;
  reg  [8:0]  bypass_mask_waddr_reg;
  reg  [8:0]  bypass_mask_raddr_reg;
  reg  [7:0]  bypass_mask_wmask_reg;
  wire [7:0]  bypass_mask =
    {8{bypass_mask_need_check_reg_last_REG
         & bypass_mask_waddr_reg == bypass_mask_raddr_reg}} & bypass_mask_wmask_reg;
  wire [1:0]  mem_rdata_0 = bypass_mask[0] ? bypass_wdata_r_0 : _array_R0_data[1:0];
  wire [1:0]  mem_rdata_1 = bypass_mask[1] ? bypass_wdata_r_1 : _array_R0_data[3:2];
  wire [1:0]  mem_rdata_2 = bypass_mask[2] ? bypass_wdata_r_2 : _array_R0_data[5:4];
  wire [1:0]  mem_rdata_3 = bypass_mask[3] ? bypass_wdata_r_3 : _array_R0_data[7:6];
  wire [1:0]  mem_rdata_4 = bypass_mask[4] ? bypass_wdata_r_4 : _array_R0_data[9:8];
  wire [1:0]  mem_rdata_5 = bypass_mask[5] ? bypass_wdata_r_5 : _array_R0_data[11:10];
  wire [1:0]  mem_rdata_6 = bypass_mask[6] ? bypass_wdata_r_6 : _array_R0_data[13:12];
  wire [1:0]  mem_rdata_7 = bypass_mask[7] ? bypass_wdata_r_7 : _array_R0_data[15:14];
  reg         rdata_last_REG;
  reg  [1:0]  rdata_hold_data_0;
  reg  [1:0]  rdata_hold_data_1;
  reg  [1:0]  rdata_hold_data_2;
  reg  [1:0]  rdata_hold_data_3;
  reg  [1:0]  rdata_hold_data_4;
  reg  [1:0]  rdata_hold_data_5;
  reg  [1:0]  rdata_hold_data_6;
  reg  [1:0]  rdata_hold_data_7;
  always @(posedge clock) begin
    if (io_w_req_valid & io_r_req_valid) begin
      bypass_wdata_r_0 <= io_w_req_bits_data_0;
      bypass_wdata_r_1 <= io_w_req_bits_data_1;
      bypass_wdata_r_2 <= io_w_req_bits_data_2;
      bypass_wdata_r_3 <= io_w_req_bits_data_3;
      bypass_wdata_r_4 <= io_w_req_bits_data_4;
      bypass_wdata_r_5 <= io_w_req_bits_data_5;
      bypass_wdata_r_6 <= io_w_req_bits_data_6;
      bypass_wdata_r_7 <= io_w_req_bits_data_7;
    end
    if (bypass_mask_need_check) begin
      bypass_mask_waddr_reg <= io_w_req_bits_setIdx;
      bypass_mask_raddr_reg <= io_r_req_bits_setIdx;
      bypass_mask_wmask_reg <= io_w_req_bits_waymask;
    end
    if (rdata_last_REG) begin
      rdata_hold_data_0 <= mem_rdata_0;
      rdata_hold_data_1 <= mem_rdata_1;
      rdata_hold_data_2 <= mem_rdata_2;
      rdata_hold_data_3 <= mem_rdata_3;
      rdata_hold_data_4 <= mem_rdata_4;
      rdata_hold_data_5 <= mem_rdata_5;
      rdata_hold_data_6 <= mem_rdata_6;
      rdata_hold_data_7 <= mem_rdata_7;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      bypass_mask_need_check_reg_last_REG <= 1'h0;
      rdata_last_REG <= 1'h0;
    end
    else begin
      bypass_mask_need_check_reg_last_REG <= bypass_mask_need_check;
      rdata_last_REG <= io_r_req_valid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        bypass_wdata_r_0 = _RANDOM[1'h0][1:0];
        bypass_wdata_r_1 = _RANDOM[1'h0][3:2];
        bypass_wdata_r_2 = _RANDOM[1'h0][5:4];
        bypass_wdata_r_3 = _RANDOM[1'h0][7:6];
        bypass_wdata_r_4 = _RANDOM[1'h0][9:8];
        bypass_wdata_r_5 = _RANDOM[1'h0][11:10];
        bypass_wdata_r_6 = _RANDOM[1'h0][13:12];
        bypass_wdata_r_7 = _RANDOM[1'h0][15:14];
        bypass_mask_need_check_reg_last_REG = _RANDOM[1'h0][16];
        bypass_mask_waddr_reg = _RANDOM[1'h0][25:17];
        bypass_mask_raddr_reg = {_RANDOM[1'h0][31:26], _RANDOM[1'h1][2:0]};
        bypass_mask_wmask_reg = _RANDOM[1'h1][10:3];
        rdata_last_REG = _RANDOM[1'h1][11];
        rdata_hold_data_0 = _RANDOM[1'h1][13:12];
        rdata_hold_data_1 = _RANDOM[1'h1][15:14];
        rdata_hold_data_2 = _RANDOM[1'h1][17:16];
        rdata_hold_data_3 = _RANDOM[1'h1][19:18];
        rdata_hold_data_4 = _RANDOM[1'h1][21:20];
        rdata_hold_data_5 = _RANDOM[1'h1][23:22];
        rdata_hold_data_6 = _RANDOM[1'h1][25:24];
        rdata_hold_data_7 = _RANDOM[1'h1][27:26];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        bypass_mask_need_check_reg_last_REG = 1'h0;
        rdata_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_4 array (
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (io_r_req_valid),
    .R0_clk  (_ClockGate_Q),
    .R0_data (_array_R0_data),
    .W0_addr (io_w_req_bits_setIdx),
    .W0_en   (io_w_req_valid),
    .W0_clk  (_ClockGate_Q),
    .W0_data
      ({io_w_req_bits_data_7,
        io_w_req_bits_data_6,
        io_w_req_bits_data_5,
        io_w_req_bits_data_4,
        io_w_req_bits_data_3,
        io_w_req_bits_data_2,
        io_w_req_bits_data_1,
        io_w_req_bits_data_0}),
    .W0_mask (io_w_req_bits_waymask)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_r_req_valid | io_w_req_valid),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  assign io_r_resp_data_0 = rdata_last_REG ? mem_rdata_0 : rdata_hold_data_0;
  assign io_r_resp_data_1 = rdata_last_REG ? mem_rdata_1 : rdata_hold_data_1;
  assign io_r_resp_data_2 = rdata_last_REG ? mem_rdata_2 : rdata_hold_data_2;
  assign io_r_resp_data_3 = rdata_last_REG ? mem_rdata_3 : rdata_hold_data_3;
  assign io_r_resp_data_4 = rdata_last_REG ? mem_rdata_4 : rdata_hold_data_4;
  assign io_r_resp_data_5 = rdata_last_REG ? mem_rdata_5 : rdata_hold_data_5;
  assign io_r_resp_data_6 = rdata_last_REG ? mem_rdata_6 : rdata_hold_data_6;
  assign io_r_resp_data_7 = rdata_last_REG ? mem_rdata_7 : rdata_hold_data_7;
endmodule

