// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Dispatcher_1(
  input         io_in_valid,
  input  [34:0] io_in_bits_fuType,
  input  [8:0]  io_in_bits_fuOpType,
  input  [63:0] io_in_bits_imm,
  input  [4:0]  io_in_bits_nextPcOffset,
  input         io_in_bits_robIdx_flag,
  input  [7:0]  io_in_bits_robIdx_value,
  input  [7:0]  io_in_bits_pdest,
  input         io_in_bits_rfWen,
  input  [49:0] io_in_bits_pc,
  input         io_in_bits_ftqIdx_flag,
  input  [5:0]  io_in_bits_ftqIdx_value,
  input  [3:0]  io_in_bits_ftqOffset,
  input  [49:0] io_in_bits_predictInfo_target,
  input         io_in_bits_predictInfo_taken,
  output        io_out_0_valid,
  output [8:0]  io_out_0_bits_fuOpType,
  output [63:0] io_out_0_bits_imm,
  output [4:0]  io_out_0_bits_nextPcOffset,
  output        io_out_0_bits_robIdx_flag,
  output [7:0]  io_out_0_bits_robIdx_value,
  output [7:0]  io_out_0_bits_pdest,
  output [49:0] io_out_0_bits_pc,
  output        io_out_0_bits_ftqIdx_flag,
  output [5:0]  io_out_0_bits_ftqIdx_value,
  output [3:0]  io_out_0_bits_ftqOffset,
  output        io_out_0_bits_predictInfo_taken,
  output        io_out_1_valid,
  output [8:0]  io_out_1_bits_fuOpType,
  output [63:0] io_out_1_bits_imm,
  output [4:0]  io_out_1_bits_nextPcOffset,
  output        io_out_1_bits_robIdx_flag,
  output [7:0]  io_out_1_bits_robIdx_value,
  output [7:0]  io_out_1_bits_pdest,
  output        io_out_1_bits_rfWen,
  output [49:0] io_out_1_bits_pc,
  output        io_out_1_bits_ftqIdx_flag,
  output [5:0]  io_out_1_bits_ftqIdx_value,
  output [3:0]  io_out_1_bits_ftqOffset,
  output [49:0] io_out_1_bits_predictInfo_target,
  output        io_out_1_bits_predictInfo_taken
);

  assign io_out_0_valid = io_in_bits_fuType == 35'h2 & io_in_valid;
  assign io_out_0_bits_fuOpType = io_in_bits_fuOpType;
  assign io_out_0_bits_imm = io_in_bits_imm;
  assign io_out_0_bits_nextPcOffset = io_in_bits_nextPcOffset;
  assign io_out_0_bits_robIdx_flag = io_in_bits_robIdx_flag;
  assign io_out_0_bits_robIdx_value = io_in_bits_robIdx_value;
  assign io_out_0_bits_pdest = io_in_bits_pdest;
  assign io_out_0_bits_pc = io_in_bits_pc;
  assign io_out_0_bits_ftqIdx_flag = io_in_bits_ftqIdx_flag;
  assign io_out_0_bits_ftqIdx_value = io_in_bits_ftqIdx_value;
  assign io_out_0_bits_ftqOffset = io_in_bits_ftqOffset;
  assign io_out_0_bits_predictInfo_taken = io_in_bits_predictInfo_taken;
  assign io_out_1_valid = io_in_bits_fuType == 35'h1 & io_in_valid;
  assign io_out_1_bits_fuOpType = io_in_bits_fuOpType;
  assign io_out_1_bits_imm = io_in_bits_imm;
  assign io_out_1_bits_nextPcOffset = io_in_bits_nextPcOffset;
  assign io_out_1_bits_robIdx_flag = io_in_bits_robIdx_flag;
  assign io_out_1_bits_robIdx_value = io_in_bits_robIdx_value;
  assign io_out_1_bits_pdest = io_in_bits_pdest;
  assign io_out_1_bits_rfWen = io_in_bits_rfWen;
  assign io_out_1_bits_pc = io_in_bits_pc;
  assign io_out_1_bits_ftqIdx_flag = io_in_bits_ftqIdx_flag;
  assign io_out_1_bits_ftqIdx_value = io_in_bits_ftqIdx_value;
  assign io_out_1_bits_ftqOffset = io_in_bits_ftqOffset;
  assign io_out_1_bits_predictInfo_target = io_in_bits_predictInfo_target;
  assign io_out_1_bits_predictInfo_taken = io_in_bits_predictInfo_taken;
endmodule

