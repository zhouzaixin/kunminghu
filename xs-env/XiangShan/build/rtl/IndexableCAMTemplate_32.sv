// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IndexableCAMTemplate_32(
  input         clock,
  input  [10:0] io_r_req_0_idx,
  output        io_r_resp_0_0,
  output        io_r_resp_0_1,
  output        io_r_resp_0_2,
  output        io_r_resp_0_3,
  output        io_r_resp_0_4,
  output        io_r_resp_0_5,
  output        io_r_resp_0_6,
  output        io_r_resp_0_7,
  input         io_w_valid,
  input  [10:0] io_w_bits_data_idx,
  input  [2:0]  io_w_bits_index
);

  reg [10:0] array_0;
  reg [10:0] array_1;
  reg [10:0] array_2;
  reg [10:0] array_3;
  reg [10:0] array_4;
  reg [10:0] array_5;
  reg [10:0] array_6;
  reg [10:0] array_7;
  always @(posedge clock) begin
    if (io_w_valid & io_w_bits_index == 3'h0)
      array_0 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h1)
      array_1 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h2)
      array_2 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h3)
      array_3 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h4)
      array_4 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h5)
      array_5 <= io_w_bits_data_idx;
    if (io_w_valid & io_w_bits_index == 3'h6)
      array_6 <= io_w_bits_data_idx;
    if (io_w_valid & (&io_w_bits_index))
      array_7 <= io_w_bits_data_idx;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        array_0 = _RANDOM[2'h0][10:0];
        array_1 = _RANDOM[2'h0][21:11];
        array_2 = {_RANDOM[2'h0][31:22], _RANDOM[2'h1][0]};
        array_3 = _RANDOM[2'h1][11:1];
        array_4 = _RANDOM[2'h1][22:12];
        array_5 = {_RANDOM[2'h1][31:23], _RANDOM[2'h2][1:0]};
        array_6 = _RANDOM[2'h2][12:2];
        array_7 = _RANDOM[2'h2][23:13];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_r_resp_0_0 = io_r_req_0_idx == array_0;
  assign io_r_resp_0_1 = io_r_req_0_idx == array_1;
  assign io_r_resp_0_2 = io_r_req_0_idx == array_2;
  assign io_r_resp_0_3 = io_r_req_0_idx == array_3;
  assign io_r_resp_0_4 = io_r_req_0_idx == array_4;
  assign io_r_resp_0_5 = io_r_req_0_idx == array_5;
  assign io_r_resp_0_6 = io_r_req_0_idx == array_6;
  assign io_r_resp_0_7 = io_r_req_0_idx == array_7;
endmodule

