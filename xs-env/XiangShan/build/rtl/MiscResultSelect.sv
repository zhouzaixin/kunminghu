// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MiscResultSelect(
  input  [5:0]  io_func,
  input  [63:0] io_and,
  input  [63:0] io_or,
  input  [63:0] io_xor,
  input  [63:0] io_orcb,
  input  [63:0] io_orh48,
  input  [63:0] io_sextb,
  input  [63:0] io_packh,
  input  [63:0] io_sexth,
  input  [63:0] io_packw,
  input  [63:0] io_revb,
  input  [63:0] io_rev8,
  input  [63:0] io_pack,
  input  [63:0] io_src,
  output [63:0] io_miscRes
);

  wire [3:0][63:0] _GEN = {{io_packw}, {io_sexth}, {io_packh}, {io_sextb}};
  wire [3:0][63:0] _GEN_0 = {{io_orcb}, {io_xor}, {io_or}, {io_and}};
  wire [63:0]      _GEN_1 = _GEN_0[io_func[2:1]];
  wire [3:0][63:0] _GEN_2 =
    {{{56'h0, io_src[15:8]}},
     {{29'h0, io_src[31:0], 3'h0}},
     {{30'h0, io_src[31:0], 2'h0}},
     {{31'h0, io_src[31:0], 1'h0}}};
  wire [3:0][63:0] _GEN_3 = {{io_orh48}, {io_pack}, {io_rev8}, {io_revb}};
  assign io_miscRes =
    io_func[5]
      ? {48'h0, _GEN_1[15:0] & {{15{io_func[0]}}, 1'h1}}
      : io_func[4]
          ? (io_func[3] ? _GEN_2[io_func[1:0]] : _GEN_3[io_func[1:0]])
          : io_func[3] ? _GEN[io_func[1:0]] : _GEN_1;
endmodule

