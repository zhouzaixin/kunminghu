// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Pipeline_14(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [2:0]  io_in_bits_param,
  input  [10:0] io_in_bits_set,
  input  [30:0] io_in_bits_tag,
  input         io_out_ready,
  output        io_out_valid,
  output [2:0]  io_out_bits_channel,
  output [2:0]  io_out_bits_opcode,
  output [2:0]  io_out_bits_param,
  output [2:0]  io_out_bits_size,
  output [10:0] io_out_bits_source,
  output [10:0] io_out_bits_set,
  output [30:0] io_out_bits_tag,
  output [5:0]  io_out_bits_off,
  output [31:0] io_out_bits_mask,
  output [3:0]  io_out_bits_bufIdx,
  output        io_out_bits_needHint,
  output        io_out_bits_isPrefetch,
  output        io_out_bits_isBop,
  output        io_out_bits_preferCache,
  output        io_out_bits_dirty,
  output        io_out_bits_fromProbeHelper,
  output        io_out_bits_fromCmoHelper,
  output        io_out_bits_needProbeAckData,
  output [3:0]  io_out_bits_reqSource
);

  Queue1_MSHRRequest stages_0 (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_ready                 (io_in_ready),
    .io_enq_valid                 (io_in_valid),
    .io_enq_bits_channel          (3'h4),
    .io_enq_bits_opcode           (3'h0),
    .io_enq_bits_param            (io_in_bits_param),
    .io_enq_bits_size             (3'h6),
    .io_enq_bits_source           (11'h0),
    .io_enq_bits_set              (io_in_bits_set),
    .io_enq_bits_tag              (io_in_bits_tag),
    .io_enq_bits_off              (6'h0),
    .io_enq_bits_mask             (32'h0),
    .io_enq_bits_bufIdx           (4'h0),
    .io_enq_bits_needHint         (1'h0),
    .io_enq_bits_isPrefetch       (1'h0),
    .io_enq_bits_isBop            (1'h0),
    .io_enq_bits_preferCache      (1'h0),
    .io_enq_bits_dirty            (1'h0),
    .io_enq_bits_isHit            (1'h1),
    .io_enq_bits_fromProbeHelper  (1'h0),
    .io_enq_bits_fromCmoHelper    (1'h1),
    .io_enq_bits_needProbeAckData (1'h0),
    .io_enq_bits_reqSource        (4'h0),
    .io_deq_ready                 (io_out_ready),
    .io_deq_valid                 (io_out_valid),
    .io_deq_bits_channel          (io_out_bits_channel),
    .io_deq_bits_opcode           (io_out_bits_opcode),
    .io_deq_bits_param            (io_out_bits_param),
    .io_deq_bits_size             (io_out_bits_size),
    .io_deq_bits_source           (io_out_bits_source),
    .io_deq_bits_set              (io_out_bits_set),
    .io_deq_bits_tag              (io_out_bits_tag),
    .io_deq_bits_off              (io_out_bits_off),
    .io_deq_bits_mask             (io_out_bits_mask),
    .io_deq_bits_bufIdx           (io_out_bits_bufIdx),
    .io_deq_bits_needHint         (io_out_bits_needHint),
    .io_deq_bits_isPrefetch       (io_out_bits_isPrefetch),
    .io_deq_bits_isBop            (io_out_bits_isBop),
    .io_deq_bits_preferCache      (io_out_bits_preferCache),
    .io_deq_bits_dirty            (io_out_bits_dirty),
    .io_deq_bits_fromProbeHelper  (io_out_bits_fromProbeHelper),
    .io_deq_bits_fromCmoHelper    (io_out_bits_fromCmoHelper),
    .io_deq_bits_needProbeAckData (io_out_bits_needProbeAckData),
    .io_deq_bits_reqSource        (io_out_bits_reqSource)
  );
endmodule

