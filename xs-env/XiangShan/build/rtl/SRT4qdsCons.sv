// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRT4qdsCons(
  input  [2:0] io_d_trunc_3,
  output [8:0] io_m_neg_1,
  output [8:0] io_m_neg_0,
  output [8:0] io_m_pos_1,
  output [8:0] io_m_pos_2
);

  wire [7:0][8:0] _GEN =
    '{9'h1A4, 9'h1AC, 9'h1B0, 9'h1B8, 9'h1BC, 9'h1C4, 9'h1C8, 9'h1D0};
  wire [7:0][8:0] _GEN_0 =
    '{9'h1E8, 9'h1E8, 9'h1E8, 9'h1EC, 9'h1F0, 9'h1F0, 9'h1F0, 9'h1F4};
  wire [7:0][8:0] _GEN_1 = '{9'h20, 9'h20, 9'h20, 9'h20, 9'h18, 9'h18, 9'h18, 9'h10};
  wire [7:0][8:0] _GEN_2 = '{9'h60, 9'h58, 9'h54, 9'h4C, 9'h48, 9'h40, 9'h3C, 9'h34};
  assign io_m_neg_1 = _GEN_2[io_d_trunc_3];
  assign io_m_neg_0 = _GEN_1[io_d_trunc_3];
  assign io_m_pos_1 = _GEN_0[io_d_trunc_3];
  assign io_m_pos_2 = _GEN[io_d_trunc_3];
endmodule

