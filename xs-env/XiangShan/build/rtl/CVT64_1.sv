// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CVT64_1(
  input         clock,
  input         reset,
  input         io_fire,
  input  [63:0] io_src,
  input  [7:0]  io_opType,
  input  [2:0]  io_rm,
  input  [3:0]  io_input1H,
  input  [3:0]  io_output1H,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire [63:0] _estmate7_io_result;
  wire [4:0]  _estmate7_io_fflags;
  wire [63:0] _int2fp_io_result;
  wire [4:0]  _int2fp_io_fflags;
  wire [63:0] _fpcvt_io_result;
  wire [4:0]  _fpcvt_io_fflags;
  reg         fireReg_last_r;
  reg         isFpWiden;
  reg         isFpNarrow;
  reg         isFp2Int;
  reg         isFpCrossHigh;
  reg         isFpCrossLow;
  reg         s1_isInt2Fp;
  reg         s1_isEstimate7;
  reg         s2_isInt2Fp;
  reg         s2_isEstimate7;
  reg         s2_isFPsrc;
  wire        _GEN = io_opType[7] & io_opType[6];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fireReg_last_r <= 1'h0;
      isFpWiden <= 1'h0;
      isFpNarrow <= 1'h0;
      isFp2Int <= 1'h0;
      isFpCrossHigh <= 1'h0;
      isFpCrossLow <= 1'h0;
      s1_isInt2Fp <= 1'h0;
      s1_isEstimate7 <= 1'h0;
    end
    else begin
      if (io_fire | fireReg_last_r)
        fireReg_last_r <= io_fire;
      if (io_fire) begin
        isFpWiden <= _GEN & ~(io_opType[4]) & io_opType[3];
        isFpNarrow <= _GEN & io_opType[4] & ~(io_opType[3]);
        isFp2Int <= ~(io_opType[6]);
        isFpCrossHigh <=
          _GEN & io_opType[4] & io_opType[3] & io_opType[6] & io_output1H[3];
        isFpCrossLow <=
          _GEN & io_opType[4] & io_opType[3] & io_opType[6] & io_output1H[1];
        s1_isInt2Fp <= ~(io_opType[7]);
        s1_isEstimate7 <= io_opType[5];
      end
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (fireReg_last_r) begin
      s2_isInt2Fp <= s1_isInt2Fp;
      s2_isEstimate7 <= s1_isEstimate7;
      s2_isFPsrc <= isFpWiden | isFpNarrow | isFpCrossHigh | isFpCrossLow | isFp2Int;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        fireReg_last_r = _RANDOM[/*Zero width*/ 1'b0][0];
        isFpWiden = _RANDOM[/*Zero width*/ 1'b0][1];
        isFpNarrow = _RANDOM[/*Zero width*/ 1'b0][2];
        isFp2Int = _RANDOM[/*Zero width*/ 1'b0][3];
        isFpCrossHigh = _RANDOM[/*Zero width*/ 1'b0][4];
        isFpCrossLow = _RANDOM[/*Zero width*/ 1'b0][5];
        s1_isInt2Fp = _RANDOM[/*Zero width*/ 1'b0][8];
        s1_isEstimate7 = _RANDOM[/*Zero width*/ 1'b0][9];
        s2_isInt2Fp = _RANDOM[/*Zero width*/ 1'b0][22];
        s2_isEstimate7 = _RANDOM[/*Zero width*/ 1'b0][23];
        s2_isFPsrc = _RANDOM[/*Zero width*/ 1'b0][24];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fireReg_last_r = 1'h0;
        isFpWiden = 1'h0;
        isFpNarrow = 1'h0;
        isFp2Int = 1'h0;
        isFpCrossHigh = 1'h0;
        isFpCrossLow = 1'h0;
        s1_isInt2Fp = 1'h0;
        s1_isEstimate7 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FP_INCVT fpcvt (
    .clock            (clock),
    .reset            (reset),
    .io_fire          (io_fire),
    .io_src           (io_src),
    .io_opType        (io_opType),
    .io_rm            (io_rm),
    .io_input1H       (io_input1H),
    .io_output1H      (io_output1H),
    .io_isFpToVecInst (1'h0),
    .io_isFround      (2'h0),
    .io_isFcvtmod     (1'h0),
    .io_result        (_fpcvt_io_result),
    .io_fflags        (_fpcvt_io_fflags)
  );
  INT2FP int2fp (
    .clock       (clock),
    .reset       (reset),
    .io_fire     (io_fire),
    .io_src      (io_src),
    .io_opType   (io_opType),
    .io_rm       (io_rm),
    .io_input1H  (io_input1H),
    .io_output1H (io_output1H),
    .io_result   (_int2fp_io_result),
    .io_fflags   (_int2fp_io_fflags)
  );
  Estimate7 estmate7 (
    .clock       (clock),
    .reset       (reset),
    .io_fire     (io_fire),
    .io_src      (io_src),
    .io_opType   (io_opType),
    .io_rm       (io_rm),
    .io_input1H  (io_input1H),
    .io_output1H (io_output1H),
    .io_result   (_estmate7_io_result),
    .io_fflags   (_estmate7_io_fflags)
  );
  assign io_result =
    (s2_isInt2Fp ? _int2fp_io_result : 64'h0) | (s2_isFPsrc ? _fpcvt_io_result : 64'h0)
    | (s2_isEstimate7 ? _estmate7_io_result : 64'h0);
  assign io_fflags =
    (s2_isInt2Fp ? _int2fp_io_fflags : 5'h0) | (s2_isFPsrc ? _fpcvt_io_fflags : 5'h0)
    | (s2_isEstimate7 ? _estmate7_io_fflags : 5'h0);
endmodule

