// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Mhpmevent8Module(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_OF,
  output        regOut_MINH,
  output        regOut_SINH,
  output        regOut_UINH,
  output        regOut_VSINH,
  output        regOut_VUINH,
  output [4:0]  regOut_OPTYPE2,
  output [4:0]  regOut_OPTYPE1,
  output [4:0]  regOut_OPTYPE0,
  output [9:0]  regOut_EVENT3,
  output [9:0]  regOut_EVENT2,
  output [9:0]  regOut_EVENT1,
  output [9:0]  regOut_EVENT0,
  input         ofFromPerfCnt
);

  reg       reg_OF;
  reg       reg_MINH;
  reg       reg_SINH;
  reg       reg_UINH;
  reg       reg_VSINH;
  reg       reg_VUINH;
  reg [4:0] reg_OPTYPE2;
  reg [4:0] reg_OPTYPE1;
  reg [4:0] reg_OPTYPE0;
  reg [9:0] reg_EVENT3;
  reg [9:0] reg_EVENT2;
  reg [9:0] reg_EVENT1;
  reg [9:0] reg_EVENT0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_OF <= 1'h0;
      reg_MINH <= 1'h0;
      reg_SINH <= 1'h0;
      reg_UINH <= 1'h0;
      reg_VSINH <= 1'h0;
      reg_VUINH <= 1'h0;
      reg_OPTYPE2 <= 5'h0;
      reg_OPTYPE1 <= 5'h0;
      reg_OPTYPE0 <= 5'h0;
      reg_EVENT3 <= 10'h0;
      reg_EVENT2 <= 10'h0;
      reg_EVENT1 <= 10'h0;
      reg_EVENT0 <= 10'h0;
    end
    else begin
      if (w_wen) begin
        reg_OF <= w_wdata[63];
        reg_MINH <= w_wdata[62];
        reg_SINH <= w_wdata[61];
        reg_UINH <= w_wdata[60];
        reg_VSINH <= w_wdata[59];
        reg_VUINH <= w_wdata[58];
        reg_EVENT3 <= w_wdata[39:30];
        reg_EVENT2 <= w_wdata[29:20];
        reg_EVENT1 <= w_wdata[19:10];
        reg_EVENT0 <= w_wdata[9:0];
      end
      else if (ofFromPerfCnt)
        reg_OF <= ofFromPerfCnt;
      if (w_wen
          & (|{w_wdata[54:50] == 5'h4,
               w_wdata[54:50] == 5'h2,
               w_wdata[54:50] == 5'h1,
               w_wdata[54:50] == 5'h0}))
        reg_OPTYPE2 <= w_wdata[54:50];
      if (w_wen
          & (|{w_wdata[49:45] == 5'h4,
               w_wdata[49:45] == 5'h2,
               w_wdata[49:45] == 5'h1,
               w_wdata[49:45] == 5'h0}))
        reg_OPTYPE1 <= w_wdata[49:45];
      if (w_wen
          & (|{w_wdata[44:40] == 5'h4,
               w_wdata[44:40] == 5'h2,
               w_wdata[44:40] == 5'h1,
               w_wdata[44:40] == 5'h0}))
        reg_OPTYPE0 <= w_wdata[44:40];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        reg_OF = _RANDOM[1'h0][0];
        reg_MINH = _RANDOM[1'h0][1];
        reg_SINH = _RANDOM[1'h0][2];
        reg_UINH = _RANDOM[1'h0][3];
        reg_VSINH = _RANDOM[1'h0][4];
        reg_VUINH = _RANDOM[1'h0][5];
        reg_OPTYPE2 = _RANDOM[1'h0][10:6];
        reg_OPTYPE1 = _RANDOM[1'h0][15:11];
        reg_OPTYPE0 = _RANDOM[1'h0][20:16];
        reg_EVENT3 = _RANDOM[1'h0][30:21];
        reg_EVENT2 = {_RANDOM[1'h0][31], _RANDOM[1'h1][8:0]};
        reg_EVENT1 = _RANDOM[1'h1][18:9];
        reg_EVENT0 = _RANDOM[1'h1][28:19];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_OF = 1'h0;
        reg_MINH = 1'h0;
        reg_SINH = 1'h0;
        reg_UINH = 1'h0;
        reg_VSINH = 1'h0;
        reg_VUINH = 1'h0;
        reg_OPTYPE2 = 5'h0;
        reg_OPTYPE1 = 5'h0;
        reg_OPTYPE0 = 5'h0;
        reg_EVENT3 = 10'h0;
        reg_EVENT2 = 10'h0;
        reg_EVENT1 = 10'h0;
        reg_EVENT0 = 10'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {reg_OF,
     reg_MINH,
     reg_SINH,
     reg_UINH,
     reg_VSINH,
     reg_VUINH,
     3'h0,
     reg_OPTYPE2,
     reg_OPTYPE1,
     reg_OPTYPE0,
     reg_EVENT3,
     reg_EVENT2,
     reg_EVENT1,
     reg_EVENT0};
  assign regOut_OF = reg_OF;
  assign regOut_MINH = reg_MINH;
  assign regOut_SINH = reg_SINH;
  assign regOut_UINH = reg_UINH;
  assign regOut_VSINH = reg_VSINH;
  assign regOut_VUINH = reg_VUINH;
  assign regOut_OPTYPE2 = reg_OPTYPE2;
  assign regOut_OPTYPE1 = reg_OPTYPE1;
  assign regOut_OPTYPE0 = reg_OPTYPE0;
  assign regOut_EVENT3 = reg_EVENT3;
  assign regOut_EVENT2 = reg_EVENT2;
  assign regOut_EVENT1 = reg_EVENT1;
  assign regOut_EVENT0 = reg_EVENT0;
endmodule

