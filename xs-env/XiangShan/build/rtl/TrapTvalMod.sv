// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TrapTvalMod(
  input         clock,
  input         reset,
  input         io_fromCtrlBlock_flush_valid,
  input         io_fromCtrlBlock_flush_bits_robIdx_flag,
  input  [7:0]  io_fromCtrlBlock_flush_bits_robIdx_value,
  input         io_fromCtrlBlock_flush_bits_cfiUpdate_backendIGPF,
  input         io_fromCtrlBlock_flush_bits_cfiUpdate_backendIPF,
  input         io_fromCtrlBlock_flush_bits_cfiUpdate_backendIAF,
  input  [63:0] io_fromCtrlBlock_flush_bits_fullTarget,
  input         io_fromCtrlBlock_robDeqPtr_flag,
  input  [7:0]  io_fromCtrlBlock_robDeqPtr_value,
  input         io_targetPc_valid,
  input  [63:0] io_targetPc_bits_pc,
  input         io_targetPc_bits_raiseIPF,
  input         io_targetPc_bits_raiseIAF,
  input         io_targetPc_bits_raiseIGPF,
  input         io_clear,
  output [63:0] io_tval
);

  reg         valid;
  reg  [63:0] tval;
  reg         robIdx_flag;
  reg  [7:0]  robIdx_value;
  wire        _clearFromFlush_T =
    io_fromCtrlBlock_flush_bits_cfiUpdate_backendIGPF
    | io_fromCtrlBlock_flush_bits_cfiUpdate_backendIPF;
  wire        updateFromFlush =
    io_fromCtrlBlock_flush_valid
    & (_clearFromFlush_T | io_fromCtrlBlock_flush_bits_cfiUpdate_backendIAF);
  wire        _GEN =
    io_targetPc_valid
    & (io_targetPc_bits_raiseIPF | io_targetPc_bits_raiseIAF
       | io_targetPc_bits_raiseIGPF);
  wire        _GEN_0 =
    io_fromCtrlBlock_flush_bits_robIdx_flag ^ robIdx_flag
    ^ io_fromCtrlBlock_flush_bits_robIdx_value < robIdx_value;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <=
        _GEN
        | (valid
             ? updateFromFlush & _GEN_0
               | ~(io_fromCtrlBlock_flush_valid
                   & ~(_clearFromFlush_T
                       | io_fromCtrlBlock_flush_bits_cfiUpdate_backendIAF) & _GEN_0
                   | io_clear) & valid
             : updateFromFlush | valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
      tval <= io_targetPc_bits_pc;
      robIdx_flag <= io_fromCtrlBlock_robDeqPtr_flag;
      robIdx_value <= io_fromCtrlBlock_robDeqPtr_value;
    end
    else if ((~valid | _GEN_0) & updateFromFlush) begin
      tval <= io_fromCtrlBlock_flush_bits_fullTarget;
      robIdx_flag <= io_fromCtrlBlock_flush_bits_robIdx_flag;
      robIdx_value <= io_fromCtrlBlock_flush_bits_robIdx_value;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[2'h0][0];
        tval = {_RANDOM[2'h0][31:1], _RANDOM[2'h1], _RANDOM[2'h2][0]};
        robIdx_flag = _RANDOM[2'h2][1];
        robIdx_value = _RANDOM[2'h2][9:2];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_tval = tval;
endmodule

