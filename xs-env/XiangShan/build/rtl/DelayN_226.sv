// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayN_226(
  input         clock,
  input  [3:0]  io_in_satp_mode,
  input  [15:0] io_in_satp_asid,
  input  [43:0] io_in_satp_ppn,
  input         io_in_satp_changed,
  input  [3:0]  io_in_vsatp_mode,
  input  [15:0] io_in_vsatp_asid,
  input  [43:0] io_in_vsatp_ppn,
  input         io_in_vsatp_changed,
  input  [3:0]  io_in_hgatp_mode,
  input  [15:0] io_in_hgatp_vmid,
  input  [43:0] io_in_hgatp_ppn,
  input         io_in_hgatp_changed,
  input         io_in_priv_mxr,
  input         io_in_priv_virt,
  input         io_in_mPBMTE,
  input         io_in_hPBMTE,
  output [3:0]  io_out_satp_mode,
  output [15:0] io_out_satp_asid,
  output [43:0] io_out_satp_ppn,
  output        io_out_satp_changed,
  output [3:0]  io_out_vsatp_mode,
  output [15:0] io_out_vsatp_asid,
  output [43:0] io_out_vsatp_ppn,
  output        io_out_vsatp_changed,
  output [3:0]  io_out_hgatp_mode,
  output [15:0] io_out_hgatp_vmid,
  output [43:0] io_out_hgatp_ppn,
  output        io_out_hgatp_changed,
  output        io_out_priv_mxr,
  output        io_out_priv_virt,
  output        io_out_mPBMTE,
  output        io_out_hPBMTE
);

  reg [3:0]  REG_satp_mode;
  reg [15:0] REG_satp_asid;
  reg [43:0] REG_satp_ppn;
  reg        REG_satp_changed;
  reg [3:0]  REG_vsatp_mode;
  reg [15:0] REG_vsatp_asid;
  reg [43:0] REG_vsatp_ppn;
  reg        REG_vsatp_changed;
  reg [3:0]  REG_hgatp_mode;
  reg [15:0] REG_hgatp_vmid;
  reg [43:0] REG_hgatp_ppn;
  reg        REG_hgatp_changed;
  reg        REG_priv_mxr;
  reg        REG_priv_virt;
  reg        REG_mPBMTE;
  reg        REG_hPBMTE;
  always @(posedge clock) begin
    REG_satp_mode <= io_in_satp_mode;
    REG_satp_asid <= io_in_satp_asid;
    REG_satp_ppn <= io_in_satp_ppn;
    REG_satp_changed <= io_in_satp_changed;
    REG_vsatp_mode <= io_in_vsatp_mode;
    REG_vsatp_asid <= io_in_vsatp_asid;
    REG_vsatp_ppn <= io_in_vsatp_ppn;
    REG_vsatp_changed <= io_in_vsatp_changed;
    REG_hgatp_mode <= io_in_hgatp_mode;
    REG_hgatp_vmid <= io_in_hgatp_vmid;
    REG_hgatp_ppn <= io_in_hgatp_ppn;
    REG_hgatp_changed <= io_in_hgatp_changed;
    REG_priv_mxr <= io_in_priv_mxr;
    REG_priv_virt <= io_in_priv_virt;
    REG_mPBMTE <= io_in_mPBMTE;
    REG_hPBMTE <= io_in_hPBMTE;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_satp_mode = _RANDOM[3'h0][3:0];
        REG_satp_asid = _RANDOM[3'h0][19:4];
        REG_satp_ppn = {_RANDOM[3'h0][31:20], _RANDOM[3'h1]};
        REG_satp_changed = _RANDOM[3'h2][0];
        REG_vsatp_mode = _RANDOM[3'h2][4:1];
        REG_vsatp_asid = _RANDOM[3'h2][20:5];
        REG_vsatp_ppn = {_RANDOM[3'h2][31:21], _RANDOM[3'h3], _RANDOM[3'h4][0]};
        REG_vsatp_changed = _RANDOM[3'h4][1];
        REG_hgatp_mode = _RANDOM[3'h4][5:2];
        REG_hgatp_vmid = _RANDOM[3'h4][21:6];
        REG_hgatp_ppn = {_RANDOM[3'h4][31:22], _RANDOM[3'h5], _RANDOM[3'h6][1:0]};
        REG_hgatp_changed = _RANDOM[3'h6][2];
        REG_priv_mxr = _RANDOM[3'h6][3];
        REG_priv_virt = _RANDOM[3'h6][7];
        REG_mPBMTE = _RANDOM[3'h6][13];
        REG_hPBMTE = _RANDOM[3'h6][14];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_satp_mode = REG_satp_mode;
  assign io_out_satp_asid = REG_satp_asid;
  assign io_out_satp_ppn = REG_satp_ppn;
  assign io_out_satp_changed = REG_satp_changed;
  assign io_out_vsatp_mode = REG_vsatp_mode;
  assign io_out_vsatp_asid = REG_vsatp_asid;
  assign io_out_vsatp_ppn = REG_vsatp_ppn;
  assign io_out_vsatp_changed = REG_vsatp_changed;
  assign io_out_hgatp_mode = REG_hgatp_mode;
  assign io_out_hgatp_vmid = REG_hgatp_vmid;
  assign io_out_hgatp_ppn = REG_hgatp_ppn;
  assign io_out_hgatp_changed = REG_hgatp_changed;
  assign io_out_priv_mxr = REG_priv_mxr;
  assign io_out_priv_virt = REG_priv_virt;
  assign io_out_mPBMTE = REG_mPBMTE;
  assign io_out_hPBMTE = REG_hPBMTE;
endmodule

