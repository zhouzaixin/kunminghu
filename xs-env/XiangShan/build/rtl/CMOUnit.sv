// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CMOUnit(
  input         clock,
  input         reset,
  output        io_req_ready,
  input         io_req_valid,
  input  [2:0]  io_req_bits_opcode,
  input  [63:0] io_req_bits_address,
  input         io_req_chanA_ready,
  output        io_req_chanA_valid,
  output [3:0]  io_req_chanA_bits_opcode,
  output [47:0] io_req_chanA_bits_address,
  output        io_resp_chanD_ready,
  input         io_resp_chanD_valid,
  input         io_resp_chanD_bits_denied,
  input         io_resp_chanD_bits_corrupt,
  input         io_resp_to_lsq_ready,
  output        io_resp_to_lsq_valid,
  output        io_resp_to_lsq_bits_nderr
);

  reg  [1:0]  state;
  wire        _req_T = ~(|state) & io_req_valid;
  reg  [2:0]  req_opcode;
  reg  [63:0] req_address;
  reg         nderr;
  wire        io_req_chanA_valid_0 = state == 2'h1;
  wire        io_resp_chanD_ready_0 = state == 2'h2;
  wire        _GEN = state == 2'h1;
  wire        _GEN_0 = state == 2'h2;
  wire        _GEN_1 = io_resp_chanD_ready_0 & io_resp_chanD_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      state <= 2'h0;
      nderr <= 1'h0;
    end
    else if (|state) begin
      if (_GEN) begin
        if (io_req_chanA_ready & io_req_chanA_valid_0)
          state <= 2'h2;
      end
      else if (_GEN_0) begin
        if (_GEN_1)
          state <= 2'h3;
      end
      else if ((&state) & io_resp_to_lsq_ready & (&state))
        state <= 2'h0;
      if (_GEN | ~(_GEN_0 & _GEN_1)) begin
      end
      else
        nderr <= io_resp_chanD_bits_denied | io_resp_chanD_bits_corrupt;
    end
    else begin
      if (_req_T)
        state <= 2'h1;
      nderr <= ~_req_T & nderr;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_req_T) begin
      req_opcode <= io_req_bits_opcode;
      req_address <= io_req_bits_address;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[2'h0][1:0];
        req_opcode = _RANDOM[2'h0][4:2];
        req_address = {_RANDOM[2'h0][31:5], _RANDOM[2'h1], _RANDOM[2'h2][4:0]};
        nderr = _RANDOM[2'h2][5];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        state = 2'h0;
        nderr = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = ~(|state);
  assign io_req_chanA_valid = io_req_chanA_valid_0;
  assign io_req_chanA_bits_opcode =
    req_opcode == 3'h2 ? 4'hE : {3'h6, req_opcode == 3'h1};
  assign io_req_chanA_bits_address = req_address[47:0];
  assign io_resp_chanD_ready = io_resp_chanD_ready_0;
  assign io_resp_to_lsq_valid = &state;
  assign io_resp_to_lsq_bits_nderr = nderr;
endmodule

