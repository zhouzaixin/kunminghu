// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AluDataModule(
  input  [63:0] io_src_0,
  input  [63:0] io_src_1,
  input  [8:0]  io_func,
  output [63:0] io_result
);

  wire [63:0]      _wordResSel_io_wordRes;
  wire [63:0]      _condModule_io_condRes;
  wire [63:0]      _miscResSel_io_miscRes;
  wire [63:0]      _shiftResSel_io_shiftRes;
  wire [31:0]      _rightShiftWordModule_io_srlw;
  wire [31:0]      _rightShiftWordModule_io_sraw;
  wire [31:0]      _rightShiftWordModule_io_revSrlw;
  wire [31:0]      _leftShiftWordModule_io_sllw;
  wire [31:0]      _leftShiftWordModule_io_revSllw;
  wire [64:0]      _subModule_io_sub;
  wire [63:0]      _addModule_io_add;
  wire [31:0]      _addModule_io_addw;
  wire [63:0]      _rightShiftModule_io_srl;
  wire [63:0]      _rightShiftModule_io_sra;
  wire [63:0]      _rightShiftModule_io_revSrl;
  wire [63:0]      _leftShiftModule_io_sll;
  wire [63:0]      _leftShiftModule_io_revSll;
  wire [5:0]       _revShamt_T_2 = 6'(~(io_src_1[5:0]) + 6'h1);
  wire [63:0]      bitShift = 64'h1 << io_src_1[5:0];
  wire [3:0][63:0] _GEN =
    {{{{48{_addModule_io_addw[15]}}, _addModule_io_addw[15:0]}},
     {{48'h0, _addModule_io_addw[15:0]}},
     {{56'h0, _addModule_io_addw[7:0]}},
     {{63'h0, _addModule_io_addw[0]}}};
  wire [3:0][63:0] _GEN_0 =
    {{{32'h0, io_src_0[63:32]}},
     {{31'h0, io_src_0[63:31]}},
     {{30'h0, io_src_0[63:30]}},
     {{29'h0, io_src_0[63:29]}}};
  wire [3:0][63:0] _GEN_1 =
    {{{{{28{io_func[0]}}, 32'hFFFFFFFF} & io_src_0[59:0], 4'h0}},
     {{{{29{io_func[0]}}, 32'hFFFFFFFF} & io_src_0[60:0], 3'h0}},
     {{{{30{io_func[0]}}, 32'hFFFFFFFF} & io_src_0[61:0], 2'h0}},
     {{{{31{io_func[0]}}, 32'hFFFFFFFF} & io_src_0[62:0], 1'h0}}};
  wire             slt = io_src_0[63] ^ io_src_1[63] ^ ~(_subModule_io_sub[64]);
  wire [63:0]      logicSrc2 = {64{~(io_func[5]) & io_func[0]}} ^ io_src_1;
  LeftShiftModule leftShiftModule (
    .io_shamt    (io_src_1[5:0]),
    .io_revShamt (_revShamt_T_2),
    .io_sllSrc   ({{32{io_func[0]}}, 32'hFFFFFFFF} & io_src_0),
    .io_sll      (_leftShiftModule_io_sll),
    .io_revSll   (_leftShiftModule_io_revSll)
  );
  RightShiftModule rightShiftModule (
    .io_shamt    (io_src_1[5:0]),
    .io_revShamt (_revShamt_T_2),
    .io_srlSrc   (io_src_0),
    .io_sraSrc   (io_src_0),
    .io_srl      (_rightShiftModule_io_srl),
    .io_sra      (_rightShiftModule_io_sra),
    .io_revSrl   (_rightShiftModule_io_revSrl)
  );
  AddModule addModule (
    .io_src_0
      (io_func[3]
         ? _GEN_1[io_func[2:1]]
         : io_func[2]
             ? _GEN_0[io_func[1:0]]
             : io_func[1]
                 ? (io_func[0]
                      ? {{52{io_src_1[11]}}, io_src_1[11:0]}
                      : {63'h0, io_src_0[0]})
                 : {{32{io_func[0]}}, 32'hFFFFFFFF} & io_src_0),
    .io_src_1 (io_func[3:0] == 4'h3 ? {io_src_1[63:12], 12'h0} : io_src_1),
    .io_srcw
      (~(io_func[2]) & io_func[0]
         ? (io_func[1] ? {{20{io_src_1[11]}}, io_src_1[11:0]} : {31'h0, io_src_0[0]})
         : io_src_0[31:0]),
    .io_add   (_addModule_io_add),
    .io_addw  (_addModule_io_addw)
  );
  SubModule subModule (
    .io_src_0 (io_src_0),
    .io_src_1 (io_src_1),
    .io_sub   (_subModule_io_sub)
  );
  LeftShiftWordModule leftShiftWordModule (
    .io_shamt    (io_src_1[4:0]),
    .io_revShamt (_revShamt_T_2[4:0]),
    .io_sllSrc   (io_src_0[31:0]),
    .io_sllw     (_leftShiftWordModule_io_sllw),
    .io_revSllw  (_leftShiftWordModule_io_revSllw)
  );
  RightShiftWordModule rightShiftWordModule (
    .io_shamt    (io_src_1[4:0]),
    .io_revShamt (_revShamt_T_2[4:0]),
    .io_srlSrc   (io_src_0[31:0]),
    .io_sraSrc   (io_src_0[31:0]),
    .io_srlw     (_rightShiftWordModule_io_srlw),
    .io_sraw     (_rightShiftWordModule_io_sraw),
    .io_revSrlw  (_rightShiftWordModule_io_revSrlw)
  );
  ShiftResultSelect shiftResSel (
    .io_func     (io_func[3:0]),
    .io_sll      (_leftShiftModule_io_sll),
    .io_srl      (_rightShiftModule_io_srl),
    .io_sra      (_rightShiftModule_io_sra),
    .io_rol      (_rightShiftModule_io_revSrl | _leftShiftModule_io_sll),
    .io_ror      (_rightShiftModule_io_srl | _leftShiftModule_io_revSll),
    .io_bclr     (io_src_0 & ~bitShift),
    .io_bset     (io_src_0 | bitShift),
    .io_binv     (io_src_0 ^ bitShift),
    .io_bext     ({63'h0, _rightShiftModule_io_srl[0]}),
    .io_shiftRes (_shiftResSel_io_shiftRes)
  );
  MiscResultSelect miscResSel (
    .io_func    (io_func[5:0]),
    .io_and     (io_src_0 & logicSrc2),
    .io_or      (io_src_0 | logicSrc2),
    .io_xor     (io_src_0 ^ logicSrc2),
    .io_orcb
      ({{8{|(io_src_0[63:56])}},
        {8{|(io_src_0[55:48])}},
        {8{|(io_src_0[47:40])}},
        {8{|(io_src_0[39:32])}},
        {8{|(io_src_0[31:24])}},
        {8{|(io_src_0[23:16])}},
        {8{|(io_src_0[15:8])}},
        {8{|(io_src_0[7:0])}}}),
    .io_orh48   ({io_src_0[63:8], 8'h0} | io_src_1),
    .io_sextb   ({{56{io_src_0[7]}}, io_src_0[7:0]}),
    .io_packh   ({48'h0, io_src_1[7:0], io_src_0[7:0]}),
    .io_sexth   ({{48{io_src_0[15]}}, io_src_0[15:0]}),
    .io_packw   ({{32{io_src_1[15]}}, io_src_1[15:0], io_src_0[15:0]}),
    .io_revb
      ({io_src_0[56],
        io_src_0[57],
        io_src_0[58],
        io_src_0[59],
        io_src_0[60],
        io_src_0[61],
        io_src_0[62],
        io_src_0[63],
        io_src_0[48],
        io_src_0[49],
        io_src_0[50],
        io_src_0[51],
        io_src_0[52],
        io_src_0[53],
        io_src_0[54],
        io_src_0[55],
        io_src_0[40],
        io_src_0[41],
        io_src_0[42],
        io_src_0[43],
        io_src_0[44],
        io_src_0[45],
        io_src_0[46],
        io_src_0[47],
        io_src_0[32],
        io_src_0[33],
        io_src_0[34],
        io_src_0[35],
        io_src_0[36],
        io_src_0[37],
        io_src_0[38],
        io_src_0[39],
        io_src_0[24],
        io_src_0[25],
        io_src_0[26],
        io_src_0[27],
        io_src_0[28],
        io_src_0[29],
        io_src_0[30],
        io_src_0[31],
        io_src_0[16],
        io_src_0[17],
        io_src_0[18],
        io_src_0[19],
        io_src_0[20],
        io_src_0[21],
        io_src_0[22],
        io_src_0[23],
        io_src_0[8],
        io_src_0[9],
        io_src_0[10],
        io_src_0[11],
        io_src_0[12],
        io_src_0[13],
        io_src_0[14],
        io_src_0[15],
        io_src_0[0],
        io_src_0[1],
        io_src_0[2],
        io_src_0[3],
        io_src_0[4],
        io_src_0[5],
        io_src_0[6],
        io_src_0[7]}),
    .io_rev8
      ({io_src_0[7:0],
        io_src_0[15:8],
        io_src_0[23:16],
        io_src_0[31:24],
        io_src_0[39:32],
        io_src_0[47:40],
        io_src_0[55:48],
        io_src_0[63:56]}),
    .io_pack    ({io_src_1[31:0], io_src_0[31:0]}),
    .io_src     (io_src_0),
    .io_miscRes (_miscResSel_io_miscRes)
  );
  ConditionalZeroModule condModule (
    .io_condition (io_src_1),
    .io_value     (io_src_0),
    .io_isNez     (io_func[1]),
    .io_condRes   (_condModule_io_condRes)
  );
  WordResultSelect wordResSel (
    .io_func    (io_func),
    .io_sllw    (_leftShiftWordModule_io_sllw),
    .io_srlw    (_rightShiftWordModule_io_srlw),
    .io_sraw    (_rightShiftWordModule_io_sraw),
    .io_rolw    (_rightShiftWordModule_io_revSrlw | _leftShiftWordModule_io_sllw),
    .io_rorw    (_rightShiftWordModule_io_srlw | _leftShiftWordModule_io_revSllw),
    .io_addw    (io_func[2] ? _GEN[io_func[1:0]][31:0] : _addModule_io_addw),
    .io_subw    (_subModule_io_sub[31:0]),
    .io_wordRes (_wordResSel_io_wordRes)
  );
  AluResSel aluResSel (
    .io_func       (io_func[6:4]),
    .io_addRes     (_addModule_io_add),
    .io_shiftRes   (_shiftResSel_io_shiftRes),
    .io_miscRes    (_miscResSel_io_miscRes),
    .io_compareRes
      (io_func[2]
         ? ((io_func[1] ? slt ^ io_func[0] : ~(_subModule_io_sub[64]) ^ io_func[0])
              ? io_src_1
              : io_src_0)
         : io_func[1]
             ? {63'h0, slt}
             : io_func[0] ? {63'h0, ~(_subModule_io_sub[64])} : _subModule_io_sub[63:0]),
    .io_wordRes    (_wordResSel_io_wordRes),
    .io_condRes    (_condModule_io_condRes),
    .io_aluRes     (io_result)
  );
endmodule

