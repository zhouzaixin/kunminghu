// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SstcInterruptGen(
  input         clock,
  input         reset,
  input         i_stime_valid,
  input  [63:0] i_stime_bits,
  input         i_vstime_valid,
  input  [63:0] i_vstime_bits,
  input         i_stimecmp_wen,
  input  [63:0] i_stimecmp_rdata,
  input         i_vstimecmp_wen,
  input  [63:0] i_vstimecmp_rdata,
  input         i_htimedeltaWen,
  input         i_menvcfg_wen,
  input         i_menvcfg_STCE,
  input         i_henvcfg_wen,
  input         i_henvcfg_STCE,
  output        o_STIP,
  output        o_VSTIP
);

  reg o_STIP_r;
  reg o_VSTIP_r;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      o_STIP_r <= 1'h0;
      o_VSTIP_r <= 1'h0;
    end
    else begin
      if (i_stime_valid | i_stimecmp_wen | i_menvcfg_wen)
        o_STIP_r <= i_stime_bits >= i_stimecmp_rdata & i_menvcfg_STCE;
      if (i_vstime_valid | i_vstimecmp_wen | i_htimedeltaWen | i_menvcfg_wen
          | i_henvcfg_wen)
        o_VSTIP_r <= i_vstime_bits >= i_vstimecmp_rdata & i_henvcfg_STCE;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        o_STIP_r = _RANDOM[/*Zero width*/ 1'b0][0];
        o_VSTIP_r = _RANDOM[/*Zero width*/ 1'b0][1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        o_STIP_r = 1'h0;
        o_VSTIP_r = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign o_STIP = o_STIP_r;
  assign o_VSTIP = o_VSTIP_r;
endmodule

