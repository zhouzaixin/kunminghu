// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ActiveGenerationTable(
  input         clock,
  input         reset,
  input         io_agt_en,
  input         io_s0_lookup_valid,
  input  [10:0] io_s0_lookup_bits_region_tag,
  input  [10:0] io_s0_lookup_bits_region_p1_tag,
  input  [10:0] io_s0_lookup_bits_region_m1_tag,
  input  [3:0]  io_s0_lookup_bits_region_offset,
  input  [4:0]  io_s0_lookup_bits_pht_index,
  input  [12:0] io_s0_lookup_bits_pht_tag,
  input         io_s0_lookup_bits_allow_cross_region_p1,
  input         io_s0_lookup_bits_allow_cross_region_m1,
  input  [39:0] io_s0_lookup_bits_region_paddr,
  input  [39:0] io_s0_lookup_bits_region_vaddr,
  input         io_s0_dcache_evict_valid,
  input  [49:0] io_s0_dcache_evict_bits_vaddr,
  output        io_s2_pht_lookup_valid,
  output [4:0]  io_s2_pht_lookup_bits_pht_index,
  output [12:0] io_s2_pht_lookup_bits_pht_tag,
  output [39:0] io_s2_pht_lookup_bits_region_paddr,
  output [39:0] io_s2_pht_lookup_bits_region_vaddr,
  output [3:0]  io_s2_pht_lookup_bits_region_offset,
  output        io_s2_evict_valid,
  output [4:0]  io_s2_evict_bits_pht_index,
  output [12:0] io_s2_evict_bits_pht_tag,
  output [15:0] io_s2_evict_bits_region_bits,
  output [15:0] io_s2_evict_bits_region_bit_single,
  output [3:0]  io_s2_evict_bits_region_offset,
  output [3:0]  io_s2_evict_bits_access_cnt,
  output        io_s2_evict_bits_decr_mode,
  output        io_s2_evict_bits_single_update,
  output        io_s2_evict_bits_has_been_signal_updated,
  input  [3:0]  io_act_threshold,
  input  [5:0]  io_act_stride
);

  wire [15:0] s1_replace_mask_w;
  wire        _io_s0_dcache_evict_ready_T_1;
  wire        _io_s0_dcache_evict_ready_T;
  reg  [4:0]  entries_0_pht_index;
  reg  [12:0] entries_0_pht_tag;
  reg  [15:0] entries_0_region_bits;
  reg  [15:0] entries_0_region_bit_single;
  reg  [10:0] entries_0_region_tag;
  reg  [3:0]  entries_0_region_offset;
  reg  [3:0]  entries_0_access_cnt;
  reg         entries_0_decr_mode;
  reg         entries_0_has_been_signal_updated;
  reg  [4:0]  entries_1_pht_index;
  reg  [12:0] entries_1_pht_tag;
  reg  [15:0] entries_1_region_bits;
  reg  [15:0] entries_1_region_bit_single;
  reg  [10:0] entries_1_region_tag;
  reg  [3:0]  entries_1_region_offset;
  reg  [3:0]  entries_1_access_cnt;
  reg         entries_1_decr_mode;
  reg         entries_1_has_been_signal_updated;
  reg  [4:0]  entries_2_pht_index;
  reg  [12:0] entries_2_pht_tag;
  reg  [15:0] entries_2_region_bits;
  reg  [15:0] entries_2_region_bit_single;
  reg  [10:0] entries_2_region_tag;
  reg  [3:0]  entries_2_region_offset;
  reg  [3:0]  entries_2_access_cnt;
  reg         entries_2_decr_mode;
  reg         entries_2_has_been_signal_updated;
  reg  [4:0]  entries_3_pht_index;
  reg  [12:0] entries_3_pht_tag;
  reg  [15:0] entries_3_region_bits;
  reg  [15:0] entries_3_region_bit_single;
  reg  [10:0] entries_3_region_tag;
  reg  [3:0]  entries_3_region_offset;
  reg  [3:0]  entries_3_access_cnt;
  reg         entries_3_decr_mode;
  reg         entries_3_has_been_signal_updated;
  reg  [4:0]  entries_4_pht_index;
  reg  [12:0] entries_4_pht_tag;
  reg  [15:0] entries_4_region_bits;
  reg  [15:0] entries_4_region_bit_single;
  reg  [10:0] entries_4_region_tag;
  reg  [3:0]  entries_4_region_offset;
  reg  [3:0]  entries_4_access_cnt;
  reg         entries_4_decr_mode;
  reg         entries_4_has_been_signal_updated;
  reg  [4:0]  entries_5_pht_index;
  reg  [12:0] entries_5_pht_tag;
  reg  [15:0] entries_5_region_bits;
  reg  [15:0] entries_5_region_bit_single;
  reg  [10:0] entries_5_region_tag;
  reg  [3:0]  entries_5_region_offset;
  reg  [3:0]  entries_5_access_cnt;
  reg         entries_5_decr_mode;
  reg         entries_5_has_been_signal_updated;
  reg  [4:0]  entries_6_pht_index;
  reg  [12:0] entries_6_pht_tag;
  reg  [15:0] entries_6_region_bits;
  reg  [15:0] entries_6_region_bit_single;
  reg  [10:0] entries_6_region_tag;
  reg  [3:0]  entries_6_region_offset;
  reg  [3:0]  entries_6_access_cnt;
  reg         entries_6_decr_mode;
  reg         entries_6_has_been_signal_updated;
  reg  [4:0]  entries_7_pht_index;
  reg  [12:0] entries_7_pht_tag;
  reg  [15:0] entries_7_region_bits;
  reg  [15:0] entries_7_region_bit_single;
  reg  [10:0] entries_7_region_tag;
  reg  [3:0]  entries_7_region_offset;
  reg  [3:0]  entries_7_access_cnt;
  reg         entries_7_decr_mode;
  reg         entries_7_has_been_signal_updated;
  reg  [4:0]  entries_8_pht_index;
  reg  [12:0] entries_8_pht_tag;
  reg  [15:0] entries_8_region_bits;
  reg  [15:0] entries_8_region_bit_single;
  reg  [10:0] entries_8_region_tag;
  reg  [3:0]  entries_8_region_offset;
  reg  [3:0]  entries_8_access_cnt;
  reg         entries_8_decr_mode;
  reg         entries_8_has_been_signal_updated;
  reg  [4:0]  entries_9_pht_index;
  reg  [12:0] entries_9_pht_tag;
  reg  [15:0] entries_9_region_bits;
  reg  [15:0] entries_9_region_bit_single;
  reg  [10:0] entries_9_region_tag;
  reg  [3:0]  entries_9_region_offset;
  reg  [3:0]  entries_9_access_cnt;
  reg         entries_9_decr_mode;
  reg         entries_9_has_been_signal_updated;
  reg  [4:0]  entries_10_pht_index;
  reg  [12:0] entries_10_pht_tag;
  reg  [15:0] entries_10_region_bits;
  reg  [15:0] entries_10_region_bit_single;
  reg  [10:0] entries_10_region_tag;
  reg  [3:0]  entries_10_region_offset;
  reg  [3:0]  entries_10_access_cnt;
  reg         entries_10_decr_mode;
  reg         entries_10_has_been_signal_updated;
  reg  [4:0]  entries_11_pht_index;
  reg  [12:0] entries_11_pht_tag;
  reg  [15:0] entries_11_region_bits;
  reg  [15:0] entries_11_region_bit_single;
  reg  [10:0] entries_11_region_tag;
  reg  [3:0]  entries_11_region_offset;
  reg  [3:0]  entries_11_access_cnt;
  reg         entries_11_decr_mode;
  reg         entries_11_has_been_signal_updated;
  reg  [4:0]  entries_12_pht_index;
  reg  [12:0] entries_12_pht_tag;
  reg  [15:0] entries_12_region_bits;
  reg  [15:0] entries_12_region_bit_single;
  reg  [10:0] entries_12_region_tag;
  reg  [3:0]  entries_12_region_offset;
  reg  [3:0]  entries_12_access_cnt;
  reg         entries_12_decr_mode;
  reg         entries_12_has_been_signal_updated;
  reg  [4:0]  entries_13_pht_index;
  reg  [12:0] entries_13_pht_tag;
  reg  [15:0] entries_13_region_bits;
  reg  [15:0] entries_13_region_bit_single;
  reg  [10:0] entries_13_region_tag;
  reg  [3:0]  entries_13_region_offset;
  reg  [3:0]  entries_13_access_cnt;
  reg         entries_13_decr_mode;
  reg         entries_13_has_been_signal_updated;
  reg  [4:0]  entries_14_pht_index;
  reg  [12:0] entries_14_pht_tag;
  reg  [15:0] entries_14_region_bits;
  reg  [15:0] entries_14_region_bit_single;
  reg  [10:0] entries_14_region_tag;
  reg  [3:0]  entries_14_region_offset;
  reg  [3:0]  entries_14_access_cnt;
  reg         entries_14_decr_mode;
  reg         entries_14_has_been_signal_updated;
  reg  [4:0]  entries_15_pht_index;
  reg  [12:0] entries_15_pht_tag;
  reg  [15:0] entries_15_region_bits;
  reg  [15:0] entries_15_region_bit_single;
  reg  [10:0] entries_15_region_tag;
  reg  [3:0]  entries_15_region_offset;
  reg  [3:0]  entries_15_access_cnt;
  reg         entries_15_decr_mode;
  reg         entries_15_has_been_signal_updated;
  reg         valids_0;
  reg         valids_1;
  reg         valids_2;
  reg         valids_3;
  reg         valids_4;
  reg         valids_5;
  reg         valids_6;
  reg         valids_7;
  reg         valids_8;
  reg         valids_9;
  reg         valids_10;
  reg         valids_11;
  reg         valids_12;
  reg         valids_13;
  reg         valids_14;
  reg         valids_15;
  reg  [14:0] state_reg;
  wire [10:0] s0_dcache_evict_tag =
    {io_s0_dcache_evict_bits_vaddr[20:16] ^ io_s0_dcache_evict_bits_vaddr[25:21]
       ^ io_s0_dcache_evict_bits_vaddr[30:26],
     io_s0_dcache_evict_bits_vaddr[15:10]};
  reg  [10:0] prev_lookup_region_tag;
  reg         prev_lookup_valid_last_REG;
  wire        region_match_vec_s0_0 =
    valids_0 & entries_0_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_1 =
    valids_1 & entries_1_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_2 =
    valids_2 & entries_2_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_3 =
    valids_3 & entries_3_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_4 =
    valids_4 & entries_4_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_5 =
    valids_5 & entries_5_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_6 =
    valids_6 & entries_6_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_7 =
    valids_7 & entries_7_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_8 =
    valids_8 & entries_8_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_9 =
    valids_9 & entries_9_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_10 =
    valids_10 & entries_10_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_11 =
    valids_11 & entries_11_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_12 =
    valids_12 & entries_12_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_13 =
    valids_13 & entries_13_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_14 =
    valids_14 & entries_14_region_tag == io_s0_lookup_bits_region_tag;
  wire        region_match_vec_s0_15 =
    valids_15 & entries_15_region_tag == io_s0_lookup_bits_region_tag;
  wire [15:0] _any_region_match_T =
    {region_match_vec_s0_0,
     region_match_vec_s0_1,
     region_match_vec_s0_2,
     region_match_vec_s0_3,
     region_match_vec_s0_4,
     region_match_vec_s0_5,
     region_match_vec_s0_6,
     region_match_vec_s0_7,
     region_match_vec_s0_8,
     region_match_vec_s0_9,
     region_match_vec_s0_10,
     region_match_vec_s0_11,
     region_match_vec_s0_12,
     region_match_vec_s0_13,
     region_match_vec_s0_14,
     region_match_vec_s0_15};
  wire        region_match_vec_dcache_evict_s0_0 =
    valids_0 & entries_0_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_1 =
    valids_1 & entries_1_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_2 =
    valids_2 & entries_2_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_3 =
    valids_3 & entries_3_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_4 =
    valids_4 & entries_4_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_5 =
    valids_5 & entries_5_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_6 =
    valids_6 & entries_6_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_7 =
    valids_7 & entries_7_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_8 =
    valids_8 & entries_8_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_9 =
    valids_9 & entries_9_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_10 =
    valids_10 & entries_10_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_11 =
    valids_11 & entries_11_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_12 =
    valids_12 & entries_12_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_13 =
    valids_13 & entries_13_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_14 =
    valids_14 & entries_14_region_tag == s0_dcache_evict_tag;
  wire        region_match_vec_dcache_evict_s0_15 =
    valids_15 & entries_15_region_tag == s0_dcache_evict_tag;
  wire        s0_do_dcache_evict =
    _io_s0_dcache_evict_ready_T & _io_s0_dcache_evict_ready_T_1 & io_s0_dcache_evict_valid
    & (|{region_match_vec_dcache_evict_s0_0,
         region_match_vec_dcache_evict_s0_1,
         region_match_vec_dcache_evict_s0_2,
         region_match_vec_dcache_evict_s0_3,
         region_match_vec_dcache_evict_s0_4,
         region_match_vec_dcache_evict_s0_5,
         region_match_vec_dcache_evict_s0_6,
         region_match_vec_dcache_evict_s0_7,
         region_match_vec_dcache_evict_s0_8,
         region_match_vec_dcache_evict_s0_9,
         region_match_vec_dcache_evict_s0_10,
         region_match_vec_dcache_evict_s0_11,
         region_match_vec_dcache_evict_s0_12,
         region_match_vec_dcache_evict_s0_13,
         region_match_vec_dcache_evict_s0_14,
         region_match_vec_dcache_evict_s0_15});
  assign _io_s0_dcache_evict_ready_T = ~io_s0_lookup_valid;
  assign _io_s0_dcache_evict_ready_T_1 =
    ({region_match_vec_dcache_evict_s0_15,
      region_match_vec_dcache_evict_s0_14,
      region_match_vec_dcache_evict_s0_13,
      region_match_vec_dcache_evict_s0_12,
      region_match_vec_dcache_evict_s0_11,
      region_match_vec_dcache_evict_s0_10,
      region_match_vec_dcache_evict_s0_9,
      region_match_vec_dcache_evict_s0_8,
      region_match_vec_dcache_evict_s0_7,
      region_match_vec_dcache_evict_s0_6,
      region_match_vec_dcache_evict_s0_5,
      region_match_vec_dcache_evict_s0_4,
      region_match_vec_dcache_evict_s0_3,
      region_match_vec_dcache_evict_s0_2,
      region_match_vec_dcache_evict_s0_1,
      region_match_vec_dcache_evict_s0_0} & s1_replace_mask_w) == 16'h0;
  wire [2:0]  _s0_replace_way_T_20 =
    state_reg[14]
      ? {state_reg[13],
         state_reg[13]
           ? {state_reg[12], state_reg[12] ? state_reg[11] : state_reg[10]}
           : {state_reg[9], state_reg[9] ? state_reg[8] : state_reg[7]}}
      : {state_reg[6],
         state_reg[6]
           ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]}
           : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}};
  reg         s1_update_last_REG;
  reg         s1_update_mask_0;
  reg         s1_update_mask_1;
  reg         s1_update_mask_2;
  reg         s1_update_mask_3;
  reg         s1_update_mask_4;
  reg         s1_update_mask_5;
  reg         s1_update_mask_6;
  reg         s1_update_mask_7;
  reg         s1_update_mask_8;
  reg         s1_update_mask_9;
  reg         s1_update_mask_10;
  reg         s1_update_mask_11;
  reg         s1_update_mask_12;
  reg         s1_update_mask_13;
  reg         s1_update_mask_14;
  reg         s1_update_mask_15;
  reg  [4:0]  s1_agt_entry_pht_index;
  reg  [12:0] s1_agt_entry_pht_tag;
  reg  [15:0] s1_agt_entry_region_bits;
  reg  [15:0] s1_agt_entry_region_bit_single;
  reg  [10:0] s1_agt_entry_region_tag;
  reg  [3:0]  s1_agt_entry_region_offset;
  reg         s1_agt_entry_decr_mode;
  reg         s1_cross_region_match;
  reg         s1_alloc_last_REG;
  reg         s1_do_dcache_evict_last_REG;
  reg  [15:0] s1_replace_mask_r;
  reg  [15:0] s1_replace_mask_r_1;
  wire [15:0] s1_replace_mask =
    s1_do_dcache_evict_last_REG ? s1_replace_mask_r : s1_replace_mask_r_1;
  wire        _s2_real_update_T = s1_alloc_last_REG | s1_do_dcache_evict_last_REG;
  assign s1_replace_mask_w = s1_replace_mask & {16{_s2_real_update_T}};
  wire        s1_evict_valid =
    s1_replace_mask[0] & valids_0 | s1_replace_mask[1] & valids_1 | s1_replace_mask[2]
    & valids_2 | s1_replace_mask[3] & valids_3 | s1_replace_mask[4] & valids_4
    | s1_replace_mask[5] & valids_5 | s1_replace_mask[6] & valids_6 | s1_replace_mask[7]
    & valids_7 | s1_replace_mask[8] & valids_8 | s1_replace_mask[9] & valids_9
    | s1_replace_mask[10] & valids_10 | s1_replace_mask[11] & valids_11
    | s1_replace_mask[12] & valids_12 | s1_replace_mask[13] & valids_13
    | s1_replace_mask[14] & valids_14 | s1_replace_mask[15] & valids_15;
  reg         s1_pf_gen_match_vec_0;
  reg         s1_pf_gen_match_vec_1;
  reg         s1_pf_gen_match_vec_2;
  reg         s1_pf_gen_match_vec_3;
  reg         s1_pf_gen_match_vec_4;
  reg         s1_pf_gen_match_vec_5;
  reg         s1_pf_gen_match_vec_6;
  reg         s1_pf_gen_match_vec_7;
  reg         s1_pf_gen_match_vec_8;
  reg         s1_pf_gen_match_vec_9;
  reg         s1_pf_gen_match_vec_10;
  reg         s1_pf_gen_match_vec_11;
  reg         s1_pf_gen_match_vec_12;
  reg         s1_pf_gen_match_vec_13;
  reg         s1_pf_gen_match_vec_14;
  reg         s1_pf_gen_match_vec_15;
  reg  [39:0] s1_region_paddr;
  reg  [39:0] s1_region_vaddr;
  reg  [3:0]  s1_region_offset;
  wire        alloc = s1_replace_mask[0] & s1_alloc_last_REG;
  wire        alloc_1 = s1_replace_mask[1] & s1_alloc_last_REG;
  wire        alloc_2 = s1_replace_mask[2] & s1_alloc_last_REG;
  wire        alloc_3 = s1_replace_mask[3] & s1_alloc_last_REG;
  wire        alloc_4 = s1_replace_mask[4] & s1_alloc_last_REG;
  wire        alloc_5 = s1_replace_mask[5] & s1_alloc_last_REG;
  wire        alloc_6 = s1_replace_mask[6] & s1_alloc_last_REG;
  wire        alloc_7 = s1_replace_mask[7] & s1_alloc_last_REG;
  wire        alloc_8 = s1_replace_mask[8] & s1_alloc_last_REG;
  wire        alloc_9 = s1_replace_mask[9] & s1_alloc_last_REG;
  wire        alloc_10 = s1_replace_mask[10] & s1_alloc_last_REG;
  wire        alloc_11 = s1_replace_mask[11] & s1_alloc_last_REG;
  wire        alloc_12 = s1_replace_mask[12] & s1_alloc_last_REG;
  wire        alloc_13 = s1_replace_mask[13] & s1_alloc_last_REG;
  wire        alloc_14 = s1_replace_mask[14] & s1_alloc_last_REG;
  wire        alloc_15 = s1_replace_mask[15] & s1_alloc_last_REG;
  wire        _s1_hited_entry_decr_T = s1_update_mask_0 & entries_0_decr_mode;
  wire        _s1_hited_entry_decr_T_1 = s1_update_mask_1 & entries_1_decr_mode;
  wire        _s1_hited_entry_decr_T_2 = s1_update_mask_2 & entries_2_decr_mode;
  wire        _s1_hited_entry_decr_T_3 = s1_update_mask_3 & entries_3_decr_mode;
  wire        _s1_hited_entry_decr_T_4 = s1_update_mask_4 & entries_4_decr_mode;
  wire        _s1_hited_entry_decr_T_5 = s1_update_mask_5 & entries_5_decr_mode;
  wire        _s1_hited_entry_decr_T_6 = s1_update_mask_6 & entries_6_decr_mode;
  wire        _s1_hited_entry_decr_T_7 = s1_update_mask_7 & entries_7_decr_mode;
  wire        _s1_hited_entry_decr_T_8 = s1_update_mask_8 & entries_8_decr_mode;
  wire        _s1_hited_entry_decr_T_9 = s1_update_mask_9 & entries_9_decr_mode;
  wire        _s1_hited_entry_decr_T_10 = s1_update_mask_10 & entries_10_decr_mode;
  wire        _s1_hited_entry_decr_T_11 = s1_update_mask_11 & entries_11_decr_mode;
  wire        _s1_hited_entry_decr_T_12 = s1_update_mask_12 & entries_12_decr_mode;
  wire        _s1_hited_entry_decr_T_13 = s1_update_mask_13 & entries_13_decr_mode;
  wire        _s1_hited_entry_decr_T_14 = s1_update_mask_14 & entries_14_decr_mode;
  wire        _s1_hited_entry_decr_T_15 = s1_update_mask_15 & entries_15_decr_mode;
  wire [15:0] _GEN = {1'h0, s1_region_vaddr[10:0], s1_region_offset};
  wire [15:0] _GEN_0 = {10'h0, io_act_stride};
  wire [15:0] _s1_pf_gen_vaddr_inc_T_2 = 16'(_GEN + _GEN_0);
  wire [15:0] _s1_pf_gen_vaddr_dec_T_2 = 16'(_GEN - _GEN_0);
  wire        s1_pht_lookup_valid =
    ~(prev_lookup_valid_last_REG
      & (s1_alloc_last_REG & s1_cross_region_match | s1_update_last_REG)
      & ((s1_update_last_REG
            ? _s1_hited_entry_decr_T | _s1_hited_entry_decr_T_1 | _s1_hited_entry_decr_T_2
              | _s1_hited_entry_decr_T_3 | _s1_hited_entry_decr_T_4
              | _s1_hited_entry_decr_T_5 | _s1_hited_entry_decr_T_6
              | _s1_hited_entry_decr_T_7 | _s1_hited_entry_decr_T_8
              | _s1_hited_entry_decr_T_9 | _s1_hited_entry_decr_T_10
              | _s1_hited_entry_decr_T_11 | _s1_hited_entry_decr_T_12
              | _s1_hited_entry_decr_T_13 | _s1_hited_entry_decr_T_14
              | _s1_hited_entry_decr_T_15
            : s1_agt_entry_decr_mode)
           ? ~(_s1_pf_gen_vaddr_dec_T_2[15])
           : ~(_s1_pf_gen_vaddr_inc_T_2[15]))
      & ((s1_pf_gen_match_vec_0 ? entries_0_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_1 ? entries_1_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_2 ? entries_2_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_3 ? entries_3_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_4 ? entries_4_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_5 ? entries_5_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_6 ? entries_6_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_7 ? entries_7_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_8 ? entries_8_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_9 ? entries_9_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_10 ? entries_10_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_11 ? entries_11_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_12 ? entries_12_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_13 ? entries_13_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_14 ? entries_14_access_cnt : 4'h0)
         | (s1_pf_gen_match_vec_15 ? entries_15_access_cnt : 4'h0)) > io_act_threshold
      & io_agt_en) & prev_lookup_valid_last_REG;
  reg  [4:0]  s2_evict_entry_pht_index;
  reg  [12:0] s2_evict_entry_pht_tag;
  reg  [15:0] s2_evict_entry_region_bits;
  reg  [15:0] s2_evict_entry_region_bit_single;
  reg  [3:0]  s2_evict_entry_region_offset;
  reg  [3:0]  s2_evict_entry_access_cnt;
  reg         s2_evict_entry_decr_mode;
  reg         s2_evict_entry_has_been_signal_updated;
  reg         s2_evict_valid_last_REG;
  reg         s2_update;
  reg         s2_real_update;
  reg         s2_pht_lookup_valid_last_REG;
  reg  [4:0]  s2_pht_lookup_pht_index;
  reg  [12:0] s2_pht_lookup_pht_tag;
  reg  [39:0] s2_pht_lookup_region_paddr;
  reg  [39:0] s2_pht_lookup_region_vaddr;
  reg  [3:0]  s2_pht_lookup_region_offset;
  wire        region_p1_match_vec_s0_0 =
    valids_0 & entries_0_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_1 =
    valids_1 & entries_1_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_2 =
    valids_2 & entries_2_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_3 =
    valids_3 & entries_3_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_4 =
    valids_4 & entries_4_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_5 =
    valids_5 & entries_5_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_6 =
    valids_6 & entries_6_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_7 =
    valids_7 & entries_7_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_8 =
    valids_8 & entries_8_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_9 =
    valids_9 & entries_9_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_10 =
    valids_10 & entries_10_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_11 =
    valids_11 & entries_11_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_12 =
    valids_12 & entries_12_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_13 =
    valids_13 & entries_13_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_14 =
    valids_14 & entries_14_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_p1_match_vec_s0_15 =
    valids_15 & entries_15_region_tag == io_s0_lookup_bits_region_p1_tag;
  wire        region_m1_match_vec_s0_0 =
    valids_0 & entries_0_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_1 =
    valids_1 & entries_1_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_2 =
    valids_2 & entries_2_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_3 =
    valids_3 & entries_3_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_4 =
    valids_4 & entries_4_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_5 =
    valids_5 & entries_5_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_6 =
    valids_6 & entries_6_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_7 =
    valids_7 & entries_7_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_8 =
    valids_8 & entries_8_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_9 =
    valids_9 & entries_9_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_10 =
    valids_10 & entries_10_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_11 =
    valids_11 & entries_11_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_12 =
    valids_12 & entries_12_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_13 =
    valids_13 & entries_13_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_14 =
    valids_14 & entries_14_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        region_m1_match_vec_s0_15 =
    valids_15 & entries_15_region_tag == io_s0_lookup_bits_region_m1_tag;
  wire        any_region_p1_match =
    (|{region_p1_match_vec_s0_0,
       region_p1_match_vec_s0_1,
       region_p1_match_vec_s0_2,
       region_p1_match_vec_s0_3,
       region_p1_match_vec_s0_4,
       region_p1_match_vec_s0_5,
       region_p1_match_vec_s0_6,
       region_p1_match_vec_s0_7,
       region_p1_match_vec_s0_8,
       region_p1_match_vec_s0_9,
       region_p1_match_vec_s0_10,
       region_p1_match_vec_s0_11,
       region_p1_match_vec_s0_12,
       region_p1_match_vec_s0_13,
       region_p1_match_vec_s0_14,
       region_p1_match_vec_s0_15}) & io_s0_lookup_bits_allow_cross_region_p1;
  wire        any_region_m1_match =
    (|{region_m1_match_vec_s0_0,
       region_m1_match_vec_s0_1,
       region_m1_match_vec_s0_2,
       region_m1_match_vec_s0_3,
       region_m1_match_vec_s0_4,
       region_m1_match_vec_s0_5,
       region_m1_match_vec_s0_6,
       region_m1_match_vec_s0_7,
       region_m1_match_vec_s0_8,
       region_m1_match_vec_s0_9,
       region_m1_match_vec_s0_10,
       region_m1_match_vec_s0_11,
       region_m1_match_vec_s0_12,
       region_m1_match_vec_s0_13,
       region_m1_match_vec_s0_14,
       region_m1_match_vec_s0_15}) & io_s0_lookup_bits_allow_cross_region_m1;
  wire [15:0] s0_agt_entry_region_bits = 16'h1 << io_s0_lookup_bits_region_offset;
  wire        _s1_send_update_entry_T_1 = _s2_real_update_T & s1_evict_valid;
  wire        update = s1_update_mask_0 & s1_update_last_REG;
  wire        update_1 = s1_update_mask_1 & s1_update_last_REG;
  wire        update_2 = s1_update_mask_2 & s1_update_last_REG;
  wire        update_3 = s1_update_mask_3 & s1_update_last_REG;
  wire        update_4 = s1_update_mask_4 & s1_update_last_REG;
  wire        update_5 = s1_update_mask_5 & s1_update_last_REG;
  wire        update_6 = s1_update_mask_6 & s1_update_last_REG;
  wire        update_7 = s1_update_mask_7 & s1_update_last_REG;
  wire        update_8 = s1_update_mask_8 & s1_update_last_REG;
  wire        update_9 = s1_update_mask_9 & s1_update_last_REG;
  wire        update_10 = s1_update_mask_10 & s1_update_last_REG;
  wire        update_11 = s1_update_mask_11 & s1_update_last_REG;
  wire        update_12 = s1_update_mask_12 & s1_update_last_REG;
  wire        update_13 = s1_update_mask_13 & s1_update_last_REG;
  wire        update_14 = s1_update_mask_14 & s1_update_last_REG;
  wire        update_15 = s1_update_mask_15 & s1_update_last_REG;
  always @(posedge clock) begin
    if (alloc) begin
      entries_0_pht_index <= s1_agt_entry_pht_index;
      entries_0_pht_tag <= s1_agt_entry_pht_tag;
      entries_0_region_bits <= s1_agt_entry_region_bits;
      entries_0_region_tag <= s1_agt_entry_region_tag;
      entries_0_region_offset <= s1_agt_entry_region_offset;
      entries_0_access_cnt <= 4'h1;
      entries_0_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_0_region_bits <=
        {16{update}} & s1_agt_entry_region_bits | entries_0_region_bits;
      if (~update | (&entries_0_access_cnt)) begin
      end
      else
        entries_0_access_cnt <=
          4'(entries_0_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_0_region_bits)});
    end
    if (alloc | update)
      entries_0_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_0_has_been_signal_updated <=
      ~alloc
      & (update & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_0_has_been_signal_updated);
    if (alloc_1) begin
      entries_1_pht_index <= s1_agt_entry_pht_index;
      entries_1_pht_tag <= s1_agt_entry_pht_tag;
      entries_1_region_bits <= s1_agt_entry_region_bits;
      entries_1_region_tag <= s1_agt_entry_region_tag;
      entries_1_region_offset <= s1_agt_entry_region_offset;
      entries_1_access_cnt <= 4'h1;
      entries_1_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_1_region_bits <=
        {16{update_1}} & s1_agt_entry_region_bits | entries_1_region_bits;
      if (~update_1 | (&entries_1_access_cnt)) begin
      end
      else
        entries_1_access_cnt <=
          4'(entries_1_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_1_region_bits)});
    end
    if (alloc_1 | update_1)
      entries_1_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_1_has_been_signal_updated <=
      ~alloc_1
      & (update_1 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_1_has_been_signal_updated);
    if (alloc_2) begin
      entries_2_pht_index <= s1_agt_entry_pht_index;
      entries_2_pht_tag <= s1_agt_entry_pht_tag;
      entries_2_region_bits <= s1_agt_entry_region_bits;
      entries_2_region_tag <= s1_agt_entry_region_tag;
      entries_2_region_offset <= s1_agt_entry_region_offset;
      entries_2_access_cnt <= 4'h1;
      entries_2_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_2_region_bits <=
        {16{update_2}} & s1_agt_entry_region_bits | entries_2_region_bits;
      if (~update_2 | (&entries_2_access_cnt)) begin
      end
      else
        entries_2_access_cnt <=
          4'(entries_2_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_2_region_bits)});
    end
    if (alloc_2 | update_2)
      entries_2_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_2_has_been_signal_updated <=
      ~alloc_2
      & (update_2 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_2_has_been_signal_updated);
    if (alloc_3) begin
      entries_3_pht_index <= s1_agt_entry_pht_index;
      entries_3_pht_tag <= s1_agt_entry_pht_tag;
      entries_3_region_bits <= s1_agt_entry_region_bits;
      entries_3_region_tag <= s1_agt_entry_region_tag;
      entries_3_region_offset <= s1_agt_entry_region_offset;
      entries_3_access_cnt <= 4'h1;
      entries_3_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_3_region_bits <=
        {16{update_3}} & s1_agt_entry_region_bits | entries_3_region_bits;
      if (~update_3 | (&entries_3_access_cnt)) begin
      end
      else
        entries_3_access_cnt <=
          4'(entries_3_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_3_region_bits)});
    end
    if (alloc_3 | update_3)
      entries_3_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_3_has_been_signal_updated <=
      ~alloc_3
      & (update_3 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_3_has_been_signal_updated);
    if (alloc_4) begin
      entries_4_pht_index <= s1_agt_entry_pht_index;
      entries_4_pht_tag <= s1_agt_entry_pht_tag;
      entries_4_region_bits <= s1_agt_entry_region_bits;
      entries_4_region_tag <= s1_agt_entry_region_tag;
      entries_4_region_offset <= s1_agt_entry_region_offset;
      entries_4_access_cnt <= 4'h1;
      entries_4_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_4_region_bits <=
        {16{update_4}} & s1_agt_entry_region_bits | entries_4_region_bits;
      if (~update_4 | (&entries_4_access_cnt)) begin
      end
      else
        entries_4_access_cnt <=
          4'(entries_4_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_4_region_bits)});
    end
    if (alloc_4 | update_4)
      entries_4_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_4_has_been_signal_updated <=
      ~alloc_4
      & (update_4 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_4_has_been_signal_updated);
    if (alloc_5) begin
      entries_5_pht_index <= s1_agt_entry_pht_index;
      entries_5_pht_tag <= s1_agt_entry_pht_tag;
      entries_5_region_bits <= s1_agt_entry_region_bits;
      entries_5_region_tag <= s1_agt_entry_region_tag;
      entries_5_region_offset <= s1_agt_entry_region_offset;
      entries_5_access_cnt <= 4'h1;
      entries_5_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_5_region_bits <=
        {16{update_5}} & s1_agt_entry_region_bits | entries_5_region_bits;
      if (~update_5 | (&entries_5_access_cnt)) begin
      end
      else
        entries_5_access_cnt <=
          4'(entries_5_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_5_region_bits)});
    end
    if (alloc_5 | update_5)
      entries_5_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_5_has_been_signal_updated <=
      ~alloc_5
      & (update_5 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_5_has_been_signal_updated);
    if (alloc_6) begin
      entries_6_pht_index <= s1_agt_entry_pht_index;
      entries_6_pht_tag <= s1_agt_entry_pht_tag;
      entries_6_region_bits <= s1_agt_entry_region_bits;
      entries_6_region_tag <= s1_agt_entry_region_tag;
      entries_6_region_offset <= s1_agt_entry_region_offset;
      entries_6_access_cnt <= 4'h1;
      entries_6_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_6_region_bits <=
        {16{update_6}} & s1_agt_entry_region_bits | entries_6_region_bits;
      if (~update_6 | (&entries_6_access_cnt)) begin
      end
      else
        entries_6_access_cnt <=
          4'(entries_6_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_6_region_bits)});
    end
    if (alloc_6 | update_6)
      entries_6_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_6_has_been_signal_updated <=
      ~alloc_6
      & (update_6 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_6_has_been_signal_updated);
    if (alloc_7) begin
      entries_7_pht_index <= s1_agt_entry_pht_index;
      entries_7_pht_tag <= s1_agt_entry_pht_tag;
      entries_7_region_bits <= s1_agt_entry_region_bits;
      entries_7_region_tag <= s1_agt_entry_region_tag;
      entries_7_region_offset <= s1_agt_entry_region_offset;
      entries_7_access_cnt <= 4'h1;
      entries_7_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_7_region_bits <=
        {16{update_7}} & s1_agt_entry_region_bits | entries_7_region_bits;
      if (~update_7 | (&entries_7_access_cnt)) begin
      end
      else
        entries_7_access_cnt <=
          4'(entries_7_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_7_region_bits)});
    end
    if (alloc_7 | update_7)
      entries_7_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_7_has_been_signal_updated <=
      ~alloc_7
      & (update_7 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_7_has_been_signal_updated);
    if (alloc_8) begin
      entries_8_pht_index <= s1_agt_entry_pht_index;
      entries_8_pht_tag <= s1_agt_entry_pht_tag;
      entries_8_region_bits <= s1_agt_entry_region_bits;
      entries_8_region_tag <= s1_agt_entry_region_tag;
      entries_8_region_offset <= s1_agt_entry_region_offset;
      entries_8_access_cnt <= 4'h1;
      entries_8_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_8_region_bits <=
        {16{update_8}} & s1_agt_entry_region_bits | entries_8_region_bits;
      if (~update_8 | (&entries_8_access_cnt)) begin
      end
      else
        entries_8_access_cnt <=
          4'(entries_8_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_8_region_bits)});
    end
    if (alloc_8 | update_8)
      entries_8_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_8_has_been_signal_updated <=
      ~alloc_8
      & (update_8 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_8_has_been_signal_updated);
    if (alloc_9) begin
      entries_9_pht_index <= s1_agt_entry_pht_index;
      entries_9_pht_tag <= s1_agt_entry_pht_tag;
      entries_9_region_bits <= s1_agt_entry_region_bits;
      entries_9_region_tag <= s1_agt_entry_region_tag;
      entries_9_region_offset <= s1_agt_entry_region_offset;
      entries_9_access_cnt <= 4'h1;
      entries_9_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_9_region_bits <=
        {16{update_9}} & s1_agt_entry_region_bits | entries_9_region_bits;
      if (~update_9 | (&entries_9_access_cnt)) begin
      end
      else
        entries_9_access_cnt <=
          4'(entries_9_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_9_region_bits)});
    end
    if (alloc_9 | update_9)
      entries_9_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_9_has_been_signal_updated <=
      ~alloc_9
      & (update_9 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_9_has_been_signal_updated);
    if (alloc_10) begin
      entries_10_pht_index <= s1_agt_entry_pht_index;
      entries_10_pht_tag <= s1_agt_entry_pht_tag;
      entries_10_region_bits <= s1_agt_entry_region_bits;
      entries_10_region_tag <= s1_agt_entry_region_tag;
      entries_10_region_offset <= s1_agt_entry_region_offset;
      entries_10_access_cnt <= 4'h1;
      entries_10_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_10_region_bits <=
        {16{update_10}} & s1_agt_entry_region_bits | entries_10_region_bits;
      if (~update_10 | (&entries_10_access_cnt)) begin
      end
      else
        entries_10_access_cnt <=
          4'(entries_10_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_10_region_bits)});
    end
    if (alloc_10 | update_10)
      entries_10_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_10_has_been_signal_updated <=
      ~alloc_10
      & (update_10 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_10_has_been_signal_updated);
    if (alloc_11) begin
      entries_11_pht_index <= s1_agt_entry_pht_index;
      entries_11_pht_tag <= s1_agt_entry_pht_tag;
      entries_11_region_bits <= s1_agt_entry_region_bits;
      entries_11_region_tag <= s1_agt_entry_region_tag;
      entries_11_region_offset <= s1_agt_entry_region_offset;
      entries_11_access_cnt <= 4'h1;
      entries_11_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_11_region_bits <=
        {16{update_11}} & s1_agt_entry_region_bits | entries_11_region_bits;
      if (~update_11 | (&entries_11_access_cnt)) begin
      end
      else
        entries_11_access_cnt <=
          4'(entries_11_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_11_region_bits)});
    end
    if (alloc_11 | update_11)
      entries_11_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_11_has_been_signal_updated <=
      ~alloc_11
      & (update_11 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_11_has_been_signal_updated);
    if (alloc_12) begin
      entries_12_pht_index <= s1_agt_entry_pht_index;
      entries_12_pht_tag <= s1_agt_entry_pht_tag;
      entries_12_region_bits <= s1_agt_entry_region_bits;
      entries_12_region_tag <= s1_agt_entry_region_tag;
      entries_12_region_offset <= s1_agt_entry_region_offset;
      entries_12_access_cnt <= 4'h1;
      entries_12_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_12_region_bits <=
        {16{update_12}} & s1_agt_entry_region_bits | entries_12_region_bits;
      if (~update_12 | (&entries_12_access_cnt)) begin
      end
      else
        entries_12_access_cnt <=
          4'(entries_12_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_12_region_bits)});
    end
    if (alloc_12 | update_12)
      entries_12_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_12_has_been_signal_updated <=
      ~alloc_12
      & (update_12 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_12_has_been_signal_updated);
    if (alloc_13) begin
      entries_13_pht_index <= s1_agt_entry_pht_index;
      entries_13_pht_tag <= s1_agt_entry_pht_tag;
      entries_13_region_bits <= s1_agt_entry_region_bits;
      entries_13_region_tag <= s1_agt_entry_region_tag;
      entries_13_region_offset <= s1_agt_entry_region_offset;
      entries_13_access_cnt <= 4'h1;
      entries_13_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_13_region_bits <=
        {16{update_13}} & s1_agt_entry_region_bits | entries_13_region_bits;
      if (~update_13 | (&entries_13_access_cnt)) begin
      end
      else
        entries_13_access_cnt <=
          4'(entries_13_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_13_region_bits)});
    end
    if (alloc_13 | update_13)
      entries_13_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_13_has_been_signal_updated <=
      ~alloc_13
      & (update_13 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_13_has_been_signal_updated);
    if (alloc_14) begin
      entries_14_pht_index <= s1_agt_entry_pht_index;
      entries_14_pht_tag <= s1_agt_entry_pht_tag;
      entries_14_region_bits <= s1_agt_entry_region_bits;
      entries_14_region_tag <= s1_agt_entry_region_tag;
      entries_14_region_offset <= s1_agt_entry_region_offset;
      entries_14_access_cnt <= 4'h1;
      entries_14_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_14_region_bits <=
        {16{update_14}} & s1_agt_entry_region_bits | entries_14_region_bits;
      if (~update_14 | (&entries_14_access_cnt)) begin
      end
      else
        entries_14_access_cnt <=
          4'(entries_14_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_14_region_bits)});
    end
    if (alloc_14 | update_14)
      entries_14_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_14_has_been_signal_updated <=
      ~alloc_14
      & (update_14 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_14_has_been_signal_updated);
    if (alloc_15) begin
      entries_15_pht_index <= s1_agt_entry_pht_index;
      entries_15_pht_tag <= s1_agt_entry_pht_tag;
      entries_15_region_bits <= s1_agt_entry_region_bits;
      entries_15_region_tag <= s1_agt_entry_region_tag;
      entries_15_region_offset <= s1_agt_entry_region_offset;
      entries_15_access_cnt <= 4'h1;
      entries_15_decr_mode <= s1_agt_entry_decr_mode;
    end
    else begin
      entries_15_region_bits <=
        {16{update_15}} & s1_agt_entry_region_bits | entries_15_region_bits;
      if (~update_15 | (&entries_15_access_cnt)) begin
      end
      else
        entries_15_access_cnt <=
          4'(entries_15_access_cnt
             + {3'h0, |(s1_agt_entry_region_bits & ~entries_15_region_bits)});
    end
    if (alloc_15 | update_15)
      entries_15_region_bit_single <= s1_agt_entry_region_bit_single;
    entries_15_has_been_signal_updated <=
      ~alloc_15
      & (update_15 & ~(_s2_real_update_T & s1_evict_valid) & s1_update_last_REG
         | entries_15_has_been_signal_updated);
    if (io_s0_lookup_valid) begin
      prev_lookup_region_tag <= io_s0_lookup_bits_region_tag;
      s1_update_mask_0 <= region_match_vec_s0_0;
      s1_update_mask_1 <= region_match_vec_s0_1;
      s1_update_mask_2 <= region_match_vec_s0_2;
      s1_update_mask_3 <= region_match_vec_s0_3;
      s1_update_mask_4 <= region_match_vec_s0_4;
      s1_update_mask_5 <= region_match_vec_s0_5;
      s1_update_mask_6 <= region_match_vec_s0_6;
      s1_update_mask_7 <= region_match_vec_s0_7;
      s1_update_mask_8 <= region_match_vec_s0_8;
      s1_update_mask_9 <= region_match_vec_s0_9;
      s1_update_mask_10 <= region_match_vec_s0_10;
      s1_update_mask_11 <= region_match_vec_s0_11;
      s1_update_mask_12 <= region_match_vec_s0_12;
      s1_update_mask_13 <= region_match_vec_s0_13;
      s1_update_mask_14 <= region_match_vec_s0_14;
      s1_update_mask_15 <= region_match_vec_s0_15;
      s1_agt_entry_pht_index <= io_s0_lookup_bits_pht_index;
      s1_agt_entry_pht_tag <= io_s0_lookup_bits_pht_tag;
      s1_agt_entry_region_bits <= s0_agt_entry_region_bits;
      s1_agt_entry_region_bit_single <= s0_agt_entry_region_bits;
      s1_agt_entry_region_tag <= io_s0_lookup_bits_region_tag;
      s1_agt_entry_region_offset <= io_s0_lookup_bits_region_offset;
      s1_agt_entry_decr_mode <=
        ~(|_any_region_match_T) & ~any_region_m1_match & any_region_p1_match;
      s1_cross_region_match <= any_region_m1_match | any_region_p1_match;
      s1_replace_mask_r_1 <= 16'h1 << {12'h0, state_reg[14], _s0_replace_way_T_20};
      s1_pf_gen_match_vec_0 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_0
          : any_region_m1_match ? region_m1_match_vec_s0_0 : region_p1_match_vec_s0_0;
      s1_pf_gen_match_vec_1 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_1
          : any_region_m1_match ? region_m1_match_vec_s0_1 : region_p1_match_vec_s0_1;
      s1_pf_gen_match_vec_2 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_2
          : any_region_m1_match ? region_m1_match_vec_s0_2 : region_p1_match_vec_s0_2;
      s1_pf_gen_match_vec_3 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_3
          : any_region_m1_match ? region_m1_match_vec_s0_3 : region_p1_match_vec_s0_3;
      s1_pf_gen_match_vec_4 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_4
          : any_region_m1_match ? region_m1_match_vec_s0_4 : region_p1_match_vec_s0_4;
      s1_pf_gen_match_vec_5 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_5
          : any_region_m1_match ? region_m1_match_vec_s0_5 : region_p1_match_vec_s0_5;
      s1_pf_gen_match_vec_6 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_6
          : any_region_m1_match ? region_m1_match_vec_s0_6 : region_p1_match_vec_s0_6;
      s1_pf_gen_match_vec_7 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_7
          : any_region_m1_match ? region_m1_match_vec_s0_7 : region_p1_match_vec_s0_7;
      s1_pf_gen_match_vec_8 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_8
          : any_region_m1_match ? region_m1_match_vec_s0_8 : region_p1_match_vec_s0_8;
      s1_pf_gen_match_vec_9 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_9
          : any_region_m1_match ? region_m1_match_vec_s0_9 : region_p1_match_vec_s0_9;
      s1_pf_gen_match_vec_10 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_10
          : any_region_m1_match ? region_m1_match_vec_s0_10 : region_p1_match_vec_s0_10;
      s1_pf_gen_match_vec_11 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_11
          : any_region_m1_match ? region_m1_match_vec_s0_11 : region_p1_match_vec_s0_11;
      s1_pf_gen_match_vec_12 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_12
          : any_region_m1_match ? region_m1_match_vec_s0_12 : region_p1_match_vec_s0_12;
      s1_pf_gen_match_vec_13 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_13
          : any_region_m1_match ? region_m1_match_vec_s0_13 : region_p1_match_vec_s0_13;
      s1_pf_gen_match_vec_14 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_14
          : any_region_m1_match ? region_m1_match_vec_s0_14 : region_p1_match_vec_s0_14;
      s1_pf_gen_match_vec_15 <=
        (|_any_region_match_T)
          ? region_match_vec_s0_15
          : any_region_m1_match ? region_m1_match_vec_s0_15 : region_p1_match_vec_s0_15;
      s1_region_paddr <= io_s0_lookup_bits_region_paddr;
      s1_region_vaddr <= io_s0_lookup_bits_region_vaddr;
      s1_region_offset <= io_s0_lookup_bits_region_offset;
    end
    if (s0_do_dcache_evict)
      s1_replace_mask_r <=
        {region_match_vec_dcache_evict_s0_15,
         region_match_vec_dcache_evict_s0_14,
         region_match_vec_dcache_evict_s0_13,
         region_match_vec_dcache_evict_s0_12,
         region_match_vec_dcache_evict_s0_11,
         region_match_vec_dcache_evict_s0_10,
         region_match_vec_dcache_evict_s0_9,
         region_match_vec_dcache_evict_s0_8,
         region_match_vec_dcache_evict_s0_7,
         region_match_vec_dcache_evict_s0_6,
         region_match_vec_dcache_evict_s0_5,
         region_match_vec_dcache_evict_s0_4,
         region_match_vec_dcache_evict_s0_3,
         region_match_vec_dcache_evict_s0_2,
         region_match_vec_dcache_evict_s0_1,
         region_match_vec_dcache_evict_s0_0};
    if (_s2_real_update_T | s1_update_last_REG) begin
      s2_evict_entry_pht_index <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_pht_index : 5'h0)
            | (s1_replace_mask[1] ? entries_1_pht_index : 5'h0)
            | (s1_replace_mask[2] ? entries_2_pht_index : 5'h0)
            | (s1_replace_mask[3] ? entries_3_pht_index : 5'h0)
            | (s1_replace_mask[4] ? entries_4_pht_index : 5'h0)
            | (s1_replace_mask[5] ? entries_5_pht_index : 5'h0)
            | (s1_replace_mask[6] ? entries_6_pht_index : 5'h0)
            | (s1_replace_mask[7] ? entries_7_pht_index : 5'h0)
            | (s1_replace_mask[8] ? entries_8_pht_index : 5'h0)
            | (s1_replace_mask[9] ? entries_9_pht_index : 5'h0)
            | (s1_replace_mask[10] ? entries_10_pht_index : 5'h0)
            | (s1_replace_mask[11] ? entries_11_pht_index : 5'h0)
            | (s1_replace_mask[12] ? entries_12_pht_index : 5'h0)
            | (s1_replace_mask[13] ? entries_13_pht_index : 5'h0)
            | (s1_replace_mask[14] ? entries_14_pht_index : 5'h0)
            | (s1_replace_mask[15] ? entries_15_pht_index : 5'h0)
          : (s1_update_mask_0 ? entries_0_pht_index : 5'h0)
            | (s1_update_mask_1 ? entries_1_pht_index : 5'h0)
            | (s1_update_mask_2 ? entries_2_pht_index : 5'h0)
            | (s1_update_mask_3 ? entries_3_pht_index : 5'h0)
            | (s1_update_mask_4 ? entries_4_pht_index : 5'h0)
            | (s1_update_mask_5 ? entries_5_pht_index : 5'h0)
            | (s1_update_mask_6 ? entries_6_pht_index : 5'h0)
            | (s1_update_mask_7 ? entries_7_pht_index : 5'h0)
            | (s1_update_mask_8 ? entries_8_pht_index : 5'h0)
            | (s1_update_mask_9 ? entries_9_pht_index : 5'h0)
            | (s1_update_mask_10 ? entries_10_pht_index : 5'h0)
            | (s1_update_mask_11 ? entries_11_pht_index : 5'h0)
            | (s1_update_mask_12 ? entries_12_pht_index : 5'h0)
            | (s1_update_mask_13 ? entries_13_pht_index : 5'h0)
            | (s1_update_mask_14 ? entries_14_pht_index : 5'h0)
            | (s1_update_mask_15 ? entries_15_pht_index : 5'h0);
      s2_evict_entry_pht_tag <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_pht_tag : 13'h0)
            | (s1_replace_mask[1] ? entries_1_pht_tag : 13'h0)
            | (s1_replace_mask[2] ? entries_2_pht_tag : 13'h0)
            | (s1_replace_mask[3] ? entries_3_pht_tag : 13'h0)
            | (s1_replace_mask[4] ? entries_4_pht_tag : 13'h0)
            | (s1_replace_mask[5] ? entries_5_pht_tag : 13'h0)
            | (s1_replace_mask[6] ? entries_6_pht_tag : 13'h0)
            | (s1_replace_mask[7] ? entries_7_pht_tag : 13'h0)
            | (s1_replace_mask[8] ? entries_8_pht_tag : 13'h0)
            | (s1_replace_mask[9] ? entries_9_pht_tag : 13'h0)
            | (s1_replace_mask[10] ? entries_10_pht_tag : 13'h0)
            | (s1_replace_mask[11] ? entries_11_pht_tag : 13'h0)
            | (s1_replace_mask[12] ? entries_12_pht_tag : 13'h0)
            | (s1_replace_mask[13] ? entries_13_pht_tag : 13'h0)
            | (s1_replace_mask[14] ? entries_14_pht_tag : 13'h0)
            | (s1_replace_mask[15] ? entries_15_pht_tag : 13'h0)
          : (s1_update_mask_0 ? entries_0_pht_tag : 13'h0)
            | (s1_update_mask_1 ? entries_1_pht_tag : 13'h0)
            | (s1_update_mask_2 ? entries_2_pht_tag : 13'h0)
            | (s1_update_mask_3 ? entries_3_pht_tag : 13'h0)
            | (s1_update_mask_4 ? entries_4_pht_tag : 13'h0)
            | (s1_update_mask_5 ? entries_5_pht_tag : 13'h0)
            | (s1_update_mask_6 ? entries_6_pht_tag : 13'h0)
            | (s1_update_mask_7 ? entries_7_pht_tag : 13'h0)
            | (s1_update_mask_8 ? entries_8_pht_tag : 13'h0)
            | (s1_update_mask_9 ? entries_9_pht_tag : 13'h0)
            | (s1_update_mask_10 ? entries_10_pht_tag : 13'h0)
            | (s1_update_mask_11 ? entries_11_pht_tag : 13'h0)
            | (s1_update_mask_12 ? entries_12_pht_tag : 13'h0)
            | (s1_update_mask_13 ? entries_13_pht_tag : 13'h0)
            | (s1_update_mask_14 ? entries_14_pht_tag : 13'h0)
            | (s1_update_mask_15 ? entries_15_pht_tag : 13'h0);
      s2_evict_entry_region_bits <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_region_bits : 16'h0)
            | (s1_replace_mask[1] ? entries_1_region_bits : 16'h0)
            | (s1_replace_mask[2] ? entries_2_region_bits : 16'h0)
            | (s1_replace_mask[3] ? entries_3_region_bits : 16'h0)
            | (s1_replace_mask[4] ? entries_4_region_bits : 16'h0)
            | (s1_replace_mask[5] ? entries_5_region_bits : 16'h0)
            | (s1_replace_mask[6] ? entries_6_region_bits : 16'h0)
            | (s1_replace_mask[7] ? entries_7_region_bits : 16'h0)
            | (s1_replace_mask[8] ? entries_8_region_bits : 16'h0)
            | (s1_replace_mask[9] ? entries_9_region_bits : 16'h0)
            | (s1_replace_mask[10] ? entries_10_region_bits : 16'h0)
            | (s1_replace_mask[11] ? entries_11_region_bits : 16'h0)
            | (s1_replace_mask[12] ? entries_12_region_bits : 16'h0)
            | (s1_replace_mask[13] ? entries_13_region_bits : 16'h0)
            | (s1_replace_mask[14] ? entries_14_region_bits : 16'h0)
            | (s1_replace_mask[15] ? entries_15_region_bits : 16'h0)
          : (s1_update_mask_0 ? entries_0_region_bits : 16'h0)
            | (s1_update_mask_1 ? entries_1_region_bits : 16'h0)
            | (s1_update_mask_2 ? entries_2_region_bits : 16'h0)
            | (s1_update_mask_3 ? entries_3_region_bits : 16'h0)
            | (s1_update_mask_4 ? entries_4_region_bits : 16'h0)
            | (s1_update_mask_5 ? entries_5_region_bits : 16'h0)
            | (s1_update_mask_6 ? entries_6_region_bits : 16'h0)
            | (s1_update_mask_7 ? entries_7_region_bits : 16'h0)
            | (s1_update_mask_8 ? entries_8_region_bits : 16'h0)
            | (s1_update_mask_9 ? entries_9_region_bits : 16'h0)
            | (s1_update_mask_10 ? entries_10_region_bits : 16'h0)
            | (s1_update_mask_11 ? entries_11_region_bits : 16'h0)
            | (s1_update_mask_12 ? entries_12_region_bits : 16'h0)
            | (s1_update_mask_13 ? entries_13_region_bits : 16'h0)
            | (s1_update_mask_14 ? entries_14_region_bits : 16'h0)
            | (s1_update_mask_15 ? entries_15_region_bits : 16'h0);
      s2_evict_entry_region_bit_single <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_region_bit_single : 16'h0)
            | (s1_replace_mask[1] ? entries_1_region_bit_single : 16'h0)
            | (s1_replace_mask[2] ? entries_2_region_bit_single : 16'h0)
            | (s1_replace_mask[3] ? entries_3_region_bit_single : 16'h0)
            | (s1_replace_mask[4] ? entries_4_region_bit_single : 16'h0)
            | (s1_replace_mask[5] ? entries_5_region_bit_single : 16'h0)
            | (s1_replace_mask[6] ? entries_6_region_bit_single : 16'h0)
            | (s1_replace_mask[7] ? entries_7_region_bit_single : 16'h0)
            | (s1_replace_mask[8] ? entries_8_region_bit_single : 16'h0)
            | (s1_replace_mask[9] ? entries_9_region_bit_single : 16'h0)
            | (s1_replace_mask[10] ? entries_10_region_bit_single : 16'h0)
            | (s1_replace_mask[11] ? entries_11_region_bit_single : 16'h0)
            | (s1_replace_mask[12] ? entries_12_region_bit_single : 16'h0)
            | (s1_replace_mask[13] ? entries_13_region_bit_single : 16'h0)
            | (s1_replace_mask[14] ? entries_14_region_bit_single : 16'h0)
            | (s1_replace_mask[15] ? entries_15_region_bit_single : 16'h0)
          : (s1_update_mask_0 ? entries_0_region_bit_single : 16'h0)
            | (s1_update_mask_1 ? entries_1_region_bit_single : 16'h0)
            | (s1_update_mask_2 ? entries_2_region_bit_single : 16'h0)
            | (s1_update_mask_3 ? entries_3_region_bit_single : 16'h0)
            | (s1_update_mask_4 ? entries_4_region_bit_single : 16'h0)
            | (s1_update_mask_5 ? entries_5_region_bit_single : 16'h0)
            | (s1_update_mask_6 ? entries_6_region_bit_single : 16'h0)
            | (s1_update_mask_7 ? entries_7_region_bit_single : 16'h0)
            | (s1_update_mask_8 ? entries_8_region_bit_single : 16'h0)
            | (s1_update_mask_9 ? entries_9_region_bit_single : 16'h0)
            | (s1_update_mask_10 ? entries_10_region_bit_single : 16'h0)
            | (s1_update_mask_11 ? entries_11_region_bit_single : 16'h0)
            | (s1_update_mask_12 ? entries_12_region_bit_single : 16'h0)
            | (s1_update_mask_13 ? entries_13_region_bit_single : 16'h0)
            | (s1_update_mask_14 ? entries_14_region_bit_single : 16'h0)
            | (s1_update_mask_15 ? entries_15_region_bit_single : 16'h0);
      s2_evict_entry_region_offset <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_region_offset : 4'h0)
            | (s1_replace_mask[1] ? entries_1_region_offset : 4'h0)
            | (s1_replace_mask[2] ? entries_2_region_offset : 4'h0)
            | (s1_replace_mask[3] ? entries_3_region_offset : 4'h0)
            | (s1_replace_mask[4] ? entries_4_region_offset : 4'h0)
            | (s1_replace_mask[5] ? entries_5_region_offset : 4'h0)
            | (s1_replace_mask[6] ? entries_6_region_offset : 4'h0)
            | (s1_replace_mask[7] ? entries_7_region_offset : 4'h0)
            | (s1_replace_mask[8] ? entries_8_region_offset : 4'h0)
            | (s1_replace_mask[9] ? entries_9_region_offset : 4'h0)
            | (s1_replace_mask[10] ? entries_10_region_offset : 4'h0)
            | (s1_replace_mask[11] ? entries_11_region_offset : 4'h0)
            | (s1_replace_mask[12] ? entries_12_region_offset : 4'h0)
            | (s1_replace_mask[13] ? entries_13_region_offset : 4'h0)
            | (s1_replace_mask[14] ? entries_14_region_offset : 4'h0)
            | (s1_replace_mask[15] ? entries_15_region_offset : 4'h0)
          : (s1_update_mask_0 ? entries_0_region_offset : 4'h0)
            | (s1_update_mask_1 ? entries_1_region_offset : 4'h0)
            | (s1_update_mask_2 ? entries_2_region_offset : 4'h0)
            | (s1_update_mask_3 ? entries_3_region_offset : 4'h0)
            | (s1_update_mask_4 ? entries_4_region_offset : 4'h0)
            | (s1_update_mask_5 ? entries_5_region_offset : 4'h0)
            | (s1_update_mask_6 ? entries_6_region_offset : 4'h0)
            | (s1_update_mask_7 ? entries_7_region_offset : 4'h0)
            | (s1_update_mask_8 ? entries_8_region_offset : 4'h0)
            | (s1_update_mask_9 ? entries_9_region_offset : 4'h0)
            | (s1_update_mask_10 ? entries_10_region_offset : 4'h0)
            | (s1_update_mask_11 ? entries_11_region_offset : 4'h0)
            | (s1_update_mask_12 ? entries_12_region_offset : 4'h0)
            | (s1_update_mask_13 ? entries_13_region_offset : 4'h0)
            | (s1_update_mask_14 ? entries_14_region_offset : 4'h0)
            | (s1_update_mask_15 ? entries_15_region_offset : 4'h0);
      s2_evict_entry_access_cnt <=
        _s1_send_update_entry_T_1
          ? (s1_replace_mask[0] ? entries_0_access_cnt : 4'h0)
            | (s1_replace_mask[1] ? entries_1_access_cnt : 4'h0)
            | (s1_replace_mask[2] ? entries_2_access_cnt : 4'h0)
            | (s1_replace_mask[3] ? entries_3_access_cnt : 4'h0)
            | (s1_replace_mask[4] ? entries_4_access_cnt : 4'h0)
            | (s1_replace_mask[5] ? entries_5_access_cnt : 4'h0)
            | (s1_replace_mask[6] ? entries_6_access_cnt : 4'h0)
            | (s1_replace_mask[7] ? entries_7_access_cnt : 4'h0)
            | (s1_replace_mask[8] ? entries_8_access_cnt : 4'h0)
            | (s1_replace_mask[9] ? entries_9_access_cnt : 4'h0)
            | (s1_replace_mask[10] ? entries_10_access_cnt : 4'h0)
            | (s1_replace_mask[11] ? entries_11_access_cnt : 4'h0)
            | (s1_replace_mask[12] ? entries_12_access_cnt : 4'h0)
            | (s1_replace_mask[13] ? entries_13_access_cnt : 4'h0)
            | (s1_replace_mask[14] ? entries_14_access_cnt : 4'h0)
            | (s1_replace_mask[15] ? entries_15_access_cnt : 4'h0)
          : (s1_update_mask_0 ? entries_0_access_cnt : 4'h0)
            | (s1_update_mask_1 ? entries_1_access_cnt : 4'h0)
            | (s1_update_mask_2 ? entries_2_access_cnt : 4'h0)
            | (s1_update_mask_3 ? entries_3_access_cnt : 4'h0)
            | (s1_update_mask_4 ? entries_4_access_cnt : 4'h0)
            | (s1_update_mask_5 ? entries_5_access_cnt : 4'h0)
            | (s1_update_mask_6 ? entries_6_access_cnt : 4'h0)
            | (s1_update_mask_7 ? entries_7_access_cnt : 4'h0)
            | (s1_update_mask_8 ? entries_8_access_cnt : 4'h0)
            | (s1_update_mask_9 ? entries_9_access_cnt : 4'h0)
            | (s1_update_mask_10 ? entries_10_access_cnt : 4'h0)
            | (s1_update_mask_11 ? entries_11_access_cnt : 4'h0)
            | (s1_update_mask_12 ? entries_12_access_cnt : 4'h0)
            | (s1_update_mask_13 ? entries_13_access_cnt : 4'h0)
            | (s1_update_mask_14 ? entries_14_access_cnt : 4'h0)
            | (s1_update_mask_15 ? entries_15_access_cnt : 4'h0);
      s2_evict_entry_decr_mode <=
        _s1_send_update_entry_T_1
          ? s1_replace_mask[0] & entries_0_decr_mode | s1_replace_mask[1]
            & entries_1_decr_mode | s1_replace_mask[2] & entries_2_decr_mode
            | s1_replace_mask[3] & entries_3_decr_mode | s1_replace_mask[4]
            & entries_4_decr_mode | s1_replace_mask[5] & entries_5_decr_mode
            | s1_replace_mask[6] & entries_6_decr_mode | s1_replace_mask[7]
            & entries_7_decr_mode | s1_replace_mask[8] & entries_8_decr_mode
            | s1_replace_mask[9] & entries_9_decr_mode | s1_replace_mask[10]
            & entries_10_decr_mode | s1_replace_mask[11] & entries_11_decr_mode
            | s1_replace_mask[12] & entries_12_decr_mode | s1_replace_mask[13]
            & entries_13_decr_mode | s1_replace_mask[14] & entries_14_decr_mode
            | s1_replace_mask[15] & entries_15_decr_mode
          : _s1_hited_entry_decr_T | _s1_hited_entry_decr_T_1 | _s1_hited_entry_decr_T_2
            | _s1_hited_entry_decr_T_3 | _s1_hited_entry_decr_T_4
            | _s1_hited_entry_decr_T_5 | _s1_hited_entry_decr_T_6
            | _s1_hited_entry_decr_T_7 | _s1_hited_entry_decr_T_8
            | _s1_hited_entry_decr_T_9 | _s1_hited_entry_decr_T_10
            | _s1_hited_entry_decr_T_11 | _s1_hited_entry_decr_T_12
            | _s1_hited_entry_decr_T_13 | _s1_hited_entry_decr_T_14
            | _s1_hited_entry_decr_T_15;
      s2_evict_entry_has_been_signal_updated <=
        _s1_send_update_entry_T_1
          ? s1_replace_mask[0] & entries_0_has_been_signal_updated | s1_replace_mask[1]
            & entries_1_has_been_signal_updated | s1_replace_mask[2]
            & entries_2_has_been_signal_updated | s1_replace_mask[3]
            & entries_3_has_been_signal_updated | s1_replace_mask[4]
            & entries_4_has_been_signal_updated | s1_replace_mask[5]
            & entries_5_has_been_signal_updated | s1_replace_mask[6]
            & entries_6_has_been_signal_updated | s1_replace_mask[7]
            & entries_7_has_been_signal_updated | s1_replace_mask[8]
            & entries_8_has_been_signal_updated | s1_replace_mask[9]
            & entries_9_has_been_signal_updated | s1_replace_mask[10]
            & entries_10_has_been_signal_updated | s1_replace_mask[11]
            & entries_11_has_been_signal_updated | s1_replace_mask[12]
            & entries_12_has_been_signal_updated | s1_replace_mask[13]
            & entries_13_has_been_signal_updated | s1_replace_mask[14]
            & entries_14_has_been_signal_updated | s1_replace_mask[15]
            & entries_15_has_been_signal_updated
          : s1_update_mask_0 & entries_0_has_been_signal_updated | s1_update_mask_1
            & entries_1_has_been_signal_updated | s1_update_mask_2
            & entries_2_has_been_signal_updated | s1_update_mask_3
            & entries_3_has_been_signal_updated | s1_update_mask_4
            & entries_4_has_been_signal_updated | s1_update_mask_5
            & entries_5_has_been_signal_updated | s1_update_mask_6
            & entries_6_has_been_signal_updated | s1_update_mask_7
            & entries_7_has_been_signal_updated | s1_update_mask_8
            & entries_8_has_been_signal_updated | s1_update_mask_9
            & entries_9_has_been_signal_updated | s1_update_mask_10
            & entries_10_has_been_signal_updated | s1_update_mask_11
            & entries_11_has_been_signal_updated | s1_update_mask_12
            & entries_12_has_been_signal_updated | s1_update_mask_13
            & entries_13_has_been_signal_updated | s1_update_mask_14
            & entries_14_has_been_signal_updated | s1_update_mask_15
            & entries_15_has_been_signal_updated;
    end
    if (s1_pht_lookup_valid) begin
      s2_pht_lookup_pht_index <= s1_agt_entry_pht_index;
      s2_pht_lookup_pht_tag <= s1_agt_entry_pht_tag;
      s2_pht_lookup_region_paddr <= s1_region_paddr;
      s2_pht_lookup_region_vaddr <= s1_region_vaddr;
      s2_pht_lookup_region_offset <= s1_region_offset;
    end
  end // always @(posedge)
  wire [6:0]  _s0_access_way_T_2 =
    {region_match_vec_s0_15,
     region_match_vec_s0_14,
     region_match_vec_s0_13,
     region_match_vec_s0_12,
     region_match_vec_s0_11,
     region_match_vec_s0_10,
     region_match_vec_s0_9}
    | {region_match_vec_s0_7,
       region_match_vec_s0_6,
       region_match_vec_s0_5,
       region_match_vec_s0_4,
       region_match_vec_s0_3,
       region_match_vec_s0_2,
       region_match_vec_s0_1};
  wire [2:0]  _s0_access_way_T_4 = _s0_access_way_T_2[6:4] | _s0_access_way_T_2[2:0];
  wire        s0_alloc =
    io_s0_lookup_valid & ~(|_any_region_match_T)
    & ~(prev_lookup_valid_last_REG
        & io_s0_lookup_bits_region_tag == prev_lookup_region_tag);
  wire        s0_update =
    io_s0_lookup_valid & (|_any_region_match_T)
    & ({region_match_vec_s0_15,
        region_match_vec_s0_14,
        region_match_vec_s0_13,
        region_match_vec_s0_12,
        region_match_vec_s0_11,
        region_match_vec_s0_10,
        region_match_vec_s0_9,
        region_match_vec_s0_8,
        region_match_vec_s0_7,
        region_match_vec_s0_6,
        region_match_vec_s0_5,
        region_match_vec_s0_4,
        region_match_vec_s0_3,
        region_match_vec_s0_2,
        region_match_vec_s0_1,
        region_match_vec_s0_0} & s1_replace_mask_w) == 16'h0;
  wire [3:0]  s0_access_way =
    (s0_update
       ? {|{region_match_vec_s0_15,
            region_match_vec_s0_14,
            region_match_vec_s0_13,
            region_match_vec_s0_12,
            region_match_vec_s0_11,
            region_match_vec_s0_10,
            region_match_vec_s0_9,
            region_match_vec_s0_8},
          |(_s0_access_way_T_2[6:3]),
          |(_s0_access_way_T_4[2:1]),
          _s0_access_way_T_4[2] | _s0_access_way_T_4[0]}
       : 4'h0) | (s0_alloc ? {state_reg[14], _s0_replace_way_T_20} : 4'h0);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      valids_4 <= 1'h0;
      valids_5 <= 1'h0;
      valids_6 <= 1'h0;
      valids_7 <= 1'h0;
      valids_8 <= 1'h0;
      valids_9 <= 1'h0;
      valids_10 <= 1'h0;
      valids_11 <= 1'h0;
      valids_12 <= 1'h0;
      valids_13 <= 1'h0;
      valids_14 <= 1'h0;
      valids_15 <= 1'h0;
      state_reg <= 15'h0;
      prev_lookup_valid_last_REG <= 1'h0;
      s1_update_last_REG <= 1'h0;
      s1_alloc_last_REG <= 1'h0;
      s1_do_dcache_evict_last_REG <= 1'h0;
      s2_evict_valid_last_REG <= 1'h0;
      s2_update <= 1'h0;
      s2_real_update <= 1'h0;
      s2_pht_lookup_valid_last_REG <= 1'h0;
    end
    else begin
      valids_0 <= valids_0 | alloc;
      valids_1 <= valids_1 | alloc_1;
      valids_2 <= valids_2 | alloc_2;
      valids_3 <= valids_3 | alloc_3;
      valids_4 <= valids_4 | alloc_4;
      valids_5 <= valids_5 | alloc_5;
      valids_6 <= valids_6 | alloc_6;
      valids_7 <= valids_7 | alloc_7;
      valids_8 <= valids_8 | alloc_8;
      valids_9 <= valids_9 | alloc_9;
      valids_10 <= valids_10 | alloc_10;
      valids_11 <= valids_11 | alloc_11;
      valids_12 <= valids_12 | alloc_12;
      valids_13 <= valids_13 | alloc_13;
      valids_14 <= valids_14 | alloc_14;
      valids_15 <= valids_15 | alloc_15;
      if (s0_update | s0_alloc)
        state_reg <=
          {~(s0_access_way[3]),
           s0_access_way[3]
             ? {~(s0_access_way[2]),
                s0_access_way[2]
                  ? {~(s0_access_way[1]),
                     s0_access_way[1] ? ~(s0_access_way[0]) : state_reg[11],
                     s0_access_way[1] ? state_reg[10] : ~(s0_access_way[0])}
                  : state_reg[12:10],
                s0_access_way[2]
                  ? state_reg[9:7]
                  : {~(s0_access_way[1]),
                     s0_access_way[1] ? ~(s0_access_way[0]) : state_reg[8],
                     s0_access_way[1] ? state_reg[7] : ~(s0_access_way[0])}}
             : state_reg[13:7],
           s0_access_way[3]
             ? state_reg[6:0]
             : {~(s0_access_way[2]),
                s0_access_way[2]
                  ? {~(s0_access_way[1]),
                     s0_access_way[1] ? ~(s0_access_way[0]) : state_reg[4],
                     s0_access_way[1] ? state_reg[3] : ~(s0_access_way[0])}
                  : state_reg[5:3],
                s0_access_way[2]
                  ? state_reg[2:0]
                  : {~(s0_access_way[1]),
                     s0_access_way[1] ? ~(s0_access_way[0]) : state_reg[1],
                     s0_access_way[1] ? state_reg[0] : ~(s0_access_way[0])}}};
      prev_lookup_valid_last_REG <= io_s0_lookup_valid;
      s1_update_last_REG <= s0_update;
      s1_alloc_last_REG <= s0_alloc;
      s1_do_dcache_evict_last_REG <= s0_do_dcache_evict;
      s2_evict_valid_last_REG <= _s2_real_update_T & s1_evict_valid | s1_update_last_REG;
      s2_update <= s1_update_last_REG;
      s2_real_update <= _s2_real_update_T & s1_evict_valid;
      s2_pht_lookup_valid_last_REG <= s1_pht_lookup_valid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:56];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h39; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_pht_index = _RANDOM[6'h0][4:0];
        entries_0_pht_tag = _RANDOM[6'h0][17:5];
        entries_0_region_bits = {_RANDOM[6'h0][31:18], _RANDOM[6'h1][1:0]};
        entries_0_region_bit_single = _RANDOM[6'h1][17:2];
        entries_0_region_tag = _RANDOM[6'h1][28:18];
        entries_0_region_offset = {_RANDOM[6'h1][31:29], _RANDOM[6'h2][0]};
        entries_0_access_cnt = _RANDOM[6'h2][4:1];
        entries_0_decr_mode = _RANDOM[6'h2][5];
        entries_0_has_been_signal_updated = _RANDOM[6'h2][7];
        entries_1_pht_index = _RANDOM[6'h2][12:8];
        entries_1_pht_tag = _RANDOM[6'h2][25:13];
        entries_1_region_bits = {_RANDOM[6'h2][31:26], _RANDOM[6'h3][9:0]};
        entries_1_region_bit_single = _RANDOM[6'h3][25:10];
        entries_1_region_tag = {_RANDOM[6'h3][31:26], _RANDOM[6'h4][4:0]};
        entries_1_region_offset = _RANDOM[6'h4][8:5];
        entries_1_access_cnt = _RANDOM[6'h4][12:9];
        entries_1_decr_mode = _RANDOM[6'h4][13];
        entries_1_has_been_signal_updated = _RANDOM[6'h4][15];
        entries_2_pht_index = _RANDOM[6'h4][20:16];
        entries_2_pht_tag = {_RANDOM[6'h4][31:21], _RANDOM[6'h5][1:0]};
        entries_2_region_bits = _RANDOM[6'h5][17:2];
        entries_2_region_bit_single = {_RANDOM[6'h5][31:18], _RANDOM[6'h6][1:0]};
        entries_2_region_tag = _RANDOM[6'h6][12:2];
        entries_2_region_offset = _RANDOM[6'h6][16:13];
        entries_2_access_cnt = _RANDOM[6'h6][20:17];
        entries_2_decr_mode = _RANDOM[6'h6][21];
        entries_2_has_been_signal_updated = _RANDOM[6'h6][23];
        entries_3_pht_index = _RANDOM[6'h6][28:24];
        entries_3_pht_tag = {_RANDOM[6'h6][31:29], _RANDOM[6'h7][9:0]};
        entries_3_region_bits = _RANDOM[6'h7][25:10];
        entries_3_region_bit_single = {_RANDOM[6'h7][31:26], _RANDOM[6'h8][9:0]};
        entries_3_region_tag = _RANDOM[6'h8][20:10];
        entries_3_region_offset = _RANDOM[6'h8][24:21];
        entries_3_access_cnt = _RANDOM[6'h8][28:25];
        entries_3_decr_mode = _RANDOM[6'h8][29];
        entries_3_has_been_signal_updated = _RANDOM[6'h8][31];
        entries_4_pht_index = _RANDOM[6'h9][4:0];
        entries_4_pht_tag = _RANDOM[6'h9][17:5];
        entries_4_region_bits = {_RANDOM[6'h9][31:18], _RANDOM[6'hA][1:0]};
        entries_4_region_bit_single = _RANDOM[6'hA][17:2];
        entries_4_region_tag = _RANDOM[6'hA][28:18];
        entries_4_region_offset = {_RANDOM[6'hA][31:29], _RANDOM[6'hB][0]};
        entries_4_access_cnt = _RANDOM[6'hB][4:1];
        entries_4_decr_mode = _RANDOM[6'hB][5];
        entries_4_has_been_signal_updated = _RANDOM[6'hB][7];
        entries_5_pht_index = _RANDOM[6'hB][12:8];
        entries_5_pht_tag = _RANDOM[6'hB][25:13];
        entries_5_region_bits = {_RANDOM[6'hB][31:26], _RANDOM[6'hC][9:0]};
        entries_5_region_bit_single = _RANDOM[6'hC][25:10];
        entries_5_region_tag = {_RANDOM[6'hC][31:26], _RANDOM[6'hD][4:0]};
        entries_5_region_offset = _RANDOM[6'hD][8:5];
        entries_5_access_cnt = _RANDOM[6'hD][12:9];
        entries_5_decr_mode = _RANDOM[6'hD][13];
        entries_5_has_been_signal_updated = _RANDOM[6'hD][15];
        entries_6_pht_index = _RANDOM[6'hD][20:16];
        entries_6_pht_tag = {_RANDOM[6'hD][31:21], _RANDOM[6'hE][1:0]};
        entries_6_region_bits = _RANDOM[6'hE][17:2];
        entries_6_region_bit_single = {_RANDOM[6'hE][31:18], _RANDOM[6'hF][1:0]};
        entries_6_region_tag = _RANDOM[6'hF][12:2];
        entries_6_region_offset = _RANDOM[6'hF][16:13];
        entries_6_access_cnt = _RANDOM[6'hF][20:17];
        entries_6_decr_mode = _RANDOM[6'hF][21];
        entries_6_has_been_signal_updated = _RANDOM[6'hF][23];
        entries_7_pht_index = _RANDOM[6'hF][28:24];
        entries_7_pht_tag = {_RANDOM[6'hF][31:29], _RANDOM[6'h10][9:0]};
        entries_7_region_bits = _RANDOM[6'h10][25:10];
        entries_7_region_bit_single = {_RANDOM[6'h10][31:26], _RANDOM[6'h11][9:0]};
        entries_7_region_tag = _RANDOM[6'h11][20:10];
        entries_7_region_offset = _RANDOM[6'h11][24:21];
        entries_7_access_cnt = _RANDOM[6'h11][28:25];
        entries_7_decr_mode = _RANDOM[6'h11][29];
        entries_7_has_been_signal_updated = _RANDOM[6'h11][31];
        entries_8_pht_index = _RANDOM[6'h12][4:0];
        entries_8_pht_tag = _RANDOM[6'h12][17:5];
        entries_8_region_bits = {_RANDOM[6'h12][31:18], _RANDOM[6'h13][1:0]};
        entries_8_region_bit_single = _RANDOM[6'h13][17:2];
        entries_8_region_tag = _RANDOM[6'h13][28:18];
        entries_8_region_offset = {_RANDOM[6'h13][31:29], _RANDOM[6'h14][0]};
        entries_8_access_cnt = _RANDOM[6'h14][4:1];
        entries_8_decr_mode = _RANDOM[6'h14][5];
        entries_8_has_been_signal_updated = _RANDOM[6'h14][7];
        entries_9_pht_index = _RANDOM[6'h14][12:8];
        entries_9_pht_tag = _RANDOM[6'h14][25:13];
        entries_9_region_bits = {_RANDOM[6'h14][31:26], _RANDOM[6'h15][9:0]};
        entries_9_region_bit_single = _RANDOM[6'h15][25:10];
        entries_9_region_tag = {_RANDOM[6'h15][31:26], _RANDOM[6'h16][4:0]};
        entries_9_region_offset = _RANDOM[6'h16][8:5];
        entries_9_access_cnt = _RANDOM[6'h16][12:9];
        entries_9_decr_mode = _RANDOM[6'h16][13];
        entries_9_has_been_signal_updated = _RANDOM[6'h16][15];
        entries_10_pht_index = _RANDOM[6'h16][20:16];
        entries_10_pht_tag = {_RANDOM[6'h16][31:21], _RANDOM[6'h17][1:0]};
        entries_10_region_bits = _RANDOM[6'h17][17:2];
        entries_10_region_bit_single = {_RANDOM[6'h17][31:18], _RANDOM[6'h18][1:0]};
        entries_10_region_tag = _RANDOM[6'h18][12:2];
        entries_10_region_offset = _RANDOM[6'h18][16:13];
        entries_10_access_cnt = _RANDOM[6'h18][20:17];
        entries_10_decr_mode = _RANDOM[6'h18][21];
        entries_10_has_been_signal_updated = _RANDOM[6'h18][23];
        entries_11_pht_index = _RANDOM[6'h18][28:24];
        entries_11_pht_tag = {_RANDOM[6'h18][31:29], _RANDOM[6'h19][9:0]};
        entries_11_region_bits = _RANDOM[6'h19][25:10];
        entries_11_region_bit_single = {_RANDOM[6'h19][31:26], _RANDOM[6'h1A][9:0]};
        entries_11_region_tag = _RANDOM[6'h1A][20:10];
        entries_11_region_offset = _RANDOM[6'h1A][24:21];
        entries_11_access_cnt = _RANDOM[6'h1A][28:25];
        entries_11_decr_mode = _RANDOM[6'h1A][29];
        entries_11_has_been_signal_updated = _RANDOM[6'h1A][31];
        entries_12_pht_index = _RANDOM[6'h1B][4:0];
        entries_12_pht_tag = _RANDOM[6'h1B][17:5];
        entries_12_region_bits = {_RANDOM[6'h1B][31:18], _RANDOM[6'h1C][1:0]};
        entries_12_region_bit_single = _RANDOM[6'h1C][17:2];
        entries_12_region_tag = _RANDOM[6'h1C][28:18];
        entries_12_region_offset = {_RANDOM[6'h1C][31:29], _RANDOM[6'h1D][0]};
        entries_12_access_cnt = _RANDOM[6'h1D][4:1];
        entries_12_decr_mode = _RANDOM[6'h1D][5];
        entries_12_has_been_signal_updated = _RANDOM[6'h1D][7];
        entries_13_pht_index = _RANDOM[6'h1D][12:8];
        entries_13_pht_tag = _RANDOM[6'h1D][25:13];
        entries_13_region_bits = {_RANDOM[6'h1D][31:26], _RANDOM[6'h1E][9:0]};
        entries_13_region_bit_single = _RANDOM[6'h1E][25:10];
        entries_13_region_tag = {_RANDOM[6'h1E][31:26], _RANDOM[6'h1F][4:0]};
        entries_13_region_offset = _RANDOM[6'h1F][8:5];
        entries_13_access_cnt = _RANDOM[6'h1F][12:9];
        entries_13_decr_mode = _RANDOM[6'h1F][13];
        entries_13_has_been_signal_updated = _RANDOM[6'h1F][15];
        entries_14_pht_index = _RANDOM[6'h1F][20:16];
        entries_14_pht_tag = {_RANDOM[6'h1F][31:21], _RANDOM[6'h20][1:0]};
        entries_14_region_bits = _RANDOM[6'h20][17:2];
        entries_14_region_bit_single = {_RANDOM[6'h20][31:18], _RANDOM[6'h21][1:0]};
        entries_14_region_tag = _RANDOM[6'h21][12:2];
        entries_14_region_offset = _RANDOM[6'h21][16:13];
        entries_14_access_cnt = _RANDOM[6'h21][20:17];
        entries_14_decr_mode = _RANDOM[6'h21][21];
        entries_14_has_been_signal_updated = _RANDOM[6'h21][23];
        entries_15_pht_index = _RANDOM[6'h21][28:24];
        entries_15_pht_tag = {_RANDOM[6'h21][31:29], _RANDOM[6'h22][9:0]};
        entries_15_region_bits = _RANDOM[6'h22][25:10];
        entries_15_region_bit_single = {_RANDOM[6'h22][31:26], _RANDOM[6'h23][9:0]};
        entries_15_region_tag = _RANDOM[6'h23][20:10];
        entries_15_region_offset = _RANDOM[6'h23][24:21];
        entries_15_access_cnt = _RANDOM[6'h23][28:25];
        entries_15_decr_mode = _RANDOM[6'h23][29];
        entries_15_has_been_signal_updated = _RANDOM[6'h23][31];
        valids_0 = _RANDOM[6'h24][0];
        valids_1 = _RANDOM[6'h24][1];
        valids_2 = _RANDOM[6'h24][2];
        valids_3 = _RANDOM[6'h24][3];
        valids_4 = _RANDOM[6'h24][4];
        valids_5 = _RANDOM[6'h24][5];
        valids_6 = _RANDOM[6'h24][6];
        valids_7 = _RANDOM[6'h24][7];
        valids_8 = _RANDOM[6'h24][8];
        valids_9 = _RANDOM[6'h24][9];
        valids_10 = _RANDOM[6'h24][10];
        valids_11 = _RANDOM[6'h24][11];
        valids_12 = _RANDOM[6'h24][12];
        valids_13 = _RANDOM[6'h24][13];
        valids_14 = _RANDOM[6'h24][14];
        valids_15 = _RANDOM[6'h24][15];
        state_reg = _RANDOM[6'h24][30:16];
        prev_lookup_region_tag = {_RANDOM[6'h24][31], _RANDOM[6'h25][9:0]};
        prev_lookup_valid_last_REG = _RANDOM[6'h29][10];
        s1_update_last_REG = _RANDOM[6'h29][11];
        s1_update_mask_0 = _RANDOM[6'h29][12];
        s1_update_mask_1 = _RANDOM[6'h29][13];
        s1_update_mask_2 = _RANDOM[6'h29][14];
        s1_update_mask_3 = _RANDOM[6'h29][15];
        s1_update_mask_4 = _RANDOM[6'h29][16];
        s1_update_mask_5 = _RANDOM[6'h29][17];
        s1_update_mask_6 = _RANDOM[6'h29][18];
        s1_update_mask_7 = _RANDOM[6'h29][19];
        s1_update_mask_8 = _RANDOM[6'h29][20];
        s1_update_mask_9 = _RANDOM[6'h29][21];
        s1_update_mask_10 = _RANDOM[6'h29][22];
        s1_update_mask_11 = _RANDOM[6'h29][23];
        s1_update_mask_12 = _RANDOM[6'h29][24];
        s1_update_mask_13 = _RANDOM[6'h29][25];
        s1_update_mask_14 = _RANDOM[6'h29][26];
        s1_update_mask_15 = _RANDOM[6'h29][27];
        s1_agt_entry_pht_index = {_RANDOM[6'h29][31:28], _RANDOM[6'h2A][0]};
        s1_agt_entry_pht_tag = _RANDOM[6'h2A][13:1];
        s1_agt_entry_region_bits = _RANDOM[6'h2A][29:14];
        s1_agt_entry_region_bit_single = {_RANDOM[6'h2A][31:30], _RANDOM[6'h2B][13:0]};
        s1_agt_entry_region_tag = _RANDOM[6'h2B][24:14];
        s1_agt_entry_region_offset = _RANDOM[6'h2B][28:25];
        s1_agt_entry_decr_mode = _RANDOM[6'h2C][1];
        s1_cross_region_match = _RANDOM[6'h2C][4];
        s1_alloc_last_REG = _RANDOM[6'h2C][5];
        s1_do_dcache_evict_last_REG = _RANDOM[6'h2C][6];
        s1_replace_mask_r = _RANDOM[6'h2C][22:7];
        s1_replace_mask_r_1 = {_RANDOM[6'h2C][31:23], _RANDOM[6'h2D][6:0]};
        s1_pf_gen_match_vec_0 = _RANDOM[6'h2D][7];
        s1_pf_gen_match_vec_1 = _RANDOM[6'h2D][8];
        s1_pf_gen_match_vec_2 = _RANDOM[6'h2D][9];
        s1_pf_gen_match_vec_3 = _RANDOM[6'h2D][10];
        s1_pf_gen_match_vec_4 = _RANDOM[6'h2D][11];
        s1_pf_gen_match_vec_5 = _RANDOM[6'h2D][12];
        s1_pf_gen_match_vec_6 = _RANDOM[6'h2D][13];
        s1_pf_gen_match_vec_7 = _RANDOM[6'h2D][14];
        s1_pf_gen_match_vec_8 = _RANDOM[6'h2D][15];
        s1_pf_gen_match_vec_9 = _RANDOM[6'h2D][16];
        s1_pf_gen_match_vec_10 = _RANDOM[6'h2D][17];
        s1_pf_gen_match_vec_11 = _RANDOM[6'h2D][18];
        s1_pf_gen_match_vec_12 = _RANDOM[6'h2D][19];
        s1_pf_gen_match_vec_13 = _RANDOM[6'h2D][20];
        s1_pf_gen_match_vec_14 = _RANDOM[6'h2D][21];
        s1_pf_gen_match_vec_15 = _RANDOM[6'h2D][22];
        s1_region_paddr = {_RANDOM[6'h2D][31:23], _RANDOM[6'h2E][30:0]};
        s1_region_vaddr = {_RANDOM[6'h2E][31], _RANDOM[6'h2F], _RANDOM[6'h30][6:0]};
        s1_region_offset = _RANDOM[6'h30][10:7];
        s2_evict_entry_pht_index = {_RANDOM[6'h30][31:28], _RANDOM[6'h31][0]};
        s2_evict_entry_pht_tag = _RANDOM[6'h31][13:1];
        s2_evict_entry_region_bits = _RANDOM[6'h31][29:14];
        s2_evict_entry_region_bit_single = {_RANDOM[6'h31][31:30], _RANDOM[6'h32][13:0]};
        s2_evict_entry_region_offset = _RANDOM[6'h32][28:25];
        s2_evict_entry_access_cnt = {_RANDOM[6'h32][31:29], _RANDOM[6'h33][0]};
        s2_evict_entry_decr_mode = _RANDOM[6'h33][1];
        s2_evict_entry_has_been_signal_updated = _RANDOM[6'h33][3];
        s2_evict_valid_last_REG = _RANDOM[6'h33][4];
        s2_update = _RANDOM[6'h33][5];
        s2_real_update = _RANDOM[6'h33][6];
        s2_pht_lookup_valid_last_REG = _RANDOM[6'h35][15];
        s2_pht_lookup_pht_index = _RANDOM[6'h35][20:16];
        s2_pht_lookup_pht_tag = {_RANDOM[6'h35][31:21], _RANDOM[6'h36][1:0]};
        s2_pht_lookup_region_paddr = {_RANDOM[6'h36][31:2], _RANDOM[6'h37][9:0]};
        s2_pht_lookup_region_vaddr = {_RANDOM[6'h37][31:10], _RANDOM[6'h38][17:0]};
        s2_pht_lookup_region_offset = _RANDOM[6'h38][21:18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        valids_4 = 1'h0;
        valids_5 = 1'h0;
        valids_6 = 1'h0;
        valids_7 = 1'h0;
        valids_8 = 1'h0;
        valids_9 = 1'h0;
        valids_10 = 1'h0;
        valids_11 = 1'h0;
        valids_12 = 1'h0;
        valids_13 = 1'h0;
        valids_14 = 1'h0;
        valids_15 = 1'h0;
        state_reg = 15'h0;
        prev_lookup_valid_last_REG = 1'h0;
        s1_update_last_REG = 1'h0;
        s1_alloc_last_REG = 1'h0;
        s1_do_dcache_evict_last_REG = 1'h0;
        s2_evict_valid_last_REG = 1'h0;
        s2_update = 1'h0;
        s2_real_update = 1'h0;
        s2_pht_lookup_valid_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_s2_pht_lookup_valid = s2_pht_lookup_valid_last_REG;
  assign io_s2_pht_lookup_bits_pht_index = s2_pht_lookup_pht_index;
  assign io_s2_pht_lookup_bits_pht_tag = s2_pht_lookup_pht_tag;
  assign io_s2_pht_lookup_bits_region_paddr = s2_pht_lookup_region_paddr;
  assign io_s2_pht_lookup_bits_region_vaddr = s2_pht_lookup_region_vaddr;
  assign io_s2_pht_lookup_bits_region_offset = s2_pht_lookup_region_offset;
  assign io_s2_evict_valid =
    (~s2_real_update | (|(s2_evict_entry_access_cnt[3:1]))) & s2_evict_valid_last_REG;
  assign io_s2_evict_bits_pht_index = s2_evict_entry_pht_index;
  assign io_s2_evict_bits_pht_tag = s2_evict_entry_pht_tag;
  assign io_s2_evict_bits_region_bits = s2_evict_entry_region_bits;
  assign io_s2_evict_bits_region_bit_single = s2_evict_entry_region_bit_single;
  assign io_s2_evict_bits_region_offset = s2_evict_entry_region_offset;
  assign io_s2_evict_bits_access_cnt = s2_evict_entry_access_cnt;
  assign io_s2_evict_bits_decr_mode = s2_evict_entry_decr_mode;
  assign io_s2_evict_bits_single_update = s2_update & ~s2_real_update;
  assign io_s2_evict_bits_has_been_signal_updated =
    s2_evict_entry_has_been_signal_updated;
endmodule

