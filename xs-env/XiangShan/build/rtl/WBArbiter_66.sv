// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module WBArbiter_66(
  input        clock,
  input        reset,
  output       io_in_0_ready,
  input        io_in_0_valid,
  input  [4:0] io_in_0_bits_addr,
  output       io_out_valid,
  output [4:0] io_out_bits_addr
);

  reg  [2:0] cancelCounter_0;
  reg        isFull_0;
  reg        hasFull;
  wire       finalValid_0 =
    io_in_0_valid & (~hasFull | ~(io_in_0_valid & isFull_0) | isFull_0);
  wire       io_in_0_ready_0 = finalValid_0 | ~io_in_0_valid;
  wire       _GEN = io_in_0_valid & io_in_0_ready_0;
  wire       _GEN_0 = ~_GEN & isFull_0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      cancelCounter_0 <= 3'h0;
      isFull_0 <= 1'h0;
      hasFull <= 1'h0;
    end
    else if (io_in_0_valid & ~io_in_0_ready_0) begin
      if (&cancelCounter_0)
        cancelCounter_0 <= 3'h7;
      else
        cancelCounter_0 <= 3'(cancelCounter_0 + 3'h1);
      isFull_0 <= &(cancelCounter_0[2:1]);
      hasFull <= &(cancelCounter_0[2:1]);
    end
    else begin
      if (_GEN)
        cancelCounter_0 <= 3'h0;
      isFull_0 <= _GEN_0;
      hasFull <= _GEN_0;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        cancelCounter_0 = _RANDOM[/*Zero width*/ 1'b0][2:0];
        isFull_0 = _RANDOM[/*Zero width*/ 1'b0][3];
        hasFull = _RANDOM[/*Zero width*/ 1'b0][4];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        cancelCounter_0 = 3'h0;
        isFull_0 = 1'h0;
        hasFull = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_0_ready = io_in_0_ready_0;
  assign io_out_valid = finalValid_0;
  assign io_out_bits_addr = io_in_0_bits_addr;
endmodule

