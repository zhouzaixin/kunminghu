// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VBestOffsetPrefetch(
  input         clock,
  input         reset,
  input         io_enable,
  input         io_train_valid,
  input         io_train_bits_needT,
  input  [6:0]  io_train_bits_source,
  input  [43:0] io_train_bits_vaddr,
  output        io_tlb_req_req_valid,
  output [49:0] io_tlb_req_req_bits_vaddr,
  output [2:0]  io_tlb_req_req_bits_cmd,
  output        io_tlb_req_req_bits_kill,
  output        io_tlb_req_req_bits_no_translate,
  input         io_tlb_req_resp_valid,
  input  [47:0] io_tlb_req_resp_bits_paddr_0,
  input  [1:0]  io_tlb_req_resp_bits_pbmt,
  input         io_tlb_req_resp_bits_miss,
  input         io_tlb_req_resp_bits_excp_0_gpf_ld,
  input         io_tlb_req_resp_bits_excp_0_pf_ld,
  input         io_tlb_req_resp_bits_excp_0_af_ld,
  input         io_tlb_req_pmp_resp_ld,
  input         io_tlb_req_pmp_resp_mmio,
  input         io_req_ready,
  output        io_req_valid,
  output [34:0] io_req_bits_tag,
  output [6:0]  io_req_bits_set,
  output [43:0] io_req_bits_vaddr,
  output        io_req_bits_needT,
  output [6:0]  io_req_bits_source
);

  wire        io_req_valid_0;
  wire        _reqFilter_io_out_req_valid;
  wire        _scoreTable_io_req_ready;
  wire [9:0]  _scoreTable_io_prefetchOffset;
  wire        _scoreTable_io_prefetchDisable;
  wire        _scoreTable_io_test_req_valid;
  wire [49:0] _scoreTable_io_test_req_bits_addr;
  wire [9:0]  _scoreTable_io_test_req_bits_testOffset;
  wire [6:0]  _scoreTable_io_test_req_bits_ptr;
  wire        _rrTable_io_w_ready;
  wire        _rrTable_io_r_resp_valid;
  wire [6:0]  _rrTable_io_r_resp_bits_ptr;
  wire        _rrTable_io_r_resp_bits_hit;
  wire        _delayQueue_io_out_valid;
  wire [49:0] _delayQueue_io_out_bits;
  wire        _s0_fire_T = _scoreTable_io_req_ready & io_train_valid;
  reg         s1_req_valid;
  reg         s1_needT;
  reg  [6:0]  s1_source;
  reg  [49:0] s1_newFullAddr;
  reg  [43:0] s1_reqVaddr;
  assign io_req_valid_0 = io_enable & _reqFilter_io_out_req_valid;
  always @(posedge clock or posedge reset) begin
    if (reset)
      s1_req_valid <= 1'h0;
    else
      s1_req_valid <=
        _s0_fire_T | ~((io_req_ready | ~io_req_valid_0) & s1_req_valid) & s1_req_valid;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_s0_fire_T) begin
      s1_needT <= io_train_bits_needT;
      s1_source <= io_train_bits_source;
      s1_newFullAddr <=
        50'({io_train_bits_vaddr, 6'h0}
            + {{34{_scoreTable_io_prefetchOffset[9]}},
               _scoreTable_io_prefetchOffset,
               6'h0});
      s1_reqVaddr <= io_train_bits_vaddr;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        s1_req_valid = _RANDOM[2'h0][0];
        s1_needT = _RANDOM[2'h0][1];
        s1_source = _RANDOM[2'h0][8:2];
        s1_newFullAddr = {_RANDOM[2'h0][31:9], _RANDOM[2'h1][26:0]};
        s1_reqVaddr = {_RANDOM[2'h1][31:27], _RANDOM[2'h2], _RANDOM[2'h3][6:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        s1_req_valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DelayQueue_1 delayQueue (
    .clock        (clock),
    .reset        (reset),
    .io_in_valid  (io_train_valid),
    .io_in_bits   (io_train_bits_vaddr),
    .io_out_ready (_rrTable_io_w_ready),
    .io_out_valid (_delayQueue_io_out_valid),
    .io_out_bits  (_delayQueue_io_out_bits)
  );
  RecentRequestTable_1 rrTable (
    .clock                    (clock),
    .reset                    (reset),
    .io_w_ready               (_rrTable_io_w_ready),
    .io_w_valid               (_delayQueue_io_out_valid),
    .io_w_bits                (_delayQueue_io_out_bits),
    .io_r_req_valid           (_scoreTable_io_test_req_valid),
    .io_r_req_bits_addr       (_scoreTable_io_test_req_bits_addr),
    .io_r_req_bits_testOffset (_scoreTable_io_test_req_bits_testOffset),
    .io_r_req_bits_ptr        (_scoreTable_io_test_req_bits_ptr),
    .io_r_resp_valid          (_rrTable_io_r_resp_valid),
    .io_r_resp_bits_ptr       (_rrTable_io_r_resp_bits_ptr),
    .io_r_resp_bits_hit       (_rrTable_io_r_resp_bits_hit)
  );
  OffsetScoreTable_1 scoreTable (
    .clock                       (clock),
    .reset                       (reset),
    .io_req_ready                (_scoreTable_io_req_ready),
    .io_req_valid                (io_train_valid),
    .io_req_bits                 ({io_train_bits_vaddr, 6'h0}),
    .io_prefetchOffset           (_scoreTable_io_prefetchOffset),
    .io_prefetchDisable          (_scoreTable_io_prefetchDisable),
    .io_test_req_valid           (_scoreTable_io_test_req_valid),
    .io_test_req_bits_addr       (_scoreTable_io_test_req_bits_addr),
    .io_test_req_bits_testOffset (_scoreTable_io_test_req_bits_testOffset),
    .io_test_req_bits_ptr        (_scoreTable_io_test_req_bits_ptr),
    .io_test_resp_valid          (_rrTable_io_r_resp_valid),
    .io_test_resp_bits_ptr       (_rrTable_io_r_resp_bits_ptr),
    .io_test_resp_bits_hit       (_rrTable_io_r_resp_bits_hit)
  );
  PrefetchReqBuffer reqFilter (
    .clock                              (clock),
    .reset                              (reset),
    .io_in_req_valid                    (~_scoreTable_io_prefetchDisable & s1_req_valid),
    .io_in_req_bits_full_vaddr          (s1_newFullAddr),
    .io_in_req_bits_base_vaddr          (s1_reqVaddr),
    .io_in_req_bits_needT               (s1_needT),
    .io_in_req_bits_source              (s1_source),
    .io_tlb_req_req_valid               (io_tlb_req_req_valid),
    .io_tlb_req_req_bits_vaddr          (io_tlb_req_req_bits_vaddr),
    .io_tlb_req_req_bits_cmd            (io_tlb_req_req_bits_cmd),
    .io_tlb_req_req_bits_kill           (io_tlb_req_req_bits_kill),
    .io_tlb_req_req_bits_no_translate   (io_tlb_req_req_bits_no_translate),
    .io_tlb_req_resp_valid              (io_tlb_req_resp_valid),
    .io_tlb_req_resp_bits_paddr_0       (io_tlb_req_resp_bits_paddr_0),
    .io_tlb_req_resp_bits_pbmt          (io_tlb_req_resp_bits_pbmt),
    .io_tlb_req_resp_bits_miss          (io_tlb_req_resp_bits_miss),
    .io_tlb_req_resp_bits_excp_0_gpf_ld (io_tlb_req_resp_bits_excp_0_gpf_ld),
    .io_tlb_req_resp_bits_excp_0_pf_ld  (io_tlb_req_resp_bits_excp_0_pf_ld),
    .io_tlb_req_resp_bits_excp_0_af_ld  (io_tlb_req_resp_bits_excp_0_af_ld),
    .io_tlb_req_pmp_resp_ld             (io_tlb_req_pmp_resp_ld),
    .io_tlb_req_pmp_resp_mmio           (io_tlb_req_pmp_resp_mmio),
    .io_out_req_ready                   (io_req_ready),
    .io_out_req_valid                   (_reqFilter_io_out_req_valid),
    .io_out_req_bits_tag                (io_req_bits_tag),
    .io_out_req_bits_set                (io_req_bits_set),
    .io_out_req_bits_vaddr              (io_req_bits_vaddr),
    .io_out_req_bits_needT              (io_req_bits_needT),
    .io_out_req_bits_source             (io_req_bits_source)
  );
  assign io_req_valid = io_req_valid_0;
endmodule

