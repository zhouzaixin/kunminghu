// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4ToTL(
  input          clock,
  input          reset,
  output         auto_in_aw_ready,
  input          auto_in_aw_valid,
  input          auto_in_aw_bits_id,
  input  [47:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  output         auto_in_w_ready,
  input          auto_in_w_valid,
  input  [255:0] auto_in_w_bits_data,
  input  [31:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output         auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output         auto_in_ar_ready,
  input          auto_in_ar_valid,
  input          auto_in_ar_bits_id,
  input  [47:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input          auto_in_r_ready,
  output         auto_in_r_valid,
  output         auto_in_r_bits_id,
  output [255:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output         auto_in_r_bits_last,
  input          auto_out_a_ready,
  output         auto_out_a_valid,
  output [3:0]   auto_out_a_bits_opcode,
  output [2:0]   auto_out_a_bits_size,
  output [1:0]   auto_out_a_bits_source,
  output [47:0]  auto_out_a_bits_address,
  output [31:0]  auto_out_a_bits_mask,
  output [255:0] auto_out_a_bits_data,
  output         auto_out_d_ready,
  input          auto_out_d_valid,
  input  [3:0]   auto_out_d_bits_opcode,
  input  [2:0]   auto_out_d_bits_size,
  input  [1:0]   auto_out_d_bits_source,
  input          auto_out_d_bits_denied,
  input  [255:0] auto_out_d_bits_data,
  input          auto_out_d_bits_corrupt
);

  wire        w_out_ready;
  wire        _q_b_deq_q_io_enq_ready;
  wire        _q_b_deq_q_io_deq_valid;
  wire        _q_b_deq_q_io_deq_bits_id;
  wire        _nodeIn_r_deq_q_io_enq_ready;
  wire [22:0] _r_size1_T_1 = {7'h0, auto_in_ar_bits_len, 8'hFF} << auto_in_ar_bits_size;
  wire [13:0] _GEN = ~(_r_size1_T_1[22:9]);
  wire [7:0]  r_size_hi = _r_size1_T_1[22:15] & {1'h1, _GEN[13:7]};
  wire [6:0]  _r_size_T_6 = r_size_hi[7:1] | _r_size1_T_1[14:8] & _GEN[6:0];
  wire [2:0]  _r_size_T_8 = _r_size_T_6[6:4] | _r_size_T_6[2:0];
  wire        _r_size_T_10 = _r_size_T_8[2] | _r_size_T_8[0];
  wire [3:0]  r_size =
    {|r_size_hi, |(_r_size_T_6[6:3]), |(_r_size_T_8[2:1]), _r_size_T_10};
  wire [47:0] r_addr =
    r_size < 4'h7 ? auto_in_ar_bits_addr : {43'h0, auto_in_ar_bits_addr[4:0]};
  wire        r_out_bits_a_mask_sub_sub_sub_sub_sub_0_1 = r_size > 4'h4;
  wire [2:0]  _GEN_0 = {|(_r_size_T_6[6:3]), |(_r_size_T_8[2:1]), _r_size_T_10};
  wire        r_out_bits_a_mask_sub_sub_sub_sub_size = _GEN_0 == 3'h4;
  wire        r_out_bits_a_mask_sub_sub_sub_sub_0_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_sub_sub_size
    & ~(r_addr[4]);
  wire        r_out_bits_a_mask_sub_sub_sub_sub_1_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_sub_sub_size
    & r_addr[4];
  wire        r_out_bits_a_mask_sub_sub_sub_size = _GEN_0 == 3'h3;
  wire        r_out_bits_a_mask_sub_sub_sub_0_2 = ~(r_addr[4]) & ~(r_addr[3]);
  wire        r_out_bits_a_mask_sub_sub_sub_0_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_sub_size
    & r_out_bits_a_mask_sub_sub_sub_0_2;
  wire        r_out_bits_a_mask_sub_sub_sub_1_2 = ~(r_addr[4]) & r_addr[3];
  wire        r_out_bits_a_mask_sub_sub_sub_1_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_sub_size
    & r_out_bits_a_mask_sub_sub_sub_1_2;
  wire        r_out_bits_a_mask_sub_sub_sub_2_2 = r_addr[4] & ~(r_addr[3]);
  wire        r_out_bits_a_mask_sub_sub_sub_2_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_1_1 | r_out_bits_a_mask_sub_sub_sub_size
    & r_out_bits_a_mask_sub_sub_sub_2_2;
  wire        r_out_bits_a_mask_sub_sub_sub_3_2 = r_addr[4] & r_addr[3];
  wire        r_out_bits_a_mask_sub_sub_sub_3_1 =
    r_out_bits_a_mask_sub_sub_sub_sub_1_1 | r_out_bits_a_mask_sub_sub_sub_size
    & r_out_bits_a_mask_sub_sub_sub_3_2;
  wire        r_out_bits_a_mask_sub_sub_size = _GEN_0 == 3'h2;
  wire        r_out_bits_a_mask_sub_sub_0_2 =
    r_out_bits_a_mask_sub_sub_sub_0_2 & ~(r_addr[2]);
  wire        r_out_bits_a_mask_sub_sub_0_1 =
    r_out_bits_a_mask_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_0_2;
  wire        r_out_bits_a_mask_sub_sub_1_2 =
    r_out_bits_a_mask_sub_sub_sub_0_2 & r_addr[2];
  wire        r_out_bits_a_mask_sub_sub_1_1 =
    r_out_bits_a_mask_sub_sub_sub_0_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_1_2;
  wire        r_out_bits_a_mask_sub_sub_2_2 =
    r_out_bits_a_mask_sub_sub_sub_1_2 & ~(r_addr[2]);
  wire        r_out_bits_a_mask_sub_sub_2_1 =
    r_out_bits_a_mask_sub_sub_sub_1_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_2_2;
  wire        r_out_bits_a_mask_sub_sub_3_2 =
    r_out_bits_a_mask_sub_sub_sub_1_2 & r_addr[2];
  wire        r_out_bits_a_mask_sub_sub_3_1 =
    r_out_bits_a_mask_sub_sub_sub_1_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_3_2;
  wire        r_out_bits_a_mask_sub_sub_4_2 =
    r_out_bits_a_mask_sub_sub_sub_2_2 & ~(r_addr[2]);
  wire        r_out_bits_a_mask_sub_sub_4_1 =
    r_out_bits_a_mask_sub_sub_sub_2_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_4_2;
  wire        r_out_bits_a_mask_sub_sub_5_2 =
    r_out_bits_a_mask_sub_sub_sub_2_2 & r_addr[2];
  wire        r_out_bits_a_mask_sub_sub_5_1 =
    r_out_bits_a_mask_sub_sub_sub_2_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_5_2;
  wire        r_out_bits_a_mask_sub_sub_6_2 =
    r_out_bits_a_mask_sub_sub_sub_3_2 & ~(r_addr[2]);
  wire        r_out_bits_a_mask_sub_sub_6_1 =
    r_out_bits_a_mask_sub_sub_sub_3_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_6_2;
  wire        r_out_bits_a_mask_sub_sub_7_2 =
    r_out_bits_a_mask_sub_sub_sub_3_2 & r_addr[2];
  wire        r_out_bits_a_mask_sub_sub_7_1 =
    r_out_bits_a_mask_sub_sub_sub_3_1 | r_out_bits_a_mask_sub_sub_size
    & r_out_bits_a_mask_sub_sub_7_2;
  wire        r_out_bits_a_mask_sub_size = _GEN_0 == 3'h1;
  wire        r_out_bits_a_mask_sub_0_2 = r_out_bits_a_mask_sub_sub_0_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_0_1 =
    r_out_bits_a_mask_sub_sub_0_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_0_2;
  wire        r_out_bits_a_mask_sub_1_2 = r_out_bits_a_mask_sub_sub_0_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_1_1 =
    r_out_bits_a_mask_sub_sub_0_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_1_2;
  wire        r_out_bits_a_mask_sub_2_2 = r_out_bits_a_mask_sub_sub_1_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_2_1 =
    r_out_bits_a_mask_sub_sub_1_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_2_2;
  wire        r_out_bits_a_mask_sub_3_2 = r_out_bits_a_mask_sub_sub_1_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_3_1 =
    r_out_bits_a_mask_sub_sub_1_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_3_2;
  wire        r_out_bits_a_mask_sub_4_2 = r_out_bits_a_mask_sub_sub_2_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_4_1 =
    r_out_bits_a_mask_sub_sub_2_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_4_2;
  wire        r_out_bits_a_mask_sub_5_2 = r_out_bits_a_mask_sub_sub_2_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_5_1 =
    r_out_bits_a_mask_sub_sub_2_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_5_2;
  wire        r_out_bits_a_mask_sub_6_2 = r_out_bits_a_mask_sub_sub_3_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_6_1 =
    r_out_bits_a_mask_sub_sub_3_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_6_2;
  wire        r_out_bits_a_mask_sub_7_2 = r_out_bits_a_mask_sub_sub_3_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_7_1 =
    r_out_bits_a_mask_sub_sub_3_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_7_2;
  wire        r_out_bits_a_mask_sub_8_2 = r_out_bits_a_mask_sub_sub_4_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_8_1 =
    r_out_bits_a_mask_sub_sub_4_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_8_2;
  wire        r_out_bits_a_mask_sub_9_2 = r_out_bits_a_mask_sub_sub_4_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_9_1 =
    r_out_bits_a_mask_sub_sub_4_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_9_2;
  wire        r_out_bits_a_mask_sub_10_2 = r_out_bits_a_mask_sub_sub_5_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_10_1 =
    r_out_bits_a_mask_sub_sub_5_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_10_2;
  wire        r_out_bits_a_mask_sub_11_2 = r_out_bits_a_mask_sub_sub_5_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_11_1 =
    r_out_bits_a_mask_sub_sub_5_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_11_2;
  wire        r_out_bits_a_mask_sub_12_2 = r_out_bits_a_mask_sub_sub_6_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_12_1 =
    r_out_bits_a_mask_sub_sub_6_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_12_2;
  wire        r_out_bits_a_mask_sub_13_2 = r_out_bits_a_mask_sub_sub_6_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_13_1 =
    r_out_bits_a_mask_sub_sub_6_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_13_2;
  wire        r_out_bits_a_mask_sub_14_2 = r_out_bits_a_mask_sub_sub_7_2 & ~(r_addr[1]);
  wire        r_out_bits_a_mask_sub_14_1 =
    r_out_bits_a_mask_sub_sub_7_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_14_2;
  wire        r_out_bits_a_mask_sub_15_2 = r_out_bits_a_mask_sub_sub_7_2 & r_addr[1];
  wire        r_out_bits_a_mask_sub_15_1 =
    r_out_bits_a_mask_sub_sub_7_1 | r_out_bits_a_mask_sub_size
    & r_out_bits_a_mask_sub_15_2;
  wire [22:0] _w_size1_T_1 = {7'h0, auto_in_aw_bits_len, 8'hFF} << auto_in_aw_bits_size;
  wire [13:0] _GEN_1 = ~(_w_size1_T_1[22:9]);
  wire [7:0]  w_size_hi = _w_size1_T_1[22:15] & {1'h1, _GEN_1[13:7]};
  wire [6:0]  _w_size_T_6 = w_size_hi[7:1] | _w_size1_T_1[14:8] & _GEN_1[6:0];
  wire [2:0]  _w_size_T_8 = _w_size_T_6[6:4] | _w_size_T_6[2:0];
  wire        _w_size_T_10 = _w_size_T_8[2] | _w_size_T_8[0];
  reg         w_count_0;
  reg         w_count_1;
  wire        nodeIn_aw_ready = w_out_ready & auto_in_w_valid & auto_in_w_bits_last;
  wire        w_out_valid = auto_in_aw_valid & auto_in_w_valid;
  reg  [7:0]  beatsLeft;
  wire        idle = beatsLeft == 8'h0;
  wire [1:0]  readys_valid = {w_out_valid, auto_in_ar_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], w_out_valid} | _readys_filter_T_1));
  wire        winner_0 = readys_readys[0] & auto_in_ar_valid;
  wire        winner_1 = readys_readys[1] & w_out_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign w_out_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);
  wire        nodeOut_a_valid =
    idle
      ? auto_in_ar_valid | w_out_valid
      : state_0 & auto_in_ar_valid | state_1 & w_out_valid;
  wire [1:0]  d_resp = {auto_out_d_bits_denied | auto_out_d_bits_corrupt, 1'h0};
  wire [12:0] _d_last_beats1_decode_T = 13'h3F << auto_out_d_bits_size;
  wire        d_last_beats1 = auto_out_d_bits_opcode[0] & ~(_d_last_beats1_decode_T[5]);
  reg         d_last_counter;
  wire        nodeOut_d_ready =
    auto_out_d_bits_opcode[0] ? _nodeIn_r_deq_q_io_enq_ready : _q_b_deq_q_io_enq_ready;
  reg         b_count_0;
  reg         b_count_1;
  wire        b_allow =
    (_q_b_deq_q_io_deq_bits_id
       ? b_count_1
       : b_count_0) != (_q_b_deq_q_io_deq_bits_id ? w_count_1 : w_count_0);
  wire        nodeIn_b_valid = _q_b_deq_q_io_deq_valid & b_allow;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire        _GEN_2 = nodeIn_aw_ready & auto_in_aw_valid;
  wire        latch = idle & auto_out_a_ready;
  wire        _GEN_3 = auto_in_b_ready & nodeIn_b_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      w_count_0 <= 1'h0;
      w_count_1 <= 1'h0;
      beatsLeft <= 8'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_last_counter <= 1'h0;
      b_count_0 <= 1'h0;
      b_count_1 <= 1'h0;
    end
    else begin
      if (_GEN_2 & ~auto_in_aw_bits_id)
        w_count_0 <= 1'(w_count_0 - 1'h1);
      if (_GEN_2 & auto_in_aw_bits_id)
        w_count_1 <= 1'(w_count_1 - 1'h1);
      if (latch)
        beatsLeft <= winner_1 ? auto_in_aw_bits_len : 8'h0;
      else
        beatsLeft <= 8'(beatsLeft - {7'h0, auto_out_a_ready & nodeOut_a_valid});
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (nodeOut_d_ready & auto_out_d_valid) begin
        if (d_last_counter)
          d_last_counter <= 1'(d_last_counter - 1'h1);
        else
          d_last_counter <= d_last_beats1;
      end
      if (_GEN_3 & ~_q_b_deq_q_io_deq_bits_id)
        b_count_0 <= 1'(b_count_0 - 1'h1);
      if (_GEN_3 & _q_b_deq_q_io_deq_bits_id)
        b_count_1 <= 1'(b_count_1 - 1'h1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        w_count_0 = _RANDOM[/*Zero width*/ 1'b0][2];
        w_count_1 = _RANDOM[/*Zero width*/ 1'b0][3];
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][11:4];
        readys_mask = _RANDOM[/*Zero width*/ 1'b0][13:12];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][14];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][15];
        d_last_counter = _RANDOM[/*Zero width*/ 1'b0][16];
        b_count_0 = _RANDOM[/*Zero width*/ 1'b0][17];
        b_count_1 = _RANDOM[/*Zero width*/ 1'b0][18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        w_count_0 = 1'h0;
        w_count_1 = 1'h0;
        beatsLeft = 8'h0;
        readys_mask = 2'h3;
        state_0 = 1'h0;
        state_1 = 1'h0;
        d_last_counter = 1'h0;
        b_count_0 = 1'h0;
        b_count_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_AXI4BundleR nodeIn_r_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_nodeIn_r_deq_q_io_enq_ready),
    .io_enq_valid     (auto_out_d_valid & auto_out_d_bits_opcode[0]),
    .io_enq_bits_id   (auto_out_d_bits_source[1]),
    .io_enq_bits_data (auto_out_d_bits_data),
    .io_enq_bits_resp (d_resp),
    .io_enq_bits_last (d_last_counter | ~d_last_beats1),
    .io_deq_ready     (auto_in_r_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
  Queue1_AXI4BundleB q_b_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_q_b_deq_q_io_enq_ready),
    .io_enq_valid     (auto_out_d_valid & ~(auto_out_d_bits_opcode[0])),
    .io_enq_bits_id   (auto_out_d_bits_source[1]),
    .io_enq_bits_resp (d_resp),
    .io_deq_ready     (auto_in_b_ready & b_allow),
    .io_deq_valid     (_q_b_deq_q_io_deq_valid),
    .io_deq_bits_id   (_q_b_deq_q_io_deq_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = w_out_ready & auto_in_aw_valid;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = _q_b_deq_q_io_deq_bits_id;
  assign auto_in_ar_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode = {1'h0, muxState_0, 1'h0, muxState_1};
  assign auto_out_a_bits_size =
    (muxState_0 ? {|(_r_size_T_6[6:3]), |(_r_size_T_8[2:1]), _r_size_T_10} : 3'h0)
    | (muxState_1 ? {|(_w_size_T_6[6:3]), |(_w_size_T_8[2:1]), _w_size_T_10} : 3'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? {auto_in_ar_bits_id, 1'h0} : 2'h0)
    | (muxState_1 ? {auto_in_aw_bits_id, 1'h1} : 2'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? r_addr : 48'h0)
    | (muxState_1
         ? ({|w_size_hi, |(_w_size_T_6[6:3]), |(_w_size_T_8[2:1]), _w_size_T_10} < 4'h7
              ? auto_in_aw_bits_addr
              : {43'h0, auto_in_aw_bits_addr[4:0]})
         : 48'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {r_out_bits_a_mask_sub_15_1 | r_out_bits_a_mask_sub_15_2 & r_addr[0],
          r_out_bits_a_mask_sub_15_1 | r_out_bits_a_mask_sub_15_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_14_1 | r_out_bits_a_mask_sub_14_2 & r_addr[0],
          r_out_bits_a_mask_sub_14_1 | r_out_bits_a_mask_sub_14_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_13_1 | r_out_bits_a_mask_sub_13_2 & r_addr[0],
          r_out_bits_a_mask_sub_13_1 | r_out_bits_a_mask_sub_13_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_12_1 | r_out_bits_a_mask_sub_12_2 & r_addr[0],
          r_out_bits_a_mask_sub_12_1 | r_out_bits_a_mask_sub_12_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_11_1 | r_out_bits_a_mask_sub_11_2 & r_addr[0],
          r_out_bits_a_mask_sub_11_1 | r_out_bits_a_mask_sub_11_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_10_1 | r_out_bits_a_mask_sub_10_2 & r_addr[0],
          r_out_bits_a_mask_sub_10_1 | r_out_bits_a_mask_sub_10_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_9_1 | r_out_bits_a_mask_sub_9_2 & r_addr[0],
          r_out_bits_a_mask_sub_9_1 | r_out_bits_a_mask_sub_9_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_8_1 | r_out_bits_a_mask_sub_8_2 & r_addr[0],
          r_out_bits_a_mask_sub_8_1 | r_out_bits_a_mask_sub_8_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_7_1 | r_out_bits_a_mask_sub_7_2 & r_addr[0],
          r_out_bits_a_mask_sub_7_1 | r_out_bits_a_mask_sub_7_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_6_1 | r_out_bits_a_mask_sub_6_2 & r_addr[0],
          r_out_bits_a_mask_sub_6_1 | r_out_bits_a_mask_sub_6_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_5_1 | r_out_bits_a_mask_sub_5_2 & r_addr[0],
          r_out_bits_a_mask_sub_5_1 | r_out_bits_a_mask_sub_5_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_4_1 | r_out_bits_a_mask_sub_4_2 & r_addr[0],
          r_out_bits_a_mask_sub_4_1 | r_out_bits_a_mask_sub_4_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_3_1 | r_out_bits_a_mask_sub_3_2 & r_addr[0],
          r_out_bits_a_mask_sub_3_1 | r_out_bits_a_mask_sub_3_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_2_1 | r_out_bits_a_mask_sub_2_2 & r_addr[0],
          r_out_bits_a_mask_sub_2_1 | r_out_bits_a_mask_sub_2_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_1_1 | r_out_bits_a_mask_sub_1_2 & r_addr[0],
          r_out_bits_a_mask_sub_1_1 | r_out_bits_a_mask_sub_1_2 & ~(r_addr[0]),
          r_out_bits_a_mask_sub_0_1 | r_out_bits_a_mask_sub_0_2 & r_addr[0],
          r_out_bits_a_mask_sub_0_1 | r_out_bits_a_mask_sub_0_2 & ~(r_addr[0])}
       : 32'h0) | (muxState_1 ? auto_in_w_bits_strb : 32'h0);
  assign auto_out_a_bits_data = muxState_1 ? auto_in_w_bits_data : 256'h0;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

