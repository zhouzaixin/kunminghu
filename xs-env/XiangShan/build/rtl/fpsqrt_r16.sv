// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module fpsqrt_r16(
  input         clock,
  input         reset,
  input         start_valid_i,
  output        start_ready_o,
  input         flush_i,
  input  [1:0]  fp_format_i,
  input  [63:0] op_i,
  input  [2:0]  rm_i,
  output        finish_valid_o,
  input         finish_ready_i,
  output [63:0] fpsqrt_res_o,
  output [4:0]  fflags_o,
  input         fp_aIsFpCanonicalNAN
);

  wire [55:0]  _u_fpsqrt_r16_block_nxt_rt_o;
  wire [52:0]  _u_fpsqrt_r16_block_nxt_rt_m1_o;
  wire [63:0]  _u_fpsqrt_r16_block_nxt_f_r_s_o;
  wire [63:0]  _u_fpsqrt_r16_block_nxt_f_r_c_o;
  wire [6:0]   _u_fpsqrt_r16_block_adder_7b_res_for_nxt_cycle_s0_qds_0_o;
  wire [8:0]   _u_fpsqrt_r16_block_adder_9b_res_for_nxt_cycle_s1_qds_0_o;
  wire [6:0]   _u_fpsqrt_r16_block_m_neg_1_to_nxt_cycle_0_o;
  wire [6:0]   _u_fpsqrt_r16_block_m_neg_0_to_nxt_cycle_0_o;
  wire [6:0]   _u_fpsqrt_r16_block_m_pos_1_to_nxt_cycle_0_o;
  wire [6:0]   _u_fpsqrt_r16_block_m_pos_2_to_nxt_cycle_0_o;
  wire [6:0]   _u_r4_qds_cg_iter_init_0_m_neg_1_o;
  wire [6:0]   _u_r4_qds_cg_iter_init_0_m_neg_0_o;
  wire [6:0]   _u_r4_qds_cg_iter_init_0_m_pos_1_o;
  wire [6:0]   _u_r4_qds_cg_iter_init_0_m_pos_2_o;
  wire [5:0]   _u_lzc_0_cnt_o;
  wire         _u_lzc_0_empty_o;
  reg  [3:0]   fsm_q;
  reg  [3:0]   iter_num_q;
  reg  [2:0]   fp_fmt_q;
  reg  [2:0]   rm_q;
  reg          out_sign_0_q;
  reg  [10:0]  out_exp_0_q;
  reg          res_is_nan_0_q;
  reg          res_is_inf_0_q;
  reg          res_is_exact_zero_0_q;
  reg          op_invalid_0_q;
  reg          res_is_sqrt_2_q;
  reg          res_is_sqrt_2_odd_q;
  reg  [55:0]  rt_q;
  reg  [52:0]  rt_m1_q;
  reg  [12:0]  mask_q;
  reg  [63:0]  f_r_s_q;
  reg  [63:0]  f_r_c_q;
  reg  [6:0]   nr_f_r_7b_for_nxt_cycle_s0_qds_0_q;
  reg  [8:0]   nr_f_r_9b_for_nxt_cycle_s1_qds_0_q;
  reg  [4:0]   m_neg_1_for_nxt_cycle_s0_qds_0_q;
  reg  [3:0]   m_neg_0_for_nxt_cycle_s0_qds_0_q;
  reg  [2:0]   m_pos_1_for_nxt_cycle_s0_qds_0_q;
  reg  [3:0]   m_pos_2_for_nxt_cycle_s0_qds_0_q;
  wire         _iter_num_d_T_11 = fp_format_i == 2'h2;
  wire         op_sign_0 =
    _iter_num_d_T_11 & op_i[63] | fp_format_i == 2'h1 & op_i[31] | ~(|fp_format_i)
    & op_i[15];
  wire         _iter_num_d_T_7 = fp_format_i == 2'h1;
  wire [10:0]  op_exp_0 =
    {11{~(|fp_format_i)}} & {6'h0, op_i[14:10]} | {11{_iter_num_d_T_7}}
    & {3'h0, op_i[30:23]} | {11{_iter_num_d_T_11}} & op_i[62:52];
  wire         need_2_cycles_init = op_exp_0 == 11'h0;
  wire         op_exp_is_max_0 =
    op_exp_0 == ((|fp_format_i) ? (_iter_num_d_T_7 ? 11'hFF : 11'h7FF) : 11'h1F);
  wire         op_is_zero_0 =
    ~fp_aIsFpCanonicalNAN & need_2_cycles_init & _u_lzc_0_empty_o;
  wire         op_is_inf_0 = ~fp_aIsFpCanonicalNAN & op_exp_is_max_0 & _u_lzc_0_empty_o;
  wire         op_is_qnan_0 =
    fp_aIsFpCanonicalNAN | op_exp_is_max_0
    & ((|fp_format_i) ? (_iter_num_d_T_7 ? op_i[22] : op_i[51]) : op_i[9]);
  wire         op_is_snan_0 =
    ~fp_aIsFpCanonicalNAN & op_exp_is_max_0 & ~_u_lzc_0_empty_o
    & ((|fp_format_i) ? (_iter_num_d_T_7 ? ~(op_i[22]) : ~(op_i[51])) : ~(op_i[9]));
  wire         op_invalid_0_d = op_sign_0 & ~op_is_zero_0 & ~op_is_qnan_0 | op_is_snan_0;
  wire         res_is_nan_0_d = op_is_qnan_0 | op_is_snan_0 | op_invalid_0_d;
  wire [52:0]  op_frac_pre_shifted_0 =
    {53{~(|fp_format_i)}} & {1'h0, op_i[9:0], 42'h0} | {53{_iter_num_d_T_7}}
    & {1'h0, op_i[22:0], 29'h0} | {53{_iter_num_d_T_11}} & {1'h0, op_i[51:0]};
  wire [5:0]   op_l_shift_num_0 = {6{need_2_cycles_init}} & _u_lzc_0_cnt_o;
  wire [54:0]  _op_frac_l_shifted_0_T_2 = {3'h0, rt_m1_q[51:0]} << iter_num_q[1:0];
  wire [11:0]  _out_exp_pre_0_T_24 =
    12'({1'h0, op_exp_0[10:1], op_exp_0[0] | need_2_cycles_init}
        + {2'h0,
           {6{_iter_num_d_T_7}} & {5'h3, ~(op_l_shift_num_0[4])} | {6{_iter_num_d_T_11}}
             & {4'hF, ~(op_l_shift_num_0[5:4])},
           ~(op_l_shift_num_0[3:0])});
  wire         exp_is_odd_pre_0_0 =
    need_2_cycles_init ? op_l_shift_num_0[0] : ~(op_exp_0[0]);
  wire         current_exp_is_odd_0 = fsm_q[0] ? exp_is_odd_pre_0_0 : mask_q[0];
  wire [51:0]  current_frac_0 =
    fsm_q[0] ? op_frac_pre_shifted_0[51:0] : _op_frac_l_shifted_0_T_2[51:0];
  wire         rt_1st_0_1 =
    {current_exp_is_odd_0, current_frac_0[51]} == 2'h1
    | {current_exp_is_odd_0, current_frac_0[51]} == 2'h2;
  wire [1:0]   _rt_1st_0_2_T_1 = {current_exp_is_odd_0, current_frac_0[51]};
  wire [66:0]  _nr_f_r_T =
    67'({f_r_s_q[63:48],
         ~(fp_fmt_q[0]),
         f_r_s_q[47:32],
         fp_fmt_q[2],
         f_r_s_q[31:16],
         ~(fp_fmt_q[0]),
         f_r_s_q[15:0]}
        + {f_r_c_q[63:48],
           1'h0,
           f_r_c_q[47:32],
           1'h0,
           f_r_c_q[31:16],
           1'h0,
           f_r_c_q[15:0]});
  wire [53:0]  f_r_xor = f_r_s_q[62:9] ^ f_r_c_q[62:9];
  wire [53:0]  f_r_or = f_r_s_q[61:8] | f_r_c_q[61:8];
  wire         select_rt_m1_0 = _nr_f_r_T[66] & ~res_is_sqrt_2_q;
  wire [52:0]  rt_for_inc =
    res_is_sqrt_2_q
      ? {1'h0, {52{res_is_sqrt_2_q & fp_fmt_q[2]}} & 52'hD413CCCFE7799}
        | {53{res_is_sqrt_2_q & fp_fmt_q[1]}} & {24'h6A09E6, rt_q[2:0], 26'h0}
        | {53{res_is_sqrt_2_q & fp_fmt_q[0]}} & {11'h350, rt_q[1:0], 40'h0}
      : rt_q[54:2];
  wire         _rt_pre_inc_T_3 = ~(fp_fmt_q[0]) & rt_for_inc[39];
  wire         _rt_pre_inc_T_9 = ~(fp_fmt_q[0] | fp_fmt_q[1]) & rt_for_inc[25];
  wire         _rt_pre_inc_T_13 = ~(fp_fmt_q[0]) & rt_for_inc[11];
  wire [52:0]  _rt_rounded_0_T =
    {1'h0,
     rt_for_inc[52:40],
     _rt_pre_inc_T_3,
     rt_for_inc[38:26],
     _rt_pre_inc_T_9,
     rt_for_inc[24:12],
     _rt_pre_inc_T_13,
     rt_for_inc[10:1]};
  wire [52:0]  _rt_inc_res_T_2 =
    53'({1'h0,
         rt_for_inc[52:40],
         _rt_pre_inc_T_3,
         rt_for_inc[38:26],
         _rt_pre_inc_T_9,
         rt_for_inc[24:12],
         _rt_pre_inc_T_13,
         rt_for_inc[10:1]}
        + {1'h0,
           {52{fp_fmt_q[0]}} & 52'h40010004001 | {52{fp_fmt_q[1]}} & 52'h20000002
             | {51'h0, fp_fmt_q[2]}});
  wire         round_bit_rt_0 =
    fp_fmt_q[0] & rt_for_inc[42] | fp_fmt_q[1] & rt_for_inc[29] | fp_fmt_q[2]
    & rt_for_inc[0];
  wire         inexact_rt_0 =
    round_bit_rt_0 | _nr_f_r_T[66] | f_r_xor[53:40] != f_r_or[53:40] | ~(fp_fmt_q[0])
    & f_r_xor[39:28] != f_r_or[39:28] | fp_fmt_q[2] & f_r_xor[27:0] != f_r_or[27:0]
    | res_is_sqrt_2_q;
  wire         _rt_m1_need_rup_0_T_1 = rm_q == 3'h0;
  wire         _rt_m1_need_rup_0_T = rm_q == 3'h3;
  wire         _rt_m1_need_rup_0_T_2 = rm_q == 3'h4;
  wire [52:0]  frac_rounded_0 =
    select_rt_m1_0
      ? (_rt_m1_need_rup_0_T | (_rt_m1_need_rup_0_T_1 | _rt_m1_need_rup_0_T_2)
         & (fp_fmt_q[0] & rt_m1_q[42] | fp_fmt_q[1] & rt_m1_q[29] | fp_fmt_q[2]
            & rt_m1_q[0])
           ? ((fp_fmt_q[0] & rt_q[45] | fp_fmt_q[1] & rt_q[32] | fp_fmt_q[2]
               & rt_q[3]) == (fp_fmt_q[0] & rt_m1_q[43] | fp_fmt_q[1] & rt_m1_q[30]
                              | fp_fmt_q[2] & rt_m1_q[1])
                ? _rt_inc_res_T_2
                : _rt_rounded_0_T)
           : {1'h0, rt_m1_q[52:1]})
      : _rt_m1_need_rup_0_T_1 & round_bit_rt_0 | _rt_m1_need_rup_0_T & inexact_rt_0
        | _rt_m1_need_rup_0_T_2 & round_bit_rt_0
          ? _rt_inc_res_T_2
          : _rt_rounded_0_T;
  wire [10:0]  exp_rounded_0 =
    frac_rounded_0[52] ? 11'(out_exp_0_q + 11'h1) : out_exp_0_q;
  wire         _f64_exp_res_0_T = res_is_nan_0_q | res_is_inf_0_q;
  wire         _f64_frac_res_0_T_1 = res_is_inf_0_q | res_is_exact_zero_0_q;
  always @(posedge clock or posedge reset) begin
    if (reset)
      fsm_q <= 4'h1;
    else if (flush_i)
      fsm_q <= 4'h1;
    else if (fsm_q == 4'h1)
      fsm_q <=
        start_valid_i
          ? (res_is_nan_0_d | op_is_inf_0 | op_is_zero_0 | _u_lzc_0_empty_o
               ? 4'h8
               : {1'h0, need_2_cycles_init ? 3'h2 : 3'h4})
          : 4'h1;
    else if (fsm_q == 4'h2)
      fsm_q <= 4'h4;
    else if (fsm_q == 4'h4)
      fsm_q <= (|iter_num_q) ? 4'h4 : 4'h8;
    else if (fsm_q != 4'h8 | finish_ready_i)
      fsm_q <= 4'h1;
    else
      fsm_q <= 4'h8;
  end // always @(posedge, posedge)
  wire [114:0] _op_frac_l_shifted_s5_to_s2_T_3 =
    {63'h0, op_frac_pre_shifted_0[51:0]} << {109'h0, op_l_shift_num_0[5:2], 2'h0};
  wire         start_handshaked = start_valid_i & fsm_q[0];
  wire         rt_1st_0_0 = {current_exp_is_odd_0, current_frac_0[51]} == 2'h0;
  wire [53:0]  _f_r_s_iter_init_pre_0_T_2 =
    current_exp_is_odd_0 ? {1'h1, current_frac_0, 1'h0} : {2'h1, current_frac_0};
  wire [55:0]  f_r_c_iter_init_0 =
    {56{rt_1st_0_0}} & 56'hC0000000000000 | {56{rt_1st_0_1}} & 56'h70000000000000;
  wire [55:0]  rt_iter_init = {rt_1st_0_1 | rt_1st_0_0, rt_1st_0_1, 54'h0};
  wire [52:0]  rt_m1_iter_init = {rt_1st_0_0 | (&_rt_1st_0_2_T_1), 52'h0};
  always @(posedge clock) begin
    if (start_handshaked | fsm_q[1] | fsm_q[2] & (|iter_num_q)) begin
      if (fsm_q[0]) begin
        if (need_2_cycles_init)
          iter_num_q <= {iter_num_q[3:2], op_l_shift_num_0[1:0]};
        else
          iter_num_q <=
            {2'h0, ~(|fp_format_i), 1'h0} | {4{_iter_num_d_T_7}} & 4'h5
            | {4{_iter_num_d_T_11}} & 4'hC;
      end
      else if (fsm_q[1])
        iter_num_q <=
          {2'h0, fp_fmt_q[0], 1'h0} | {4{fp_fmt_q[1]}} & 4'h5 | {4{fp_fmt_q[2]}} & 4'hC;
      else
        iter_num_q <= 4'(iter_num_q - 4'h1);
    end
    if (start_handshaked) begin
      fp_fmt_q <= {_iter_num_d_T_11, _iter_num_d_T_7, ~(|fp_format_i)};
      rm_q <= rm_i;
      out_sign_0_q <= ~res_is_nan_0_d & op_sign_0;
      out_exp_0_q <= _out_exp_pre_0_T_24[11:1];
      res_is_nan_0_q <= res_is_nan_0_d;
      res_is_inf_0_q <= op_is_inf_0;
      res_is_exact_zero_0_q <= op_is_zero_0;
      op_invalid_0_q <= op_invalid_0_d;
      res_is_sqrt_2_q <= _u_lzc_0_empty_o & ~(op_exp_0[0]);
      res_is_sqrt_2_odd_q <= _u_lzc_0_empty_o & op_exp_0[0];
    end
    if (start_handshaked | fsm_q[1] | fsm_q[2]) begin
      if (fsm_q[0]) begin
        if (need_2_cycles_init)
          rt_q <= {42'h0, rt_q[55:43], 1'h0};
        else
          rt_q <= rt_iter_init;
      end
      else
        rt_q <= fsm_q[1] ? rt_iter_init : _u_fpsqrt_r16_block_nxt_rt_o;
    end
    if (start_handshaked | fsm_q[1] | fsm_q[2]) begin
      if (fsm_q[0]) begin
        if (need_2_cycles_init)
          rt_m1_q <= {rt_m1_q[52], _op_frac_l_shifted_s5_to_s2_T_3[51:0]};
        else
          rt_m1_q <= rt_m1_iter_init;
      end
      else if (fsm_q[1])
        rt_m1_q <= rt_m1_iter_init;
      else
        rt_m1_q <= _u_fpsqrt_r16_block_nxt_rt_m1_o;
    end
    if (start_handshaked | fsm_q[1] | fsm_q[2]) begin
      if (fsm_q[0]) begin
        if (need_2_cycles_init)
          mask_q <= {mask_q[12:4], 3'h0, exp_is_odd_pre_0_0};
        else
          mask_q <= 13'h1000;
      end
      else if (fsm_q[1])
        mask_q <= 13'h1000;
      else
        mask_q <= {1'h0, mask_q[12:1]};
    end
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      f_r_s_q <=
        fsm_q[0] | fsm_q[1]
          ? {_f_r_s_iter_init_pre_0_T_2[53:38],
             fsm_q[1] & fp_fmt_q[0] ? 16'h0 : _f_r_s_iter_init_pre_0_T_2[37:22],
             {16{fsm_q[0] & _iter_num_d_T_11 | fsm_q[1] & fp_fmt_q[2]}}
               & _f_r_s_iter_init_pre_0_T_2[21:6],
             {16{fsm_q[0] & _iter_num_d_T_11 | fsm_q[1] & fp_fmt_q[2]}}
               & {_f_r_s_iter_init_pre_0_T_2[5:0], 10'h0}}
          : _u_fpsqrt_r16_block_nxt_f_r_s_o;
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      f_r_c_q <=
        fsm_q[0] | fsm_q[1]
          ? {f_r_c_iter_init_0[55:40],
             fsm_q[1] & fp_fmt_q[0] ? 16'h0 : f_r_c_iter_init_0[39:24],
             {16{fsm_q[0] & _iter_num_d_T_11 | fsm_q[1] & fp_fmt_q[2]}}
               & f_r_c_iter_init_0[23:8],
             {16{fsm_q[0] & _iter_num_d_T_11 | fsm_q[1] & fp_fmt_q[2]}}
               & {f_r_c_iter_init_0[7:0], 8'h0}}
          : _u_fpsqrt_r16_block_nxt_f_r_c_o;
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      nr_f_r_7b_for_nxt_cycle_s0_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? {4'(_f_r_s_iter_init_pre_0_T_2[53:50] + f_r_c_iter_init_0[55:52]),
             _f_r_s_iter_init_pre_0_T_2[49:47]}
          : _u_fpsqrt_r16_block_adder_7b_res_for_nxt_cycle_s0_qds_0_o;
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      nr_f_r_9b_for_nxt_cycle_s1_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? {2'(_f_r_s_iter_init_pre_0_T_2[51:50] + f_r_c_iter_init_0[53:52]),
             _f_r_s_iter_init_pre_0_T_2[49:43]}
          : _u_fpsqrt_r16_block_adder_9b_res_for_nxt_cycle_s1_qds_0_o;
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      m_neg_1_for_nxt_cycle_s0_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? _u_r4_qds_cg_iter_init_0_m_neg_1_o[4:0]
          : _u_fpsqrt_r16_block_m_neg_1_to_nxt_cycle_0_o[4:0];
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      m_neg_0_for_nxt_cycle_s0_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? _u_r4_qds_cg_iter_init_0_m_neg_0_o[3:0]
          : _u_fpsqrt_r16_block_m_neg_0_to_nxt_cycle_0_o[3:0];
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      m_pos_1_for_nxt_cycle_s0_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? _u_r4_qds_cg_iter_init_0_m_pos_1_o[2:0]
          : _u_fpsqrt_r16_block_m_pos_1_to_nxt_cycle_0_o[2:0];
    if (start_handshaked | fsm_q[1] | fsm_q[2])
      m_pos_2_for_nxt_cycle_s0_qds_0_q <=
        fsm_q[0] | fsm_q[1]
          ? _u_r4_qds_cg_iter_init_0_m_pos_2_o[4:1]
          : _u_fpsqrt_r16_block_m_pos_2_to_nxt_cycle_0_o[4:1];
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:9];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hA; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fsm_q = _RANDOM[4'h0][3:0];
        iter_num_q = _RANDOM[4'h0][7:4];
        fp_fmt_q = _RANDOM[4'h0][10:8];
        rm_q = _RANDOM[4'h0][13:11];
        out_sign_0_q = _RANDOM[4'h0][14];
        out_exp_0_q = _RANDOM[4'h0][25:15];
        res_is_nan_0_q = _RANDOM[4'h0][26];
        res_is_inf_0_q = _RANDOM[4'h0][27];
        res_is_exact_zero_0_q = _RANDOM[4'h0][28];
        op_invalid_0_q = _RANDOM[4'h0][29];
        res_is_sqrt_2_q = _RANDOM[4'h0][30];
        res_is_sqrt_2_odd_q = _RANDOM[4'h0][31];
        rt_q = {_RANDOM[4'h1], _RANDOM[4'h2][23:0]};
        rt_m1_q = {_RANDOM[4'h2][31:24], _RANDOM[4'h3], _RANDOM[4'h4][12:0]};
        mask_q = _RANDOM[4'h4][25:13];
        f_r_s_q = {_RANDOM[4'h4][31:26], _RANDOM[4'h5], _RANDOM[4'h6][25:0]};
        f_r_c_q = {_RANDOM[4'h6][31:26], _RANDOM[4'h7], _RANDOM[4'h8][25:0]};
        nr_f_r_7b_for_nxt_cycle_s0_qds_0_q = {_RANDOM[4'h8][31:26], _RANDOM[4'h9][0]};
        nr_f_r_9b_for_nxt_cycle_s1_qds_0_q = _RANDOM[4'h9][9:1];
        m_neg_1_for_nxt_cycle_s0_qds_0_q = _RANDOM[4'h9][14:10];
        m_neg_0_for_nxt_cycle_s0_qds_0_q = _RANDOM[4'h9][18:15];
        m_pos_1_for_nxt_cycle_s0_qds_0_q = _RANDOM[4'h9][21:19];
        m_pos_2_for_nxt_cycle_s0_qds_0_q = _RANDOM[4'h9][25:22];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        fsm_q = 4'h1;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  lzc u_lzc_0 (
    .in_i    (op_frac_pre_shifted_0),
    .cnt_o   (_u_lzc_0_cnt_o),
    .empty_o (_u_lzc_0_empty_o)
  );
  r4_qds_cg u_r4_qds_cg_iter_init_0 (
    .a0_i      (&_rt_1st_0_2_T_1),
    .a2_i      (rt_1st_0_1),
    .a3_i      (1'h0),
    .a4_i      (1'h0),
    .m_neg_1_o (_u_r4_qds_cg_iter_init_0_m_neg_1_o),
    .m_neg_0_o (_u_r4_qds_cg_iter_init_0_m_neg_0_o),
    .m_pos_1_o (_u_r4_qds_cg_iter_init_0_m_pos_1_o),
    .m_pos_2_o (_u_r4_qds_cg_iter_init_0_m_pos_2_o)
  );
  fpsqrt_r16_block u_fpsqrt_r16_block (
    .fp_fmt_i                              (fp_fmt_q),
    .f_r_s_i                               (f_r_s_q),
    .f_r_c_i                               (f_r_c_q),
    .rt_i                                  (rt_q),
    .rt_m1_i                               (rt_m1_q),
    .mask_i                                (mask_q),
    .nr_f_r_7b_for_nxt_cycle_s0_qds_0_i    (nr_f_r_7b_for_nxt_cycle_s0_qds_0_q),
    .nr_f_r_7b_for_nxt_cycle_s0_qds_1_i    (7'h0),
    .nr_f_r_7b_for_nxt_cycle_s0_qds_2_i    (7'h0),
    .nr_f_r_7b_for_nxt_cycle_s0_qds_3_i    (7'h0),
    .nr_f_r_9b_for_nxt_cycle_s1_qds_0_i    (nr_f_r_9b_for_nxt_cycle_s1_qds_0_q),
    .nr_f_r_9b_for_nxt_cycle_s1_qds_1_i    (9'h0),
    .nr_f_r_9b_for_nxt_cycle_s1_qds_2_i    (9'h0),
    .nr_f_r_9b_for_nxt_cycle_s1_qds_3_i    (9'h0),
    .m_neg_1_for_nxt_cycle_s0_qds_0_i      (m_neg_1_for_nxt_cycle_s0_qds_0_q),
    .m_neg_1_for_nxt_cycle_s0_qds_1_i      (5'h0),
    .m_neg_1_for_nxt_cycle_s0_qds_2_i      (5'h0),
    .m_neg_1_for_nxt_cycle_s0_qds_3_i      (5'h0),
    .m_neg_0_for_nxt_cycle_s0_qds_0_i      (m_neg_0_for_nxt_cycle_s0_qds_0_q),
    .m_neg_0_for_nxt_cycle_s0_qds_1_i      (4'h0),
    .m_neg_0_for_nxt_cycle_s0_qds_2_i      (4'h0),
    .m_neg_0_for_nxt_cycle_s0_qds_3_i      (4'h0),
    .m_pos_1_for_nxt_cycle_s0_qds_0_i      (m_pos_1_for_nxt_cycle_s0_qds_0_q),
    .m_pos_1_for_nxt_cycle_s0_qds_1_i      (3'h0),
    .m_pos_1_for_nxt_cycle_s0_qds_2_i      (3'h0),
    .m_pos_1_for_nxt_cycle_s0_qds_3_i      (3'h0),
    .m_pos_2_for_nxt_cycle_s0_qds_0_i      (m_pos_2_for_nxt_cycle_s0_qds_0_q),
    .m_pos_2_for_nxt_cycle_s0_qds_1_i      (4'h0),
    .m_pos_2_for_nxt_cycle_s0_qds_2_i      (4'h0),
    .m_pos_2_for_nxt_cycle_s0_qds_3_i      (4'h0),
    .nxt_rt_o                              (_u_fpsqrt_r16_block_nxt_rt_o),
    .nxt_rt_m1_o                           (_u_fpsqrt_r16_block_nxt_rt_m1_o),
    .nxt_f_r_s_o                           (_u_fpsqrt_r16_block_nxt_f_r_s_o),
    .nxt_f_r_c_o                           (_u_fpsqrt_r16_block_nxt_f_r_c_o),
    .adder_7b_res_for_nxt_cycle_s0_qds_0_o
      (_u_fpsqrt_r16_block_adder_7b_res_for_nxt_cycle_s0_qds_0_o),
    .adder_7b_res_for_nxt_cycle_s0_qds_1_o (/* unused */),
    .adder_7b_res_for_nxt_cycle_s0_qds_2_o (/* unused */),
    .adder_7b_res_for_nxt_cycle_s0_qds_3_o (/* unused */),
    .adder_9b_res_for_nxt_cycle_s1_qds_0_o
      (_u_fpsqrt_r16_block_adder_9b_res_for_nxt_cycle_s1_qds_0_o),
    .adder_9b_res_for_nxt_cycle_s1_qds_1_o (/* unused */),
    .adder_9b_res_for_nxt_cycle_s1_qds_2_o (/* unused */),
    .adder_9b_res_for_nxt_cycle_s1_qds_3_o (/* unused */),
    .m_neg_1_to_nxt_cycle_0_o              (_u_fpsqrt_r16_block_m_neg_1_to_nxt_cycle_0_o),
    .m_neg_1_to_nxt_cycle_1_o              (/* unused */),
    .m_neg_1_to_nxt_cycle_2_o              (/* unused */),
    .m_neg_1_to_nxt_cycle_3_o              (/* unused */),
    .m_neg_0_to_nxt_cycle_0_o              (_u_fpsqrt_r16_block_m_neg_0_to_nxt_cycle_0_o),
    .m_neg_0_to_nxt_cycle_1_o              (/* unused */),
    .m_neg_0_to_nxt_cycle_2_o              (/* unused */),
    .m_neg_0_to_nxt_cycle_3_o              (/* unused */),
    .m_pos_1_to_nxt_cycle_0_o              (_u_fpsqrt_r16_block_m_pos_1_to_nxt_cycle_0_o),
    .m_pos_1_to_nxt_cycle_1_o              (/* unused */),
    .m_pos_1_to_nxt_cycle_2_o              (/* unused */),
    .m_pos_1_to_nxt_cycle_3_o              (/* unused */),
    .m_pos_2_to_nxt_cycle_0_o              (_u_fpsqrt_r16_block_m_pos_2_to_nxt_cycle_0_o),
    .m_pos_2_to_nxt_cycle_1_o              (/* unused */),
    .m_pos_2_to_nxt_cycle_2_o              (/* unused */),
    .m_pos_2_to_nxt_cycle_3_o              (/* unused */)
  );
  assign start_ready_o = fsm_q[0];
  assign finish_valid_o = fsm_q[3];
  assign fpsqrt_res_o =
    (fp_fmt_q[0]
       ? {48'h0,
          out_sign_0_q,
          _f64_exp_res_0_T ? 5'h1F : res_is_exact_zero_0_q ? 5'h0 : exp_rounded_0[4:0],
          res_is_nan_0_q
            ? 10'h200
            : _f64_frac_res_0_T_1 | res_is_sqrt_2_odd_q ? 10'h0 : frac_rounded_0[51:42]}
       : 64'h0)
    | (fp_fmt_q[1]
         ? {32'h0,
            out_sign_0_q,
            _f64_exp_res_0_T ? 8'hFF : res_is_exact_zero_0_q ? 8'h0 : exp_rounded_0[7:0],
            res_is_nan_0_q
              ? 23'h400000
              : _f64_frac_res_0_T_1 | res_is_sqrt_2_odd_q ? 23'h0 : frac_rounded_0[51:29]}
         : 64'h0)
    | (fp_fmt_q[2]
         ? {out_sign_0_q,
            _f64_exp_res_0_T ? 11'h7FF : res_is_exact_zero_0_q ? 11'h0 : exp_rounded_0,
            res_is_nan_0_q
              ? 52'h8000000000000
              : _f64_frac_res_0_T_1 | res_is_sqrt_2_odd_q ? 52'h0 : frac_rounded_0[51:0]}
         : 64'h0);
  assign fflags_o =
    {op_invalid_0_q,
     3'h0,
     (inexact_rt_0 | select_rt_m1_0) & ~res_is_nan_0_q & ~res_is_exact_zero_0_q};
endmodule

