// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ICacheMetaArray(
  input         clock,
  input         reset,
  input         io_write_valid,
  input  [7:0]  io_write_bits_virIdx,
  input  [35:0] io_write_bits_phyTag,
  input  [3:0]  io_write_bits_waymask,
  input         io_write_bits_bankIdx,
  input         io_write_bits_poison,
  output        io_read_ready,
  input         io_read_valid,
  input  [7:0]  io_read_bits_vSetIdx_0,
  input  [7:0]  io_read_bits_vSetIdx_1,
  input         io_read_bits_isDoubleLine,
  output [35:0] io_readResp_metas_0_0_tag,
  output [35:0] io_readResp_metas_0_1_tag,
  output [35:0] io_readResp_metas_0_2_tag,
  output [35:0] io_readResp_metas_0_3_tag,
  output [35:0] io_readResp_metas_1_0_tag,
  output [35:0] io_readResp_metas_1_1_tag,
  output [35:0] io_readResp_metas_1_2_tag,
  output [35:0] io_readResp_metas_1_3_tag,
  output        io_readResp_codes_0_0,
  output        io_readResp_codes_0_1,
  output        io_readResp_codes_0_2,
  output        io_readResp_codes_0_3,
  output        io_readResp_codes_1_0,
  output        io_readResp_codes_1_1,
  output        io_readResp_codes_1_2,
  output        io_readResp_codes_1_3,
  output        io_readResp_entryValid_0_0,
  output        io_readResp_entryValid_0_1,
  output        io_readResp_entryValid_0_2,
  output        io_readResp_entryValid_0_3,
  output        io_readResp_entryValid_1_0,
  output        io_readResp_entryValid_1_1,
  output        io_readResp_entryValid_1_2,
  output        io_readResp_entryValid_1_3,
  input         io_flush_0_valid,
  input  [7:0]  io_flush_0_bits_virIdx,
  input  [3:0]  io_flush_0_bits_waymask,
  input         io_flush_1_valid,
  input  [7:0]  io_flush_1_bits_virIdx,
  input  [3:0]  io_flush_1_bits_waymask,
  input         io_flushAll
);

  wire              _tagArrays_1_io_r_req_ready;
  wire [35:0]       _tagArrays_1_io_r_resp_data_0_meta_tag;
  wire              _tagArrays_1_io_r_resp_data_0_code;
  wire [35:0]       _tagArrays_1_io_r_resp_data_1_meta_tag;
  wire              _tagArrays_1_io_r_resp_data_1_code;
  wire [35:0]       _tagArrays_1_io_r_resp_data_2_meta_tag;
  wire              _tagArrays_1_io_r_resp_data_2_code;
  wire [35:0]       _tagArrays_1_io_r_resp_data_3_meta_tag;
  wire              _tagArrays_1_io_r_resp_data_3_code;
  wire              _tagArrays_0_io_r_req_ready;
  wire [35:0]       _tagArrays_0_io_r_resp_data_0_meta_tag;
  wire              _tagArrays_0_io_r_resp_data_0_code;
  wire [35:0]       _tagArrays_0_io_r_resp_data_1_meta_tag;
  wire              _tagArrays_0_io_r_resp_data_1_code;
  wire [35:0]       _tagArrays_0_io_r_resp_data_2_meta_tag;
  wire              _tagArrays_0_io_r_resp_data_2_code;
  wire [35:0]       _tagArrays_0_io_r_resp_data_3_meta_tag;
  wire              _tagArrays_0_io_r_resp_data_3_code;
  wire              port_0_read_0 = io_read_valid & ~(io_read_bits_vSetIdx_0[0]);
  wire              port_0_read_1 = io_read_valid & io_read_bits_vSetIdx_0[0];
  wire              port_1_read_0 =
    io_read_valid & ~(io_read_bits_vSetIdx_1[0]) & io_read_bits_isDoubleLine;
  reg               port_0_read_0_reg;
  reg               port_1_read_0_reg;
  wire              _write_meta_bits_entry_code_code_T_1 =
    ^io_write_bits_phyTag ^ io_write_bits_poison;
  reg  [7:0]        read_set_idx_next_0;
  reg  [7:0]        read_set_idx_next_1;
  reg  [255:0]      valid_array_0;
  reg  [255:0]      valid_array_1;
  reg  [255:0]      valid_array_2;
  reg  [255:0]      valid_array_3;
  wire [255:0]      _GEN = {248'h0, read_set_idx_next_0};
  wire [255:0]      _valid_metas_0_0_T = valid_array_0 >> _GEN;
  wire [255:0]      _valid_metas_0_1_T = valid_array_1 >> _GEN;
  wire [255:0]      _valid_metas_0_2_T = valid_array_2 >> _GEN;
  wire [255:0]      _valid_metas_0_3_T = valid_array_3 >> _GEN;
  wire [255:0]      _GEN_0 = {248'h0, read_set_idx_next_1};
  wire [255:0]      _valid_metas_1_0_T = valid_array_0 >> _GEN_0;
  wire [255:0]      _valid_metas_1_1_T = valid_array_1 >> _GEN_0;
  wire [255:0]      _valid_metas_1_2_T = valid_array_2 >> _GEN_0;
  wire [255:0]      _valid_metas_1_3_T = valid_array_3 >> _GEN_0;
  wire              _io_read_ready_T_1 = io_flush_0_valid | io_flush_1_valid;
  wire              io_read_ready_0 =
    ~io_write_valid & ~_io_read_ready_T_1 & ~io_flushAll & _tagArrays_0_io_r_req_ready
    & _tagArrays_1_io_r_req_ready;
  wire [255:0]      _valid_array_3_T_2 = 256'h1 << io_flush_0_bits_virIdx;
  wire [255:0]      _valid_array_3_T_11 = 256'h1 << io_flush_1_bits_virIdx;
  wire [1:0]        way_num =
    {|(io_write_bits_waymask[3:2]), io_write_bits_waymask[3] | io_write_bits_waymask[1]};
  wire [3:0][255:0] _GEN_1 =
    {{valid_array_3}, {valid_array_2}, {valid_array_1}, {valid_array_0}};
  wire [255:0]      _valid_array_T_5 = _GEN_1[way_num] | 256'h1 << io_write_bits_virIdx;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      port_0_read_0_reg <= 1'h0;
      port_1_read_0_reg <= 1'h0;
      read_set_idx_next_0 <= 8'h0;
      read_set_idx_next_1 <= 8'h0;
      valid_array_0 <= 256'h0;
      valid_array_1 <= 256'h0;
      valid_array_2 <= 256'h0;
      valid_array_3 <= 256'h0;
    end
    else begin
      if (io_read_ready_0 & io_read_valid) begin
        port_0_read_0_reg <= port_0_read_0;
        port_1_read_0_reg <= port_1_read_0;
        read_set_idx_next_0 <= io_read_bits_vSetIdx_0;
        read_set_idx_next_1 <= io_read_bits_vSetIdx_1;
      end
      if (io_flushAll) begin
        valid_array_0 <= 256'h0;
        valid_array_1 <= 256'h0;
        valid_array_2 <= 256'h0;
        valid_array_3 <= 256'h0;
      end
      else if (_io_read_ready_T_1) begin
        valid_array_0 <=
          (io_flush_0_valid & io_flush_0_bits_waymask[0]
             ? ~(~valid_array_0 | _valid_array_3_T_2)
             : valid_array_0)
          & (io_flush_1_valid & io_flush_1_bits_waymask[0]
               ? ~(~valid_array_0 | _valid_array_3_T_11)
               : valid_array_0);
        valid_array_1 <=
          (io_flush_0_valid & io_flush_0_bits_waymask[1]
             ? ~(~valid_array_1 | _valid_array_3_T_2)
             : valid_array_1)
          & (io_flush_1_valid & io_flush_1_bits_waymask[1]
               ? ~(~valid_array_1 | _valid_array_3_T_11)
               : valid_array_1);
        valid_array_2 <=
          (io_flush_0_valid & io_flush_0_bits_waymask[2]
             ? ~(~valid_array_2 | _valid_array_3_T_2)
             : valid_array_2)
          & (io_flush_1_valid & io_flush_1_bits_waymask[2]
               ? ~(~valid_array_2 | _valid_array_3_T_11)
               : valid_array_2);
        valid_array_3 <=
          (io_flush_0_valid & io_flush_0_bits_waymask[3]
             ? ~(~valid_array_3 | _valid_array_3_T_2)
             : valid_array_3)
          & (io_flush_1_valid & io_flush_1_bits_waymask[3]
               ? ~(~valid_array_3 | _valid_array_3_T_11)
               : valid_array_3);
      end
      else begin
        if (io_write_valid & way_num == 2'h0)
          valid_array_0 <= _valid_array_T_5;
        if (io_write_valid & way_num == 2'h1)
          valid_array_1 <= _valid_array_T_5;
        if (io_write_valid & way_num == 2'h2)
          valid_array_2 <= _valid_array_T_5;
        if (io_write_valid & (&way_num))
          valid_array_3 <= _valid_array_T_5;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:32];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h21; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        port_0_read_0_reg = _RANDOM[6'h0][0];
        port_1_read_0_reg = _RANDOM[6'h0][3];
        read_set_idx_next_0 = _RANDOM[6'h0][11:4];
        read_set_idx_next_1 = _RANDOM[6'h0][19:12];
        valid_array_0 =
          {_RANDOM[6'h0][31:20],
           _RANDOM[6'h1],
           _RANDOM[6'h2],
           _RANDOM[6'h3],
           _RANDOM[6'h4],
           _RANDOM[6'h5],
           _RANDOM[6'h6],
           _RANDOM[6'h7],
           _RANDOM[6'h8][19:0]};
        valid_array_1 =
          {_RANDOM[6'h8][31:20],
           _RANDOM[6'h9],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD],
           _RANDOM[6'hE],
           _RANDOM[6'hF],
           _RANDOM[6'h10][19:0]};
        valid_array_2 =
          {_RANDOM[6'h10][31:20],
           _RANDOM[6'h11],
           _RANDOM[6'h12],
           _RANDOM[6'h13],
           _RANDOM[6'h14],
           _RANDOM[6'h15],
           _RANDOM[6'h16],
           _RANDOM[6'h17],
           _RANDOM[6'h18][19:0]};
        valid_array_3 =
          {_RANDOM[6'h18][31:20],
           _RANDOM[6'h19],
           _RANDOM[6'h1A],
           _RANDOM[6'h1B],
           _RANDOM[6'h1C],
           _RANDOM[6'h1D],
           _RANDOM[6'h1E],
           _RANDOM[6'h1F],
           _RANDOM[6'h20][19:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        port_0_read_0_reg = 1'h0;
        port_1_read_0_reg = 1'h0;
        read_set_idx_next_0 = 8'h0;
        read_set_idx_next_1 = 8'h0;
        valid_array_0 = 256'h0;
        valid_array_1 = 256'h0;
        valid_array_2 = 256'h0;
        valid_array_3 = 256'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate tagArrays_0 (
    .clock                         (clock),
    .reset                         (reset),
    .io_r_req_ready                (_tagArrays_0_io_r_req_ready),
    .io_r_req_valid                (port_0_read_0 | port_1_read_0),
    .io_r_req_bits_setIdx
      (port_0_read_0 ? io_read_bits_vSetIdx_0[7:1] : io_read_bits_vSetIdx_1[7:1]),
    .io_r_resp_data_0_meta_tag     (_tagArrays_0_io_r_resp_data_0_meta_tag),
    .io_r_resp_data_0_code         (_tagArrays_0_io_r_resp_data_0_code),
    .io_r_resp_data_1_meta_tag     (_tagArrays_0_io_r_resp_data_1_meta_tag),
    .io_r_resp_data_1_code         (_tagArrays_0_io_r_resp_data_1_code),
    .io_r_resp_data_2_meta_tag     (_tagArrays_0_io_r_resp_data_2_meta_tag),
    .io_r_resp_data_2_code         (_tagArrays_0_io_r_resp_data_2_code),
    .io_r_resp_data_3_meta_tag     (_tagArrays_0_io_r_resp_data_3_meta_tag),
    .io_r_resp_data_3_code         (_tagArrays_0_io_r_resp_data_3_code),
    .io_w_req_valid                (io_write_valid & ~io_write_bits_bankIdx),
    .io_w_req_bits_setIdx          (io_write_bits_virIdx[7:1]),
    .io_w_req_bits_data_0_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_0_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_1_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_1_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_2_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_2_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_3_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_3_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_waymask         (io_write_bits_waymask)
  );
  SRAMTemplate tagArrays_1 (
    .clock                         (clock),
    .reset                         (reset),
    .io_r_req_ready                (_tagArrays_1_io_r_req_ready),
    .io_r_req_valid
      (port_0_read_1 | io_read_valid & io_read_bits_vSetIdx_1[0]
       & io_read_bits_isDoubleLine),
    .io_r_req_bits_setIdx
      (port_0_read_1 ? io_read_bits_vSetIdx_0[7:1] : io_read_bits_vSetIdx_1[7:1]),
    .io_r_resp_data_0_meta_tag     (_tagArrays_1_io_r_resp_data_0_meta_tag),
    .io_r_resp_data_0_code         (_tagArrays_1_io_r_resp_data_0_code),
    .io_r_resp_data_1_meta_tag     (_tagArrays_1_io_r_resp_data_1_meta_tag),
    .io_r_resp_data_1_code         (_tagArrays_1_io_r_resp_data_1_code),
    .io_r_resp_data_2_meta_tag     (_tagArrays_1_io_r_resp_data_2_meta_tag),
    .io_r_resp_data_2_code         (_tagArrays_1_io_r_resp_data_2_code),
    .io_r_resp_data_3_meta_tag     (_tagArrays_1_io_r_resp_data_3_meta_tag),
    .io_r_resp_data_3_code         (_tagArrays_1_io_r_resp_data_3_code),
    .io_w_req_valid                (io_write_valid & io_write_bits_bankIdx),
    .io_w_req_bits_setIdx          (io_write_bits_virIdx[7:1]),
    .io_w_req_bits_data_0_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_0_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_1_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_1_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_2_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_2_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_data_3_meta_tag (io_write_bits_phyTag),
    .io_w_req_bits_data_3_code     (_write_meta_bits_entry_code_code_T_1),
    .io_w_req_bits_waymask         (io_write_bits_waymask)
  );
  assign io_read_ready = io_read_ready_0;
  assign io_readResp_metas_0_0_tag =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_0_meta_tag
      : _tagArrays_1_io_r_resp_data_0_meta_tag;
  assign io_readResp_metas_0_1_tag =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_1_meta_tag
      : _tagArrays_1_io_r_resp_data_1_meta_tag;
  assign io_readResp_metas_0_2_tag =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_2_meta_tag
      : _tagArrays_1_io_r_resp_data_2_meta_tag;
  assign io_readResp_metas_0_3_tag =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_3_meta_tag
      : _tagArrays_1_io_r_resp_data_3_meta_tag;
  assign io_readResp_metas_1_0_tag =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_0_meta_tag
      : _tagArrays_1_io_r_resp_data_0_meta_tag;
  assign io_readResp_metas_1_1_tag =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_1_meta_tag
      : _tagArrays_1_io_r_resp_data_1_meta_tag;
  assign io_readResp_metas_1_2_tag =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_2_meta_tag
      : _tagArrays_1_io_r_resp_data_2_meta_tag;
  assign io_readResp_metas_1_3_tag =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_3_meta_tag
      : _tagArrays_1_io_r_resp_data_3_meta_tag;
  assign io_readResp_codes_0_0 =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_0_code
      : _tagArrays_1_io_r_resp_data_0_code;
  assign io_readResp_codes_0_1 =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_1_code
      : _tagArrays_1_io_r_resp_data_1_code;
  assign io_readResp_codes_0_2 =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_2_code
      : _tagArrays_1_io_r_resp_data_2_code;
  assign io_readResp_codes_0_3 =
    port_0_read_0_reg
      ? _tagArrays_0_io_r_resp_data_3_code
      : _tagArrays_1_io_r_resp_data_3_code;
  assign io_readResp_codes_1_0 =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_0_code
      : _tagArrays_1_io_r_resp_data_0_code;
  assign io_readResp_codes_1_1 =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_1_code
      : _tagArrays_1_io_r_resp_data_1_code;
  assign io_readResp_codes_1_2 =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_2_code
      : _tagArrays_1_io_r_resp_data_2_code;
  assign io_readResp_codes_1_3 =
    port_1_read_0_reg
      ? _tagArrays_0_io_r_resp_data_3_code
      : _tagArrays_1_io_r_resp_data_3_code;
  assign io_readResp_entryValid_0_0 = _valid_metas_0_0_T[0];
  assign io_readResp_entryValid_0_1 = _valid_metas_0_1_T[0];
  assign io_readResp_entryValid_0_2 = _valid_metas_0_2_T[0];
  assign io_readResp_entryValid_0_3 = _valid_metas_0_3_T[0];
  assign io_readResp_entryValid_1_0 = _valid_metas_1_0_T[0];
  assign io_readResp_entryValid_1_1 = _valid_metas_1_1_T[0];
  assign io_readResp_entryValid_1_2 = _valid_metas_1_2_T[0];
  assign io_readResp_entryValid_1_3 = _valid_metas_1_3_T[0];
endmodule

