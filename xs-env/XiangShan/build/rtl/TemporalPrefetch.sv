// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TemporalPrefetch(
  input         clock,
  input         reset,
  input         io_enable,
  output        io_train_ready,
  input         io_train_valid,
  input  [34:0] io_train_bits_tag,
  input  [6:0]  io_train_bits_set,
  input  [43:0] io_train_bits_vaddr,
  input  [3:0]  io_train_bits_reqsource,
  input         io_req_ready,
  output        io_req_valid,
  output [34:0] io_req_bits_tag,
  output [6:0]  io_req_bits_set,
  input         io_tpmeta_port_req_ready,
  output        io_tpmeta_port_req_valid,
  output [5:0]  io_tpmeta_port_req_bits_hartid,
  output [31:0] io_tpmeta_port_req_bits_set,
  output [3:0]  io_tpmeta_port_req_bits_way,
  output        io_tpmeta_port_req_bits_wmode,
  output [41:0] io_tpmeta_port_req_bits_rawData_0,
  output [41:0] io_tpmeta_port_req_bits_rawData_1,
  output [41:0] io_tpmeta_port_req_bits_rawData_2,
  input         io_tpmeta_port_resp_valid,
  input  [5:0]  io_tpmeta_port_resp_bits_hartid,
  input  [41:0] io_tpmeta_port_resp_bits_rawData_0,
  input  [41:0] io_tpmeta_port_resp_bits_rawData_1,
  input  [41:0] io_tpmeta_port_resp_bits_rawData_2,
  input  [5:0]  io_hartid
);

  wire             _lfsr_prng_io_out_0;
  wire             _lfsr_prng_io_out_1;
  wire             _lfsr_prng_io_out_2;
  wire             _lfsr_prng_io_out_3;
  wire             _triggerQueue_io_enq_ready;
  wire             _triggerQueue_io_deq_valid;
  wire [47:0]      _triggerQueue_io_deq_bits_paddr;
  wire [3:0]       _triggerQueue_io_deq_bits_way;
  wire [2:0]       _triggerQueue_io_count;
  wire             _tpDataQueue_io_deq_valid;
  wire [47:0]      _tpDataQueue_io_deq_bits_rawData_0;
  wire [47:0]      _tpDataQueue_io_deq_bits_rawData_1;
  wire [47:0]      _tpDataQueue_io_deq_bits_rawData_2;
  wire [3:0]       _tpDataQueue_io_count;
  wire             _dataWriteQueue_io_deq_valid;
  wire [5:0]       _dataWriteQueue_io_deq_bits_hartid;
  wire [31:0]      _dataWriteQueue_io_deq_bits_set;
  wire [3:0]       _dataWriteQueue_io_deq_bits_way;
  wire             _dataWriteQueue_io_deq_bits_wmode;
  wire [41:0]      _dataWriteQueue_io_deq_bits_rawData_0;
  wire [41:0]      _dataWriteQueue_io_deq_bits_rawData_1;
  wire [41:0]      _dataWriteQueue_io_deq_bits_rawData_2;
  wire             _dataReadQueue_io_deq_valid;
  wire [5:0]       _dataReadQueue_io_deq_bits_hartid;
  wire [31:0]      _dataReadQueue_io_deq_bits_set;
  wire [3:0]       _dataReadQueue_io_deq_bits_way;
  wire             _dataReadQueue_io_deq_bits_wmode;
  wire [41:0]      _dataReadQueue_io_deq_bits_rawData_0;
  wire [41:0]      _dataReadQueue_io_deq_bits_rawData_1;
  wire [41:0]      _dataReadQueue_io_deq_bits_rawData_2;
  wire             _tpMetaTable_io_r_resp_data_0_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_0_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_1_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_1_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_2_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_2_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_3_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_3_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_4_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_4_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_5_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_5_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_6_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_6_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_7_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_7_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_8_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_8_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_9_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_9_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_10_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_10_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_11_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_11_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_12_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_12_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_13_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_13_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_14_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_14_triggerTag;
  wire             _tpMetaTable_io_r_resp_data_15_valid;
  wire [22:0]      _tpMetaTable_io_r_resp_data_15_triggerTag;
  reg              resetFinish;
  reg  [9:0]       resetIdx;
  wire             s0_valid =
    resetFinish & io_train_valid & io_train_bits_reqsource != 4'h6;
  reg              s1_valid;
  reg  [34:0]      train_s1_tag;
  reg  [6:0]       train_s1_set;
  reg  [43:0]      train_s1_vaddr;
  wire [33:0]      _GEN = {2'h0, train_s1_tag[34:3]};
  wire             hitVec_1 =
    {11'h0, _tpMetaTable_io_r_resp_data_1_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_1_valid;
  wire             hitVec_2 =
    {11'h0, _tpMetaTable_io_r_resp_data_2_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_2_valid;
  wire             hitVec_3 =
    {11'h0, _tpMetaTable_io_r_resp_data_3_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_3_valid;
  wire             hitVec_4 =
    {11'h0, _tpMetaTable_io_r_resp_data_4_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_4_valid;
  wire             hitVec_5 =
    {11'h0, _tpMetaTable_io_r_resp_data_5_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_5_valid;
  wire             hitVec_6 =
    {11'h0, _tpMetaTable_io_r_resp_data_6_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_6_valid;
  wire             hitVec_7 =
    {11'h0, _tpMetaTable_io_r_resp_data_7_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_7_valid;
  wire             hitVec_8 =
    {11'h0, _tpMetaTable_io_r_resp_data_8_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_8_valid;
  wire             hitVec_9 =
    {11'h0, _tpMetaTable_io_r_resp_data_9_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_9_valid;
  wire             hitVec_10 =
    {11'h0, _tpMetaTable_io_r_resp_data_10_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_10_valid;
  wire             hitVec_11 =
    {11'h0, _tpMetaTable_io_r_resp_data_11_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_11_valid;
  wire             hitVec_12 =
    {11'h0, _tpMetaTable_io_r_resp_data_12_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_12_valid;
  wire             hitVec_13 =
    {11'h0, _tpMetaTable_io_r_resp_data_13_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_13_valid;
  wire             hitVec_14 =
    {11'h0, _tpMetaTable_io_r_resp_data_14_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_14_valid;
  wire             hitVec_15 =
    {11'h0, _tpMetaTable_io_r_resp_data_15_triggerTag} == _GEN
    & _tpMetaTable_io_r_resp_data_15_valid;
  wire [15:0]      _hit_s1_T =
    {{11'h0, _tpMetaTable_io_r_resp_data_0_triggerTag} == _GEN
       & _tpMetaTable_io_r_resp_data_0_valid,
     hitVec_1,
     hitVec_2,
     hitVec_3,
     hitVec_4,
     hitVec_5,
     hitVec_6,
     hitVec_7,
     hitVec_8,
     hitVec_9,
     hitVec_10,
     hitVec_11,
     hitVec_12,
     hitVec_13,
     hitVec_14,
     hitVec_15};
  reg              s2_valid;
  reg              hit_s2;
  reg  [3:0]       way_s2;
  reg  [9:0]       pset_s2;
  reg  [34:0]      train_s2_tag;
  reg  [6:0]       train_s2_set;
  reg  [43:0]      train_s2_vaddr;
  wire             triggerEnq_s2 =
    s2_valid & _triggerQueue_io_enq_ready & (hit_s2 | _triggerQueue_io_count == 3'h0);
  wire             dorecord_s2 = s2_valid & ~triggerEnq_s2 & _triggerQueue_io_deq_valid;
  reg  [5:0]       recorder_idx;
  reg  [47:0]      recorder_data_0;
  reg  [47:0]      recorder_data_1;
  reg  [47:0]      recorder_data_2;
  reg              write_record;
  reg  [47:0]      write_record_trigger_paddr;
  reg  [3:0]       write_record_trigger_way;
  wire             _GEN_0 = recorder_idx == 6'h2;
  wire [22:0]      tpMeta_w_bits_triggerTag =
    resetFinish ? write_record_trigger_paddr[38:16] : 23'h0;
  wire [9:0]       tpTable_w_set =
    resetFinish ? write_record_trigger_paddr[15:6] : resetIdx;
  reg              do_sending;
  reg  [5:0]       sending_idx;
  reg  [47:0]      sending_data_0;
  reg  [47:0]      sending_data_1;
  reg  [47:0]      sending_data_2;
  reg  [3:0]       sending_throttle;
  wire             tpDataQFull = _tpDataQueue_io_count == 4'h8;
  wire [3:0][47:0] _GEN_1 =
    {{sending_data_0}, {sending_data_2}, {sending_data_1}, {sending_data_0}};
  wire [47:0]      _GEN_2 = _GEN_1[sending_idx[1:0]];
  wire             _tpDataQueue_io_deq_ready_T_1 = tpDataQFull | ~do_sending;
  wire             _GEN_3 = _tpDataQueue_io_deq_ready_T_1 & _tpDataQueue_io_deq_valid;
  wire             io_req_valid_0 =
    io_enable & do_sending & ~tpDataQFull & sending_throttle == 4'h4;
  wire             _GEN_4 = dorecord_s2 & _GEN_0;
  wire             _GEN_5 = io_req_ready & io_req_valid_0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      resetFinish <= 1'h0;
      resetIdx <= 10'h3FF;
      s1_valid <= 1'h0;
      s2_valid <= 1'h0;
      hit_s2 <= 1'h0;
      recorder_idx <= 6'h0;
      write_record <= 1'h0;
      write_record_trigger_paddr <= 48'h0;
      write_record_trigger_way <= 4'h0;
      do_sending <= 1'h0;
      sending_idx <= 6'h0;
      sending_throttle <= 4'h0;
    end
    else begin
      resetFinish <= resetIdx == 10'h0 | resetFinish;
      if (resetFinish) begin
      end
      else
        resetIdx <= 10'(resetIdx - 10'h1);
      s1_valid <= s0_valid;
      s2_valid <= s1_valid;
      if (s1_valid)
        hit_s2 <= |_hit_s1_T;
      if (dorecord_s2) begin
        if (_GEN_0)
          recorder_idx <= 6'h0;
        else
          recorder_idx <= 6'(recorder_idx + 6'h1);
      end
      write_record <= ~write_record & (_GEN_4 | write_record);
      if (_GEN_4) begin
        write_record_trigger_paddr <= _triggerQueue_io_deq_bits_paddr;
        write_record_trigger_way <= _triggerQueue_io_deq_bits_way;
      end
      do_sending <= ~(_GEN_5 & sending_idx == 6'h2) & (_GEN_3 | do_sending);
      if (_GEN_5) begin
        sending_idx <= 6'(sending_idx + 6'h1);
        sending_throttle <= 4'h0;
      end
      else begin
        if (_GEN_3)
          sending_idx <= 6'h1;
        if ((do_sending & ~tpDataQFull | (|sending_throttle)) & sending_throttle != 4'h4)
          sending_throttle <= 4'(sending_throttle + 4'h1);
      end
    end
  end // always @(posedge, posedge)
  wire [6:0]       _hitWay_T_2 =
    {hitVec_15, hitVec_14, hitVec_13, hitVec_12, hitVec_11, hitVec_10, hitVec_9}
    | {hitVec_7, hitVec_6, hitVec_5, hitVec_4, hitVec_3, hitVec_2, hitVec_1};
  wire [2:0]       _hitWay_T_4 = _hitWay_T_2[6:4] | _hitWay_T_2[2:0];
  wire [47:0]      _GEN_6 = {6'h0, train_s2_tag, train_s2_set};
  always @(posedge clock) begin
    if (s0_valid) begin
      train_s1_tag <= io_train_bits_tag;
      train_s1_set <= io_train_bits_set;
      train_s1_vaddr <= io_train_bits_vaddr;
    end
    if (s1_valid) begin
      way_s2 <=
        (|_hit_s1_T)
          ? {|{hitVec_15,
               hitVec_14,
               hitVec_13,
               hitVec_12,
               hitVec_11,
               hitVec_10,
               hitVec_9,
               hitVec_8},
             |(_hitWay_T_2[6:3]),
             |(_hitWay_T_4[2:1]),
             _hitWay_T_4[2] | _hitWay_T_4[0]}
          : {_lfsr_prng_io_out_3,
             _lfsr_prng_io_out_2,
             _lfsr_prng_io_out_1,
             _lfsr_prng_io_out_0};
      pset_s2 <= {train_s1_tag[2:0], train_s1_set};
      train_s2_tag <= train_s1_tag;
      train_s2_set <= train_s1_set;
      train_s2_vaddr <= train_s1_vaddr;
    end
    if (dorecord_s2 & recorder_idx[1:0] == 2'h0)
      recorder_data_0 <= _GEN_6;
    if (dorecord_s2 & recorder_idx[1:0] == 2'h1)
      recorder_data_1 <= _GEN_6;
    if (dorecord_s2 & recorder_idx[1:0] == 2'h2)
      recorder_data_2 <= _GEN_6;
    if (_GEN_3) begin
      sending_data_0 <= _tpDataQueue_io_deq_bits_rawData_0;
      sending_data_1 <= _tpDataQueue_io_deq_bits_rawData_1;
      sending_data_2 <= _tpDataQueue_io_deq_bits_rawData_2;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:20];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h15; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        resetFinish = _RANDOM[5'h0][0];
        resetIdx = _RANDOM[5'h0][10:1];
        s1_valid = _RANDOM[5'h0][11];
        train_s1_tag = {_RANDOM[5'h0][31:12], _RANDOM[5'h1][14:0]};
        train_s1_set = _RANDOM[5'h1][21:15];
        train_s1_vaddr = {_RANDOM[5'h1][31:30], _RANDOM[5'h2], _RANDOM[5'h3][9:0]};
        s2_valid = _RANDOM[5'h3][19];
        hit_s2 = _RANDOM[5'h3][20];
        way_s2 = _RANDOM[5'h3][24:21];
        pset_s2 = _RANDOM[5'h4][12:3];
        train_s2_tag = {_RANDOM[5'h4][31:13], _RANDOM[5'h5][15:0]};
        train_s2_set = _RANDOM[5'h5][22:16];
        train_s2_vaddr = {_RANDOM[5'h5][31], _RANDOM[5'h6], _RANDOM[5'h7][10:0]};
        recorder_idx = _RANDOM[5'h7][26:21];
        recorder_data_0 = {_RANDOM[5'h7][31:27], _RANDOM[5'h8], _RANDOM[5'h9][10:0]};
        recorder_data_1 = {_RANDOM[5'h9][31:11], _RANDOM[5'hA][26:0]};
        recorder_data_2 = {_RANDOM[5'hA][31:27], _RANDOM[5'hB], _RANDOM[5'hC][10:0]};
        write_record = _RANDOM[5'hC][11];
        write_record_trigger_paddr =
          {_RANDOM[5'hD][31:19], _RANDOM[5'hE], _RANDOM[5'hF][2:0]};
        write_record_trigger_way = _RANDOM[5'hF][6:3];
        do_sending = _RANDOM[5'hF][8];
        sending_idx = _RANDOM[5'hF][14:9];
        sending_data_0 = {_RANDOM[5'hF][31:15], _RANDOM[5'h10][30:0]};
        sending_data_1 = {_RANDOM[5'h10][31], _RANDOM[5'h11], _RANDOM[5'h12][14:0]};
        sending_data_2 = {_RANDOM[5'h12][31:15], _RANDOM[5'h13][30:0]};
        sending_throttle = {_RANDOM[5'h13][31], _RANDOM[5'h14][2:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        resetFinish = 1'h0;
        resetIdx = 10'h3FF;
        s1_valid = 1'h0;
        s2_valid = 1'h0;
        hit_s2 = 1'h0;
        recorder_idx = 6'h0;
        write_record = 1'h0;
        write_record_trigger_paddr = 48'h0;
        write_record_trigger_way = 4'h0;
        do_sending = 1'h0;
        sending_idx = 6'h0;
        sending_throttle = 4'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_117 tpMetaTable (
    .clock                            (clock),
    .io_r_req_valid                   (s0_valid),
    .io_r_req_bits_setIdx             ({io_train_bits_tag[2:0], io_train_bits_set}),
    .io_r_resp_data_0_valid           (_tpMetaTable_io_r_resp_data_0_valid),
    .io_r_resp_data_0_triggerTag      (_tpMetaTable_io_r_resp_data_0_triggerTag),
    .io_r_resp_data_1_valid           (_tpMetaTable_io_r_resp_data_1_valid),
    .io_r_resp_data_1_triggerTag      (_tpMetaTable_io_r_resp_data_1_triggerTag),
    .io_r_resp_data_2_valid           (_tpMetaTable_io_r_resp_data_2_valid),
    .io_r_resp_data_2_triggerTag      (_tpMetaTable_io_r_resp_data_2_triggerTag),
    .io_r_resp_data_3_valid           (_tpMetaTable_io_r_resp_data_3_valid),
    .io_r_resp_data_3_triggerTag      (_tpMetaTable_io_r_resp_data_3_triggerTag),
    .io_r_resp_data_4_valid           (_tpMetaTable_io_r_resp_data_4_valid),
    .io_r_resp_data_4_triggerTag      (_tpMetaTable_io_r_resp_data_4_triggerTag),
    .io_r_resp_data_5_valid           (_tpMetaTable_io_r_resp_data_5_valid),
    .io_r_resp_data_5_triggerTag      (_tpMetaTable_io_r_resp_data_5_triggerTag),
    .io_r_resp_data_6_valid           (_tpMetaTable_io_r_resp_data_6_valid),
    .io_r_resp_data_6_triggerTag      (_tpMetaTable_io_r_resp_data_6_triggerTag),
    .io_r_resp_data_7_valid           (_tpMetaTable_io_r_resp_data_7_valid),
    .io_r_resp_data_7_triggerTag      (_tpMetaTable_io_r_resp_data_7_triggerTag),
    .io_r_resp_data_8_valid           (_tpMetaTable_io_r_resp_data_8_valid),
    .io_r_resp_data_8_triggerTag      (_tpMetaTable_io_r_resp_data_8_triggerTag),
    .io_r_resp_data_9_valid           (_tpMetaTable_io_r_resp_data_9_valid),
    .io_r_resp_data_9_triggerTag      (_tpMetaTable_io_r_resp_data_9_triggerTag),
    .io_r_resp_data_10_valid          (_tpMetaTable_io_r_resp_data_10_valid),
    .io_r_resp_data_10_triggerTag     (_tpMetaTable_io_r_resp_data_10_triggerTag),
    .io_r_resp_data_11_valid          (_tpMetaTable_io_r_resp_data_11_valid),
    .io_r_resp_data_11_triggerTag     (_tpMetaTable_io_r_resp_data_11_triggerTag),
    .io_r_resp_data_12_valid          (_tpMetaTable_io_r_resp_data_12_valid),
    .io_r_resp_data_12_triggerTag     (_tpMetaTable_io_r_resp_data_12_triggerTag),
    .io_r_resp_data_13_valid          (_tpMetaTable_io_r_resp_data_13_valid),
    .io_r_resp_data_13_triggerTag     (_tpMetaTable_io_r_resp_data_13_triggerTag),
    .io_r_resp_data_14_valid          (_tpMetaTable_io_r_resp_data_14_valid),
    .io_r_resp_data_14_triggerTag     (_tpMetaTable_io_r_resp_data_14_triggerTag),
    .io_r_resp_data_15_valid          (_tpMetaTable_io_r_resp_data_15_valid),
    .io_r_resp_data_15_triggerTag     (_tpMetaTable_io_r_resp_data_15_triggerTag),
    .io_w_req_valid                   (write_record | ~resetFinish),
    .io_w_req_bits_setIdx             (tpTable_w_set),
    .io_w_req_bits_data_0_valid       (resetFinish),
    .io_w_req_bits_data_0_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_1_valid       (resetFinish),
    .io_w_req_bits_data_1_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_2_valid       (resetFinish),
    .io_w_req_bits_data_2_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_3_valid       (resetFinish),
    .io_w_req_bits_data_3_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_4_valid       (resetFinish),
    .io_w_req_bits_data_4_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_5_valid       (resetFinish),
    .io_w_req_bits_data_5_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_6_valid       (resetFinish),
    .io_w_req_bits_data_6_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_7_valid       (resetFinish),
    .io_w_req_bits_data_7_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_8_valid       (resetFinish),
    .io_w_req_bits_data_8_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_9_valid       (resetFinish),
    .io_w_req_bits_data_9_triggerTag  (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_10_valid      (resetFinish),
    .io_w_req_bits_data_10_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_11_valid      (resetFinish),
    .io_w_req_bits_data_11_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_12_valid      (resetFinish),
    .io_w_req_bits_data_12_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_13_valid      (resetFinish),
    .io_w_req_bits_data_13_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_14_valid      (resetFinish),
    .io_w_req_bits_data_14_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_data_15_valid      (resetFinish),
    .io_w_req_bits_data_15_triggerTag (tpMeta_w_bits_triggerTag),
    .io_w_req_bits_waymask
      (resetFinish ? 16'h1 << write_record_trigger_way : 16'hFFFF)
  );
  Queue8_TPmetaReq dataReadQueue (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (s2_valid & hit_s2),
    .io_enq_bits_hartid    (io_hartid),
    .io_enq_bits_set       ({22'h0, pset_s2}),
    .io_enq_bits_way       (way_s2),
    .io_deq_ready          (io_tpmeta_port_req_ready & ~_dataWriteQueue_io_deq_valid),
    .io_deq_valid          (_dataReadQueue_io_deq_valid),
    .io_deq_bits_hartid    (_dataReadQueue_io_deq_bits_hartid),
    .io_deq_bits_set       (_dataReadQueue_io_deq_bits_set),
    .io_deq_bits_way       (_dataReadQueue_io_deq_bits_way),
    .io_deq_bits_wmode     (_dataReadQueue_io_deq_bits_wmode),
    .io_deq_bits_rawData_0 (_dataReadQueue_io_deq_bits_rawData_0),
    .io_deq_bits_rawData_1 (_dataReadQueue_io_deq_bits_rawData_1),
    .io_deq_bits_rawData_2 (_dataReadQueue_io_deq_bits_rawData_2)
  );
  Queue4_TPmetaReq dataWriteQueue (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (write_record),
    .io_enq_bits_hartid    (io_hartid),
    .io_enq_bits_set       ({22'h0, tpTable_w_set}),
    .io_enq_bits_way       (write_record_trigger_way),
    .io_enq_bits_rawData_0 (recorder_data_0[41:0]),
    .io_enq_bits_rawData_1 (recorder_data_1[41:0]),
    .io_enq_bits_rawData_2 (recorder_data_2[41:0]),
    .io_deq_ready          (io_tpmeta_port_req_ready),
    .io_deq_valid          (_dataWriteQueue_io_deq_valid),
    .io_deq_bits_hartid    (_dataWriteQueue_io_deq_bits_hartid),
    .io_deq_bits_set       (_dataWriteQueue_io_deq_bits_set),
    .io_deq_bits_way       (_dataWriteQueue_io_deq_bits_way),
    .io_deq_bits_wmode     (_dataWriteQueue_io_deq_bits_wmode),
    .io_deq_bits_rawData_0 (_dataWriteQueue_io_deq_bits_rawData_0),
    .io_deq_bits_rawData_1 (_dataWriteQueue_io_deq_bits_rawData_1),
    .io_deq_bits_rawData_2 (_dataWriteQueue_io_deq_bits_rawData_2)
  );
  Queue9_tpDataEntry tpDataQueue (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid
      (io_tpmeta_port_resp_valid & io_tpmeta_port_resp_bits_hartid == io_hartid),
    .io_enq_bits_rawData_0 ({6'h0, io_tpmeta_port_resp_bits_rawData_0}),
    .io_enq_bits_rawData_1 ({6'h0, io_tpmeta_port_resp_bits_rawData_1}),
    .io_enq_bits_rawData_2 ({6'h0, io_tpmeta_port_resp_bits_rawData_2}),
    .io_deq_ready          (_tpDataQueue_io_deq_ready_T_1),
    .io_deq_valid          (_tpDataQueue_io_deq_valid),
    .io_deq_bits_rawData_0 (_tpDataQueue_io_deq_bits_rawData_0),
    .io_deq_bits_rawData_1 (_tpDataQueue_io_deq_bits_rawData_1),
    .io_deq_bits_rawData_2 (_tpDataQueue_io_deq_bits_rawData_2),
    .io_count              (_tpDataQueue_io_count)
  );
  Queue4_triggerBundle triggerQueue (
    .clock             (clock),
    .reset             (reset),
    .io_enq_ready      (_triggerQueue_io_enq_ready),
    .io_enq_valid      (triggerEnq_s2),
    .io_enq_bits_vaddr (train_s2_vaddr[38:0]),
    .io_enq_bits_paddr ({train_s2_tag, train_s2_set, 6'h0}),
    .io_enq_bits_way   (way_s2),
    .io_deq_ready      (dorecord_s2 & _GEN_0),
    .io_deq_valid      (_triggerQueue_io_deq_valid),
    .io_deq_bits_paddr (_triggerQueue_io_deq_bits_paddr),
    .io_deq_bits_way   (_triggerQueue_io_deq_bits_way),
    .io_count          (_triggerQueue_io_count)
  );
  MaxPeriodFibonacciLFSR_3 lfsr_prng (
    .clock        (clock),
    .reset        (reset),
    .io_increment (1'h1),
    .io_out_0     (_lfsr_prng_io_out_0),
    .io_out_1     (_lfsr_prng_io_out_1),
    .io_out_2     (_lfsr_prng_io_out_2),
    .io_out_3     (_lfsr_prng_io_out_3),
    .io_out_4     (/* unused */),
    .io_out_5     (/* unused */),
    .io_out_6     (/* unused */),
    .io_out_7     (/* unused */),
    .io_out_8     (/* unused */),
    .io_out_9     (/* unused */),
    .io_out_10    (/* unused */),
    .io_out_11    (/* unused */),
    .io_out_12    (/* unused */),
    .io_out_13    (/* unused */),
    .io_out_14    (/* unused */),
    .io_out_15    (/* unused */)
  );
  assign io_train_ready = resetFinish;
  assign io_req_valid = io_req_valid_0;
  assign io_req_bits_tag = _GEN_2[41:7];
  assign io_req_bits_set = _GEN_2[6:0];
  assign io_tpmeta_port_req_valid =
    _dataReadQueue_io_deq_valid | _dataWriteQueue_io_deq_valid;
  assign io_tpmeta_port_req_bits_hartid =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_hartid
      : _dataReadQueue_io_deq_bits_hartid;
  assign io_tpmeta_port_req_bits_set =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_set
      : _dataReadQueue_io_deq_bits_set;
  assign io_tpmeta_port_req_bits_way =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_way
      : _dataReadQueue_io_deq_bits_way;
  assign io_tpmeta_port_req_bits_wmode =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_wmode
      : _dataReadQueue_io_deq_bits_wmode;
  assign io_tpmeta_port_req_bits_rawData_0 =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_rawData_0
      : _dataReadQueue_io_deq_bits_rawData_0;
  assign io_tpmeta_port_req_bits_rawData_1 =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_rawData_1
      : _dataReadQueue_io_deq_bits_rawData_1;
  assign io_tpmeta_port_req_bits_rawData_2 =
    _dataWriteQueue_io_deq_valid
      ? _dataWriteQueue_io_deq_bits_rawData_2
      : _dataReadQueue_io_deq_bits_rawData_2;
endmodule

