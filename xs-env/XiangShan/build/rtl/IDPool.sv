// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IDPool(
  input        clock,
  input        reset,
  input        io_free_valid,
  input  [2:0] io_free_bits,
  input        io_alloc_ready,
  output       io_alloc_valid,
  output [2:0] io_alloc_bits
);

  reg  [7:0] bitmap;
  reg  [2:0] select;
  reg        valid;
  wire [7:0] bitmap1 =
    bitmap & ~(io_alloc_ready ? 8'h1 << select : 8'h0)
    | (io_free_valid ? 8'h1 << io_free_bits : 8'h0);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      bitmap <= 8'hFF;
      select <= 3'h0;
      valid <= 1'h1;
    end
    else begin
      if (io_alloc_ready | io_free_valid) begin
        bitmap <= bitmap1;
        valid <=
          (|bitmap)
          & ~(4'({1'h0,
                  3'({1'h0, 2'({1'h0, bitmap[0]} + {1'h0, bitmap[1]})}
                     + {1'h0, 2'({1'h0, bitmap[2]} + {1'h0, bitmap[3]})})}
                 + {1'h0,
                    3'({1'h0, 2'({1'h0, bitmap[4]} + {1'h0, bitmap[5]})}
                       + {1'h0, 2'({1'h0, bitmap[6]} + {1'h0, bitmap[7]})})}) == 4'h1
              & io_alloc_ready) | io_free_valid;
      end
      if (io_alloc_ready | ~valid & io_free_valid) begin
        if (bitmap1[0])
          select <= 3'h0;
        else if (bitmap1[1])
          select <= 3'h1;
        else if (bitmap1[2])
          select <= 3'h2;
        else if (bitmap1[3])
          select <= 3'h3;
        else if (bitmap1[4])
          select <= 3'h4;
        else if (bitmap1[5])
          select <= 3'h5;
        else
          select <= {2'h3, ~(bitmap1[6])};
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        bitmap = _RANDOM[/*Zero width*/ 1'b0][7:0];
        select = _RANDOM[/*Zero width*/ 1'b0][10:8];
        valid = _RANDOM[/*Zero width*/ 1'b0][11];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        bitmap = 8'hFF;
        select = 3'h0;
        valid = 1'h1;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_alloc_valid = valid;
  assign io_alloc_bits = select;
endmodule

