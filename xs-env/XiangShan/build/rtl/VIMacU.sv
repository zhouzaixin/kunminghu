// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VIMacU(
  input          clock,
  input          reset,
  input          io_in_valid,
  input  [8:0]   io_in_bits_ctrl_fuOpType,
  input  [1:0]   io_in_bits_ctrl_vpu_vsew,
  input  [6:0]   io_in_bits_ctrl_vpu_vuopIdx,
  input  [8:0]   io_in_bits_ctrlPipe_2_fuOpType,
  input          io_in_bits_ctrlPipe_2_robIdx_flag,
  input  [7:0]   io_in_bits_ctrlPipe_2_robIdx_value,
  input  [7:0]   io_in_bits_ctrlPipe_2_pdest,
  input          io_in_bits_ctrlPipe_2_vecWen,
  input          io_in_bits_ctrlPipe_2_v0Wen,
  input          io_in_bits_ctrlPipe_2_vpu_vma,
  input          io_in_bits_ctrlPipe_2_vpu_vta,
  input  [1:0]   io_in_bits_ctrlPipe_2_vpu_vsew,
  input          io_in_bits_ctrlPipe_2_vpu_vm,
  input  [7:0]   io_in_bits_ctrlPipe_2_vpu_vstart,
  input  [6:0]   io_in_bits_ctrlPipe_2_vpu_vuopIdx,
  input          io_in_bits_validPipe_2,
  input  [127:0] io_in_bits_data_src_2,
  input  [127:0] io_in_bits_data_src_1,
  input  [127:0] io_in_bits_data_src_0,
  input  [7:0]   io_in_bits_dataPipe_2_src_4,
  input  [127:0] io_in_bits_dataPipe_2_src_3,
  input  [127:0] io_in_bits_dataPipe_2_src_2,
  output         io_out_valid,
  output         io_out_bits_ctrl_robIdx_flag,
  output [7:0]   io_out_bits_ctrl_robIdx_value,
  output [7:0]   io_out_bits_ctrl_pdest,
  output         io_out_bits_ctrl_vecWen,
  output         io_out_bits_ctrl_v0Wen,
  output [127:0] io_out_bits_res_data,
  output         io_out_bits_res_vxsat,
  input  [1:0]   io_vxrm
);

  wire [15:0] _mgu_io_out_active;
  wire [63:0] _vimacs_1_io_vd;
  wire [7:0]  _vimacs_1_io_vxsat;
  wire [63:0] _vimacs_0_io_vd;
  wire [7:0]  _vimacs_0_io_vxsat;
  wire [63:0] _oldVdSplit_io_outVec64b_0;
  wire [63:0] _oldVdSplit_io_outVec64b_1;
  wire [31:0] _vs1Split_io_outVec32b_0;
  wire [31:0] _vs1Split_io_outVec32b_1;
  wire [31:0] _vs1Split_io_outVec32b_2;
  wire [31:0] _vs1Split_io_outVec32b_3;
  wire [63:0] _vs1Split_io_outVec64b_0;
  wire [63:0] _vs1Split_io_outVec64b_1;
  wire [31:0] _vs2Split_io_outVec32b_0;
  wire [31:0] _vs2Split_io_outVec32b_1;
  wire [31:0] _vs2Split_io_outVec32b_2;
  wire [31:0] _vs2Split_io_outVec32b_3;
  wire [63:0] _vs2Split_io_outVec64b_0;
  wire [63:0] _vs2Split_io_outVec64b_1;
  wire [3:0]  _typeMod_io_out_vs1Type;
  wire [3:0]  _typeMod_io_out_vs2Type;
  reg         validVecThisFu_1;
  reg         validVecThisFu_2;
  wire        _vimacs_1_io_isMacc_T_2 = io_in_bits_ctrl_fuOpType[2:0] == 3'h4;
  wire        _vimacs_1_io_isSub_T_1 = io_in_bits_ctrl_fuOpType[2:0] == 3'h5;
  wire        exchangeVs2Vd = _vimacs_1_io_isMacc_T_2 | _vimacs_1_io_isSub_T_1;
  wire [63:0] vs2VecUsed_0 =
    io_in_bits_ctrl_fuOpType[3]
      ? {_vs2Split_io_outVec32b_2, _vs2Split_io_outVec32b_0}
      : _vs2Split_io_outVec64b_0;
  wire [63:0] vs2VecUsed_1 =
    io_in_bits_ctrl_fuOpType[3]
      ? {_vs2Split_io_outVec32b_3, _vs2Split_io_outVec32b_1}
      : _vs2Split_io_outVec64b_1;
  wire        _vimacs_1_io_highHalf_T = io_in_bits_ctrl_fuOpType[2:0] == 3'h1;
  wire        _vimacs_1_io_isMacc_T = io_in_bits_ctrl_fuOpType[2:0] == 3'h2;
  wire        _vimacs_1_io_isSub_T = io_in_bits_ctrl_fuOpType[2:0] == 3'h3;
  wire        _vimacs_1_io_isFixP_T = io_in_bits_ctrl_fuOpType[2:0] == 3'h6;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVecThisFu_1 <= 1'h0;
      validVecThisFu_2 <= 1'h0;
    end
    else begin
      validVecThisFu_1 <= io_in_valid;
      validVecThisFu_2 <= validVecThisFu_1;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        validVecThisFu_1 = _RANDOM[/*Zero width*/ 1'b0][0];
        validVecThisFu_2 = _RANDOM[/*Zero width*/ 1'b0][1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVecThisFu_1 = 1'h0;
        validVecThisFu_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VIMacSrcTypeModule typeMod (
    .io_in_fuOpType (io_in_bits_ctrl_fuOpType),
    .io_in_vsew     (io_in_bits_ctrl_vpu_vsew),
    .io_out_vs1Type (_typeMod_io_out_vs1Type),
    .io_out_vs2Type (_typeMod_io_out_vs2Type)
  );
  VecDataSplitModule vs2Split (
    .io_inVecData   (io_in_bits_data_src_1),
    .io_outVec8b_0  (/* unused */),
    .io_outVec8b_1  (/* unused */),
    .io_outVec8b_2  (/* unused */),
    .io_outVec8b_3  (/* unused */),
    .io_outVec8b_4  (/* unused */),
    .io_outVec8b_5  (/* unused */),
    .io_outVec8b_6  (/* unused */),
    .io_outVec8b_7  (/* unused */),
    .io_outVec8b_8  (/* unused */),
    .io_outVec8b_9  (/* unused */),
    .io_outVec8b_10 (/* unused */),
    .io_outVec8b_11 (/* unused */),
    .io_outVec8b_12 (/* unused */),
    .io_outVec8b_13 (/* unused */),
    .io_outVec8b_14 (/* unused */),
    .io_outVec8b_15 (/* unused */),
    .io_outVec16b_0 (/* unused */),
    .io_outVec16b_1 (/* unused */),
    .io_outVec16b_2 (/* unused */),
    .io_outVec16b_3 (/* unused */),
    .io_outVec16b_4 (/* unused */),
    .io_outVec16b_5 (/* unused */),
    .io_outVec16b_6 (/* unused */),
    .io_outVec16b_7 (/* unused */),
    .io_outVec32b_0 (_vs2Split_io_outVec32b_0),
    .io_outVec32b_1 (_vs2Split_io_outVec32b_1),
    .io_outVec32b_2 (_vs2Split_io_outVec32b_2),
    .io_outVec32b_3 (_vs2Split_io_outVec32b_3),
    .io_outVec64b_0 (_vs2Split_io_outVec64b_0),
    .io_outVec64b_1 (_vs2Split_io_outVec64b_1)
  );
  VecDataSplitModule vs1Split (
    .io_inVecData   (io_in_bits_data_src_0),
    .io_outVec8b_0  (/* unused */),
    .io_outVec8b_1  (/* unused */),
    .io_outVec8b_2  (/* unused */),
    .io_outVec8b_3  (/* unused */),
    .io_outVec8b_4  (/* unused */),
    .io_outVec8b_5  (/* unused */),
    .io_outVec8b_6  (/* unused */),
    .io_outVec8b_7  (/* unused */),
    .io_outVec8b_8  (/* unused */),
    .io_outVec8b_9  (/* unused */),
    .io_outVec8b_10 (/* unused */),
    .io_outVec8b_11 (/* unused */),
    .io_outVec8b_12 (/* unused */),
    .io_outVec8b_13 (/* unused */),
    .io_outVec8b_14 (/* unused */),
    .io_outVec8b_15 (/* unused */),
    .io_outVec16b_0 (/* unused */),
    .io_outVec16b_1 (/* unused */),
    .io_outVec16b_2 (/* unused */),
    .io_outVec16b_3 (/* unused */),
    .io_outVec16b_4 (/* unused */),
    .io_outVec16b_5 (/* unused */),
    .io_outVec16b_6 (/* unused */),
    .io_outVec16b_7 (/* unused */),
    .io_outVec32b_0 (_vs1Split_io_outVec32b_0),
    .io_outVec32b_1 (_vs1Split_io_outVec32b_1),
    .io_outVec32b_2 (_vs1Split_io_outVec32b_2),
    .io_outVec32b_3 (_vs1Split_io_outVec32b_3),
    .io_outVec64b_0 (_vs1Split_io_outVec64b_0),
    .io_outVec64b_1 (_vs1Split_io_outVec64b_1)
  );
  VecDataSplitModule oldVdSplit (
    .io_inVecData   (io_in_bits_data_src_2),
    .io_outVec8b_0  (/* unused */),
    .io_outVec8b_1  (/* unused */),
    .io_outVec8b_2  (/* unused */),
    .io_outVec8b_3  (/* unused */),
    .io_outVec8b_4  (/* unused */),
    .io_outVec8b_5  (/* unused */),
    .io_outVec8b_6  (/* unused */),
    .io_outVec8b_7  (/* unused */),
    .io_outVec8b_8  (/* unused */),
    .io_outVec8b_9  (/* unused */),
    .io_outVec8b_10 (/* unused */),
    .io_outVec8b_11 (/* unused */),
    .io_outVec8b_12 (/* unused */),
    .io_outVec8b_13 (/* unused */),
    .io_outVec8b_14 (/* unused */),
    .io_outVec8b_15 (/* unused */),
    .io_outVec16b_0 (/* unused */),
    .io_outVec16b_1 (/* unused */),
    .io_outVec16b_2 (/* unused */),
    .io_outVec16b_3 (/* unused */),
    .io_outVec16b_4 (/* unused */),
    .io_outVec16b_5 (/* unused */),
    .io_outVec16b_6 (/* unused */),
    .io_outVec16b_7 (/* unused */),
    .io_outVec32b_0 (/* unused */),
    .io_outVec32b_1 (/* unused */),
    .io_outVec32b_2 (/* unused */),
    .io_outVec32b_3 (/* unused */),
    .io_outVec64b_0 (_oldVdSplit_io_outVec64b_0),
    .io_outVec64b_1 (_oldVdSplit_io_outVec64b_1)
  );
  VIMac64b vimacs_0 (
    .clock          (clock),
    .reset          (reset),
    .io_fire        (io_in_valid),
    .io_info_uopIdx (io_in_bits_ctrl_vpu_vuopIdx[5:0]),
    .io_info_vxrm   (io_vxrm),
    .io_srcType_0   (_typeMod_io_out_vs2Type),
    .io_srcType_1   (_typeMod_io_out_vs1Type),
    .io_vs1
      (io_in_bits_ctrl_fuOpType[3]
         ? {_vs1Split_io_outVec32b_2, _vs1Split_io_outVec32b_0}
         : _vs1Split_io_outVec64b_0),
    .io_vs2         (exchangeVs2Vd ? _oldVdSplit_io_outVec64b_0 : vs2VecUsed_0),
    .io_oldVd       (exchangeVs2Vd ? vs2VecUsed_0 : _oldVdSplit_io_outVec64b_0),
    .io_highHalf    (_vimacs_1_io_highHalf_T),
    .io_isMacc
      (_vimacs_1_io_isMacc_T | _vimacs_1_io_isSub_T | _vimacs_1_io_isMacc_T_2
       | _vimacs_1_io_isSub_T_1),
    .io_isSub       (_vimacs_1_io_isSub_T | _vimacs_1_io_isSub_T_1),
    .io_widen       (io_in_bits_ctrl_fuOpType[3]),
    .io_isFixP      (_vimacs_1_io_isFixP_T),
    .io_vd          (_vimacs_0_io_vd),
    .io_vxsat       (_vimacs_0_io_vxsat)
  );
  VIMac64b vimacs_1 (
    .clock          (clock),
    .reset          (reset),
    .io_fire        (io_in_valid),
    .io_info_uopIdx (io_in_bits_ctrl_vpu_vuopIdx[5:0]),
    .io_info_vxrm   (io_vxrm),
    .io_srcType_0   (_typeMod_io_out_vs2Type),
    .io_srcType_1   (_typeMod_io_out_vs1Type),
    .io_vs1
      (io_in_bits_ctrl_fuOpType[3]
         ? {_vs1Split_io_outVec32b_3, _vs1Split_io_outVec32b_1}
         : _vs1Split_io_outVec64b_1),
    .io_vs2         (exchangeVs2Vd ? _oldVdSplit_io_outVec64b_1 : vs2VecUsed_1),
    .io_oldVd       (exchangeVs2Vd ? vs2VecUsed_1 : _oldVdSplit_io_outVec64b_1),
    .io_highHalf    (_vimacs_1_io_highHalf_T),
    .io_isMacc
      (_vimacs_1_io_isMacc_T | _vimacs_1_io_isSub_T | _vimacs_1_io_isMacc_T_2
       | _vimacs_1_io_isSub_T_1),
    .io_isSub       (_vimacs_1_io_isSub_T | _vimacs_1_io_isSub_T_1),
    .io_widen       (io_in_bits_ctrl_fuOpType[3]),
    .io_isFixP      (_vimacs_1_io_isFixP_T),
    .io_vd          (_vimacs_1_io_vd),
    .io_vxsat       (_vimacs_1_io_vxsat)
  );
  Mgu mgu (
    .io_in_vd           ({_vimacs_1_io_vd, _vimacs_0_io_vd}),
    .io_in_oldVd        (io_in_bits_dataPipe_2_src_2),
    .io_in_mask
      (io_in_bits_ctrlPipe_2_vpu_vm
         ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
         : io_in_bits_dataPipe_2_src_3),
    .io_in_info_ta      (io_in_bits_ctrlPipe_2_vpu_vta),
    .io_in_info_ma      (io_in_bits_ctrlPipe_2_vpu_vma),
    .io_in_info_vl      (io_in_bits_dataPipe_2_src_4),
    .io_in_info_vstart  (io_in_bits_ctrlPipe_2_vpu_vstart),
    .io_in_info_eew
      (io_in_bits_ctrlPipe_2_fuOpType[3]
         ? 2'(io_in_bits_ctrlPipe_2_vpu_vsew + 2'h1)
         : io_in_bits_ctrlPipe_2_vpu_vsew),
    .io_in_info_vdIdx   (io_in_bits_ctrlPipe_2_vpu_vuopIdx[2:0]),
    .io_in_info_narrow  (1'h0),
    .io_in_info_dstMask (1'h0),
    .io_out_vd          (io_out_bits_res_data),
    .io_out_active      (_mgu_io_out_active)
  );
  assign io_out_valid = io_in_bits_validPipe_2 & validVecThisFu_2;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrlPipe_2_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrlPipe_2_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrlPipe_2_pdest;
  assign io_out_bits_ctrl_vecWen = io_in_bits_ctrlPipe_2_vecWen;
  assign io_out_bits_ctrl_v0Wen = io_in_bits_ctrlPipe_2_v0Wen;
  assign io_out_bits_res_vxsat =
    |({_vimacs_1_io_vxsat, _vimacs_0_io_vxsat} & _mgu_io_out_active);
endmodule

