// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MStatusModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_SIE,
  output        regOut_MIE,
  output        regOut_SPIE,
  output        regOut_MPIE,
  output        regOut_SPP,
  output [1:0]  regOut_VS,
  output [1:0]  regOut_MPP,
  output [1:0]  regOut_FS,
  output        regOut_MPRV,
  output        regOut_SUM,
  output        regOut_MXR,
  output        regOut_TVM,
  output        regOut_TW,
  output        regOut_TSR,
  output        regOut_SDT,
  output        regOut_GVA,
  output        regOut_MPV,
  output        regOut_MDT,
  input         trapToM_mstatus_valid,
  input         trapToM_mstatus_bits_MIE,
  input         trapToM_mstatus_bits_MPIE,
  input  [1:0]  trapToM_mstatus_bits_MPP,
  input         trapToM_mstatus_bits_GVA,
  input         trapToM_mstatus_bits_MPV,
  input         trapToM_mstatus_bits_MDT,
  input         trapToHS_mstatus_valid,
  input         trapToHS_mstatus_bits_SIE,
  input         trapToHS_mstatus_bits_SPIE,
  input         trapToHS_mstatus_bits_SPP,
  input         trapToHS_mstatus_bits_SDT,
  input         retFromD_mstatus_valid,
  input         retFromD_mstatus_bits_MPRV,
  input         retFromD_mstatus_bits_SDT,
  input         retFromD_mstatus_bits_MDT,
  input         retFromM_mstatus_valid,
  input         retFromM_mstatus_bits_MIE,
  input         retFromM_mstatus_bits_MPIE,
  input  [1:0]  retFromM_mstatus_bits_MPP,
  input         retFromM_mstatus_bits_MPRV,
  input         retFromM_mstatus_bits_SDT,
  input         retFromM_mstatus_bits_MPV,
  input         retFromM_mstatus_bits_MDT,
  input         retFromMN_mstatus_valid,
  input         retFromMN_mstatus_bits_MPRV,
  input         retFromMN_mstatus_bits_SDT,
  input         retFromMN_mstatus_bits_MDT,
  input         retFromS_mstatus_valid,
  input         retFromS_mstatus_bits_SIE,
  input         retFromS_mstatus_bits_SPIE,
  input         retFromS_mstatus_bits_SPP,
  input         retFromS_mstatus_bits_MPRV,
  input         retFromS_mstatus_bits_SDT,
  input         retFromS_mstatus_bits_MDT,
  input         robCommit_fsDirty,
  input         robCommit_vsDirty,
  input         writeFCSR,
  input         writeVCSR,
  input         menvcfg_DTE,
  output        sstatus_SIE,
  output        sstatus_SPIE,
  output        sstatus_SPP,
  output [1:0]  sstatus_VS,
  output [1:0]  sstatus_FS,
  output        sstatus_SUM,
  output        sstatus_MXR,
  output        sstatus_SDT,
  output        sstatus_SD,
  output [63:0] sstatusRdata,
  input         wAliasSstatus_wen,
  input  [63:0] wAliasSstatus_wdata
);

  reg        reg_SIE;
  reg        reg_MIE;
  reg        reg_SPIE;
  reg        reg_MPIE;
  reg        reg_SPP;
  reg  [1:0] reg_VS;
  reg  [1:0] reg_MPP;
  reg  [1:0] reg_FS;
  reg        reg_MPRV;
  reg        reg_SUM;
  reg        reg_MXR;
  reg        reg_TVM;
  reg        reg_TW;
  reg        reg_TSR;
  reg        reg_SDT;
  reg        reg_GVA;
  reg        reg_MPV;
  reg        reg_MDT;
  wire       _mstatus_SD_T_3 = (&reg_FS) | (&reg_VS);
  wire       _sstatus_SDT_WIRE = reg_SDT & menvcfg_DTE;
  wire       _GEN = trapToM_mstatus_valid | retFromM_mstatus_valid;
  wire       _GEN_0 = w_wen | _GEN;
  wire       _GEN_1 = w_wen | wAliasSstatus_wen;
  wire       _GEN_2 =
    w_wen | trapToHS_mstatus_valid | retFromS_mstatus_valid | wAliasSstatus_wen;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_SIE <= 1'h0;
      reg_MIE <= 1'h0;
      reg_SPIE <= 1'h0;
      reg_MPIE <= 1'h0;
      reg_SPP <= 1'h0;
      reg_VS <= 2'h0;
      reg_MPP <= 2'h0;
      reg_FS <= 2'h0;
      reg_MPRV <= 1'h0;
      reg_SUM <= 1'h0;
      reg_MXR <= 1'h0;
      reg_TVM <= 1'h0;
      reg_TW <= 1'h0;
      reg_TSR <= 1'h0;
      reg_SDT <= 1'h0;
      reg_GVA <= 1'h0;
      reg_MPV <= 1'h0;
      reg_MDT <= 1'h0;
    end
    else begin
      reg_SIE <=
        ~(w_wen
            ? w_wdata[24]
            : wAliasSstatus_wen & (menvcfg_DTE ? wAliasSstatus_wdata[24] : reg_SDT))
        & (_GEN_2
             ? trapToHS_mstatus_valid & trapToHS_mstatus_bits_SIE | retFromS_mstatus_valid
               & retFromS_mstatus_bits_SIE | wAliasSstatus_wen & wAliasSstatus_wdata[1]
               | w_wen & w_wdata[1]
             : reg_SIE);
      reg_MIE <=
        ~(w_wdata[42] & w_wen)
        & (_GEN_0
             ? trapToM_mstatus_valid & trapToM_mstatus_bits_MIE | retFromM_mstatus_valid
               & retFromM_mstatus_bits_MIE | w_wen & w_wdata[3]
             : reg_MIE);
      if (_GEN_2) begin
        reg_SPIE <=
          trapToHS_mstatus_valid & trapToHS_mstatus_bits_SPIE | retFromS_mstatus_valid
          & retFromS_mstatus_bits_SPIE | wAliasSstatus_wen & wAliasSstatus_wdata[5]
          | w_wen & w_wdata[5];
        reg_SPP <=
          trapToHS_mstatus_valid & trapToHS_mstatus_bits_SPP | retFromS_mstatus_valid
          & retFromS_mstatus_bits_SPP | wAliasSstatus_wen & wAliasSstatus_wdata[8] | w_wen
          & w_wdata[8];
      end
      if (_GEN_0) begin
        reg_MPIE <=
          trapToM_mstatus_valid & trapToM_mstatus_bits_MPIE | retFromM_mstatus_valid
          & retFromM_mstatus_bits_MPIE | w_wen & w_wdata[7];
        reg_MPV <=
          trapToM_mstatus_valid & trapToM_mstatus_bits_MPV | retFromM_mstatus_valid
          & retFromM_mstatus_bits_MPV | w_wen & w_wdata[39];
      end
      if (robCommit_vsDirty | writeVCSR)
        reg_VS <= 2'h3;
      else if (_GEN_1)
        reg_VS <=
          (wAliasSstatus_wen ? wAliasSstatus_wdata[10:9] : 2'h0)
          | (w_wen ? w_wdata[10:9] : 2'h0);
      if (w_wen & (|{&(w_wdata[12:11]), w_wdata[12:11] == 2'h1, w_wdata[12:11] == 2'h0})
          | _GEN)
        reg_MPP <=
          (trapToM_mstatus_valid ? trapToM_mstatus_bits_MPP : 2'h0)
          | (retFromM_mstatus_valid ? retFromM_mstatus_bits_MPP : 2'h0)
          | (w_wen ? w_wdata[12:11] : 2'h0);
      if (robCommit_fsDirty | writeFCSR)
        reg_FS <= 2'h3;
      else if (_GEN_1)
        reg_FS <=
          (wAliasSstatus_wen ? wAliasSstatus_wdata[14:13] : 2'h0)
          | (w_wen ? w_wdata[14:13] : 2'h0);
      if (w_wen | retFromD_mstatus_valid | retFromM_mstatus_valid
          | retFromMN_mstatus_valid | retFromS_mstatus_valid)
        reg_MPRV <=
          retFromD_mstatus_valid & retFromD_mstatus_bits_MPRV | retFromM_mstatus_valid
          & retFromM_mstatus_bits_MPRV | retFromMN_mstatus_valid
          & retFromMN_mstatus_bits_MPRV | retFromS_mstatus_valid
          & retFromS_mstatus_bits_MPRV | w_wen & w_wdata[17];
      if (_GEN_1) begin
        reg_SUM <= wAliasSstatus_wen & wAliasSstatus_wdata[18] | w_wen & w_wdata[18];
        reg_MXR <= wAliasSstatus_wen & wAliasSstatus_wdata[19] | w_wen & w_wdata[19];
      end
      if (w_wen) begin
        reg_TVM <= w_wdata[20];
        reg_TW <= w_wdata[21];
        reg_TSR <= w_wdata[22];
      end
      if (~menvcfg_DTE & wAliasSstatus_wen
          | ~(w_wen | trapToHS_mstatus_valid | retFromD_mstatus_valid
              | retFromM_mstatus_valid | retFromMN_mstatus_valid | retFromS_mstatus_valid
              | wAliasSstatus_wen)) begin
      end
      else
        reg_SDT <=
          trapToHS_mstatus_valid & trapToHS_mstatus_bits_SDT | retFromD_mstatus_valid
          & retFromD_mstatus_bits_SDT | retFromM_mstatus_valid & retFromM_mstatus_bits_SDT
          | retFromMN_mstatus_valid & retFromMN_mstatus_bits_SDT | retFromS_mstatus_valid
          & retFromS_mstatus_bits_SDT | wAliasSstatus_wen & wAliasSstatus_wdata[24]
          | w_wen & w_wdata[24];
      if (w_wen | trapToM_mstatus_valid)
        reg_GVA <= trapToM_mstatus_valid & trapToM_mstatus_bits_GVA | w_wen & w_wdata[38];
      if (w_wen | trapToM_mstatus_valid | retFromD_mstatus_valid | retFromM_mstatus_valid
          | retFromMN_mstatus_valid | retFromS_mstatus_valid)
        reg_MDT <=
          trapToM_mstatus_valid & trapToM_mstatus_bits_MDT | retFromD_mstatus_valid
          & retFromD_mstatus_bits_MDT | retFromM_mstatus_valid & retFromM_mstatus_bits_MDT
          | retFromMN_mstatus_valid & retFromMN_mstatus_bits_MDT | retFromS_mstatus_valid
          & retFromS_mstatus_bits_MDT | w_wen & w_wdata[42];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_SIE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_MIE = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_SPIE = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_MPIE = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_SPP = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_VS = _RANDOM[/*Zero width*/ 1'b0][7:6];
        reg_MPP = _RANDOM[/*Zero width*/ 1'b0][9:8];
        reg_FS = _RANDOM[/*Zero width*/ 1'b0][11:10];
        reg_MPRV = _RANDOM[/*Zero width*/ 1'b0][14];
        reg_SUM = _RANDOM[/*Zero width*/ 1'b0][15];
        reg_MXR = _RANDOM[/*Zero width*/ 1'b0][16];
        reg_TVM = _RANDOM[/*Zero width*/ 1'b0][17];
        reg_TW = _RANDOM[/*Zero width*/ 1'b0][18];
        reg_TSR = _RANDOM[/*Zero width*/ 1'b0][19];
        reg_SDT = _RANDOM[/*Zero width*/ 1'b0][20];
        reg_GVA = _RANDOM[/*Zero width*/ 1'b0][27];
        reg_MPV = _RANDOM[/*Zero width*/ 1'b0][28];
        reg_MDT = _RANDOM[/*Zero width*/ 1'b0][29];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_SIE = 1'h0;
        reg_MIE = 1'h0;
        reg_SPIE = 1'h0;
        reg_MPIE = 1'h0;
        reg_SPP = 1'h0;
        reg_VS = 2'h0;
        reg_MPP = 2'h0;
        reg_FS = 2'h0;
        reg_MPRV = 1'h0;
        reg_SUM = 1'h0;
        reg_MXR = 1'h0;
        reg_TVM = 1'h0;
        reg_TW = 1'h0;
        reg_TSR = 1'h0;
        reg_SDT = 1'h0;
        reg_GVA = 1'h0;
        reg_MPV = 1'h0;
        reg_MDT = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {_mstatus_SD_T_3,
     20'h0,
     reg_MDT,
     2'h0,
     reg_MPV,
     reg_GVA,
     13'h500,
     reg_SDT,
     1'h0,
     reg_TSR,
     reg_TW,
     reg_TVM,
     reg_MXR,
     reg_SUM,
     reg_MPRV,
     2'h0,
     reg_FS,
     reg_MPP,
     reg_VS,
     reg_SPP,
     reg_MPIE,
     1'h0,
     reg_SPIE,
     1'h0,
     reg_MIE,
     1'h0,
     reg_SIE,
     1'h0};
  assign regOut_SIE = reg_SIE;
  assign regOut_MIE = reg_MIE;
  assign regOut_SPIE = reg_SPIE;
  assign regOut_MPIE = reg_MPIE;
  assign regOut_SPP = reg_SPP;
  assign regOut_VS = reg_VS;
  assign regOut_MPP = reg_MPP;
  assign regOut_FS = reg_FS;
  assign regOut_MPRV = reg_MPRV;
  assign regOut_SUM = reg_SUM;
  assign regOut_MXR = reg_MXR;
  assign regOut_TVM = reg_TVM;
  assign regOut_TW = reg_TW;
  assign regOut_TSR = reg_TSR;
  assign regOut_SDT = reg_SDT;
  assign regOut_GVA = reg_GVA;
  assign regOut_MPV = reg_MPV;
  assign regOut_MDT = reg_MDT;
  assign sstatus_SIE = reg_SIE;
  assign sstatus_SPIE = reg_SPIE;
  assign sstatus_SPP = reg_SPP;
  assign sstatus_VS = reg_VS;
  assign sstatus_FS = reg_FS;
  assign sstatus_SUM = reg_SUM;
  assign sstatus_MXR = reg_MXR;
  assign sstatus_SDT = _sstatus_SDT_WIRE;
  assign sstatus_SD = _mstatus_SD_T_3;
  assign sstatusRdata =
    {_mstatus_SD_T_3,
     38'h100,
     _sstatus_SDT_WIRE,
     4'h0,
     reg_MXR,
     reg_SUM,
     3'h0,
     reg_FS,
     2'h0,
     reg_VS,
     reg_SPP,
     2'h0,
     reg_SPIE,
     3'h0,
     reg_SIE,
     1'h0};
endmodule

