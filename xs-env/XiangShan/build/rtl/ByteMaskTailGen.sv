// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ByteMaskTailGen(
  input  [7:0]  io_in_begin,
  input  [7:0]  io_in_end,
  input         io_in_vma,
  input         io_in_vta,
  input  [1:0]  io_in_vsew,
  input  [15:0] io_in_maskUsed,
  input  [2:0]  io_in_vdIdx,
  output [15:0] io_out_activeEn,
  output [15:0] io_out_agnosticEn
);

  wire [15:0]  _maskEn_maskExtractor_io_out_mask;
  wire [254:0] _tailEn_uintToContTail0sMod128Bits_io_dataOut;
  wire [254:0] _bodyEn_uintToContTail1sMod128Bits_io_dataOut;
  wire [254:0] _bodyEn_uintToContTail0sMod128Bits_io_dataOut;
  wire [254:0] _prestartEn_uintToContTail1sMod128Bits_io_dataOut;
  wire [3:0]   eewOH_sew_oneHot =
    {&io_in_vsew, io_in_vsew == 2'h2, io_in_vsew == 2'h1, io_in_vsew == 2'h0};
  wire [7:0]   startBytes =
    (eewOH_sew_oneHot[0] ? io_in_begin : 8'h0)
    | (eewOH_sew_oneHot[1] ? {io_in_begin[6:0], 1'h0} : 8'h0)
    | (eewOH_sew_oneHot[2] ? {io_in_begin[5:0], 2'h0} : 8'h0)
    | (eewOH_sew_oneHot[3] ? {io_in_begin[4:0], 3'h0} : 8'h0);
  wire [7:0]   vlBytes =
    (eewOH_sew_oneHot[0] ? io_in_end : 8'h0)
    | (eewOH_sew_oneHot[1] ? {io_in_end[6:0], 1'h0} : 8'h0)
    | (eewOH_sew_oneHot[2] ? {io_in_end[5:0], 2'h0} : 8'h0)
    | (eewOH_sew_oneHot[3] ? {io_in_end[4:0], 3'h0} : 8'h0);
  wire [127:0] prestartEn = _prestartEn_uintToContTail1sMod128Bits_io_dataOut[127:0];
  wire [127:0] bodyEn =
    _bodyEn_uintToContTail0sMod128Bits_io_dataOut[127:0]
    & _bodyEn_uintToContTail1sMod128Bits_io_dataOut[127:0];
  wire [127:0] tailEn = _tailEn_uintToContTail0sMod128Bits_io_dataOut[127:0];
  wire         _tailEnInVd_T_8 = io_in_vdIdx == 3'h0;
  wire         _tailEnInVd_T_9 = io_in_vdIdx == 3'h1;
  wire         _tailEnInVd_T_10 = io_in_vdIdx == 3'h2;
  wire         _tailEnInVd_T_11 = io_in_vdIdx == 3'h3;
  wire         _tailEnInVd_T_12 = io_in_vdIdx == 3'h4;
  wire         _tailEnInVd_T_13 = io_in_vdIdx == 3'h5;
  wire         _tailEnInVd_T_14 = io_in_vdIdx == 3'h6;
  wire [15:0]  prestartEnInVd =
    (_tailEnInVd_T_8 ? prestartEn[15:0] : 16'h0)
    | (_tailEnInVd_T_9 ? prestartEn[31:16] : 16'h0)
    | (_tailEnInVd_T_10 ? prestartEn[47:32] : 16'h0)
    | (_tailEnInVd_T_11 ? prestartEn[63:48] : 16'h0)
    | (_tailEnInVd_T_12 ? prestartEn[79:64] : 16'h0)
    | (_tailEnInVd_T_13 ? prestartEn[95:80] : 16'h0)
    | (_tailEnInVd_T_14 ? prestartEn[111:96] : 16'h0)
    | ((&io_in_vdIdx) ? prestartEn[127:112] : 16'h0);
  wire [15:0]  bodyEnInVd =
    (_tailEnInVd_T_8 ? bodyEn[15:0] : 16'h0) | (_tailEnInVd_T_9 ? bodyEn[31:16] : 16'h0)
    | (_tailEnInVd_T_10 ? bodyEn[47:32] : 16'h0)
    | (_tailEnInVd_T_11 ? bodyEn[63:48] : 16'h0)
    | (_tailEnInVd_T_12 ? bodyEn[79:64] : 16'h0)
    | (_tailEnInVd_T_13 ? bodyEn[95:80] : 16'h0)
    | (_tailEnInVd_T_14 ? bodyEn[111:96] : 16'h0)
    | ((&io_in_vdIdx) ? bodyEn[127:112] : 16'h0);
  wire [15:0]  tailEnInVd =
    (_tailEnInVd_T_8 ? tailEn[15:0] : 16'h0) | (_tailEnInVd_T_9 ? tailEn[31:16] : 16'h0)
    | (_tailEnInVd_T_10 ? tailEn[47:32] : 16'h0)
    | (_tailEnInVd_T_11 ? tailEn[63:48] : 16'h0)
    | (_tailEnInVd_T_12 ? tailEn[79:64] : 16'h0)
    | (_tailEnInVd_T_13 ? tailEn[95:80] : 16'h0)
    | (_tailEnInVd_T_14 ? tailEn[111:96] : 16'h0)
    | ((&io_in_vdIdx) ? tailEn[127:112] : 16'h0);
  wire [15:0]  maskOffEn = ~_maskEn_maskExtractor_io_out_mask;
  wire [15:0]  maskAgnosticEn = (io_in_vma ? maskOffEn : 16'h0) & bodyEnInVd;
  wire [15:0]  tailAgnosticEn = io_in_vta ? tailEnInVd : 16'h0;
  wire         _agnosticEn_T = io_in_begin >= io_in_end;
  UIntToContLow1s prestartEn_uintToContTail1sMod128Bits (
    .io_dataIn  (startBytes),
    .io_dataOut (_prestartEn_uintToContTail1sMod128Bits_io_dataOut)
  );
  UIntToContLow0s bodyEn_uintToContTail0sMod128Bits (
    .io_dataIn  (startBytes),
    .io_dataOut (_bodyEn_uintToContTail0sMod128Bits_io_dataOut)
  );
  UIntToContLow1s bodyEn_uintToContTail1sMod128Bits (
    .io_dataIn  (vlBytes),
    .io_dataOut (_bodyEn_uintToContTail1sMod128Bits_io_dataOut)
  );
  UIntToContLow0s tailEn_uintToContTail0sMod128Bits (
    .io_dataIn  (vlBytes),
    .io_dataOut (_tailEn_uintToContTail0sMod128Bits_io_dataOut)
  );
  MaskExtractor maskEn_maskExtractor (
    .io_in_mask  (io_in_maskUsed),
    .io_in_vsew  (io_in_vsew),
    .io_out_mask (_maskEn_maskExtractor_io_out_mask)
  );
  assign io_out_activeEn =
    _agnosticEn_T ? 16'h0 : bodyEnInVd & _maskEn_maskExtractor_io_out_mask;
  assign io_out_agnosticEn = _agnosticEn_T ? 16'h0 : maskAgnosticEn | tailAgnosticEn;
endmodule

