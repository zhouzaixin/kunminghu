// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CtrlUnit_1(
  input         clock,
  input         reset,
  output        auto_int_out_0,
  output        auto_ctl_in_a_ready,
  input         auto_ctl_in_a_valid,
  input  [3:0]  auto_ctl_in_a_bits_opcode,
  input  [1:0]  auto_ctl_in_a_bits_size,
  input  [2:0]  auto_ctl_in_a_bits_source,
  input  [29:0] auto_ctl_in_a_bits_address,
  input  [7:0]  auto_ctl_in_a_bits_mask,
  input  [63:0] auto_ctl_in_a_bits_data,
  input         auto_ctl_in_d_ready,
  output        auto_ctl_in_d_valid,
  output [3:0]  auto_ctl_in_d_bits_opcode,
  output [1:0]  auto_ctl_in_d_bits_size,
  output [2:0]  auto_ctl_in_d_bits_source,
  output [63:0] auto_ctl_in_d_bits_data,
  input         io_req_ready,
  output        io_req_valid,
  output [7:0]  io_req_bits_cmd,
  output [63:0] io_req_bits_data_0,
  output [63:0] io_req_bits_data_1,
  output [63:0] io_req_bits_data_2,
  output [63:0] io_req_bits_data_3,
  output [63:0] io_req_bits_data_4,
  output [63:0] io_req_bits_data_5,
  output [63:0] io_req_bits_data_6,
  output [63:0] io_req_bits_data_7,
  output [63:0] io_req_bits_set,
  output [63:0] io_req_bits_tag,
  output [63:0] io_req_bits_way,
  output [63:0] io_req_bits_dir,
  output        io_resp_ready,
  input         io_resp_valid,
  input  [7:0]  io_resp_bits_cmd,
  input  [63:0] io_resp_bits_data_0,
  input  [63:0] io_resp_bits_data_1,
  input  [63:0] io_resp_bits_data_2,
  input  [63:0] io_resp_bits_data_3,
  input  [63:0] io_resp_bits_data_4,
  input  [63:0] io_resp_bits_data_5,
  input  [63:0] io_resp_bits_data_6,
  input  [63:0] io_resp_bits_data_7,
  output        io_ecc_ready,
  input         io_ecc_valid,
  input  [7:0]  io_ecc_bits_errCode,
  input  [63:0] io_ecc_bits_addr
);

  wire         _out_wofireMux_T_2;
  wire         out_backSel_32;
  wire         _out_back_q_io_enq_ready;
  wire         _out_back_q_io_deq_valid;
  wire         _out_back_q_io_deq_bits_read;
  wire [12:0]  _out_back_q_io_deq_bits_index;
  wire [63:0]  _out_back_q_io_deq_bits_data;
  wire [7:0]   _out_back_q_io_deq_bits_mask;
  reg  [63:0]  ctl_tag;
  reg  [63:0]  ctl_set;
  reg  [63:0]  ctl_way;
  reg  [63:0]  ctl_dir;
  reg  [63:0]  ctl_data_0;
  reg  [63:0]  ctl_data_1;
  reg  [63:0]  ctl_data_2;
  reg  [63:0]  ctl_data_3;
  reg  [63:0]  ctl_data_4;
  reg  [63:0]  ctl_data_5;
  reg  [63:0]  ctl_data_6;
  reg  [63:0]  ctl_data_7;
  reg  [63:0]  ctl_cmd;
  reg  [63:0]  ecc_code;
  reg  [63:0]  ecc_addr;
  reg  [63:0]  core_reset_0;
  reg          cmd_in_valid;
  reg          cmd_out_valid;
  wire         in_bits_read = auto_ctl_in_a_bits_opcode == 4'h4;
  wire [5:0]   _GEN =
    {auto_ctl_in_a_bits_address[15:13],
     auto_ctl_in_a_bits_address[11:10],
     auto_ctl_in_a_bits_address[7]};
  wire [5:0]   _GEN_0 =
    {_out_back_q_io_deq_bits_index[12:10],
     _out_back_q_io_deq_bits_index[8:7],
     _out_back_q_io_deq_bits_index[4]};
  wire [63:0]  out_frontMask =
    {{8{auto_ctl_in_a_bits_mask[7]}},
     {8{auto_ctl_in_a_bits_mask[6]}},
     {8{auto_ctl_in_a_bits_mask[5]}},
     {8{auto_ctl_in_a_bits_mask[4]}},
     {8{auto_ctl_in_a_bits_mask[3]}},
     {8{auto_ctl_in_a_bits_mask[2]}},
     {8{auto_ctl_in_a_bits_mask[1]}},
     {8{auto_ctl_in_a_bits_mask[0]}}};
  wire [63:0]  out_backMask =
    {{8{_out_back_q_io_deq_bits_mask[7]}},
     {8{_out_back_q_io_deq_bits_mask[6]}},
     {8{_out_back_q_io_deq_bits_mask[5]}},
     {8{_out_back_q_io_deq_bits_mask[4]}},
     {8{_out_back_q_io_deq_bits_mask[3]}},
     {8{_out_back_q_io_deq_bits_mask[2]}},
     {8{_out_back_q_io_deq_bits_mask[1]}},
     {8{_out_back_q_io_deq_bits_mask[0]}}};
  wire [6:0]   out_oindex =
    {_out_back_q_io_deq_bits_index[9],
     _out_back_q_io_deq_bits_index[6:5],
     _out_back_q_io_deq_bits_index[3:0]};
  wire [6:0]   _GEN_1 =
    {_out_back_q_io_deq_bits_index[9],
     _out_back_q_io_deq_bits_index[6:5],
     _out_back_q_io_deq_bits_index[3:0]};
  assign out_backSel_32 = _GEN_1 == 7'h20;
  wire [127:0] _GEN_2 =
    {{1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {~cmd_in_valid | ~(&out_frontMask) | (|_GEN)},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1}};
  assign _out_wofireMux_T_2 =
    _out_back_q_io_deq_valid & auto_ctl_in_d_ready & ~_out_back_q_io_deq_bits_read;
  wire [127:0] _GEN_3 =
    {{1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {cmd_out_valid | ~(&out_backMask) | (|_GEN_0)},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1},
     {1'h1}};
  wire         out_iready =
    in_bits_read
    | _GEN_2[{auto_ctl_in_a_bits_address[12],
              auto_ctl_in_a_bits_address[9:8],
              auto_ctl_in_a_bits_address[6:3]}];
  wire         out_oready = _out_back_q_io_deq_bits_read | _GEN_3[out_oindex];
  wire         _out_out_bits_data_T_17 = out_oindex == 7'h0;
  wire         io_ecc_ready_0 = ecc_code == 64'h0;
  wire         out_f_wivalid_18 =
    auto_ctl_in_a_valid & _out_back_q_io_enq_ready & ~in_bits_read
    & {auto_ctl_in_a_bits_address[12],
       auto_ctl_in_a_bits_address[9:8],
       auto_ctl_in_a_bits_address[6:3]} == 7'h20 & ~(|_GEN) & (&out_frontMask);
  wire         _GEN_4 = ~cmd_out_valid & io_resp_valid;
  wire         _GEN_5 = io_resp_bits_cmd == 8'h0;
  wire         _GEN_6 = io_resp_bits_cmd == 8'h1;
  wire         _GEN_7 = _GEN_5 | _GEN_6;
  wire         _GEN_8 = io_resp_bits_cmd == 8'h2;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ctl_tag <= 64'h0;
      ctl_set <= 64'h0;
      ctl_way <= 64'h0;
      ctl_dir <= 64'h0;
      ctl_data_0 <= 64'h0;
      ctl_data_1 <= 64'h0;
      ctl_data_2 <= 64'h0;
      ctl_data_3 <= 64'h0;
      ctl_data_4 <= 64'h0;
      ctl_data_5 <= 64'h0;
      ctl_data_6 <= 64'h0;
      ctl_data_7 <= 64'h0;
      ctl_cmd <= 64'h0;
      ecc_code <= 64'h0;
      ecc_addr <= 64'h0;
      core_reset_0 <= 64'h0;
      cmd_in_valid <= 1'h0;
      cmd_out_valid <= 1'h0;
    end
    else begin
      if (_GEN_4 & _GEN_7)
        ctl_tag <= io_resp_bits_data_0;
      else if (_out_wofireMux_T_2 & _GEN_1 == 7'h10 & ~(|_GEN_0) & (&out_backMask))
        ctl_tag <= _out_back_q_io_deq_bits_data;
      if (_out_wofireMux_T_2 & _GEN_1 == 7'h11 & ~(|_GEN_0) & (&out_backMask))
        ctl_set <= _out_back_q_io_deq_bits_data;
      if (_out_wofireMux_T_2 & _GEN_1 == 7'h12 & ~(|_GEN_0) & (&out_backMask))
        ctl_way <= _out_back_q_io_deq_bits_data;
      if (~_GEN_4 | _GEN_5 | _GEN_6 | _GEN_8
          | ~(io_resp_bits_cmd == 8'h3 | io_resp_bits_cmd == 8'h4)) begin
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h1B & ~(|_GEN_0) & (&out_backMask))
          ctl_dir <= _out_back_q_io_deq_bits_data;
      end
      else
        ctl_dir <= io_resp_bits_data_0;
      if (~_GEN_4 | _GEN_7 | ~_GEN_8) begin
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h13 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_0 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h14 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_1 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h15 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_2 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h16 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_3 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h17 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_4 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h18 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_5 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h19 & ~(|_GEN_0) & (&out_backMask))
          ctl_data_6 <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h1A & ~(|_GEN_0) & (&out_backMask))
          ctl_data_7 <= _out_back_q_io_deq_bits_data;
      end
      else begin
        ctl_data_0 <= io_resp_bits_data_0;
        ctl_data_1 <= io_resp_bits_data_1;
        ctl_data_2 <= io_resp_bits_data_2;
        ctl_data_3 <= io_resp_bits_data_3;
        ctl_data_4 <= io_resp_bits_data_4;
        ctl_data_5 <= io_resp_bits_data_5;
        ctl_data_6 <= io_resp_bits_data_6;
        ctl_data_7 <= io_resp_bits_data_7;
      end
      if (out_f_wivalid_18 & ~cmd_in_valid)
        ctl_cmd <= auto_ctl_in_a_bits_data;
      if (io_ecc_ready_0 & io_ecc_valid) begin
        ecc_code <= {56'h0, io_ecc_bits_errCode};
        ecc_addr <= io_ecc_bits_addr;
      end
      else begin
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h1C & ~(|_GEN_0) & (&out_backMask))
          ecc_code <= _out_back_q_io_deq_bits_data;
        if (_out_wofireMux_T_2 & _GEN_1 == 7'h1D & ~(|_GEN_0) & (&out_backMask))
          ecc_addr <= _out_back_q_io_deq_bits_data;
      end
      if (_out_wofireMux_T_2 & _GEN_1 == 7'h40 & ~(|_GEN_0) & (&out_backMask))
        core_reset_0 <= {63'h0, _out_back_q_io_deq_bits_data[0]};
      cmd_in_valid <= out_f_wivalid_18 | ~io_req_ready & cmd_in_valid;
      cmd_out_valid <=
        _GEN_4 | ~(_out_wofireMux_T_2 & out_backSel_32 & ~(|_GEN_0) & (&out_backMask))
        & cmd_out_valid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:32];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h21; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        ctl_tag = {_RANDOM[6'h0], _RANDOM[6'h1]};
        ctl_set = {_RANDOM[6'h2], _RANDOM[6'h3]};
        ctl_way = {_RANDOM[6'h4], _RANDOM[6'h5]};
        ctl_dir = {_RANDOM[6'h6], _RANDOM[6'h7]};
        ctl_data_0 = {_RANDOM[6'h8], _RANDOM[6'h9]};
        ctl_data_1 = {_RANDOM[6'hA], _RANDOM[6'hB]};
        ctl_data_2 = {_RANDOM[6'hC], _RANDOM[6'hD]};
        ctl_data_3 = {_RANDOM[6'hE], _RANDOM[6'hF]};
        ctl_data_4 = {_RANDOM[6'h10], _RANDOM[6'h11]};
        ctl_data_5 = {_RANDOM[6'h12], _RANDOM[6'h13]};
        ctl_data_6 = {_RANDOM[6'h14], _RANDOM[6'h15]};
        ctl_data_7 = {_RANDOM[6'h16], _RANDOM[6'h17]};
        ctl_cmd = {_RANDOM[6'h18], _RANDOM[6'h19]};
        ecc_code = {_RANDOM[6'h1A], _RANDOM[6'h1B]};
        ecc_addr = {_RANDOM[6'h1C], _RANDOM[6'h1D]};
        core_reset_0 = {_RANDOM[6'h1E], _RANDOM[6'h1F]};
        cmd_in_valid = _RANDOM[6'h20][0];
        cmd_out_valid = _RANDOM[6'h20][1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        ctl_tag = 64'h0;
        ctl_set = 64'h0;
        ctl_way = 64'h0;
        ctl_dir = 64'h0;
        ctl_data_0 = 64'h0;
        ctl_data_1 = 64'h0;
        ctl_data_2 = 64'h0;
        ctl_data_3 = 64'h0;
        ctl_data_4 = 64'h0;
        ctl_data_5 = 64'h0;
        ctl_data_6 = 64'h0;
        ctl_data_7 = 64'h0;
        ctl_cmd = 64'h0;
        ecc_code = 64'h0;
        ecc_addr = 64'h0;
        core_reset_0 = 64'h0;
        cmd_in_valid = 1'h0;
        cmd_out_valid = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_RegMapperInput_5 out_back_q (
    .clock                               (clock),
    .reset                               (reset),
    .io_enq_ready                        (_out_back_q_io_enq_ready),
    .io_enq_valid                        (auto_ctl_in_a_valid & out_iready),
    .io_enq_bits_read                    (in_bits_read),
    .io_enq_bits_index                   (auto_ctl_in_a_bits_address[15:3]),
    .io_enq_bits_data                    (auto_ctl_in_a_bits_data),
    .io_enq_bits_mask                    (auto_ctl_in_a_bits_mask),
    .io_enq_bits_extra_tlrr_extra_source (auto_ctl_in_a_bits_source),
    .io_enq_bits_extra_tlrr_extra_size   (auto_ctl_in_a_bits_size),
    .io_deq_ready                        (auto_ctl_in_d_ready & out_oready),
    .io_deq_valid                        (_out_back_q_io_deq_valid),
    .io_deq_bits_read                    (_out_back_q_io_deq_bits_read),
    .io_deq_bits_index                   (_out_back_q_io_deq_bits_index),
    .io_deq_bits_data                    (_out_back_q_io_deq_bits_data),
    .io_deq_bits_mask                    (_out_back_q_io_deq_bits_mask),
    .io_deq_bits_extra_tlrr_extra_source (auto_ctl_in_d_bits_source),
    .io_deq_bits_extra_tlrr_extra_size   (auto_ctl_in_d_bits_size)
  );
  assign auto_int_out_0 = |ecc_code;
  assign auto_ctl_in_a_ready = _out_back_q_io_enq_ready & out_iready;
  assign auto_ctl_in_d_valid = _out_back_q_io_deq_valid & out_oready;
  assign auto_ctl_in_d_bits_opcode = {3'h0, _out_back_q_io_deq_bits_read};
  assign auto_ctl_in_d_bits_data =
    (_out_out_bits_data_T_17 | out_oindex == 7'h10 | out_oindex == 7'h11
     | out_oindex == 7'h12 | out_oindex == 7'h13 | out_oindex == 7'h14
     | out_oindex == 7'h15 | out_oindex == 7'h16 | out_oindex == 7'h17
     | out_oindex == 7'h18 | out_oindex == 7'h19 | out_oindex == 7'h1A
     | out_oindex == 7'h1B | out_oindex == 7'h1C | out_oindex == 7'h1D
     | out_oindex == 7'h20 | out_oindex == 7'h40) & (|_GEN_0)
      ? 64'h0
      : _out_out_bits_data_T_17
          ? 64'hA0B0601
          : out_oindex == 7'h10
              ? ctl_tag
              : out_oindex == 7'h11
                  ? ctl_set
                  : out_oindex == 7'h12
                      ? ctl_way
                      : out_oindex == 7'h13
                          ? ctl_data_0
                          : out_oindex == 7'h14
                              ? ctl_data_1
                              : out_oindex == 7'h15
                                  ? ctl_data_2
                                  : out_oindex == 7'h16
                                      ? ctl_data_3
                                      : out_oindex == 7'h17
                                          ? ctl_data_4
                                          : out_oindex == 7'h18
                                              ? ctl_data_5
                                              : out_oindex == 7'h19
                                                  ? ctl_data_6
                                                  : out_oindex == 7'h1A
                                                      ? ctl_data_7
                                                      : out_oindex == 7'h1B
                                                          ? ctl_dir
                                                          : out_oindex == 7'h1C
                                                              ? ecc_code
                                                              : out_oindex == 7'h1D
                                                                  ? ecc_addr
                                                                  : out_oindex == 7'h20
                                                                    | out_oindex != 7'h40
                                                                      ? 64'h0
                                                                      : core_reset_0;
  assign io_req_valid = cmd_in_valid;
  assign io_req_bits_cmd = ctl_cmd[7:0];
  assign io_req_bits_data_0 = ctl_data_0;
  assign io_req_bits_data_1 = ctl_data_1;
  assign io_req_bits_data_2 = ctl_data_2;
  assign io_req_bits_data_3 = ctl_data_3;
  assign io_req_bits_data_4 = ctl_data_4;
  assign io_req_bits_data_5 = ctl_data_5;
  assign io_req_bits_data_6 = ctl_data_6;
  assign io_req_bits_data_7 = ctl_data_7;
  assign io_req_bits_set = ctl_set;
  assign io_req_bits_tag = ctl_tag;
  assign io_req_bits_way = ctl_way;
  assign io_req_bits_dir = ctl_dir;
  assign io_resp_ready = ~cmd_out_valid;
  assign io_ecc_ready = io_ecc_ready_0;
endmodule

