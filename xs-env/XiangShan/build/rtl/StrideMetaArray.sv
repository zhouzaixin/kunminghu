// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module StrideMetaArray(
  input         clock,
  input         reset,
  output        io_train_req_ready,
  input         io_train_req_valid,
  input  [49:0] io_train_req_bits_vaddr,
  input  [49:0] io_train_req_bits_pc,
  output        io_l1_prefetch_req_valid,
  output [39:0] io_l1_prefetch_req_bits_region,
  output [15:0] io_l1_prefetch_req_bits_bit_vec,
  output        io_l2_l3_prefetch_req_valid,
  output [39:0] io_l2_l3_prefetch_req_bits_region,
  output [15:0] io_l2_l3_prefetch_req_bits_bit_vec
);

  wire              _s0_can_accept_T_1;
  reg  [15:0]       array_0_pre_vaddr;
  reg  [15:0]       array_0_stride;
  reg  [1:0]        array_0_confidence;
  reg  [14:0]       array_0_hash_pc;
  reg  [15:0]       array_1_pre_vaddr;
  reg  [15:0]       array_1_stride;
  reg  [1:0]        array_1_confidence;
  reg  [14:0]       array_1_hash_pc;
  reg  [15:0]       array_2_pre_vaddr;
  reg  [15:0]       array_2_stride;
  reg  [1:0]        array_2_confidence;
  reg  [14:0]       array_2_hash_pc;
  reg  [15:0]       array_3_pre_vaddr;
  reg  [15:0]       array_3_stride;
  reg  [1:0]        array_3_confidence;
  reg  [14:0]       array_3_hash_pc;
  reg  [15:0]       array_4_pre_vaddr;
  reg  [15:0]       array_4_stride;
  reg  [1:0]        array_4_confidence;
  reg  [14:0]       array_4_hash_pc;
  reg  [15:0]       array_5_pre_vaddr;
  reg  [15:0]       array_5_stride;
  reg  [1:0]        array_5_confidence;
  reg  [14:0]       array_5_hash_pc;
  reg  [15:0]       array_6_pre_vaddr;
  reg  [15:0]       array_6_stride;
  reg  [1:0]        array_6_confidence;
  reg  [14:0]       array_6_hash_pc;
  reg  [15:0]       array_7_pre_vaddr;
  reg  [15:0]       array_7_stride;
  reg  [1:0]        array_7_confidence;
  reg  [14:0]       array_7_hash_pc;
  reg  [15:0]       array_8_pre_vaddr;
  reg  [15:0]       array_8_stride;
  reg  [1:0]        array_8_confidence;
  reg  [14:0]       array_8_hash_pc;
  reg  [15:0]       array_9_pre_vaddr;
  reg  [15:0]       array_9_stride;
  reg  [1:0]        array_9_confidence;
  reg  [14:0]       array_9_hash_pc;
  reg               valids_0;
  reg               valids_1;
  reg               valids_2;
  reg               valids_3;
  reg               valids_4;
  reg               valids_5;
  reg               valids_6;
  reg               valids_7;
  reg               valids_8;
  reg               valids_9;
  reg  [8:0]        state_reg;
  wire              s0_valid = ~_s0_can_accept_T_1 & io_train_req_valid;
  wire [14:0]       s0_pc_hash =
    {io_train_req_bits_pc[14:10] ^ io_train_req_bits_pc[19:15]
       ^ io_train_req_bits_pc[24:20],
     io_train_req_bits_pc[9:0]};
  wire              _s0_pc_match_vec_T_5 =
    valids_1 & s0_valid & array_1_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_8 =
    valids_2 & s0_valid & array_2_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_11 =
    valids_3 & s0_valid & array_3_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_14 =
    valids_4 & s0_valid & array_4_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_17 =
    valids_5 & s0_valid & array_5_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_20 =
    valids_6 & s0_valid & array_6_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_23 =
    valids_7 & s0_valid & array_7_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_26 =
    valids_8 & s0_valid & array_8_hash_pc == s0_pc_hash;
  wire              _s0_pc_match_vec_T_29 =
    valids_9 & s0_valid & array_9_hash_pc == s0_pc_hash;
  wire [9:0]        s0_pc_match_vec =
    {_s0_pc_match_vec_T_29,
     _s0_pc_match_vec_T_26,
     _s0_pc_match_vec_T_23,
     _s0_pc_match_vec_T_20,
     _s0_pc_match_vec_T_17,
     _s0_pc_match_vec_T_14,
     _s0_pc_match_vec_T_11,
     _s0_pc_match_vec_T_8,
     _s0_pc_match_vec_T_5,
     valids_0 & s0_valid & array_0_hash_pc == s0_pc_hash};
  wire [2:0]        _s0_index_T_3 =
    {_s0_pc_match_vec_T_23, _s0_pc_match_vec_T_20, _s0_pc_match_vec_T_17}
    | {_s0_pc_match_vec_T_11,
       _s0_pc_match_vec_T_8,
       _s0_pc_match_vec_T_29 | _s0_pc_match_vec_T_5};
  wire [3:0]        s0_index =
    (|s0_pc_match_vec)
      ? {|{_s0_pc_match_vec_T_29, _s0_pc_match_vec_T_26},
         |{_s0_pc_match_vec_T_23,
           _s0_pc_match_vec_T_20,
           _s0_pc_match_vec_T_17,
           _s0_pc_match_vec_T_14},
         |(_s0_index_T_3[2:1]),
         _s0_index_T_3[2] | _s0_index_T_3[0]}
      : {state_reg[8],
         state_reg[8]
           ? {2'h0, state_reg[7]}
           : {state_reg[6],
              state_reg[6]
                ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]}
                : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}}};
  reg               s1_valid_last_REG;
  reg  [3:0]        s1_index;
  reg  [14:0]       s1_pc_hash;
  reg  [49:0]       s1_vaddr;
  reg               s1_hit;
  wire              s1_alloc = s1_valid_last_REG & ~s1_hit;
  wire              s1_update = s1_valid_last_REG & s1_hit;
  assign _s0_can_accept_T_1 = s1_valid_last_REG & s1_pc_hash == s0_pc_hash;
  wire              _GEN = s1_index == 4'h0;
  wire              _GEN_0 = s1_alloc & _GEN;
  wire              _GEN_1 = s1_index == 4'h1;
  wire              _GEN_2 = s1_alloc & _GEN_1;
  wire              _GEN_3 = s1_index == 4'h2;
  wire              _GEN_4 = s1_alloc & _GEN_3;
  wire              _GEN_5 = s1_index == 4'h3;
  wire              _GEN_6 = s1_alloc & _GEN_5;
  wire              _GEN_7 = s1_index == 4'h4;
  wire              _GEN_8 = s1_alloc & _GEN_7;
  wire              _GEN_9 = s1_index == 4'h5;
  wire              _GEN_10 = s1_alloc & _GEN_9;
  wire              _GEN_11 = s1_index == 4'h6;
  wire              _GEN_12 = s1_alloc & _GEN_11;
  wire              _GEN_13 = s1_index == 4'h7;
  wire              _GEN_14 = s1_alloc & _GEN_13;
  wire              _GEN_15 = s1_index == 4'h8;
  wire              _GEN_16 = s1_alloc & _GEN_15;
  wire              _GEN_17 = s1_index == 4'h9;
  wire              _GEN_18 = s1_alloc & _GEN_17;
  wire [15:0][15:0] _GEN_19 =
    {{array_0_pre_vaddr},
     {array_0_pre_vaddr},
     {array_0_pre_vaddr},
     {array_0_pre_vaddr},
     {array_0_pre_vaddr},
     {array_0_pre_vaddr},
     {array_9_pre_vaddr},
     {array_8_pre_vaddr},
     {array_7_pre_vaddr},
     {array_6_pre_vaddr},
     {array_5_pre_vaddr},
     {array_4_pre_vaddr},
     {array_3_pre_vaddr},
     {array_2_pre_vaddr},
     {array_1_pre_vaddr},
     {array_0_pre_vaddr}};
  wire [15:0][15:0] _GEN_20 =
    {{array_0_stride},
     {array_0_stride},
     {array_0_stride},
     {array_0_stride},
     {array_0_stride},
     {array_0_stride},
     {array_9_stride},
     {array_8_stride},
     {array_7_stride},
     {array_6_stride},
     {array_5_stride},
     {array_4_stride},
     {array_3_stride},
     {array_2_stride},
     {array_1_stride},
     {array_0_stride}};
  wire [15:0]       _GEN_21 = _GEN_20[s1_index];
  wire [15:0][1:0]  _GEN_22 =
    {{array_0_confidence},
     {array_0_confidence},
     {array_0_confidence},
     {array_0_confidence},
     {array_0_confidence},
     {array_0_confidence},
     {array_9_confidence},
     {array_8_confidence},
     {array_7_confidence},
     {array_6_confidence},
     {array_5_confidence},
     {array_4_confidence},
     {array_3_confidence},
     {array_2_confidence},
     {array_1_confidence},
     {array_0_confidence}};
  wire [1:0]        _GEN_23 = _GEN_22[s1_index];
  wire [15:0]       _res_new_stride_T = 16'(s1_vaddr[15:0] - _GEN_19[s1_index]);
  wire              res_stride_valid =
    (|(_res_new_stride_T[15:6])) & _res_new_stride_T[15:6] != 10'h1
    & ~(_res_new_stride_T[15]);
  wire              res_stride_match = _res_new_stride_T == _GEN_21;
  wire              _s2_stride_T =
    s1_valid_last_REG & ~s1_alloc & s1_update & res_stride_valid & res_stride_match
    & (&_GEN_23);
  reg               s2_valid_last_REG;
  reg  [49:0]       s2_vaddr;
  reg  [15:0]       s2_stride;
  reg               s3_valid_last_REG;
  reg  [39:0]       s3_l1_pf_req_bits_region;
  reg  [15:0]       s3_l1_pf_req_bits_bit_vec;
  reg  [39:0]       s3_l2_pf_req_bits_region;
  reg  [15:0]       s3_l2_pf_req_bits_bit_vec;
  reg               s4_valid_last_REG;
  reg  [39:0]       s4_l2_pf_req_bits_region;
  reg  [15:0]       s4_l2_pf_req_bits_bit_vec;
  reg               last_REG;
  reg               last_REG_1;
  reg               last_REG_2;
  reg               last_REG_3;
  reg               last_REG_4;
  reg               last_REG_5;
  reg               last_REG_6;
  reg               last_REG_7;
  reg               last_REG_8;
  reg               last_REG_9;
  wire [1:0]        _GEN_24 =
    res_stride_match
      ? ((&_GEN_23) ? _GEN_23 : 2'(_GEN_23 + 2'h1))
      : _GEN_23 == 2'h0 ? _GEN_23 : 2'(_GEN_23 - 2'h1);
  wire              _GEN_25 = s1_update & res_stride_valid;
  wire [49:0]       _s2_l1_pf_vaddr_T = 50'({32'h0, s2_stride, 2'h0} + s2_vaddr);
  wire [49:0]       _s2_l2_pf_vaddr_T = 50'({29'h0, s2_stride, 5'h0} + s2_vaddr);
  always @(posedge clock) begin
    if (s1_alloc) begin
      if (_GEN) begin
        array_0_pre_vaddr <= s1_vaddr[15:0];
        array_0_stride <= 16'h0;
        array_0_confidence <= 2'h0;
      end
      if (_GEN_1) begin
        array_1_pre_vaddr <= s1_vaddr[15:0];
        array_1_stride <= 16'h0;
        array_1_confidence <= 2'h0;
      end
      if (_GEN_3) begin
        array_2_pre_vaddr <= s1_vaddr[15:0];
        array_2_stride <= 16'h0;
        array_2_confidence <= 2'h0;
      end
      if (_GEN_5) begin
        array_3_pre_vaddr <= s1_vaddr[15:0];
        array_3_stride <= 16'h0;
        array_3_confidence <= 2'h0;
      end
      if (_GEN_7) begin
        array_4_pre_vaddr <= s1_vaddr[15:0];
        array_4_stride <= 16'h0;
        array_4_confidence <= 2'h0;
      end
      if (_GEN_9) begin
        array_5_pre_vaddr <= s1_vaddr[15:0];
        array_5_stride <= 16'h0;
        array_5_confidence <= 2'h0;
      end
      if (_GEN_11) begin
        array_6_pre_vaddr <= s1_vaddr[15:0];
        array_6_stride <= 16'h0;
        array_6_confidence <= 2'h0;
      end
      if (_GEN_13) begin
        array_7_pre_vaddr <= s1_vaddr[15:0];
        array_7_stride <= 16'h0;
        array_7_confidence <= 2'h0;
      end
      if (_GEN_15) begin
        array_8_pre_vaddr <= s1_vaddr[15:0];
        array_8_stride <= 16'h0;
        array_8_confidence <= 2'h0;
      end
      if (_GEN_17) begin
        array_9_pre_vaddr <= s1_vaddr[15:0];
        array_9_stride <= 16'h0;
        array_9_confidence <= 2'h0;
      end
    end
    else begin
      if (s1_update & (_GEN | res_stride_valid & _GEN))
        array_0_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN)) begin
      end
      else
        array_0_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN)
        array_0_confidence <= _GEN_24;
      if (s1_update & (_GEN_1 | res_stride_valid & _GEN_1))
        array_1_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_1)) begin
      end
      else
        array_1_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_1)
        array_1_confidence <= _GEN_24;
      if (s1_update & (_GEN_3 | res_stride_valid & _GEN_3))
        array_2_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_3)) begin
      end
      else
        array_2_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_3)
        array_2_confidence <= _GEN_24;
      if (s1_update & (_GEN_5 | res_stride_valid & _GEN_5))
        array_3_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_5)) begin
      end
      else
        array_3_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_5)
        array_3_confidence <= _GEN_24;
      if (s1_update & (_GEN_7 | res_stride_valid & _GEN_7))
        array_4_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_7)) begin
      end
      else
        array_4_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_7)
        array_4_confidence <= _GEN_24;
      if (s1_update & (_GEN_9 | res_stride_valid & _GEN_9))
        array_5_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_9)) begin
      end
      else
        array_5_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_9)
        array_5_confidence <= _GEN_24;
      if (s1_update & (_GEN_11 | res_stride_valid & _GEN_11))
        array_6_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_11)) begin
      end
      else
        array_6_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_11)
        array_6_confidence <= _GEN_24;
      if (s1_update & (_GEN_13 | res_stride_valid & _GEN_13))
        array_7_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_13)) begin
      end
      else
        array_7_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_13)
        array_7_confidence <= _GEN_24;
      if (s1_update & (_GEN_15 | res_stride_valid & _GEN_15))
        array_8_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_15)) begin
      end
      else
        array_8_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_15)
        array_8_confidence <= _GEN_24;
      if (s1_update & (_GEN_17 | res_stride_valid & _GEN_17))
        array_9_pre_vaddr <= s1_vaddr[15:0];
      if (~_GEN_25 | res_stride_match | ~(~(_GEN_23[1]) & _GEN_17)) begin
      end
      else
        array_9_stride <= _res_new_stride_T;
      if (_GEN_25 & _GEN_17)
        array_9_confidence <= _GEN_24;
    end
    if (_GEN_0)
      array_0_hash_pc <= s1_pc_hash;
    if (_GEN_2)
      array_1_hash_pc <= s1_pc_hash;
    if (_GEN_4)
      array_2_hash_pc <= s1_pc_hash;
    if (_GEN_6)
      array_3_hash_pc <= s1_pc_hash;
    if (_GEN_8)
      array_4_hash_pc <= s1_pc_hash;
    if (_GEN_10)
      array_5_hash_pc <= s1_pc_hash;
    if (_GEN_12)
      array_6_hash_pc <= s1_pc_hash;
    if (_GEN_14)
      array_7_hash_pc <= s1_pc_hash;
    if (_GEN_16)
      array_8_hash_pc <= s1_pc_hash;
    if (_GEN_18)
      array_9_hash_pc <= s1_pc_hash;
    if (s0_valid) begin
      s1_index <= s0_index;
      s1_pc_hash <= s0_pc_hash;
      s1_vaddr <= io_train_req_bits_vaddr;
      s1_hit <= |s0_pc_match_vec;
    end
    if (_s2_stride_T) begin
      s2_vaddr <= s1_vaddr;
      s2_stride <= _GEN_21;
    end
    if (s2_valid_last_REG) begin
      s3_l1_pf_req_bits_region <= _s2_l1_pf_vaddr_T[49:10];
      s3_l1_pf_req_bits_bit_vec <= 16'h1 << _s2_l1_pf_vaddr_T[9:6];
      s3_l2_pf_req_bits_region <= _s2_l2_pf_vaddr_T[49:10];
      s3_l2_pf_req_bits_bit_vec <= 16'h1 << _s2_l2_pf_vaddr_T[9:6];
    end
    if (s3_valid_last_REG) begin
      s4_l2_pf_req_bits_region <= s3_l2_pf_req_bits_region;
      s4_l2_pf_req_bits_bit_vec <= s3_l2_pf_req_bits_bit_vec;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      valids_4 <= 1'h0;
      valids_5 <= 1'h0;
      valids_6 <= 1'h0;
      valids_7 <= 1'h0;
      valids_8 <= 1'h0;
      valids_9 <= 1'h0;
      state_reg <= 9'h0;
      s1_valid_last_REG <= 1'h0;
      s2_valid_last_REG <= 1'h0;
      s3_valid_last_REG <= 1'h0;
      s4_valid_last_REG <= 1'h0;
      last_REG <= 1'h0;
      last_REG_1 <= 1'h0;
      last_REG_2 <= 1'h0;
      last_REG_3 <= 1'h0;
      last_REG_4 <= 1'h0;
      last_REG_5 <= 1'h0;
      last_REG_6 <= 1'h0;
      last_REG_7 <= 1'h0;
      last_REG_8 <= 1'h0;
      last_REG_9 <= 1'h0;
    end
    else begin
      valids_0 <= ~last_REG & (_GEN_0 | valids_0);
      valids_1 <= ~last_REG_1 & (_GEN_2 | valids_1);
      valids_2 <= ~last_REG_2 & (_GEN_4 | valids_2);
      valids_3 <= ~last_REG_3 & (_GEN_6 | valids_3);
      valids_4 <= ~last_REG_4 & (_GEN_8 | valids_4);
      valids_5 <= ~last_REG_5 & (_GEN_10 | valids_5);
      valids_6 <= ~last_REG_6 & (_GEN_12 | valids_6);
      valids_7 <= ~last_REG_7 & (_GEN_14 | valids_7);
      valids_8 <= ~last_REG_8 & (_GEN_16 | valids_8);
      valids_9 <= ~last_REG_9 & (_GEN_18 | valids_9);
      if (s0_valid)
        state_reg <=
          {~(s0_index[3]),
           s0_index[3] ? ~(s0_index[0]) : state_reg[7],
           s0_index[3]
             ? state_reg[6:0]
             : {~(s0_index[2]),
                s0_index[2]
                  ? {~(s0_index[1]),
                     s0_index[1] ? ~(s0_index[0]) : state_reg[4],
                     s0_index[1] ? state_reg[3] : ~(s0_index[0])}
                  : state_reg[5:3],
                s0_index[2]
                  ? state_reg[2:0]
                  : {~(s0_index[1]),
                     s0_index[1] ? ~(s0_index[0]) : state_reg[1],
                     s0_index[1] ? state_reg[0] : ~(s0_index[0])}}};
      s1_valid_last_REG <= s0_valid;
      s2_valid_last_REG <= _s2_stride_T;
      s3_valid_last_REG <= s2_valid_last_REG;
      s4_valid_last_REG <= s3_valid_last_REG;
      last_REG <= 1'h0;
      last_REG_1 <= 1'h0;
      last_REG_2 <= 1'h0;
      last_REG_3 <= 1'h0;
      last_REG_4 <= 1'h0;
      last_REG_5 <= 1'h0;
      last_REG_6 <= 1'h0;
      last_REG_7 <= 1'h0;
      last_REG_8 <= 1'h0;
      last_REG_9 <= 1'h0;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:35];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h24; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        array_0_pre_vaddr = _RANDOM[6'h0][15:0];
        array_0_stride = _RANDOM[6'h0][31:16];
        array_0_confidence = _RANDOM[6'h1][1:0];
        array_0_hash_pc = _RANDOM[6'h1][16:2];
        array_1_pre_vaddr = {_RANDOM[6'h1][31:17], _RANDOM[6'h2][0]};
        array_1_stride = _RANDOM[6'h2][16:1];
        array_1_confidence = _RANDOM[6'h2][18:17];
        array_1_hash_pc = {_RANDOM[6'h2][31:19], _RANDOM[6'h3][1:0]};
        array_2_pre_vaddr = _RANDOM[6'h3][17:2];
        array_2_stride = {_RANDOM[6'h3][31:18], _RANDOM[6'h4][1:0]};
        array_2_confidence = _RANDOM[6'h4][3:2];
        array_2_hash_pc = _RANDOM[6'h4][18:4];
        array_3_pre_vaddr = {_RANDOM[6'h4][31:19], _RANDOM[6'h5][2:0]};
        array_3_stride = _RANDOM[6'h5][18:3];
        array_3_confidence = _RANDOM[6'h5][20:19];
        array_3_hash_pc = {_RANDOM[6'h5][31:21], _RANDOM[6'h6][3:0]};
        array_4_pre_vaddr = _RANDOM[6'h6][19:4];
        array_4_stride = {_RANDOM[6'h6][31:20], _RANDOM[6'h7][3:0]};
        array_4_confidence = _RANDOM[6'h7][5:4];
        array_4_hash_pc = _RANDOM[6'h7][20:6];
        array_5_pre_vaddr = {_RANDOM[6'h7][31:21], _RANDOM[6'h8][4:0]};
        array_5_stride = _RANDOM[6'h8][20:5];
        array_5_confidence = _RANDOM[6'h8][22:21];
        array_5_hash_pc = {_RANDOM[6'h8][31:23], _RANDOM[6'h9][5:0]};
        array_6_pre_vaddr = _RANDOM[6'h9][21:6];
        array_6_stride = {_RANDOM[6'h9][31:22], _RANDOM[6'hA][5:0]};
        array_6_confidence = _RANDOM[6'hA][7:6];
        array_6_hash_pc = _RANDOM[6'hA][22:8];
        array_7_pre_vaddr = {_RANDOM[6'hA][31:23], _RANDOM[6'hB][6:0]};
        array_7_stride = _RANDOM[6'hB][22:7];
        array_7_confidence = _RANDOM[6'hB][24:23];
        array_7_hash_pc = {_RANDOM[6'hB][31:25], _RANDOM[6'hC][7:0]};
        array_8_pre_vaddr = _RANDOM[6'hC][23:8];
        array_8_stride = {_RANDOM[6'hC][31:24], _RANDOM[6'hD][7:0]};
        array_8_confidence = _RANDOM[6'hD][9:8];
        array_8_hash_pc = _RANDOM[6'hD][24:10];
        array_9_pre_vaddr = {_RANDOM[6'hD][31:25], _RANDOM[6'hE][8:0]};
        array_9_stride = _RANDOM[6'hE][24:9];
        array_9_confidence = _RANDOM[6'hE][26:25];
        array_9_hash_pc = {_RANDOM[6'hE][31:27], _RANDOM[6'hF][9:0]};
        valids_0 = _RANDOM[6'hF][10];
        valids_1 = _RANDOM[6'hF][11];
        valids_2 = _RANDOM[6'hF][12];
        valids_3 = _RANDOM[6'hF][13];
        valids_4 = _RANDOM[6'hF][14];
        valids_5 = _RANDOM[6'hF][15];
        valids_6 = _RANDOM[6'hF][16];
        valids_7 = _RANDOM[6'hF][17];
        valids_8 = _RANDOM[6'hF][18];
        valids_9 = _RANDOM[6'hF][19];
        state_reg = _RANDOM[6'hF][28:20];
        s1_valid_last_REG = _RANDOM[6'hF][29];
        s1_index = {_RANDOM[6'hF][31:30], _RANDOM[6'h10][1:0]};
        s1_pc_hash = _RANDOM[6'h10][16:2];
        s1_vaddr = {_RANDOM[6'h10][31:17], _RANDOM[6'h11], _RANDOM[6'h12][2:0]};
        s1_hit = _RANDOM[6'h12][3];
        s2_valid_last_REG = _RANDOM[6'h12][4];
        s2_vaddr = {_RANDOM[6'h12][31:5], _RANDOM[6'h13][22:0]};
        s2_stride = {_RANDOM[6'h13][31:23], _RANDOM[6'h14][6:0]};
        s3_valid_last_REG = _RANDOM[6'h14][7];
        s3_l1_pf_req_bits_region = {_RANDOM[6'h14][31:8], _RANDOM[6'h15][15:0]};
        s3_l1_pf_req_bits_bit_vec = _RANDOM[6'h15][31:16];
        s3_l2_pf_req_bits_region = {_RANDOM[6'h19][31:9], _RANDOM[6'h1A][16:0]};
        s3_l2_pf_req_bits_bit_vec = {_RANDOM[6'h1A][31:17], _RANDOM[6'h1B][0]};
        s4_valid_last_REG = _RANDOM[6'h1E][10];
        s4_l2_pf_req_bits_region = {_RANDOM[6'h1E][31:11], _RANDOM[6'h1F][18:0]};
        s4_l2_pf_req_bits_bit_vec = {_RANDOM[6'h1F][31:19], _RANDOM[6'h20][2:0]};
        last_REG = _RANDOM[6'h23][12];
        last_REG_1 = _RANDOM[6'h23][13];
        last_REG_2 = _RANDOM[6'h23][14];
        last_REG_3 = _RANDOM[6'h23][15];
        last_REG_4 = _RANDOM[6'h23][16];
        last_REG_5 = _RANDOM[6'h23][17];
        last_REG_6 = _RANDOM[6'h23][18];
        last_REG_7 = _RANDOM[6'h23][19];
        last_REG_8 = _RANDOM[6'h23][20];
        last_REG_9 = _RANDOM[6'h23][21];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        valids_4 = 1'h0;
        valids_5 = 1'h0;
        valids_6 = 1'h0;
        valids_7 = 1'h0;
        valids_8 = 1'h0;
        valids_9 = 1'h0;
        state_reg = 9'h0;
        s1_valid_last_REG = 1'h0;
        s2_valid_last_REG = 1'h0;
        s3_valid_last_REG = 1'h0;
        s4_valid_last_REG = 1'h0;
        last_REG = 1'h0;
        last_REG_1 = 1'h0;
        last_REG_2 = 1'h0;
        last_REG_3 = 1'h0;
        last_REG_4 = 1'h0;
        last_REG_5 = 1'h0;
        last_REG_6 = 1'h0;
        last_REG_7 = 1'h0;
        last_REG_8 = 1'h0;
        last_REG_9 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_train_req_ready = ~_s0_can_accept_T_1;
  assign io_l1_prefetch_req_valid = s3_valid_last_REG;
  assign io_l1_prefetch_req_bits_region = s3_l1_pf_req_bits_region;
  assign io_l1_prefetch_req_bits_bit_vec = s3_l1_pf_req_bits_bit_vec;
  assign io_l2_l3_prefetch_req_valid = s4_valid_last_REG;
  assign io_l2_l3_prefetch_req_bits_region = s4_l2_pf_req_bits_region;
  assign io_l2_l3_prefetch_req_bits_bit_vec = s4_l2_pf_req_bits_bit_vec;
endmodule

