// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FarShiftRightWithMuxInvFirst_2(
  input  [51:0] io_src,
  input  [4:0]  io_shiftValue,
  output [51:0] io_result,
  input         io_EOP
);

  wire [51:0] io_result_res_vec_1 = io_shiftValue[0] ? {io_EOP, io_src[51:1]} : io_src;
  wire [51:0] io_result_res_vec_2 =
    io_shiftValue[1] ? {{2{io_EOP}}, io_result_res_vec_1[51:2]} : io_result_res_vec_1;
  wire [51:0] io_result_res_vec_3 =
    io_shiftValue[2] ? {{4{io_EOP}}, io_result_res_vec_2[51:4]} : io_result_res_vec_2;
  wire [51:0] io_result_res_vec_4 =
    io_shiftValue[3] ? {{8{io_EOP}}, io_result_res_vec_3[51:8]} : io_result_res_vec_3;
  assign io_result =
    io_shiftValue[4] ? {{16{io_EOP}}, io_result_res_vec_4[51:16]} : io_result_res_vec_4;
endmodule

