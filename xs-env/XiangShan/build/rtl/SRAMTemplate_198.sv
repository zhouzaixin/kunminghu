// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_198(
  input         clock,
  input         io_r_req_valid,
  input  [10:0] io_r_req_bits_setIdx,
  output        io_r_resp_data_0_dirty,
  output [1:0]  io_r_resp_data_0_state,
  output [1:0]  io_r_resp_data_0_clientStates_0,
  output        io_r_resp_data_0_prefetch,
  output        io_r_resp_data_1_dirty,
  output [1:0]  io_r_resp_data_1_state,
  output [1:0]  io_r_resp_data_1_clientStates_0,
  output        io_r_resp_data_1_prefetch,
  output        io_r_resp_data_2_dirty,
  output [1:0]  io_r_resp_data_2_state,
  output [1:0]  io_r_resp_data_2_clientStates_0,
  output        io_r_resp_data_2_prefetch,
  output        io_r_resp_data_3_dirty,
  output [1:0]  io_r_resp_data_3_state,
  output [1:0]  io_r_resp_data_3_clientStates_0,
  output        io_r_resp_data_3_prefetch,
  output        io_r_resp_data_4_dirty,
  output [1:0]  io_r_resp_data_4_state,
  output [1:0]  io_r_resp_data_4_clientStates_0,
  output        io_r_resp_data_4_prefetch,
  output        io_r_resp_data_5_dirty,
  output [1:0]  io_r_resp_data_5_state,
  output [1:0]  io_r_resp_data_5_clientStates_0,
  output        io_r_resp_data_5_prefetch,
  input         io_w_req_valid,
  input  [10:0] io_w_req_bits_setIdx,
  input         io_w_req_bits_data_0_dirty,
  input  [1:0]  io_w_req_bits_data_0_state,
  input  [1:0]  io_w_req_bits_data_0_clientStates_0,
  input         io_w_req_bits_data_0_prefetch,
  input         io_w_req_bits_data_1_dirty,
  input  [1:0]  io_w_req_bits_data_1_state,
  input  [1:0]  io_w_req_bits_data_1_clientStates_0,
  input         io_w_req_bits_data_1_prefetch,
  input         io_w_req_bits_data_2_dirty,
  input  [1:0]  io_w_req_bits_data_2_state,
  input  [1:0]  io_w_req_bits_data_2_clientStates_0,
  input         io_w_req_bits_data_2_prefetch,
  input         io_w_req_bits_data_3_dirty,
  input  [1:0]  io_w_req_bits_data_3_state,
  input  [1:0]  io_w_req_bits_data_3_clientStates_0,
  input         io_w_req_bits_data_3_prefetch,
  input         io_w_req_bits_data_4_dirty,
  input  [1:0]  io_w_req_bits_data_4_state,
  input  [1:0]  io_w_req_bits_data_4_clientStates_0,
  input         io_w_req_bits_data_4_prefetch,
  input         io_w_req_bits_data_5_dirty,
  input  [1:0]  io_w_req_bits_data_5_state,
  input  [1:0]  io_w_req_bits_data_5_clientStates_0,
  input         io_w_req_bits_data_5_prefetch,
  input  [5:0]  io_w_req_bits_waymask
);

  wire        realRen;
  wire [35:0] _array_RW0_rdata;
  assign realRen = io_r_req_valid & ~io_w_req_valid;
  array_20 array (
    .RW0_addr  (io_w_req_valid ? io_w_req_bits_setIdx : io_r_req_bits_setIdx),
    .RW0_en    (realRen | io_w_req_valid),
    .RW0_clk   (clock),
    .RW0_wmode (io_w_req_valid),
    .RW0_wdata
      ({io_w_req_bits_data_5_dirty,
        io_w_req_bits_data_5_state,
        io_w_req_bits_data_5_clientStates_0,
        io_w_req_bits_data_5_prefetch,
        io_w_req_bits_data_4_dirty,
        io_w_req_bits_data_4_state,
        io_w_req_bits_data_4_clientStates_0,
        io_w_req_bits_data_4_prefetch,
        io_w_req_bits_data_3_dirty,
        io_w_req_bits_data_3_state,
        io_w_req_bits_data_3_clientStates_0,
        io_w_req_bits_data_3_prefetch,
        io_w_req_bits_data_2_dirty,
        io_w_req_bits_data_2_state,
        io_w_req_bits_data_2_clientStates_0,
        io_w_req_bits_data_2_prefetch,
        io_w_req_bits_data_1_dirty,
        io_w_req_bits_data_1_state,
        io_w_req_bits_data_1_clientStates_0,
        io_w_req_bits_data_1_prefetch,
        io_w_req_bits_data_0_dirty,
        io_w_req_bits_data_0_state,
        io_w_req_bits_data_0_clientStates_0,
        io_w_req_bits_data_0_prefetch}),
    .RW0_rdata (_array_RW0_rdata),
    .RW0_wmask (io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0_dirty = _array_RW0_rdata[5];
  assign io_r_resp_data_0_state = _array_RW0_rdata[4:3];
  assign io_r_resp_data_0_clientStates_0 = _array_RW0_rdata[2:1];
  assign io_r_resp_data_0_prefetch = _array_RW0_rdata[0];
  assign io_r_resp_data_1_dirty = _array_RW0_rdata[11];
  assign io_r_resp_data_1_state = _array_RW0_rdata[10:9];
  assign io_r_resp_data_1_clientStates_0 = _array_RW0_rdata[8:7];
  assign io_r_resp_data_1_prefetch = _array_RW0_rdata[6];
  assign io_r_resp_data_2_dirty = _array_RW0_rdata[17];
  assign io_r_resp_data_2_state = _array_RW0_rdata[16:15];
  assign io_r_resp_data_2_clientStates_0 = _array_RW0_rdata[14:13];
  assign io_r_resp_data_2_prefetch = _array_RW0_rdata[12];
  assign io_r_resp_data_3_dirty = _array_RW0_rdata[23];
  assign io_r_resp_data_3_state = _array_RW0_rdata[22:21];
  assign io_r_resp_data_3_clientStates_0 = _array_RW0_rdata[20:19];
  assign io_r_resp_data_3_prefetch = _array_RW0_rdata[18];
  assign io_r_resp_data_4_dirty = _array_RW0_rdata[29];
  assign io_r_resp_data_4_state = _array_RW0_rdata[28:27];
  assign io_r_resp_data_4_clientStates_0 = _array_RW0_rdata[26:25];
  assign io_r_resp_data_4_prefetch = _array_RW0_rdata[24];
  assign io_r_resp_data_5_dirty = _array_RW0_rdata[35];
  assign io_r_resp_data_5_state = _array_RW0_rdata[34:33];
  assign io_r_resp_data_5_clientStates_0 = _array_RW0_rdata[32:31];
  assign io_r_resp_data_5_prefetch = _array_RW0_rdata[30];
endmodule

