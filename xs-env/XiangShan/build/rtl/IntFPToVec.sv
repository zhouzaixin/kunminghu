// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IntFPToVec(
  input          io_in_valid,
  input  [8:0]   io_in_bits_ctrl_fuOpType,
  input          io_in_bits_ctrl_robIdx_flag,
  input  [7:0]   io_in_bits_ctrl_robIdx_value,
  input  [7:0]   io_in_bits_ctrl_pdest,
  input          io_in_bits_ctrl_fpWen,
  input          io_in_bits_ctrl_vecWen,
  input          io_in_bits_ctrl_v0Wen,
  input          io_in_bits_validPipe_0,
  input  [63:0]  io_in_bits_data_src_1,
  input  [63:0]  io_in_bits_data_src_0,
  output         io_out_valid,
  output         io_out_bits_ctrl_robIdx_flag,
  output [7:0]   io_out_bits_ctrl_robIdx_value,
  output [7:0]   io_out_bits_ctrl_pdest,
  output         io_out_bits_ctrl_fpWen,
  output         io_out_bits_ctrl_vecWen,
  output         io_out_bits_ctrl_v0Wen,
  output [127:0] io_out_bits_res_data
);

  wire [15:0] _FliDTable_out;
  wire [15:0] _FliSTable_out;
  wire [15:0] _FliHTable_out;
  wire        isFliH =
    io_in_bits_ctrl_fuOpType[7] & io_in_bits_ctrl_fuOpType[6]
    & ~(io_in_bits_ctrl_fuOpType[5]);
  wire        isFliS =
    io_in_bits_ctrl_fuOpType[7] & ~(io_in_bits_ctrl_fuOpType[6])
    & ~(io_in_bits_ctrl_fuOpType[5]);
  wire        isFliD =
    io_in_bits_ctrl_fuOpType[7] & ~(io_in_bits_ctrl_fuOpType[6])
    & io_in_bits_ctrl_fuOpType[5];
  wire        isFli = isFliH | isFliS | isFliD;
  wire        isFp = ~isFli & io_in_bits_ctrl_fuOpType[2];
  wire [63:0] scalaData =
    isFli
      ? (isFliH ? {48'hFFFFFFFFFFFF, _FliHTable_out} : 64'h0)
        | (isFliS ? {32'hFFFFFFFF, _FliSTable_out, 16'h0} : 64'h0)
        | (isFliD ? {_FliDTable_out, 48'h0} : 64'h0)
      : ~isFli & io_in_bits_ctrl_fuOpType[3]
          ? io_in_bits_data_src_1
          : io_in_bits_data_src_0;
  wire        _io_out_bits_res_data_T = io_in_bits_ctrl_fuOpType[1:0] == 2'h0;
  wire        _io_out_bits_res_data_T_2 = io_in_bits_ctrl_fuOpType[1:0] == 2'h1;
  wire        _io_out_bits_res_data_T_4 = io_in_bits_ctrl_fuOpType[1:0] == 2'h2;
  FliHTable FliHTable (
    .src (io_in_bits_ctrl_fuOpType[4:0]),
    .out (_FliHTable_out)
  );
  FliSTable FliSTable (
    .src (io_in_bits_ctrl_fuOpType[4:0]),
    .out (_FliSTable_out)
  );
  FliDTable FliDTable (
    .src (io_in_bits_ctrl_fuOpType[4:0]),
    .out (_FliDTable_out)
  );
  assign io_out_valid = io_in_bits_validPipe_0 & io_in_valid;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrl_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrl_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrl_pdest;
  assign io_out_bits_ctrl_fpWen = io_in_bits_ctrl_fpWen;
  assign io_out_bits_ctrl_vecWen = io_in_bits_ctrl_vecWen;
  assign io_out_bits_ctrl_v0Wen = io_in_bits_ctrl_v0Wen;
  assign io_out_bits_res_data =
    ~isFli & io_in_bits_ctrl_fuOpType[4]
      ? (_io_out_bits_res_data_T
           ? {16{scalaData[63:8] != 56'hFFFFFFFFFFFFFF & isFp ? 8'h78 : scalaData[7:0]}}
           : 128'h0)
        | (_io_out_bits_res_data_T_2
             ? {8{scalaData[63:16] != 48'hFFFFFFFFFFFF & isFp
                    ? 16'h7E00
                    : scalaData[15:0]}}
             : 128'h0)
        | (_io_out_bits_res_data_T_4
             ? {4{scalaData[63:32] != 32'hFFFFFFFF & isFp
                    ? 32'h7FC00000
                    : scalaData[31:0]}}
             : 128'h0) | ((&(io_in_bits_ctrl_fuOpType[1:0])) ? {2{scalaData}} : 128'h0)
      : {64'h0,
         ~isFli & io_in_bits_ctrl_fuOpType[2] & ~(io_in_bits_ctrl_fuOpType[4])
           ? (_io_out_bits_res_data_T ? {56'hFFFFFFFFFFFFFF, scalaData[7:0]} : 64'h0)
             | (_io_out_bits_res_data_T_2 ? {48'hFFFFFFFFFFFF, scalaData[15:0]} : 64'h0)
             | (_io_out_bits_res_data_T_4 ? {32'hFFFFFFFF, scalaData[31:0]} : 64'h0)
             | ((&(io_in_bits_ctrl_fuOpType[1:0])) ? scalaData : 64'h0)
           : scalaData};
endmodule

