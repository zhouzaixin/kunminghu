// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VfofBuffer(
  input          clock,
  input          reset,
  input          io_redirect_valid,
  input          io_redirect_bits_robIdx_flag,
  input  [7:0]   io_redirect_bits_robIdx_value,
  input          io_redirect_bits_level,
  input          io_in_0_valid,
  input  [8:0]   io_in_0_bits_uop_fuOpType,
  input          io_in_0_bits_uop_vecWen,
  input          io_in_0_bits_uop_v0Wen,
  input          io_in_0_bits_uop_vlWen,
  input          io_in_0_bits_uop_vpu_vma,
  input          io_in_0_bits_uop_vpu_vta,
  input  [1:0]   io_in_0_bits_uop_vpu_vsew,
  input  [2:0]   io_in_0_bits_uop_vpu_vlmul,
  input          io_in_0_bits_uop_vpu_vm,
  input  [7:0]   io_in_0_bits_uop_vpu_vstart,
  input  [6:0]   io_in_0_bits_uop_vpu_vuopIdx,
  input          io_in_0_bits_uop_vpu_lastUop,
  input  [2:0]   io_in_0_bits_uop_vpu_nf,
  input  [1:0]   io_in_0_bits_uop_vpu_veew,
  input          io_in_0_bits_uop_vpu_isVleff,
  input  [7:0]   io_in_0_bits_uop_pdest,
  input          io_in_0_bits_uop_robIdx_flag,
  input  [7:0]   io_in_0_bits_uop_robIdx_value,
  input  [127:0] io_in_0_bits_src_4,
  input          io_in_1_valid,
  input  [8:0]   io_in_1_bits_uop_fuOpType,
  input          io_in_1_bits_uop_vecWen,
  input          io_in_1_bits_uop_v0Wen,
  input          io_in_1_bits_uop_vlWen,
  input          io_in_1_bits_uop_vpu_vma,
  input          io_in_1_bits_uop_vpu_vta,
  input  [1:0]   io_in_1_bits_uop_vpu_vsew,
  input  [2:0]   io_in_1_bits_uop_vpu_vlmul,
  input          io_in_1_bits_uop_vpu_vm,
  input  [7:0]   io_in_1_bits_uop_vpu_vstart,
  input  [6:0]   io_in_1_bits_uop_vpu_vuopIdx,
  input          io_in_1_bits_uop_vpu_lastUop,
  input  [2:0]   io_in_1_bits_uop_vpu_nf,
  input  [1:0]   io_in_1_bits_uop_vpu_veew,
  input          io_in_1_bits_uop_vpu_isVleff,
  input  [7:0]   io_in_1_bits_uop_pdest,
  input          io_in_1_bits_uop_robIdx_flag,
  input  [7:0]   io_in_1_bits_uop_robIdx_value,
  input  [127:0] io_in_1_bits_src_4,
  input          io_mergeUopWriteback_0_valid,
  input          io_mergeUopWriteback_0_bits_uop_exceptionVec_3,
  input          io_mergeUopWriteback_0_bits_uop_exceptionVec_4,
  input          io_mergeUopWriteback_0_bits_uop_exceptionVec_5,
  input          io_mergeUopWriteback_0_bits_uop_exceptionVec_13,
  input          io_mergeUopWriteback_0_bits_uop_exceptionVec_21,
  input  [7:0]   io_mergeUopWriteback_0_bits_uop_vpu_vl,
  input          io_mergeUopWriteback_0_bits_uop_robIdx_flag,
  input  [7:0]   io_mergeUopWriteback_0_bits_uop_robIdx_value,
  input          io_mergeUopWriteback_1_valid,
  input          io_mergeUopWriteback_1_bits_uop_exceptionVec_3,
  input          io_mergeUopWriteback_1_bits_uop_exceptionVec_4,
  input          io_mergeUopWriteback_1_bits_uop_exceptionVec_5,
  input          io_mergeUopWriteback_1_bits_uop_exceptionVec_13,
  input          io_mergeUopWriteback_1_bits_uop_exceptionVec_21,
  input  [7:0]   io_mergeUopWriteback_1_bits_uop_vpu_vl,
  input          io_mergeUopWriteback_1_bits_uop_robIdx_flag,
  input  [7:0]   io_mergeUopWriteback_1_bits_uop_robIdx_value,
  output         io_uopWriteback_valid,
  output [8:0]   io_uopWriteback_bits_uop_fuOpType,
  output         io_uopWriteback_bits_uop_vecWen,
  output         io_uopWriteback_bits_uop_v0Wen,
  output         io_uopWriteback_bits_uop_vlWen,
  output         io_uopWriteback_bits_uop_vpu_vma,
  output         io_uopWriteback_bits_uop_vpu_vta,
  output [1:0]   io_uopWriteback_bits_uop_vpu_vsew,
  output [2:0]   io_uopWriteback_bits_uop_vpu_vlmul,
  output         io_uopWriteback_bits_uop_vpu_vm,
  output [7:0]   io_uopWriteback_bits_uop_vpu_vstart,
  output [6:0]   io_uopWriteback_bits_uop_vpu_vuopIdx,
  output [7:0]   io_uopWriteback_bits_uop_vpu_vl,
  output [2:0]   io_uopWriteback_bits_uop_vpu_nf,
  output [1:0]   io_uopWriteback_bits_uop_vpu_veew,
  output [7:0]   io_uopWriteback_bits_uop_pdest,
  output         io_uopWriteback_bits_uop_robIdx_flag,
  output [7:0]   io_uopWriteback_bits_uop_robIdx_value,
  output [127:0] io_uopWriteback_bits_data
);

  reg  [8:0] entries_uop_fuOpType;
  reg        entries_uop_vecWen;
  reg        entries_uop_v0Wen;
  reg        entries_uop_vlWen;
  reg        entries_uop_vpu_vma;
  reg        entries_uop_vpu_vta;
  reg  [1:0] entries_uop_vpu_vsew;
  reg  [2:0] entries_uop_vpu_vlmul;
  reg        entries_uop_vpu_vm;
  reg  [7:0] entries_uop_vpu_vstart;
  reg  [6:0] entries_uop_vpu_vuopIdx;
  reg        entries_uop_vpu_lastUop;
  reg  [2:0] entries_uop_vpu_nf;
  reg  [1:0] entries_uop_vpu_veew;
  reg        entries_uop_vpu_isVleff;
  reg  [7:0] entries_uop_pdest;
  reg        entries_uop_robIdx_flag;
  reg  [7:0] entries_uop_robIdx_value;
  reg  [7:0] entries_vl;
  reg        entries_hasException;
  reg        valid;
  wire [8:0] _needRedirect_flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire [8:0] _wbIsfof_T_4 = {entries_uop_robIdx_flag, entries_uop_robIdx_value};
  wire       needRedirect =
    io_redirect_valid
    & (io_redirect_bits_level & _wbIsfof_T_4 == _needRedirect_flushItself_T_2
       | entries_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ entries_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire       io_uopWriteback_valid_0 =
    valid & entries_uop_vpu_lastUop & entries_uop_vpu_isVleff & ~needRedirect;
  wire       enqIsfof_0 = io_in_0_valid & io_in_0_bits_uop_vpu_isVleff;
  wire       enqBits_uop_vpu_lastUop =
    enqIsfof_0 ? io_in_0_bits_uop_vpu_lastUop : io_in_1_bits_uop_vpu_lastUop;
  wire       enqBits_uop_vpu_isVleff =
    enqIsfof_0 ? io_in_0_bits_uop_vpu_isVleff : io_in_1_bits_uop_vpu_isVleff;
  wire       enqBits_uop_robIdx_flag =
    enqIsfof_0 ? io_in_0_bits_uop_robIdx_flag : io_in_1_bits_uop_robIdx_flag;
  wire [7:0] enqBits_uop_robIdx_value =
    enqIsfof_0 ? io_in_0_bits_uop_robIdx_value : io_in_1_bits_uop_robIdx_value;
  wire       _GEN =
    (enqIsfof_0 | io_in_1_valid & io_in_1_bits_uop_vpu_isVleff)
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {enqBits_uop_robIdx_flag,
              enqBits_uop_robIdx_value} == _needRedirect_flushItself_T_2
           | enqBits_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ enqBits_uop_robIdx_value > io_redirect_bits_robIdx_value));
  wire       wbIsfof_0 =
    io_mergeUopWriteback_0_valid
    & {io_mergeUopWriteback_0_bits_uop_robIdx_flag,
       io_mergeUopWriteback_0_bits_uop_robIdx_value} == _wbIsfof_T_4;
  wire       wbIsfof_1 =
    io_mergeUopWriteback_1_valid
    & {io_mergeUopWriteback_1_bits_uop_robIdx_flag,
       io_mergeUopWriteback_1_bits_uop_robIdx_value} == _wbIsfof_T_4;
  wire       _GEN_0 =
    wbIsfof_0 & wbIsfof_1
      ? (io_mergeUopWriteback_1_bits_uop_vpu_vl > io_mergeUopWriteback_0_bits_uop_vpu_vl
         | (|{io_mergeUopWriteback_0_bits_uop_exceptionVec_21,
              io_mergeUopWriteback_0_bits_uop_exceptionVec_13,
              io_mergeUopWriteback_0_bits_uop_exceptionVec_5,
              io_mergeUopWriteback_0_bits_uop_exceptionVec_4,
              io_mergeUopWriteback_0_bits_uop_exceptionVec_3}))
        & {io_mergeUopWriteback_1_bits_uop_exceptionVec_21,
           io_mergeUopWriteback_1_bits_uop_exceptionVec_13,
           io_mergeUopWriteback_1_bits_uop_exceptionVec_5,
           io_mergeUopWriteback_1_bits_uop_exceptionVec_4,
           io_mergeUopWriteback_1_bits_uop_exceptionVec_3} == 5'h0
      : wbIsfof_0 & ~wbIsfof_1;
  wire [7:0] wbBits_oldest_bits_vpu_vl =
    _GEN_0
      ? io_mergeUopWriteback_0_bits_uop_vpu_vl
      : io_mergeUopWriteback_1_bits_uop_vpu_vl;
  wire [4:0] _GEN_1 =
    {_GEN_0
       ? io_mergeUopWriteback_0_bits_uop_exceptionVec_21
       : io_mergeUopWriteback_1_bits_uop_exceptionVec_21,
     _GEN_0
       ? io_mergeUopWriteback_0_bits_uop_exceptionVec_13
       : io_mergeUopWriteback_1_bits_uop_exceptionVec_13,
     _GEN_0
       ? io_mergeUopWriteback_0_bits_uop_exceptionVec_5
       : io_mergeUopWriteback_1_bits_uop_exceptionVec_5,
     _GEN_0
       ? io_mergeUopWriteback_0_bits_uop_exceptionVec_4
       : io_mergeUopWriteback_1_bits_uop_exceptionVec_4,
     _GEN_0
       ? io_mergeUopWriteback_0_bits_uop_exceptionVec_3
       : io_mergeUopWriteback_1_bits_uop_exceptionVec_3};
  wire       _GEN_2 = _GEN & ~valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      entries_uop_fuOpType <= 9'h0;
      entries_uop_vecWen <= 1'h0;
      entries_uop_v0Wen <= 1'h0;
      entries_uop_vlWen <= 1'h0;
      entries_uop_vpu_vma <= 1'h0;
      entries_uop_vpu_vta <= 1'h0;
      entries_uop_vpu_vsew <= 2'h0;
      entries_uop_vpu_vlmul <= 3'h0;
      entries_uop_vpu_vm <= 1'h0;
      entries_uop_vpu_vstart <= 8'h0;
      entries_uop_vpu_vuopIdx <= 7'h0;
      entries_uop_vpu_lastUop <= 1'h0;
      entries_uop_vpu_nf <= 3'h0;
      entries_uop_vpu_veew <= 2'h0;
      entries_uop_vpu_isVleff <= 1'h0;
      entries_uop_pdest <= 8'h0;
      entries_uop_robIdx_flag <= 1'h0;
      entries_uop_robIdx_value <= 8'h0;
      entries_vl <= 8'h0;
      entries_hasException <= 1'h0;
      valid <= 1'h0;
    end
    else begin
      if (_GEN
          & (~valid | valid & enqBits_uop_vpu_isVleff & enqBits_uop_vpu_lastUop)) begin
        entries_uop_fuOpType <=
          enqIsfof_0 ? io_in_0_bits_uop_fuOpType : io_in_1_bits_uop_fuOpType;
        entries_uop_vecWen <=
          enqIsfof_0 ? io_in_0_bits_uop_vecWen : io_in_1_bits_uop_vecWen;
        entries_uop_v0Wen <= enqIsfof_0 ? io_in_0_bits_uop_v0Wen : io_in_1_bits_uop_v0Wen;
        entries_uop_vlWen <= enqIsfof_0 ? io_in_0_bits_uop_vlWen : io_in_1_bits_uop_vlWen;
        entries_uop_vpu_vma <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vma : io_in_1_bits_uop_vpu_vma;
        entries_uop_vpu_vta <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vta : io_in_1_bits_uop_vpu_vta;
        entries_uop_vpu_vsew <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vsew : io_in_1_bits_uop_vpu_vsew;
        entries_uop_vpu_vlmul <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vlmul : io_in_1_bits_uop_vpu_vlmul;
        entries_uop_vpu_vm <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vm : io_in_1_bits_uop_vpu_vm;
        entries_uop_vpu_vstart <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vstart : io_in_1_bits_uop_vpu_vstart;
        entries_uop_vpu_vuopIdx <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_vuopIdx : io_in_1_bits_uop_vpu_vuopIdx;
        entries_uop_vpu_lastUop <= enqBits_uop_vpu_lastUop;
        entries_uop_vpu_nf <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_nf : io_in_1_bits_uop_vpu_nf;
        entries_uop_vpu_veew <=
          enqIsfof_0 ? io_in_0_bits_uop_vpu_veew : io_in_1_bits_uop_vpu_veew;
        entries_uop_vpu_isVleff <= enqBits_uop_vpu_isVleff;
        entries_uop_pdest <= enqIsfof_0 ? io_in_0_bits_uop_pdest : io_in_1_bits_uop_pdest;
        entries_uop_robIdx_flag <= enqBits_uop_robIdx_flag;
        entries_uop_robIdx_value <= enqBits_uop_robIdx_value;
      end
      if ((wbIsfof_0 | wbIsfof_1) & (wbBits_oldest_bits_vpu_vl < entries_vl | (|_GEN_1))
          & valid & ~needRedirect & ~entries_hasException) begin
        entries_vl <= wbBits_oldest_bits_vpu_vl;
        entries_hasException <= |_GEN_1;
      end
      else begin
        if (_GEN_2)
          entries_vl <= enqIsfof_0 ? io_in_0_bits_src_4[7:0] : io_in_1_bits_src_4[7:0];
        entries_hasException <= ~_GEN_2 & entries_hasException;
      end
      valid <= ~(io_uopWriteback_valid_0 | needRedirect) & (_GEN | valid);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:38];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h27; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_uop_fuOpType = _RANDOM[6'h6][18:10];
        entries_uop_vecWen = _RANDOM[6'h6][21];
        entries_uop_v0Wen = _RANDOM[6'h6][22];
        entries_uop_vlWen = _RANDOM[6'h6][23];
        entries_uop_vpu_vma = _RANDOM[6'h8][12];
        entries_uop_vpu_vta = _RANDOM[6'h8][13];
        entries_uop_vpu_vsew = _RANDOM[6'h8][15:14];
        entries_uop_vpu_vlmul = _RANDOM[6'h8][18:16];
        entries_uop_vpu_vm = _RANDOM[6'h8][27];
        entries_uop_vpu_vstart = {_RANDOM[6'h8][31:28], _RANDOM[6'h9][3:0]};
        entries_uop_vpu_vuopIdx = _RANDOM[6'h9][22:16];
        entries_uop_vpu_lastUop = _RANDOM[6'h9][23];
        entries_uop_vpu_nf = _RANDOM[6'hE][2:0];
        entries_uop_vpu_veew = _RANDOM[6'hE][4:3];
        entries_uop_vpu_isVleff = _RANDOM[6'hE][13];
        entries_uop_pdest = _RANDOM[6'h11][31:24];
        entries_uop_robIdx_flag = _RANDOM[6'h12][12];
        entries_uop_robIdx_value = _RANDOM[6'h12][20:13];
        entries_vl = _RANDOM[6'h26][20:13];
        entries_hasException = _RANDOM[6'h26][21];
        valid = _RANDOM[6'h26][22];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        entries_uop_fuOpType = 9'h0;
        entries_uop_vecWen = 1'h0;
        entries_uop_v0Wen = 1'h0;
        entries_uop_vlWen = 1'h0;
        entries_uop_vpu_vma = 1'h0;
        entries_uop_vpu_vta = 1'h0;
        entries_uop_vpu_vsew = 2'h0;
        entries_uop_vpu_vlmul = 3'h0;
        entries_uop_vpu_vm = 1'h0;
        entries_uop_vpu_vstart = 8'h0;
        entries_uop_vpu_vuopIdx = 7'h0;
        entries_uop_vpu_lastUop = 1'h0;
        entries_uop_vpu_nf = 3'h0;
        entries_uop_vpu_veew = 2'h0;
        entries_uop_vpu_isVleff = 1'h0;
        entries_uop_pdest = 8'h0;
        entries_uop_robIdx_flag = 1'h0;
        entries_uop_robIdx_value = 8'h0;
        entries_vl = 8'h0;
        entries_hasException = 1'h0;
        valid = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_uopWriteback_valid = io_uopWriteback_valid_0;
  assign io_uopWriteback_bits_uop_fuOpType = entries_uop_fuOpType;
  assign io_uopWriteback_bits_uop_vecWen = entries_uop_vecWen;
  assign io_uopWriteback_bits_uop_v0Wen = entries_uop_v0Wen;
  assign io_uopWriteback_bits_uop_vlWen = entries_uop_vlWen;
  assign io_uopWriteback_bits_uop_vpu_vma = entries_uop_vpu_vma;
  assign io_uopWriteback_bits_uop_vpu_vta = entries_uop_vpu_vta;
  assign io_uopWriteback_bits_uop_vpu_vsew = entries_uop_vpu_vsew;
  assign io_uopWriteback_bits_uop_vpu_vlmul = entries_uop_vpu_vlmul;
  assign io_uopWriteback_bits_uop_vpu_vm = entries_uop_vpu_vm;
  assign io_uopWriteback_bits_uop_vpu_vstart = entries_uop_vpu_vstart;
  assign io_uopWriteback_bits_uop_vpu_vuopIdx = entries_uop_vpu_vuopIdx;
  assign io_uopWriteback_bits_uop_vpu_vl = entries_vl;
  assign io_uopWriteback_bits_uop_vpu_nf = entries_uop_vpu_nf;
  assign io_uopWriteback_bits_uop_vpu_veew = entries_uop_vpu_veew;
  assign io_uopWriteback_bits_uop_pdest = entries_uop_pdest;
  assign io_uopWriteback_bits_uop_robIdx_flag = entries_uop_robIdx_flag;
  assign io_uopWriteback_bits_uop_robIdx_value = entries_uop_robIdx_value;
  assign io_uopWriteback_bits_data = {120'h0, entries_vl};
endmodule

