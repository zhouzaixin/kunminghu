// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLError(
  input        clock,
  input        reset,
  output       auto_in_a_ready,
  input        auto_in_a_valid,
  input  [3:0] auto_in_a_bits_opcode,
  input        auto_in_d_ready,
  output       auto_in_d_valid,
  output [3:0] auto_in_d_bits_opcode,
  output       auto_in_d_bits_denied,
  output       auto_in_d_bits_corrupt
);

  wire             da_ready;
  wire [3:0]       da_bits_opcode;
  wire [15:0][3:0] _GEN =
    '{4'h0,
      4'h0,
      4'h0,
      4'h0,
      4'h0,
      4'h8,
      4'h8,
      4'h8,
      4'h4,
      4'h4,
      4'h2,
      4'h1,
      4'h1,
      4'h1,
      4'h0,
      4'h0};
  reg              idle;
  wire             winner_1 = auto_in_a_valid & idle;
  assign da_bits_opcode = _GEN[auto_in_a_bits_opcode];
  reg              beatsLeft;
  reg              state_1;
  wire             muxState_1 = beatsLeft ? state_1 : winner_1;
  assign da_ready = auto_in_d_ready & (~beatsLeft | state_1);
  wire             nodeIn_d_valid = (~beatsLeft | state_1) & winner_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      idle <= 1'h1;
      beatsLeft <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      idle <= ~(da_ready & winner_1 & da_bits_opcode == 4'h4) & idle;
      beatsLeft <=
        ~(~beatsLeft & auto_in_d_ready)
        & 1'(beatsLeft - (auto_in_d_ready & nodeIn_d_valid));
      if (beatsLeft) begin
      end
      else
        state_1 <= winner_1;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        idle = _RANDOM[/*Zero width*/ 1'b0][0];
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][5];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][7];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        idle = 1'h1;
        beatsLeft = 1'h0;
        state_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_a_ready = da_ready & idle;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = muxState_1 ? da_bits_opcode : 4'h0;
  assign auto_in_d_bits_denied = muxState_1;
  assign auto_in_d_bits_corrupt = muxState_1 & da_bits_opcode[0];
endmodule

