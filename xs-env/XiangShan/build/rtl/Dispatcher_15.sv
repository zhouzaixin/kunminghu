// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Dispatcher_15(
  input         io_in_valid,
  input  [34:0] io_in_bits_fuType,
  input  [8:0]  io_in_bits_fuOpType,
  input         io_in_bits_vpu_vma,
  input  [1:0]  io_in_bits_vpu_vsew,
  input         io_in_bits_vpu_vm,
  input  [6:0]  io_in_bits_vpu_vuopIdx,
  input         io_in_bits_vpu_isExt,
  input         io_in_bits_vpu_isNarrow,
  input         io_in_bits_vpu_isDstMask,
  output        io_out_0_valid,
  output [8:0]  io_out_0_bits_fuOpType,
  output [1:0]  io_out_0_bits_vpu_vsew,
  output [6:0]  io_out_0_bits_vpu_vuopIdx,
  output        io_out_1_valid,
  output [8:0]  io_out_1_bits_fuOpType,
  output        io_out_1_bits_vpu_vma,
  output [1:0]  io_out_1_bits_vpu_vsew,
  output        io_out_1_bits_vpu_vm,
  output [6:0]  io_out_1_bits_vpu_vuopIdx,
  output        io_out_1_bits_vpu_isExt,
  output        io_out_1_bits_vpu_isNarrow,
  output        io_out_1_bits_vpu_isDstMask
);

  assign io_out_0_valid = io_in_bits_fuType == 35'h2000000 & io_in_valid;
  assign io_out_0_bits_fuOpType = io_in_bits_fuOpType;
  assign io_out_0_bits_vpu_vsew = io_in_bits_vpu_vsew;
  assign io_out_0_bits_vpu_vuopIdx = io_in_bits_vpu_vuopIdx;
  assign io_out_1_valid = io_in_bits_fuType == 35'h80000 & io_in_valid;
  assign io_out_1_bits_fuOpType = io_in_bits_fuOpType;
  assign io_out_1_bits_vpu_vma = io_in_bits_vpu_vma;
  assign io_out_1_bits_vpu_vsew = io_in_bits_vpu_vsew;
  assign io_out_1_bits_vpu_vm = io_in_bits_vpu_vm;
  assign io_out_1_bits_vpu_vuopIdx = io_in_bits_vpu_vuopIdx;
  assign io_out_1_bits_vpu_isExt = io_in_bits_vpu_isExt;
  assign io_out_1_bits_vpu_isNarrow = io_in_bits_vpu_isNarrow;
  assign io_out_1_bits_vpu_isDstMask = io_in_bits_vpu_isDstMask;
endmodule

