// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module HstatusModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_GVA,
  output        regOut_SPV,
  output        regOut_SPVP,
  output        regOut_HU,
  output [5:0]  regOut_VGEIN,
  output        regOut_VTVM,
  output        regOut_VTW,
  output        regOut_VTSR,
  output [1:0]  regOut_HUPMM,
  input         retFromS_hstatus_valid,
  input         retFromS_hstatus_bits_SPV,
  input         trapToHS_hstatus_valid,
  input         trapToHS_hstatus_bits_GVA,
  input         trapToHS_hstatus_bits_SPV,
  input         trapToHS_hstatus_bits_SPVP
);

  reg       reg_GVA;
  reg       reg_SPV;
  reg       reg_SPVP;
  reg       reg_HU;
  reg [5:0] reg_VGEIN;
  reg       reg_VTVM;
  reg       reg_VTW;
  reg       reg_VTSR;
  reg [1:0] reg_HUPMM;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_GVA <= 1'h0;
      reg_SPV <= 1'h0;
      reg_SPVP <= 1'h0;
      reg_HU <= 1'h0;
      reg_VGEIN <= 6'h0;
      reg_VTVM <= 1'h0;
      reg_VTW <= 1'h0;
      reg_VTSR <= 1'h0;
      reg_HUPMM <= 2'h0;
    end
    else begin
      if (w_wen | trapToHS_hstatus_valid) begin
        reg_GVA <=
          trapToHS_hstatus_valid & trapToHS_hstatus_bits_GVA | w_wen & w_wdata[6];
        reg_SPVP <=
          trapToHS_hstatus_valid & trapToHS_hstatus_bits_SPVP | w_wen & w_wdata[8];
      end
      if (w_wen | retFromS_hstatus_valid | trapToHS_hstatus_valid)
        reg_SPV <=
          retFromS_hstatus_valid & retFromS_hstatus_bits_SPV | trapToHS_hstatus_valid
          & trapToHS_hstatus_bits_SPV | w_wen & w_wdata[7];
      if (w_wen) begin
        reg_HU <= w_wdata[9];
        reg_VGEIN <= w_wdata[17:12];
        reg_VTVM <= w_wdata[20];
        reg_VTW <= w_wdata[21];
        reg_VTSR <= w_wdata[22];
      end
      if (w_wen & (|{&(w_wdata[49:48]), w_wdata[49:48] == 2'h2, w_wdata[49:48] == 2'h0}))
        reg_HUPMM <= w_wdata[49:48];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_GVA = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_SPV = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_SPVP = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_HU = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_VGEIN = _RANDOM[/*Zero width*/ 1'b0][10:5];
        reg_VTVM = _RANDOM[/*Zero width*/ 1'b0][11];
        reg_VTW = _RANDOM[/*Zero width*/ 1'b0][12];
        reg_VTSR = _RANDOM[/*Zero width*/ 1'b0][13];
        reg_HUPMM = _RANDOM[/*Zero width*/ 1'b0][17:16];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_GVA = 1'h0;
        reg_SPV = 1'h0;
        reg_SPVP = 1'h0;
        reg_HU = 1'h0;
        reg_VGEIN = 6'h0;
        reg_VTVM = 1'h0;
        reg_VTW = 1'h0;
        reg_VTSR = 1'h0;
        reg_HUPMM = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {14'h0,
     reg_HUPMM,
     25'h400,
     reg_VTSR,
     reg_VTW,
     reg_VTVM,
     2'h0,
     reg_VGEIN,
     2'h0,
     reg_HU,
     reg_SPVP,
     reg_SPV,
     reg_GVA,
     6'h0};
  assign regOut_GVA = reg_GVA;
  assign regOut_SPV = reg_SPV;
  assign regOut_SPVP = reg_SPVP;
  assign regOut_HU = reg_HU;
  assign regOut_VGEIN = reg_VGEIN;
  assign regOut_VTVM = reg_VTVM;
  assign regOut_VTW = reg_VTW;
  assign regOut_VTSR = reg_VTSR;
  assign regOut_HUPMM = reg_HUPMM;
endmodule

