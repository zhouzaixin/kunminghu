// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar_1(
  input          clock,
  input          reset,
  output         auto_in_1_a_ready,
  input          auto_in_1_a_valid,
  input  [3:0]   auto_in_1_a_bits_opcode,
  input  [2:0]   auto_in_1_a_bits_size,
  input  [1:0]   auto_in_1_a_bits_source,
  input  [47:0]  auto_in_1_a_bits_address,
  input  [31:0]  auto_in_1_a_bits_mask,
  input  [255:0] auto_in_1_a_bits_data,
  input          auto_in_1_d_ready,
  output         auto_in_1_d_valid,
  output [3:0]   auto_in_1_d_bits_opcode,
  output [2:0]   auto_in_1_d_bits_size,
  output [1:0]   auto_in_1_d_bits_source,
  output         auto_in_1_d_bits_denied,
  output [255:0] auto_in_1_d_bits_data,
  output         auto_in_1_d_bits_corrupt,
  output         auto_in_0_a_ready,
  input          auto_in_0_a_valid,
  input  [3:0]   auto_in_0_a_bits_opcode,
  input  [2:0]   auto_in_0_a_bits_param,
  input  [2:0]   auto_in_0_a_bits_size,
  input          auto_in_0_a_bits_source,
  input  [47:0]  auto_in_0_a_bits_address,
  input  [31:0]  auto_in_0_a_bits_mask,
  input  [255:0] auto_in_0_a_bits_data,
  input          auto_in_0_a_bits_corrupt,
  input          auto_in_0_d_ready,
  output         auto_in_0_d_valid,
  output [3:0]   auto_in_0_d_bits_opcode,
  output [1:0]   auto_in_0_d_bits_param,
  output [2:0]   auto_in_0_d_bits_size,
  output [3:0]   auto_in_0_d_bits_sink,
  output         auto_in_0_d_bits_denied,
  output [255:0] auto_in_0_d_bits_data,
  output         auto_in_0_d_bits_corrupt,
  input          auto_out_1_a_ready,
  output         auto_out_1_a_valid,
  output [3:0]   auto_out_1_a_bits_opcode,
  output [2:0]   auto_out_1_a_bits_param,
  output [2:0]   auto_out_1_a_bits_size,
  output [2:0]   auto_out_1_a_bits_source,
  output [30:0]  auto_out_1_a_bits_address,
  output [31:0]  auto_out_1_a_bits_mask,
  output [255:0] auto_out_1_a_bits_data,
  output         auto_out_1_a_bits_corrupt,
  output         auto_out_1_d_ready,
  input          auto_out_1_d_valid,
  input  [3:0]   auto_out_1_d_bits_opcode,
  input  [2:0]   auto_out_1_d_bits_size,
  input  [2:0]   auto_out_1_d_bits_source,
  input          auto_out_1_d_bits_corrupt,
  input          auto_out_0_a_ready,
  output         auto_out_0_a_valid,
  output [3:0]   auto_out_0_a_bits_opcode,
  output [2:0]   auto_out_0_a_bits_param,
  output [2:0]   auto_out_0_a_bits_size,
  output [2:0]   auto_out_0_a_bits_source,
  output [47:0]  auto_out_0_a_bits_address,
  output [31:0]  auto_out_0_a_bits_mask,
  output [255:0] auto_out_0_a_bits_data,
  output         auto_out_0_a_bits_corrupt,
  output         auto_out_0_d_ready,
  input          auto_out_0_d_valid,
  input  [3:0]   auto_out_0_d_bits_opcode,
  input  [1:0]   auto_out_0_d_bits_param,
  input  [2:0]   auto_out_0_d_bits_size,
  input  [2:0]   auto_out_0_d_bits_source,
  input  [3:0]   auto_out_0_d_bits_sink,
  input          auto_out_0_d_bits_denied,
  input  [255:0] auto_out_0_d_bits_data,
  input          auto_out_0_d_bits_corrupt
);

  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_1;
  wire        allowed_0;
  wire [2:0]  in_0_a_bits_source = {2'h2, auto_in_0_a_bits_source};
  wire [2:0]  in_1_a_bits_source = {1'h0, auto_in_1_a_bits_source};
  wire        requestAIO_0_0 =
    {auto_in_0_a_bits_address[47:32], ~(auto_in_0_a_bits_address[31])} == 17'h0
    | {auto_in_0_a_bits_address[47:33], ~(auto_in_0_a_bits_address[32])} == 16'h0
    | {auto_in_0_a_bits_address[47:34], ~(auto_in_0_a_bits_address[33])} == 15'h0
    | {auto_in_0_a_bits_address[47:35], ~(auto_in_0_a_bits_address[34])} == 14'h0
    | {auto_in_0_a_bits_address[47:36], ~(auto_in_0_a_bits_address[35])} == 13'h0
    | {auto_in_0_a_bits_address[47:37], ~(auto_in_0_a_bits_address[36])} == 12'h0
    | {auto_in_0_a_bits_address[47:38], ~(auto_in_0_a_bits_address[37])} == 11'h0
    | {auto_in_0_a_bits_address[47:39], ~(auto_in_0_a_bits_address[38])} == 10'h0
    | {auto_in_0_a_bits_address[47:40], ~(auto_in_0_a_bits_address[39])} == 9'h0
    | {auto_in_0_a_bits_address[47:41], ~(auto_in_0_a_bits_address[40])} == 8'h0
    | {auto_in_0_a_bits_address[47:42], ~(auto_in_0_a_bits_address[41])} == 7'h0
    | {auto_in_0_a_bits_address[47:43], ~(auto_in_0_a_bits_address[42])} == 6'h0
    | {auto_in_0_a_bits_address[47:44], ~(auto_in_0_a_bits_address[43])} == 5'h0
    | {auto_in_0_a_bits_address[47:45], ~(auto_in_0_a_bits_address[44])} == 4'h0
    | {auto_in_0_a_bits_address[47:46], ~(auto_in_0_a_bits_address[45])} == 3'h0
    | {auto_in_0_a_bits_address[47], ~(auto_in_0_a_bits_address[46])} == 2'h0
    | auto_in_0_a_bits_address[47];
  wire        requestAIO_0_1 = auto_in_0_a_bits_address[47:31] == 17'h0;
  wire        requestAIO_1_0 =
    {auto_in_1_a_bits_address[47:32], ~(auto_in_1_a_bits_address[31])} == 17'h0
    | {auto_in_1_a_bits_address[47:33], ~(auto_in_1_a_bits_address[32])} == 16'h0
    | {auto_in_1_a_bits_address[47:34], ~(auto_in_1_a_bits_address[33])} == 15'h0
    | {auto_in_1_a_bits_address[47:35], ~(auto_in_1_a_bits_address[34])} == 14'h0
    | {auto_in_1_a_bits_address[47:36], ~(auto_in_1_a_bits_address[35])} == 13'h0
    | {auto_in_1_a_bits_address[47:37], ~(auto_in_1_a_bits_address[36])} == 12'h0
    | {auto_in_1_a_bits_address[47:38], ~(auto_in_1_a_bits_address[37])} == 11'h0
    | {auto_in_1_a_bits_address[47:39], ~(auto_in_1_a_bits_address[38])} == 10'h0
    | {auto_in_1_a_bits_address[47:40], ~(auto_in_1_a_bits_address[39])} == 9'h0
    | {auto_in_1_a_bits_address[47:41], ~(auto_in_1_a_bits_address[40])} == 8'h0
    | {auto_in_1_a_bits_address[47:42], ~(auto_in_1_a_bits_address[41])} == 7'h0
    | {auto_in_1_a_bits_address[47:43], ~(auto_in_1_a_bits_address[42])} == 6'h0
    | {auto_in_1_a_bits_address[47:44], ~(auto_in_1_a_bits_address[43])} == 5'h0
    | {auto_in_1_a_bits_address[47:45], ~(auto_in_1_a_bits_address[44])} == 4'h0
    | {auto_in_1_a_bits_address[47:46], ~(auto_in_1_a_bits_address[45])} == 3'h0
    | {auto_in_1_a_bits_address[47], ~(auto_in_1_a_bits_address[46])} == 2'h0
    | auto_in_1_a_bits_address[47];
  wire        requestAIO_1_1 = auto_in_1_a_bits_address[47:31] == 17'h0;
  wire        requestDOI_0_0 = auto_out_0_d_bits_source == 3'h4;
  wire        requestDOI_1_0 = auto_out_1_d_bits_source == 3'h4;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid = auto_in_0_a_valid & requestAIO_0_1;
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid = auto_in_1_a_valid & requestAIO_1_1;
  wire        portsDIO_filtered_0_valid = auto_out_0_d_valid & requestDOI_0_0;
  wire        portsDIO_filtered_1_valid =
    auto_out_0_d_valid & ~(auto_out_0_d_bits_source[2]);
  wire        portsDIO_filtered_1_0_valid = auto_out_1_d_valid & requestDOI_1_0;
  wire        portsDIO_filtered_1_1_valid =
    auto_out_1_d_valid & ~(auto_out_1_d_bits_source[2]);
  reg         beatsLeft;
  wire [1:0]  readys_valid = {portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], portsAOI_filtered_1_0_valid} | _readys_filter_T_1));
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = beatsLeft ? state_0 : winner_0;
  wire        muxState_1 = beatsLeft ? state_1 : winner_1;
  assign allowed_0 = beatsLeft ? state_0 : readys_readys[0];
  assign allowed_1 = beatsLeft ? state_1 : readys_readys[1];
  wire        out_0_a_valid =
    beatsLeft
      ? state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid
      : portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid;
  reg         beatsLeft_1;
  wire [1:0]  readys_valid_1 = {portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], portsAOI_filtered_1_1_valid} | _readys_filter_T_3));
  wire        winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  reg         state_1_0;
  reg         state_1_1;
  wire        muxState_1_0 = beatsLeft_1 ? state_1_0 : winner_1_0;
  wire        muxState_1_1 = beatsLeft_1 ? state_1_1 : winner_1_1;
  assign allowed_1_0 = beatsLeft_1 ? state_1_0 : readys_readys_1[0];
  assign allowed_1_1 = beatsLeft_1 ? state_1_1 : readys_readys_1[1];
  wire        out_1_a_valid =
    beatsLeft_1
      ? state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid
      : portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid;
  reg         beatsLeft_2;
  wire [1:0]  readys_valid_2 = {portsDIO_filtered_1_0_valid, portsDIO_filtered_0_valid};
  reg  [1:0]  readys_mask_2;
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0]  readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & ({_readys_filter_T_5[0], portsDIO_filtered_1_0_valid} | _readys_filter_T_5));
  wire        winner_2_0 = readys_readys_2[0] & portsDIO_filtered_0_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsDIO_filtered_1_0_valid;
  reg         state_2_0;
  reg         state_2_1;
  wire        muxState_2_0 = beatsLeft_2 ? state_2_0 : winner_2_0;
  wire        muxState_2_1 = beatsLeft_2 ? state_2_1 : winner_2_1;
  assign allowed_2_0 = beatsLeft_2 ? state_2_0 : readys_readys_2[0];
  assign allowed_2_1 = beatsLeft_2 ? state_2_1 : readys_readys_2[1];
  wire        in_0_d_valid =
    beatsLeft_2
      ? state_2_0 & portsDIO_filtered_0_valid | state_2_1 & portsDIO_filtered_1_0_valid
      : portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid;
  reg         beatsLeft_3;
  wire [1:0]  readys_valid_3 = {portsDIO_filtered_1_1_valid, portsDIO_filtered_1_valid};
  reg  [1:0]  readys_mask_3;
  wire [1:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [1:0]  readys_readys_3 =
    ~({readys_mask_3[1], _readys_filter_T_7[1] | readys_mask_3[0]}
      & ({_readys_filter_T_7[0], portsDIO_filtered_1_1_valid} | _readys_filter_T_7));
  wire        winner_3_0 = readys_readys_3[0] & portsDIO_filtered_1_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsDIO_filtered_1_1_valid;
  reg         state_3_0;
  reg         state_3_1;
  wire        muxState_3_0 = beatsLeft_3 ? state_3_0 : winner_3_0;
  wire        muxState_3_1 = beatsLeft_3 ? state_3_1 : winner_3_1;
  assign allowed_3_0 = beatsLeft_3 ? state_3_0 : readys_readys_3[0];
  assign allowed_3_1 = beatsLeft_3 ? state_3_1 : readys_readys_3[1];
  wire        in_1_d_valid =
    beatsLeft_3
      ? state_3_0 & portsDIO_filtered_1_valid | state_3_1 & portsDIO_filtered_1_1_valid
      : portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  wire [1:0]  _readys_mask_T_10 = readys_readys_2 & readys_valid_2;
  wire [1:0]  _readys_mask_T_15 = readys_readys_3 & readys_valid_3;
  wire [12:0] _beatsAI_decode_T = 13'h3F << auto_in_0_a_bits_size;
  wire [12:0] _beatsAI_decode_T_3 = 13'h3F << auto_in_1_a_bits_size;
  wire [12:0] _beatsDO_decode_T = 13'h3F << auto_out_0_d_bits_size;
  wire [12:0] _beatsDO_decode_T_3 = 13'h3F << auto_out_1_d_bits_size;
  wire        latch = ~beatsLeft & auto_out_0_a_ready;
  wire        latch_1 = ~beatsLeft_1 & auto_out_1_a_ready;
  wire        latch_2 = ~beatsLeft_2 & auto_in_0_d_ready;
  wire        latch_3 = ~beatsLeft_3 & auto_in_1_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 1'h0;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      beatsLeft_2 <= 1'h0;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      beatsLeft_3 <= 1'h0;
      readys_mask_3 <= 2'h3;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          winner_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5]) | winner_1
          & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5]);
      else
        beatsLeft <= 1'(beatsLeft - (auto_out_0_a_ready & out_0_a_valid));
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (latch_1)
        beatsLeft_1 <=
          winner_1_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_1_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5]);
      else
        beatsLeft_1 <= 1'(beatsLeft_1 - (auto_out_1_a_ready & out_1_a_valid));
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (beatsLeft_1) begin
      end
      else begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      if (latch_2)
        beatsLeft_2 <=
          winner_2_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5]) | winner_2_1
          & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5]);
      else
        beatsLeft_2 <= 1'(beatsLeft_2 - (auto_in_0_d_ready & in_0_d_valid));
      if (latch_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};
      if (beatsLeft_2) begin
      end
      else begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      if (latch_3)
        beatsLeft_3 <=
          winner_3_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5]) | winner_3_1
          & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5]);
      else
        beatsLeft_3 <= 1'(beatsLeft_3 - (auto_in_1_d_ready & in_1_d_valid));
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_15 | {_readys_mask_T_15[0], 1'h0};
      if (beatsLeft_3) begin
      end
      else begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][0];
        readys_mask = _RANDOM[/*Zero width*/ 1'b0][2:1];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][3];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][4];
        beatsLeft_1 = _RANDOM[/*Zero width*/ 1'b0][5];
        readys_mask_1 = _RANDOM[/*Zero width*/ 1'b0][7:6];
        state_1_0 = _RANDOM[/*Zero width*/ 1'b0][8];
        state_1_1 = _RANDOM[/*Zero width*/ 1'b0][9];
        beatsLeft_2 = _RANDOM[/*Zero width*/ 1'b0][10];
        readys_mask_2 = _RANDOM[/*Zero width*/ 1'b0][12:11];
        state_2_0 = _RANDOM[/*Zero width*/ 1'b0][13];
        state_2_1 = _RANDOM[/*Zero width*/ 1'b0][14];
        beatsLeft_3 = _RANDOM[/*Zero width*/ 1'b0][15];
        readys_mask_3 = _RANDOM[/*Zero width*/ 1'b0][17:16];
        state_3_0 = _RANDOM[/*Zero width*/ 1'b0][18];
        state_3_1 = _RANDOM[/*Zero width*/ 1'b0][19];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 1'h0;
        readys_mask = 2'h3;
        state_0 = 1'h0;
        state_1 = 1'h0;
        beatsLeft_1 = 1'h0;
        readys_mask_1 = 2'h3;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        beatsLeft_2 = 1'h0;
        readys_mask_2 = 2'h3;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        beatsLeft_3 = 1'h0;
        readys_mask_3 = 2'h3;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready
    & allowed_1_1;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_3_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_opcode : 4'h0);
  assign auto_in_1_d_bits_size =
    (muxState_3_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_size : 3'h0);
  assign auto_in_1_d_bits_source =
    (muxState_3_0 ? auto_out_0_d_bits_source[1:0] : 2'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_source[1:0] : 2'h0);
  assign auto_in_1_d_bits_denied = muxState_3_0 & auto_out_0_d_bits_denied | muxState_3_1;
  assign auto_in_1_d_bits_data = muxState_3_0 ? auto_out_0_d_bits_data : 256'h0;
  assign auto_in_1_d_bits_corrupt =
    muxState_3_0 & auto_out_0_d_bits_corrupt | muxState_3_1 & auto_out_1_d_bits_corrupt;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready
    & allowed_1_0;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_2_0 ? auto_out_0_d_bits_opcode : 4'h0)
    | (muxState_2_1 ? auto_out_1_d_bits_opcode : 4'h0);
  assign auto_in_0_d_bits_param = muxState_2_0 ? auto_out_0_d_bits_param : 2'h0;
  assign auto_in_0_d_bits_size =
    (muxState_2_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_2_1 ? auto_out_1_d_bits_size : 3'h0);
  assign auto_in_0_d_bits_sink = muxState_2_0 ? auto_out_0_d_bits_sink : 4'h0;
  assign auto_in_0_d_bits_denied = muxState_2_0 & auto_out_0_d_bits_denied | muxState_2_1;
  assign auto_in_0_d_bits_data = muxState_2_0 ? auto_out_0_d_bits_data : 256'h0;
  assign auto_in_0_d_bits_corrupt =
    muxState_2_0 & auto_out_0_d_bits_corrupt | muxState_2_1 & auto_out_1_d_bits_corrupt;
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_opcode : 4'h0);
  assign auto_out_1_a_bits_param = muxState_1_0 ? auto_in_0_a_bits_param : 3'h0;
  assign auto_out_1_a_bits_size =
    (muxState_1_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_size : 3'h0);
  assign auto_out_1_a_bits_source =
    (muxState_1_0 ? in_0_a_bits_source : 3'h0)
    | (muxState_1_1 ? in_1_a_bits_source : 3'h0);
  assign auto_out_1_a_bits_address =
    (muxState_1_0 ? auto_in_0_a_bits_address[30:0] : 31'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_address[30:0] : 31'h0);
  assign auto_out_1_a_bits_mask =
    (muxState_1_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_mask : 32'h0);
  assign auto_out_1_a_bits_data =
    (muxState_1_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_data : 256'h0);
  assign auto_out_1_a_bits_corrupt = muxState_1_0 & auto_in_0_a_bits_corrupt;
  assign auto_out_1_d_ready =
    requestDOI_1_0 & auto_in_0_d_ready & allowed_2_1 | ~(auto_out_1_d_bits_source[2])
    & auto_in_1_d_ready & allowed_3_1;
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 4'h0);
  assign auto_out_0_a_bits_param = muxState_0 ? auto_in_0_a_bits_param : 3'h0;
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 3'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? in_0_a_bits_source : 3'h0) | (muxState_1 ? in_1_a_bits_source : 3'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 48'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 48'h0);
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 32'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 256'h0);
  assign auto_out_0_a_bits_corrupt = muxState_0 & auto_in_0_a_bits_corrupt;
  assign auto_out_0_d_ready =
    requestDOI_0_0 & auto_in_0_d_ready & allowed_2_0 | ~(auto_out_0_d_bits_source[2])
    & auto_in_1_d_ready & allowed_3_0;
endmodule

