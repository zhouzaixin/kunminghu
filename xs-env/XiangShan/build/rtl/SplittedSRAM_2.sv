// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SplittedSRAM_2(
  input         clock,
  output        io_r_req_ready,
  input         io_r_req_valid,
  input  [6:0]  io_r_req_bits_setIdx,
  output [39:0] io_r_resp_data_0,
  output [39:0] io_r_resp_data_1,
  output [39:0] io_r_resp_data_2,
  output [39:0] io_r_resp_data_3,
  output [39:0] io_r_resp_data_4,
  output [39:0] io_r_resp_data_5,
  output [39:0] io_r_resp_data_6,
  output [39:0] io_r_resp_data_7,
  output        io_w_req_ready,
  input         io_w_req_valid,
  input  [6:0]  io_w_req_bits_setIdx,
  input  [39:0] io_w_req_bits_data_0,
  input  [39:0] io_w_req_bits_data_1,
  input  [39:0] io_w_req_bits_data_2,
  input  [39:0] io_w_req_bits_data_3,
  input  [39:0] io_w_req_bits_data_4,
  input  [39:0] io_w_req_bits_data_5,
  input  [39:0] io_w_req_bits_data_6,
  input  [39:0] io_w_req_bits_data_7,
  input  [7:0]  io_w_req_bits_waymask
);

  SRAMTemplate_118 array_0_0_0 (
    .clock                 (clock),
    .io_r_req_ready        (io_r_req_ready),
    .io_r_req_valid        (io_r_req_valid),
    .io_r_req_bits_setIdx  (io_r_req_bits_setIdx),
    .io_r_resp_data_0      (io_r_resp_data_0),
    .io_r_resp_data_1      (io_r_resp_data_1),
    .io_r_resp_data_2      (io_r_resp_data_2),
    .io_r_resp_data_3      (io_r_resp_data_3),
    .io_w_req_valid        (io_w_req_valid),
    .io_w_req_bits_setIdx  (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0  (io_w_req_bits_data_0),
    .io_w_req_bits_data_1  (io_w_req_bits_data_1),
    .io_w_req_bits_data_2  (io_w_req_bits_data_2),
    .io_w_req_bits_data_3  (io_w_req_bits_data_3),
    .io_w_req_bits_waymask (io_w_req_bits_waymask[3:0])
  );
  SRAMTemplate_118 array_0_1_0 (
    .clock                 (clock),
    .io_r_req_ready        (/* unused */),
    .io_r_req_valid        (io_r_req_valid),
    .io_r_req_bits_setIdx  (io_r_req_bits_setIdx),
    .io_r_resp_data_0      (io_r_resp_data_4),
    .io_r_resp_data_1      (io_r_resp_data_5),
    .io_r_resp_data_2      (io_r_resp_data_6),
    .io_r_resp_data_3      (io_r_resp_data_7),
    .io_w_req_valid        (io_w_req_valid),
    .io_w_req_bits_setIdx  (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0  (io_w_req_bits_data_4),
    .io_w_req_bits_data_1  (io_w_req_bits_data_5),
    .io_w_req_bits_data_2  (io_w_req_bits_data_6),
    .io_w_req_bits_data_3  (io_w_req_bits_data_7),
    .io_w_req_bits_waymask (io_w_req_bits_waymask[7:4])
  );
  assign io_w_req_ready = 1'h1;
endmodule

