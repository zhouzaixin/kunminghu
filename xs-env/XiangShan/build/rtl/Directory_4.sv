// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Directory_4(
  input         clock,
  input         reset,
  output        io_read_ready,
  input         io_read_valid,
  input  [15:0] io_read_bits_idOH,
  input  [30:0] io_read_bits_tag,
  input  [10:0] io_read_bits_set,
  input  [2:0]  io_read_bits_replacerInfo_channel,
  input  [2:0]  io_read_bits_replacerInfo_opcode,
  input  [10:0] io_read_bits_source,
  output        io_result_valid,
  output [15:0] io_result_bits_idOH,
  output        io_result_bits_self_dirty,
  output [1:0]  io_result_bits_self_state,
  output [1:0]  io_result_bits_self_clientStates_0,
  output        io_result_bits_self_prefetch,
  output        io_result_bits_self_hit,
  output [2:0]  io_result_bits_self_way,
  output [30:0] io_result_bits_self_tag,
  output        io_result_bits_self_error,
  output [1:0]  io_result_bits_clients_states_0_state,
  output        io_result_bits_clients_states_0_hit,
  output        io_result_bits_clients_tag_match,
  output [33:0] io_result_bits_clients_tag,
  output [3:0]  io_result_bits_clients_way,
  output        io_result_bits_clients_error,
  output [10:0] io_result_bits_sourceId,
  output [10:0] io_result_bits_set,
  output [2:0]  io_result_bits_replacerInfo_channel,
  output [2:0]  io_result_bits_replacerInfo_opcode,
  input         io_dirWReq_valid,
  input  [10:0] io_dirWReq_bits_set,
  input  [2:0]  io_dirWReq_bits_way,
  input         io_dirWReq_bits_data_dirty,
  input  [1:0]  io_dirWReq_bits_data_state,
  input  [1:0]  io_dirWReq_bits_data_clientStates_0,
  input         io_dirWReq_bits_data_prefetch,
  input         io_tagWReq_valid,
  input  [10:0] io_tagWReq_bits_set,
  input  [2:0]  io_tagWReq_bits_way,
  input  [30:0] io_tagWReq_bits_tag,
  input         io_clientDirWReq_valid,
  input  [7:0]  io_clientDirWReq_bits_set,
  input  [3:0]  io_clientDirWReq_bits_way,
  input  [1:0]  io_clientDirWReq_bits_data_0_state,
  input         io_clientTagWreq_valid,
  input  [7:0]  io_clientTagWreq_bits_set,
  input  [3:0]  io_clientTagWreq_bits_way,
  input  [33:0] io_clientTagWreq_bits_tag
);

  wire        io_result_bits_clients_states_0_hit_0;
  wire [1:0]  _io_read_ready_T;
  wire        _selfDir_io_read_ready;
  wire        _clientDir_io_read_ready;
  wire        _clientDir_io_resp_bits_hit;
  wire [1:0]  _clientDir_io_resp_bits_dir_0_state;
  wire        _clientDir_io_resp_bits_error;
  wire        _req_r_T = (&_io_read_ready_T) & io_read_valid;
  assign _io_read_ready_T = {_clientDir_io_read_ready, _selfDir_io_read_ready};
  reg         reqValidReg;
  reg  [15:0] reqIdOHReg;
  reg  [10:0] sourceIdReg_r;
  reg  [10:0] sourceIdReg;
  reg  [10:0] setReg_r;
  reg  [10:0] setReg;
  reg  [2:0]  replacerInfoReg_r_channel;
  reg  [2:0]  replacerInfoReg_r_opcode;
  reg  [2:0]  replacerInfoReg_channel;
  reg  [2:0]  replacerInfoReg_opcode;
  assign io_result_bits_clients_states_0_hit_0 =
    _clientDir_io_resp_bits_hit & (|_clientDir_io_resp_bits_dir_0_state);
  always @(posedge clock or posedge reset) begin
    if (reset)
      reqValidReg <= 1'h0;
    else
      reqValidReg <= _req_r_T;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_req_r_T) begin
      reqIdOHReg <= io_read_bits_idOH;
      sourceIdReg_r <= io_read_bits_source;
      setReg_r <= io_read_bits_set;
      replacerInfoReg_r_channel <= io_read_bits_replacerInfo_channel;
      replacerInfoReg_r_opcode <= io_read_bits_replacerInfo_opcode;
    end
    if (reqValidReg) begin
      sourceIdReg <= sourceIdReg_r;
      setReg <= setReg_r;
      replacerInfoReg_channel <= replacerInfoReg_r_channel;
      replacerInfoReg_opcode <= replacerInfoReg_r_opcode;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        reqValidReg = _RANDOM[3'h2][1];
        reqIdOHReg = _RANDOM[3'h2][17:2];
        sourceIdReg_r = _RANDOM[3'h2][28:18];
        sourceIdReg = {_RANDOM[3'h2][31:29], _RANDOM[3'h3][7:0]};
        setReg_r = _RANDOM[3'h3][18:8];
        setReg = _RANDOM[3'h3][29:19];
        replacerInfoReg_r_channel = {_RANDOM[3'h3][31:30], _RANDOM[3'h4][0]};
        replacerInfoReg_r_opcode = _RANDOM[3'h4][3:1];
        replacerInfoReg_channel = _RANDOM[3'h4][10:8];
        replacerInfoReg_opcode = _RANDOM[3'h4][13:11];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        reqValidReg = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SubDirectory clientDir (
    .clock                     (clock),
    .reset                     (reset),
    .io_read_ready             (_clientDir_io_read_ready),
    .io_read_valid             (io_read_valid),
    .io_read_bits_tag          ({io_read_bits_tag, io_read_bits_set[10:8]}),
    .io_read_bits_set          (io_read_bits_set[7:0]),
    .io_resp_bits_hit          (_clientDir_io_resp_bits_hit),
    .io_resp_bits_way          (io_result_bits_clients_way),
    .io_resp_bits_tag          (io_result_bits_clients_tag),
    .io_resp_bits_dir_0_state  (_clientDir_io_resp_bits_dir_0_state),
    .io_resp_bits_error        (_clientDir_io_resp_bits_error),
    .io_tag_w_valid            (io_clientTagWreq_valid),
    .io_tag_w_bits_tag         (io_clientTagWreq_bits_tag),
    .io_tag_w_bits_set         (io_clientTagWreq_bits_set),
    .io_tag_w_bits_way         (io_clientTagWreq_bits_way),
    .io_dir_w_valid            (io_clientDirWReq_valid),
    .io_dir_w_bits_set         (io_clientDirWReq_bits_set),
    .io_dir_w_bits_way         (io_clientDirWReq_bits_way),
    .io_dir_w_bits_dir_0_state (io_clientDirWReq_bits_data_0_state)
  );
  Directory_Anon selfDir (
    .clock                             (clock),
    .reset                             (reset),
    .io_read_ready                     (_selfDir_io_read_ready),
    .io_read_valid                     (io_read_valid),
    .io_read_bits_tag                  (io_read_bits_tag),
    .io_read_bits_set                  (io_read_bits_set),
    .io_read_bits_replacerInfo_channel (io_read_bits_replacerInfo_channel),
    .io_read_bits_replacerInfo_opcode  (io_read_bits_replacerInfo_opcode),
    .io_resp_valid                     (io_result_valid),
    .io_resp_bits_hit                  (io_result_bits_self_hit),
    .io_resp_bits_way                  (io_result_bits_self_way),
    .io_resp_bits_tag                  (io_result_bits_self_tag),
    .io_resp_bits_dir_dirty            (io_result_bits_self_dirty),
    .io_resp_bits_dir_state            (io_result_bits_self_state),
    .io_resp_bits_dir_clientStates_0   (io_result_bits_self_clientStates_0),
    .io_resp_bits_dir_prefetch         (io_result_bits_self_prefetch),
    .io_resp_bits_error                (io_result_bits_self_error),
    .io_tag_w_valid                    (io_tagWReq_valid),
    .io_tag_w_bits_tag                 (io_tagWReq_bits_tag),
    .io_tag_w_bits_set                 (io_tagWReq_bits_set),
    .io_tag_w_bits_way                 (io_tagWReq_bits_way),
    .io_dir_w_valid                    (io_dirWReq_valid),
    .io_dir_w_bits_set                 (io_dirWReq_bits_set),
    .io_dir_w_bits_way                 (io_dirWReq_bits_way),
    .io_dir_w_bits_dir_dirty           (io_dirWReq_bits_data_dirty),
    .io_dir_w_bits_dir_state           (io_dirWReq_bits_data_state),
    .io_dir_w_bits_dir_clientStates_0  (io_dirWReq_bits_data_clientStates_0),
    .io_dir_w_bits_dir_prefetch        (io_dirWReq_bits_data_prefetch)
  );
  assign io_read_ready = &_io_read_ready_T;
  assign io_result_bits_idOH = reqIdOHReg;
  assign io_result_bits_clients_states_0_state = _clientDir_io_resp_bits_dir_0_state;
  assign io_result_bits_clients_states_0_hit = io_result_bits_clients_states_0_hit_0;
  assign io_result_bits_clients_tag_match = _clientDir_io_resp_bits_hit;
  assign io_result_bits_clients_error =
    io_result_bits_clients_states_0_hit_0 & _clientDir_io_resp_bits_error;
  assign io_result_bits_sourceId = sourceIdReg;
  assign io_result_bits_set = setReg;
  assign io_result_bits_replacerInfo_channel = replacerInfoReg_channel;
  assign io_result_bits_replacerInfo_opcode = replacerInfoReg_opcode;
endmodule

