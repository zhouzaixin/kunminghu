// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MuxBundle(
  input  [3:0]  io_sel,
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [47:0] io_in_0_bits_acquire_address,
  input  [7:0]  io_in_0_bits_vSetIdx,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [47:0] io_in_1_bits_acquire_address,
  input  [7:0]  io_in_1_bits_vSetIdx,
  output        io_in_2_ready,
  input         io_in_2_valid,
  input  [47:0] io_in_2_bits_acquire_address,
  input  [7:0]  io_in_2_bits_vSetIdx,
  output        io_in_3_ready,
  input         io_in_3_valid,
  input  [47:0] io_in_3_bits_acquire_address,
  input  [7:0]  io_in_3_bits_vSetIdx,
  output        io_in_4_ready,
  input         io_in_4_valid,
  input  [47:0] io_in_4_bits_acquire_address,
  input  [7:0]  io_in_4_bits_vSetIdx,
  output        io_in_5_ready,
  input         io_in_5_valid,
  input  [47:0] io_in_5_bits_acquire_address,
  input  [7:0]  io_in_5_bits_vSetIdx,
  output        io_in_6_ready,
  input         io_in_6_valid,
  input  [47:0] io_in_6_bits_acquire_address,
  input  [7:0]  io_in_6_bits_vSetIdx,
  output        io_in_7_ready,
  input         io_in_7_valid,
  input  [47:0] io_in_7_bits_acquire_address,
  input  [7:0]  io_in_7_bits_vSetIdx,
  output        io_in_8_ready,
  input         io_in_8_valid,
  input  [47:0] io_in_8_bits_acquire_address,
  input  [7:0]  io_in_8_bits_vSetIdx,
  output        io_in_9_ready,
  input         io_in_9_valid,
  input  [47:0] io_in_9_bits_acquire_address,
  input  [7:0]  io_in_9_bits_vSetIdx,
  input         io_out_ready,
  output        io_out_valid,
  output [3:0]  io_out_bits_acquire_source,
  output [47:0] io_out_bits_acquire_address,
  output [7:0]  io_out_bits_vSetIdx
);

  wire _io_in_1_ready_T = io_sel == 4'h1;
  wire _io_in_2_ready_T = io_sel == 4'h2;
  wire _io_in_3_ready_T = io_sel == 4'h3;
  wire _io_in_4_ready_T = io_sel == 4'h4;
  wire _io_in_5_ready_T = io_sel == 4'h5;
  wire _io_in_6_ready_T = io_sel == 4'h6;
  wire _io_in_7_ready_T = io_sel == 4'h7;
  wire _io_in_8_ready_T = io_sel == 4'h8;
  wire _io_in_9_ready_T = io_sel == 4'h9;
  assign io_in_0_ready = io_sel == 4'h0 & io_out_ready;
  assign io_in_1_ready = _io_in_1_ready_T & io_out_ready;
  assign io_in_2_ready = _io_in_2_ready_T & io_out_ready;
  assign io_in_3_ready = _io_in_3_ready_T & io_out_ready;
  assign io_in_4_ready = _io_in_4_ready_T & io_out_ready;
  assign io_in_5_ready = _io_in_5_ready_T & io_out_ready;
  assign io_in_6_ready = _io_in_6_ready_T & io_out_ready;
  assign io_in_7_ready = _io_in_7_ready_T & io_out_ready;
  assign io_in_8_ready = _io_in_8_ready_T & io_out_ready;
  assign io_in_9_ready = _io_in_9_ready_T & io_out_ready;
  assign io_out_valid =
    _io_in_9_ready_T
      ? io_in_9_valid
      : _io_in_8_ready_T
          ? io_in_8_valid
          : _io_in_7_ready_T
              ? io_in_7_valid
              : _io_in_6_ready_T
                  ? io_in_6_valid
                  : _io_in_5_ready_T
                      ? io_in_5_valid
                      : _io_in_4_ready_T
                          ? io_in_4_valid
                          : _io_in_3_ready_T
                              ? io_in_3_valid
                              : _io_in_2_ready_T
                                  ? io_in_2_valid
                                  : _io_in_1_ready_T ? io_in_1_valid : io_in_0_valid;
  assign io_out_bits_acquire_source =
    _io_in_9_ready_T
      ? 4'hD
      : _io_in_8_ready_T
          ? 4'hC
          : _io_in_7_ready_T
              ? 4'hB
              : _io_in_6_ready_T
                  ? 4'hA
                  : _io_in_5_ready_T
                      ? 4'h9
                      : _io_in_4_ready_T
                          ? 4'h8
                          : _io_in_3_ready_T
                              ? 4'h7
                              : _io_in_2_ready_T ? 4'h6 : {3'h2, _io_in_1_ready_T};
  assign io_out_bits_acquire_address =
    _io_in_9_ready_T
      ? io_in_9_bits_acquire_address
      : _io_in_8_ready_T
          ? io_in_8_bits_acquire_address
          : _io_in_7_ready_T
              ? io_in_7_bits_acquire_address
              : _io_in_6_ready_T
                  ? io_in_6_bits_acquire_address
                  : _io_in_5_ready_T
                      ? io_in_5_bits_acquire_address
                      : _io_in_4_ready_T
                          ? io_in_4_bits_acquire_address
                          : _io_in_3_ready_T
                              ? io_in_3_bits_acquire_address
                              : _io_in_2_ready_T
                                  ? io_in_2_bits_acquire_address
                                  : _io_in_1_ready_T
                                      ? io_in_1_bits_acquire_address
                                      : io_in_0_bits_acquire_address;
  assign io_out_bits_vSetIdx =
    _io_in_9_ready_T
      ? io_in_9_bits_vSetIdx
      : _io_in_8_ready_T
          ? io_in_8_bits_vSetIdx
          : _io_in_7_ready_T
              ? io_in_7_bits_vSetIdx
              : _io_in_6_ready_T
                  ? io_in_6_bits_vSetIdx
                  : _io_in_5_ready_T
                      ? io_in_5_bits_vSetIdx
                      : _io_in_4_ready_T
                          ? io_in_4_bits_vSetIdx
                          : _io_in_3_ready_T
                              ? io_in_3_bits_vSetIdx
                              : _io_in_2_ready_T
                                  ? io_in_2_bits_vSetIdx
                                  : _io_in_1_ready_T
                                      ? io_in_1_bits_vSetIdx
                                      : io_in_0_bits_vSetIdx;
endmodule

