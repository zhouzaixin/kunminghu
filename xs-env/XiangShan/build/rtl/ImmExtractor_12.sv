// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ImmExtractor_12(
  input  [31:0]  io_in_imm,
  input  [3:0]   io_in_immType,
  output [127:0] io_out_imm
);

  assign io_out_imm =
    {64'h0,
     (&io_in_immType)
       ? {58'h0, io_in_imm[5:0]}
       : io_in_immType == 4'hD
           ? {{49{io_in_imm[14]}}, io_in_imm[14:0]}
           : io_in_immType == 4'hC
               ? {{53{io_in_imm[10]}}, io_in_imm[10:0]}
               : io_in_immType == 4'hA
                   ? {59'h0, io_in_imm[4:0]}
                   : io_in_immType == 4'h9
                       ? {{59{io_in_imm[4]}}, io_in_imm[4:0]}
                       : io_in_immType == 4'h4
                           ? {{52{io_in_imm[11]}}, io_in_imm[11:0]}
                           : io_in_immType == 4'h3
                               ? {{43{io_in_imm[19]}}, io_in_imm[19:0], 1'h0}
                               : io_in_immType == 4'h2
                                   ? {{32{io_in_imm[19]}}, io_in_imm[19:0], 12'h0}
                                   : io_in_immType == 4'h1
                                       ? {{51{io_in_imm[11]}}, io_in_imm[11:0], 1'h0}
                                       : 64'h0};
endmodule

