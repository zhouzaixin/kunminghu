// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MSHRSelector_4(
  input         io_idle_0,
  input         io_idle_1,
  input         io_idle_2,
  input         io_idle_3,
  input         io_idle_4,
  input         io_idle_5,
  input         io_idle_6,
  input         io_idle_7,
  input         io_idle_8,
  input         io_idle_9,
  input         io_idle_10,
  input         io_idle_11,
  input         io_idle_12,
  output [13:0] io_out_bits
);

  wire _io_out_bits_T_4 = io_idle_3 | io_idle_4;
  wire _io_out_bits_T_2 = io_idle_0 | io_idle_1 | io_idle_2;
  assign io_out_bits =
    _io_out_bits_T_2 | _io_out_bits_T_4 | io_idle_5 | io_idle_6
      ? {7'h0,
         _io_out_bits_T_2
           ? {4'h0, io_idle_0 ? 3'h1 : io_idle_1 ? 3'h2 : 3'h4}
           : _io_out_bits_T_4
               ? {2'h0, io_idle_3 ? 5'h8 : 5'h10}
               : io_idle_5 ? 7'h20 : 7'h40}
      : io_idle_7 | io_idle_8 | io_idle_9
          ? {4'h0, io_idle_7 ? 10'h80 : io_idle_8 ? 10'h100 : 10'h200}
          : io_idle_10 | io_idle_11
              ? {2'h0, io_idle_10 ? 12'h400 : 12'h800}
              : io_idle_12 ? 14'h1000 : 14'h2000;
endmodule

