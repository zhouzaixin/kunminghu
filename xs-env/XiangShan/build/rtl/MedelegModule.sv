// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MedelegModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_EX_IAM,
  output        regOut_EX_IAF,
  output        regOut_EX_II,
  output        regOut_EX_BP,
  output        regOut_EX_LAM,
  output        regOut_EX_LAF,
  output        regOut_EX_SAM,
  output        regOut_EX_SAF,
  output        regOut_EX_UCALL,
  output        regOut_EX_HSCALL,
  output        regOut_EX_VSCALL,
  output        regOut_EX_IPF,
  output        regOut_EX_LPF,
  output        regOut_EX_SPF,
  output        regOut_EX_SWC,
  output        regOut_EX_HWE,
  output        regOut_EX_IGPF,
  output        regOut_EX_LGPF,
  output        regOut_EX_VI,
  output        regOut_EX_SGPF
);

  reg reg_EX_IAM;
  reg reg_EX_IAF;
  reg reg_EX_II;
  reg reg_EX_BP;
  reg reg_EX_LAM;
  reg reg_EX_LAF;
  reg reg_EX_SAM;
  reg reg_EX_SAF;
  reg reg_EX_UCALL;
  reg reg_EX_HSCALL;
  reg reg_EX_VSCALL;
  reg reg_EX_IPF;
  reg reg_EX_LPF;
  reg reg_EX_SPF;
  reg reg_EX_SWC;
  reg reg_EX_HWE;
  reg reg_EX_IGPF;
  reg reg_EX_LGPF;
  reg reg_EX_VI;
  reg reg_EX_SGPF;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_EX_IAM <= 1'h0;
      reg_EX_IAF <= 1'h0;
      reg_EX_II <= 1'h0;
      reg_EX_BP <= 1'h0;
      reg_EX_LAM <= 1'h0;
      reg_EX_LAF <= 1'h0;
      reg_EX_SAM <= 1'h0;
      reg_EX_SAF <= 1'h0;
      reg_EX_UCALL <= 1'h0;
      reg_EX_HSCALL <= 1'h0;
      reg_EX_VSCALL <= 1'h0;
      reg_EX_IPF <= 1'h0;
      reg_EX_LPF <= 1'h0;
      reg_EX_SPF <= 1'h0;
      reg_EX_SWC <= 1'h0;
      reg_EX_HWE <= 1'h0;
      reg_EX_IGPF <= 1'h0;
      reg_EX_LGPF <= 1'h0;
      reg_EX_VI <= 1'h0;
      reg_EX_SGPF <= 1'h0;
    end
    else if (w_wen) begin
      reg_EX_IAM <= w_wdata[0];
      reg_EX_IAF <= w_wdata[1];
      reg_EX_II <= w_wdata[2];
      reg_EX_BP <= w_wdata[3];
      reg_EX_LAM <= w_wdata[4];
      reg_EX_LAF <= w_wdata[5];
      reg_EX_SAM <= w_wdata[6];
      reg_EX_SAF <= w_wdata[7];
      reg_EX_UCALL <= w_wdata[8];
      reg_EX_HSCALL <= w_wdata[9];
      reg_EX_VSCALL <= w_wdata[10];
      reg_EX_IPF <= w_wdata[12];
      reg_EX_LPF <= w_wdata[13];
      reg_EX_SPF <= w_wdata[15];
      reg_EX_SWC <= w_wdata[18];
      reg_EX_HWE <= w_wdata[19];
      reg_EX_IGPF <= w_wdata[20];
      reg_EX_LGPF <= w_wdata[21];
      reg_EX_VI <= w_wdata[22];
      reg_EX_SGPF <= w_wdata[23];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_EX_IAM = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_EX_IAF = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_EX_II = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_EX_BP = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_EX_LAM = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_EX_LAF = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_EX_SAM = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_EX_SAF = _RANDOM[/*Zero width*/ 1'b0][7];
        reg_EX_UCALL = _RANDOM[/*Zero width*/ 1'b0][8];
        reg_EX_HSCALL = _RANDOM[/*Zero width*/ 1'b0][9];
        reg_EX_VSCALL = _RANDOM[/*Zero width*/ 1'b0][10];
        reg_EX_IPF = _RANDOM[/*Zero width*/ 1'b0][12];
        reg_EX_LPF = _RANDOM[/*Zero width*/ 1'b0][13];
        reg_EX_SPF = _RANDOM[/*Zero width*/ 1'b0][14];
        reg_EX_SWC = _RANDOM[/*Zero width*/ 1'b0][16];
        reg_EX_HWE = _RANDOM[/*Zero width*/ 1'b0][17];
        reg_EX_IGPF = _RANDOM[/*Zero width*/ 1'b0][18];
        reg_EX_LGPF = _RANDOM[/*Zero width*/ 1'b0][19];
        reg_EX_VI = _RANDOM[/*Zero width*/ 1'b0][20];
        reg_EX_SGPF = _RANDOM[/*Zero width*/ 1'b0][21];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_EX_IAM = 1'h0;
        reg_EX_IAF = 1'h0;
        reg_EX_II = 1'h0;
        reg_EX_BP = 1'h0;
        reg_EX_LAM = 1'h0;
        reg_EX_LAF = 1'h0;
        reg_EX_SAM = 1'h0;
        reg_EX_SAF = 1'h0;
        reg_EX_UCALL = 1'h0;
        reg_EX_HSCALL = 1'h0;
        reg_EX_VSCALL = 1'h0;
        reg_EX_IPF = 1'h0;
        reg_EX_LPF = 1'h0;
        reg_EX_SPF = 1'h0;
        reg_EX_SWC = 1'h0;
        reg_EX_HWE = 1'h0;
        reg_EX_IGPF = 1'h0;
        reg_EX_LGPF = 1'h0;
        reg_EX_VI = 1'h0;
        reg_EX_SGPF = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {40'h0,
     reg_EX_SGPF,
     reg_EX_VI,
     reg_EX_LGPF,
     reg_EX_IGPF,
     reg_EX_HWE,
     reg_EX_SWC,
     2'h0,
     reg_EX_SPF,
     1'h0,
     reg_EX_LPF,
     reg_EX_IPF,
     1'h0,
     reg_EX_VSCALL,
     reg_EX_HSCALL,
     reg_EX_UCALL,
     reg_EX_SAF,
     reg_EX_SAM,
     reg_EX_LAF,
     reg_EX_LAM,
     reg_EX_BP,
     reg_EX_II,
     reg_EX_IAF,
     reg_EX_IAM};
  assign regOut_EX_IAM = reg_EX_IAM;
  assign regOut_EX_IAF = reg_EX_IAF;
  assign regOut_EX_II = reg_EX_II;
  assign regOut_EX_BP = reg_EX_BP;
  assign regOut_EX_LAM = reg_EX_LAM;
  assign regOut_EX_LAF = reg_EX_LAF;
  assign regOut_EX_SAM = reg_EX_SAM;
  assign regOut_EX_SAF = reg_EX_SAF;
  assign regOut_EX_UCALL = reg_EX_UCALL;
  assign regOut_EX_HSCALL = reg_EX_HSCALL;
  assign regOut_EX_VSCALL = reg_EX_VSCALL;
  assign regOut_EX_IPF = reg_EX_IPF;
  assign regOut_EX_LPF = reg_EX_LPF;
  assign regOut_EX_SPF = reg_EX_SPF;
  assign regOut_EX_SWC = reg_EX_SWC;
  assign regOut_EX_HWE = reg_EX_HWE;
  assign regOut_EX_IGPF = reg_EX_IGPF;
  assign regOut_EX_LGPF = reg_EX_LGPF;
  assign regOut_EX_VI = reg_EX_VI;
  assign regOut_EX_SGPF = reg_EX_SGPF;
endmodule

