// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CountModule(
  input         clock,
  input  [63:0] io_src,
  input  [8:0]  io_func,
  input         io_regEnable,
  output [63:0] io_out
);

  reg  [8:0]  funcReg;
  reg  [3:0]  c2_0;
  reg  [3:0]  c2_1;
  reg  [3:0]  c2_2;
  reg  [3:0]  c2_3;
  reg  [3:0]  c2_4;
  reg  [3:0]  c2_5;
  reg  [3:0]  c2_6;
  reg  [3:0]  c2_7;
  reg  [4:0]  cpopTmp_0;
  reg  [4:0]  cpopTmp_1;
  reg  [4:0]  cpopTmp_2;
  reg  [4:0]  cpopTmp_3;
  wire [4:0]  c3_0 = c2_1[3] ? {c2_1[3] & c2_0[3], ~(c2_0[3]), c2_0[2:0]} : {1'h0, c2_1};
  wire [4:0]  c3_1 = c2_3[3] ? {c2_3[3] & c2_2[3], ~(c2_2[3]), c2_2[2:0]} : {1'h0, c2_3};
  wire [4:0]  c3_2 = c2_5[3] ? {c2_5[3] & c2_4[3], ~(c2_4[3]), c2_4[2:0]} : {1'h0, c2_5};
  wire [4:0]  c3_3 = c2_7[3] ? {c2_7[3] & c2_6[3], ~(c2_6[3]), c2_6[2:0]} : {1'h0, c2_7};
  wire [5:0]  c4_0 = c3_1[4] ? {c3_1[4] & c3_0[4], ~(c3_0[4]), c3_0[3:0]} : {1'h0, c3_1};
  wire [5:0]  c4_1 = c3_3[4] ? {c3_3[4] & c3_2[4], ~(c3_2[4]), c3_2[3:0]} : {1'h0, c3_3};
  wire [6:0]  _GEN = {1'h0, 6'({1'h0, cpopTmp_0} + {1'h0, cpopTmp_1})};
  wire [15:0] _GEN_0 =
    {{io_src[23:16], io_src[31:28]} & 12'hF0F, 4'h0} | {io_src[31:24], io_src[39:32]}
    & 16'hF0F;
  wire [37:0] _GEN_1 =
    {io_src[11:8],
     io_src[15:12],
     io_src[19:16],
     _GEN_0,
     io_src[39:36],
     io_src[43:40],
     io_src[47:46]} & 38'h3333333333;
  wire [7:0]  _GEN_2 = _GEN_1[37:30] | {io_src[15:12], io_src[19:16]} & 8'h33;
  wire [15:0] _GEN_3 = _GEN_1[29:14] | _GEN_0 & 16'h3333;
  wire [1:0]  _GEN_4 = _GEN_1[11:10] | io_src[37:36];
  wire [7:0]  _GEN_5 = {_GEN_1[5:0], 2'h0} | {io_src[47:44], io_src[51:48]} & 8'h33;
  wire [50:0] _GEN_6 =
    {io_src[5:4],
     io_src[7:6],
     io_src[9:8],
     _GEN_2,
     _GEN_3,
     _GEN_0[3:2],
     _GEN_4,
     io_src[39:38],
     io_src[41:40],
     _GEN_5,
     io_src[51:50],
     io_src[53:52],
     io_src[55]} & 51'h5555555555555;
  wire [63:0] countSrc =
    io_func[1]
      ? {io_src[0],
         io_src[1],
         io_src[2],
         io_src[3],
         io_src[4],
         _GEN_6[50:47] | {io_src[7:6], io_src[9:8]} & 4'h5,
         _GEN_6[46:39] | _GEN_2 & 8'h55,
         _GEN_6[38:23] | _GEN_3 & 16'h5555,
         _GEN_3[1],
         _GEN_6[21] | _GEN_0[2],
         {_GEN_0[3], 1'h0} | _GEN_4 & 2'h1,
         _GEN_6[18:15] | {io_src[39:38], io_src[41:40]} & 4'h5,
         _GEN_6[14:7] | _GEN_5 & 8'h55,
         _GEN_5[1],
         _GEN_6[5] | io_src[50],
         io_src[51],
         io_src[52],
         {_GEN_6[2:0], 1'h0} | {io_src[55:54], io_src[57:56]} & 4'h5,
         io_src[57],
         io_src[58],
         io_src[59],
         io_src[60],
         io_src[61],
         io_src[62],
         io_src[63]}
      : io_src;
  wire [1:0]  c0_0 = countSrc[1:0] == 2'h1 ? 2'h1 : {countSrc[1:0] == 2'h0, 1'h0};
  wire [1:0]  c0_1 = countSrc[3:2] == 2'h1 ? 2'h1 : {countSrc[3:2] == 2'h0, 1'h0};
  wire [1:0]  c0_2 = countSrc[5:4] == 2'h1 ? 2'h1 : {countSrc[5:4] == 2'h0, 1'h0};
  wire [1:0]  c0_3 = countSrc[7:6] == 2'h1 ? 2'h1 : {countSrc[7:6] == 2'h0, 1'h0};
  wire [1:0]  c0_4 = countSrc[9:8] == 2'h1 ? 2'h1 : {countSrc[9:8] == 2'h0, 1'h0};
  wire [1:0]  c0_5 = countSrc[11:10] == 2'h1 ? 2'h1 : {countSrc[11:10] == 2'h0, 1'h0};
  wire [1:0]  c0_6 = countSrc[13:12] == 2'h1 ? 2'h1 : {countSrc[13:12] == 2'h0, 1'h0};
  wire [1:0]  c0_7 = countSrc[15:14] == 2'h1 ? 2'h1 : {countSrc[15:14] == 2'h0, 1'h0};
  wire [1:0]  c0_8 = countSrc[17:16] == 2'h1 ? 2'h1 : {countSrc[17:16] == 2'h0, 1'h0};
  wire [1:0]  c0_9 = countSrc[19:18] == 2'h1 ? 2'h1 : {countSrc[19:18] == 2'h0, 1'h0};
  wire [1:0]  c0_10 = countSrc[21:20] == 2'h1 ? 2'h1 : {countSrc[21:20] == 2'h0, 1'h0};
  wire [1:0]  c0_11 = countSrc[23:22] == 2'h1 ? 2'h1 : {countSrc[23:22] == 2'h0, 1'h0};
  wire [1:0]  c0_12 = countSrc[25:24] == 2'h1 ? 2'h1 : {countSrc[25:24] == 2'h0, 1'h0};
  wire [1:0]  c0_13 = countSrc[27:26] == 2'h1 ? 2'h1 : {countSrc[27:26] == 2'h0, 1'h0};
  wire [1:0]  c0_14 = countSrc[29:28] == 2'h1 ? 2'h1 : {countSrc[29:28] == 2'h0, 1'h0};
  wire [1:0]  c0_15 = countSrc[31:30] == 2'h1 ? 2'h1 : {countSrc[31:30] == 2'h0, 1'h0};
  wire [1:0]  c0_16 = countSrc[33:32] == 2'h1 ? 2'h1 : {countSrc[33:32] == 2'h0, 1'h0};
  wire [1:0]  c0_17 = countSrc[35:34] == 2'h1 ? 2'h1 : {countSrc[35:34] == 2'h0, 1'h0};
  wire [1:0]  c0_18 = countSrc[37:36] == 2'h1 ? 2'h1 : {countSrc[37:36] == 2'h0, 1'h0};
  wire [1:0]  c0_19 = countSrc[39:38] == 2'h1 ? 2'h1 : {countSrc[39:38] == 2'h0, 1'h0};
  wire [1:0]  c0_20 = countSrc[41:40] == 2'h1 ? 2'h1 : {countSrc[41:40] == 2'h0, 1'h0};
  wire [1:0]  c0_21 = countSrc[43:42] == 2'h1 ? 2'h1 : {countSrc[43:42] == 2'h0, 1'h0};
  wire [1:0]  c0_22 = countSrc[45:44] == 2'h1 ? 2'h1 : {countSrc[45:44] == 2'h0, 1'h0};
  wire [1:0]  c0_23 = countSrc[47:46] == 2'h1 ? 2'h1 : {countSrc[47:46] == 2'h0, 1'h0};
  wire [1:0]  c0_24 = countSrc[49:48] == 2'h1 ? 2'h1 : {countSrc[49:48] == 2'h0, 1'h0};
  wire [1:0]  c0_25 = countSrc[51:50] == 2'h1 ? 2'h1 : {countSrc[51:50] == 2'h0, 1'h0};
  wire [1:0]  c0_26 = countSrc[53:52] == 2'h1 ? 2'h1 : {countSrc[53:52] == 2'h0, 1'h0};
  wire [1:0]  c0_27 = countSrc[55:54] == 2'h1 ? 2'h1 : {countSrc[55:54] == 2'h0, 1'h0};
  wire [1:0]  c0_28 = countSrc[57:56] == 2'h1 ? 2'h1 : {countSrc[57:56] == 2'h0, 1'h0};
  wire [1:0]  c0_29 = countSrc[59:58] == 2'h1 ? 2'h1 : {countSrc[59:58] == 2'h0, 1'h0};
  wire [1:0]  c0_30 = countSrc[61:60] == 2'h1 ? 2'h1 : {countSrc[61:60] == 2'h0, 1'h0};
  wire [1:0]  c0_31 = countSrc[63:62] == 2'h1 ? 2'h1 : {countSrc[63:62] == 2'h0, 1'h0};
  wire [2:0]  c1_0 = c0_1[1] ? {c0_1[1] & c0_0[1], ~(c0_0[1]), c0_0[0]} : {1'h0, c0_1};
  wire [2:0]  c1_1 = c0_3[1] ? {c0_3[1] & c0_2[1], ~(c0_2[1]), c0_2[0]} : {1'h0, c0_3};
  wire [2:0]  c1_2 = c0_5[1] ? {c0_5[1] & c0_4[1], ~(c0_4[1]), c0_4[0]} : {1'h0, c0_5};
  wire [2:0]  c1_3 = c0_7[1] ? {c0_7[1] & c0_6[1], ~(c0_6[1]), c0_6[0]} : {1'h0, c0_7};
  wire [2:0]  c1_4 = c0_9[1] ? {c0_9[1] & c0_8[1], ~(c0_8[1]), c0_8[0]} : {1'h0, c0_9};
  wire [2:0]  c1_5 =
    c0_11[1] ? {c0_11[1] & c0_10[1], ~(c0_10[1]), c0_10[0]} : {1'h0, c0_11};
  wire [2:0]  c1_6 =
    c0_13[1] ? {c0_13[1] & c0_12[1], ~(c0_12[1]), c0_12[0]} : {1'h0, c0_13};
  wire [2:0]  c1_7 =
    c0_15[1] ? {c0_15[1] & c0_14[1], ~(c0_14[1]), c0_14[0]} : {1'h0, c0_15};
  wire [2:0]  c1_8 =
    c0_17[1] ? {c0_17[1] & c0_16[1], ~(c0_16[1]), c0_16[0]} : {1'h0, c0_17};
  wire [2:0]  c1_9 =
    c0_19[1] ? {c0_19[1] & c0_18[1], ~(c0_18[1]), c0_18[0]} : {1'h0, c0_19};
  wire [2:0]  c1_10 =
    c0_21[1] ? {c0_21[1] & c0_20[1], ~(c0_20[1]), c0_20[0]} : {1'h0, c0_21};
  wire [2:0]  c1_11 =
    c0_23[1] ? {c0_23[1] & c0_22[1], ~(c0_22[1]), c0_22[0]} : {1'h0, c0_23};
  wire [2:0]  c1_12 =
    c0_25[1] ? {c0_25[1] & c0_24[1], ~(c0_24[1]), c0_24[0]} : {1'h0, c0_25};
  wire [2:0]  c1_13 =
    c0_27[1] ? {c0_27[1] & c0_26[1], ~(c0_26[1]), c0_26[0]} : {1'h0, c0_27};
  wire [2:0]  c1_14 =
    c0_29[1] ? {c0_29[1] & c0_28[1], ~(c0_28[1]), c0_28[0]} : {1'h0, c0_29};
  wire [2:0]  c1_15 =
    c0_31[1] ? {c0_31[1] & c0_30[1], ~(c0_30[1]), c0_30[0]} : {1'h0, c0_31};
  always @(posedge clock) begin
    if (io_regEnable) begin
      funcReg <= io_func;
      c2_0 <= c1_1[2] ? {c1_1[2] & c1_0[2], ~(c1_0[2]), c1_0[1:0]} : {1'h0, c1_1};
      c2_1 <= c1_3[2] ? {c1_3[2] & c1_2[2], ~(c1_2[2]), c1_2[1:0]} : {1'h0, c1_3};
      c2_2 <= c1_5[2] ? {c1_5[2] & c1_4[2], ~(c1_4[2]), c1_4[1:0]} : {1'h0, c1_5};
      c2_3 <= c1_7[2] ? {c1_7[2] & c1_6[2], ~(c1_6[2]), c1_6[1:0]} : {1'h0, c1_7};
      c2_4 <= c1_9[2] ? {c1_9[2] & c1_8[2], ~(c1_8[2]), c1_8[1:0]} : {1'h0, c1_9};
      c2_5 <= c1_11[2] ? {c1_11[2] & c1_10[2], ~(c1_10[2]), c1_10[1:0]} : {1'h0, c1_11};
      c2_6 <= c1_13[2] ? {c1_13[2] & c1_12[2], ~(c1_12[2]), c1_12[1:0]} : {1'h0, c1_13};
      c2_7 <= c1_15[2] ? {c1_15[2] & c1_14[2], ~(c1_14[2]), c1_14[1:0]} : {1'h0, c1_15};
      cpopTmp_0 <=
        5'({1'h0,
            4'({1'h0,
                3'({1'h0, 2'({1'h0, io_src[0]} + {1'h0, io_src[1]})}
                   + {1'h0, 2'({1'h0, io_src[2]} + {1'h0, io_src[3]})})}
               + {1'h0,
                  3'({1'h0, 2'({1'h0, io_src[4]} + {1'h0, io_src[5]})}
                     + {1'h0, 2'({1'h0, io_src[6]} + {1'h0, io_src[7]})})})}
           + {1'h0,
              4'({1'h0,
                  3'({1'h0, 2'({1'h0, io_src[8]} + {1'h0, io_src[9]})}
                     + {1'h0, 2'({1'h0, io_src[10]} + {1'h0, io_src[11]})})}
                 + {1'h0,
                    3'({1'h0, 2'({1'h0, io_src[12]} + {1'h0, io_src[13]})}
                       + {1'h0, 2'({1'h0, io_src[14]} + {1'h0, io_src[15]})})})});
      cpopTmp_1 <=
        5'({1'h0,
            4'({1'h0,
                3'({1'h0, 2'({1'h0, io_src[16]} + {1'h0, io_src[17]})}
                   + {1'h0, 2'({1'h0, io_src[18]} + {1'h0, io_src[19]})})}
               + {1'h0,
                  3'({1'h0, 2'({1'h0, io_src[20]} + {1'h0, io_src[21]})}
                     + {1'h0, 2'({1'h0, io_src[22]} + {1'h0, io_src[23]})})})}
           + {1'h0,
              4'({1'h0,
                  3'({1'h0, 2'({1'h0, io_src[24]} + {1'h0, io_src[25]})}
                     + {1'h0, 2'({1'h0, io_src[26]} + {1'h0, io_src[27]})})}
                 + {1'h0,
                    3'({1'h0, 2'({1'h0, io_src[28]} + {1'h0, io_src[29]})}
                       + {1'h0, 2'({1'h0, io_src[30]} + {1'h0, io_src[31]})})})});
      cpopTmp_2 <=
        5'({1'h0,
            4'({1'h0,
                3'({1'h0, 2'({1'h0, io_src[32]} + {1'h0, io_src[33]})}
                   + {1'h0, 2'({1'h0, io_src[34]} + {1'h0, io_src[35]})})}
               + {1'h0,
                  3'({1'h0, 2'({1'h0, io_src[36]} + {1'h0, io_src[37]})}
                     + {1'h0, 2'({1'h0, io_src[38]} + {1'h0, io_src[39]})})})}
           + {1'h0,
              4'({1'h0,
                  3'({1'h0, 2'({1'h0, io_src[40]} + {1'h0, io_src[41]})}
                     + {1'h0, 2'({1'h0, io_src[42]} + {1'h0, io_src[43]})})}
                 + {1'h0,
                    3'({1'h0, 2'({1'h0, io_src[44]} + {1'h0, io_src[45]})}
                       + {1'h0, 2'({1'h0, io_src[46]} + {1'h0, io_src[47]})})})});
      cpopTmp_3 <=
        5'({1'h0,
            4'({1'h0,
                3'({1'h0, 2'({1'h0, io_src[48]} + {1'h0, io_src[49]})}
                   + {1'h0, 2'({1'h0, io_src[50]} + {1'h0, io_src[51]})})}
               + {1'h0,
                  3'({1'h0, 2'({1'h0, io_src[52]} + {1'h0, io_src[53]})}
                     + {1'h0, 2'({1'h0, io_src[54]} + {1'h0, io_src[55]})})})}
           + {1'h0,
              4'({1'h0,
                  3'({1'h0, 2'({1'h0, io_src[56]} + {1'h0, io_src[57]})}
                     + {1'h0, 2'({1'h0, io_src[58]} + {1'h0, io_src[59]})})}
                 + {1'h0,
                    3'({1'h0, 2'({1'h0, io_src[60]} + {1'h0, io_src[61]})}
                       + {1'h0, 2'({1'h0, io_src[62]} + {1'h0, io_src[63]})})})});
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        funcReg = _RANDOM[1'h0][8:0];
        c2_0 = _RANDOM[1'h0][12:9];
        c2_1 = _RANDOM[1'h0][16:13];
        c2_2 = _RANDOM[1'h0][20:17];
        c2_3 = _RANDOM[1'h0][24:21];
        c2_4 = _RANDOM[1'h0][28:25];
        c2_5 = {_RANDOM[1'h0][31:29], _RANDOM[1'h1][0]};
        c2_6 = _RANDOM[1'h1][4:1];
        c2_7 = _RANDOM[1'h1][8:5];
        cpopTmp_0 = _RANDOM[1'h1][13:9];
        cpopTmp_1 = _RANDOM[1'h1][18:14];
        cpopTmp_2 = _RANDOM[1'h1][23:19];
        cpopTmp_3 = _RANDOM[1'h1][28:24];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out =
    {57'h0,
     funcReg[2]
       ? (funcReg[0]
            ? _GEN
            : 7'(_GEN + {1'h0, 6'({1'h0, cpopTmp_2} + {1'h0, cpopTmp_3})}))
       : funcReg[0]
           ? {1'h0, funcReg[1] ? c4_1 : c4_0}
           : c4_1[5] ? {c4_1[5] & c4_0[5], ~(c4_0[5]), c4_0[4:0]} : {1'h0, c4_1}};
endmodule

