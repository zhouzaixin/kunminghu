// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SinkA(
  output        io_a_ready,
  input         io_a_valid,
  input  [3:0]  io_a_bits_opcode,
  input  [2:0]  io_a_bits_param,
  input  [2:0]  io_a_bits_size,
  input  [6:0]  io_a_bits_source,
  input  [47:0] io_a_bits_address,
  input  [3:0]  io_a_bits_user_reqSource,
  input  [1:0]  io_a_bits_user_alias,
  input  [43:0] io_a_bits_user_vaddr,
  input         io_a_bits_user_needHint,
  input         io_a_bits_echo_isKeyword,
  input         io_a_bits_corrupt,
  output        io_prefetchReq_ready,
  input         io_prefetchReq_valid,
  input  [34:0] io_prefetchReq_bits_tag,
  input  [6:0]  io_prefetchReq_bits_set,
  input  [43:0] io_prefetchReq_bits_vaddr,
  input         io_prefetchReq_bits_needT,
  input  [6:0]  io_prefetchReq_bits_source,
  input  [3:0]  io_prefetchReq_bits_pfSource,
  input         io_task_ready,
  output        io_task_valid,
  output [6:0]  io_task_bits_set,
  output [32:0] io_task_bits_tag,
  output [5:0]  io_task_bits_off,
  output [1:0]  io_task_bits_alias,
  output [43:0] io_task_bits_vaddr,
  output        io_task_bits_isKeyword,
  output [3:0]  io_task_bits_opcode,
  output [2:0]  io_task_bits_param,
  output [2:0]  io_task_bits_size,
  output [6:0]  io_task_bits_sourceId,
  output        io_task_bits_corrupt,
  output        io_task_bits_fromL2pft,
  output        io_task_bits_needHint,
  output [3:0]  io_task_bits_reqSource
);

  assign io_a_ready = io_task_ready;
  assign io_prefetchReq_ready = io_task_ready & ~io_a_valid;
  assign io_task_valid = io_a_valid | io_prefetchReq_valid;
  assign io_task_bits_set =
    io_a_valid
      ? io_a_bits_address[14:8]
      : {io_prefetchReq_bits_tag[1:0], io_prefetchReq_bits_set[6:2]};
  assign io_task_bits_tag =
    io_a_valid ? io_a_bits_address[47:15] : io_prefetchReq_bits_tag[34:2];
  assign io_task_bits_off = io_a_valid ? io_a_bits_address[5:0] : 6'h0;
  assign io_task_bits_alias = io_a_valid ? io_a_bits_user_alias : 2'h0;
  assign io_task_bits_vaddr =
    io_a_valid ? io_a_bits_user_vaddr : io_prefetchReq_bits_vaddr;
  assign io_task_bits_isKeyword = io_a_valid & io_a_bits_echo_isKeyword;
  assign io_task_bits_opcode = io_a_valid ? io_a_bits_opcode : 4'h5;
  assign io_task_bits_param =
    io_a_valid ? io_a_bits_param : {2'h0, io_prefetchReq_bits_needT};
  assign io_task_bits_size = io_a_valid ? io_a_bits_size : 3'h6;
  assign io_task_bits_sourceId =
    io_a_valid ? io_a_bits_source : io_prefetchReq_bits_source;
  assign io_task_bits_corrupt = io_a_valid & io_a_bits_corrupt;
  assign io_task_bits_fromL2pft =
    ~io_a_valid
    & (io_prefetchReq_bits_pfSource == 4'h8 | io_prefetchReq_bits_pfSource == 4'h9);
  assign io_task_bits_needHint = io_a_valid & io_a_bits_user_needHint;
  assign io_task_bits_reqSource =
    io_a_valid ? io_a_bits_user_reqSource : io_prefetchReq_bits_pfSource;
endmodule

