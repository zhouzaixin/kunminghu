// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Queue1_CtrlReq(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [7:0]  io_enq_bits_cmd,
  input  [63:0] io_enq_bits_data_0,
  input  [63:0] io_enq_bits_data_1,
  input  [63:0] io_enq_bits_data_2,
  input  [63:0] io_enq_bits_data_3,
  input  [63:0] io_enq_bits_data_4,
  input  [63:0] io_enq_bits_data_5,
  input  [63:0] io_enq_bits_data_6,
  input  [63:0] io_enq_bits_data_7,
  input  [63:0] io_enq_bits_set,
  input  [63:0] io_enq_bits_tag,
  input  [63:0] io_enq_bits_way,
  input  [63:0] io_enq_bits_dir,
  input         io_deq_ready,
  output        io_deq_valid,
  output [7:0]  io_deq_bits_cmd,
  output [63:0] io_deq_bits_data_0,
  output [63:0] io_deq_bits_data_1,
  output [63:0] io_deq_bits_data_2,
  output [63:0] io_deq_bits_data_3,
  output [63:0] io_deq_bits_data_4,
  output [63:0] io_deq_bits_data_5,
  output [63:0] io_deq_bits_data_6,
  output [63:0] io_deq_bits_data_7,
  output [63:0] io_deq_bits_set,
  output [63:0] io_deq_bits_tag,
  output [63:0] io_deq_bits_way,
  output [63:0] io_deq_bits_dir
);

  reg  [775:0] ram;
  reg          full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_dir,
         io_enq_bits_way,
         io_enq_bits_tag,
         io_enq_bits_set,
         io_enq_bits_data_7,
         io_enq_bits_data_6,
         io_enq_bits_data_5,
         io_enq_bits_data_4,
         io_enq_bits_data_3,
         io_enq_bits_data_2,
         io_enq_bits_data_1,
         io_enq_bits_data_0,
         io_enq_bits_cmd};
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      full <= 1'h0;
    else if (~(do_enq == (io_deq_ready & full)))
      full <= do_enq;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:24];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h19; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        ram =
          {_RANDOM[5'h0][31:1],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11],
           _RANDOM[5'h12],
           _RANDOM[5'h13],
           _RANDOM[5'h14],
           _RANDOM[5'h15],
           _RANDOM[5'h16],
           _RANDOM[5'h17],
           _RANDOM[5'h18][8:0]};
        full = _RANDOM[5'h0][0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        full = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;
  assign io_deq_valid = full;
  assign io_deq_bits_cmd = ram[7:0];
  assign io_deq_bits_data_0 = ram[71:8];
  assign io_deq_bits_data_1 = ram[135:72];
  assign io_deq_bits_data_2 = ram[199:136];
  assign io_deq_bits_data_3 = ram[263:200];
  assign io_deq_bits_data_4 = ram[327:264];
  assign io_deq_bits_data_5 = ram[391:328];
  assign io_deq_bits_data_6 = ram[455:392];
  assign io_deq_bits_data_7 = ram[519:456];
  assign io_deq_bits_set = ram[583:520];
  assign io_deq_bits_tag = ram[647:584];
  assign io_deq_bits_way = ram[711:648];
  assign io_deq_bits_dir = ram[775:712];
endmodule

