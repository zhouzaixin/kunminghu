// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ExeUnit_17(
  input          clock,
  input          reset,
  input          io_flush_valid,
  input          io_flush_bits_robIdx_flag,
  input  [7:0]   io_flush_bits_robIdx_value,
  input          io_flush_bits_level,
  output         io_in_ready,
  input          io_in_valid,
  input  [34:0]  io_in_bits_fuType,
  input  [8:0]   io_in_bits_fuOpType,
  input  [127:0] io_in_bits_src_0,
  input  [127:0] io_in_bits_src_1,
  input  [127:0] io_in_bits_src_2,
  input  [127:0] io_in_bits_src_3,
  input  [127:0] io_in_bits_src_4,
  input          io_in_bits_robIdx_flag,
  input  [7:0]   io_in_bits_robIdx_value,
  input  [6:0]   io_in_bits_pdest,
  input          io_in_bits_vecWen,
  input          io_in_bits_v0Wen,
  input          io_in_bits_fpu_wflags,
  input          io_in_bits_vpu_vma,
  input          io_in_bits_vpu_vta,
  input  [1:0]   io_in_bits_vpu_vsew,
  input  [2:0]   io_in_bits_vpu_vlmul,
  input          io_in_bits_vpu_vm,
  input  [7:0]   io_in_bits_vpu_vstart,
  input  [6:0]   io_in_bits_vpu_vuopIdx,
  input          io_in_bits_vpu_isNarrow,
  input          io_in_bits_vpu_isDstMask,
  input          io_out_ready,
  output         io_out_valid,
  output [127:0] io_out_bits_data_1,
  output [127:0] io_out_bits_data_2,
  output [6:0]   io_out_bits_pdest,
  output         io_out_bits_robIdx_flag,
  output [7:0]   io_out_bits_robIdx_value,
  output         io_out_bits_vecWen,
  output         io_out_bits_v0Wen,
  output [4:0]   io_out_bits_fflags,
  output         io_out_bits_wflags,
  input  [2:0]   io_frm
);

  wire         io_in_ready_0;
  wire         _in1ToN_io_in_ready;
  wire         _in1ToN_io_out_0_valid;
  wire [8:0]   _in1ToN_io_out_0_bits_fuOpType;
  wire         _in1ToN_io_out_0_bits_robIdx_flag;
  wire [7:0]   _in1ToN_io_out_0_bits_robIdx_value;
  wire [6:0]   _in1ToN_io_out_0_bits_pdest;
  wire         _in1ToN_io_out_0_bits_vecWen;
  wire         _in1ToN_io_out_0_bits_v0Wen;
  wire         _in1ToN_io_out_0_bits_fpu_wflags;
  wire         _in1ToN_io_out_0_bits_vpu_vma;
  wire         _in1ToN_io_out_0_bits_vpu_vta;
  wire [1:0]   _in1ToN_io_out_0_bits_vpu_vsew;
  wire [2:0]   _in1ToN_io_out_0_bits_vpu_vlmul;
  wire         _in1ToN_io_out_0_bits_vpu_vm;
  wire [7:0]   _in1ToN_io_out_0_bits_vpu_vstart;
  wire [6:0]   _in1ToN_io_out_0_bits_vpu_vuopIdx;
  wire         _in1ToN_io_out_0_bits_vpu_isNarrow;
  wire         _in1ToN_io_out_0_bits_vpu_isDstMask;
  wire         _in1ToN_io_out_1_valid;
  wire [8:0]   _in1ToN_io_out_1_bits_fuOpType;
  wire         _in1ToN_io_out_1_bits_robIdx_flag;
  wire [7:0]   _in1ToN_io_out_1_bits_robIdx_value;
  wire [6:0]   _in1ToN_io_out_1_bits_pdest;
  wire         _in1ToN_io_out_1_bits_vecWen;
  wire         _in1ToN_io_out_1_bits_v0Wen;
  wire         _in1ToN_io_out_1_bits_vpu_vma;
  wire         _in1ToN_io_out_1_bits_vpu_vta;
  wire [1:0]   _in1ToN_io_out_1_bits_vpu_vsew;
  wire         _in1ToN_io_out_1_bits_vpu_vm;
  wire [7:0]   _in1ToN_io_out_1_bits_vpu_vstart;
  wire [6:0]   _in1ToN_io_out_1_bits_vpu_vuopIdx;
  wire         _in1ToN_io_out_1_bits_vpu_isNarrow;
  wire         _in1ToN_io_out_1_bits_vpu_isDstMask;
  wire         _ClockGate_1_Q;
  wire         _ClockGate_Q;
  wire         _Vidiv_io_in_ready;
  wire         _Vidiv_io_out_valid;
  wire         _Vidiv_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]   _Vidiv_io_out_bits_ctrl_robIdx_value;
  wire [7:0]   _Vidiv_io_out_bits_ctrl_pdest;
  wire         _Vidiv_io_out_bits_ctrl_vecWen;
  wire         _Vidiv_io_out_bits_ctrl_v0Wen;
  wire [127:0] _Vidiv_io_out_bits_res_data;
  wire         _Vfdiv_io_in_ready;
  wire         _Vfdiv_io_out_valid;
  wire         _Vfdiv_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]   _Vfdiv_io_out_bits_ctrl_robIdx_value;
  wire [7:0]   _Vfdiv_io_out_bits_ctrl_pdest;
  wire         _Vfdiv_io_out_bits_ctrl_vecWen;
  wire         _Vfdiv_io_out_bits_ctrl_v0Wen;
  wire         _Vfdiv_io_out_bits_ctrl_fpu_wflags;
  wire [127:0] _Vfdiv_io_out_bits_res_data;
  wire [4:0]   _Vfdiv_io_out_bits_res_fflags;
  reg          uncer_en_reg;
  wire         _GEN = _Vfdiv_io_in_ready & _in1ToN_io_out_0_valid;
  reg          uncer_en_reg_1;
  wire         _GEN_0 = _Vidiv_io_in_ready & _in1ToN_io_out_1_valid;
  reg          busy;
  wire         _robIdx_T = io_in_ready_0 & io_in_valid;
  reg          robIdx_flag;
  reg  [7:0]   robIdx_value;
  assign io_in_ready_0 = ~busy & _in1ToN_io_in_ready;
  wire [1:0]   _io_out_valid_T = {_Vfdiv_io_out_valid, _Vidiv_io_out_valid};
  wire [127:0] io_out_bits_data_2_0 =
    (_Vfdiv_io_out_valid ? _Vfdiv_io_out_bits_res_data : 128'h0)
    | (_Vidiv_io_out_valid ? _Vidiv_io_out_bits_res_data : 128'h0);
  wire [8:0]   _inPipe_flushVec_flushItself_T_2 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      uncer_en_reg <= 1'h0;
      uncer_en_reg_1 <= 1'h0;
      busy <= 1'h0;
    end
    else begin
      uncer_en_reg <= _GEN | ~(io_out_ready & _Vfdiv_io_out_valid) & uncer_en_reg;
      uncer_en_reg_1 <= _GEN_0 | ~(io_out_ready & _Vidiv_io_out_valid) & uncer_en_reg_1;
      busy <=
        ~(_robIdx_T & io_flush_valid
          & (io_flush_bits_level
             & {io_in_bits_robIdx_flag,
                io_in_bits_robIdx_value} == _inPipe_flushVec_flushItself_T_2
             | io_in_bits_robIdx_flag ^ io_flush_bits_robIdx_flag
             ^ io_in_bits_robIdx_value > io_flush_bits_robIdx_value) | busy
          & io_flush_valid
          & (io_flush_bits_level
             & {robIdx_flag, robIdx_value} == _inPipe_flushVec_flushItself_T_2
             | robIdx_flag ^ io_flush_bits_robIdx_flag
             ^ robIdx_value > io_flush_bits_robIdx_value) | io_out_ready
          & (|_io_out_valid_T)) & (_robIdx_T | busy);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_robIdx_T) begin
      robIdx_flag <= io_in_bits_robIdx_flag;
      robIdx_value <= io_in_bits_robIdx_value;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        uncer_en_reg = _RANDOM[/*Zero width*/ 1'b0][1];
        uncer_en_reg_1 = _RANDOM[/*Zero width*/ 1'b0][3];
        busy = _RANDOM[/*Zero width*/ 1'b0][4];
        robIdx_flag = _RANDOM[/*Zero width*/ 1'b0][5];
        robIdx_value = _RANDOM[/*Zero width*/ 1'b0][13:6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        uncer_en_reg = 1'h0;
        uncer_en_reg_1 = 1'h0;
        busy = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VFDivSqrt Vfdiv (
    .clock                         (_ClockGate_Q),
    .reset                         (reset),
    .io_flush_valid                (io_flush_valid),
    .io_flush_bits_robIdx_flag     (io_flush_bits_robIdx_flag),
    .io_flush_bits_robIdx_value    (io_flush_bits_robIdx_value),
    .io_flush_bits_level           (io_flush_bits_level),
    .io_in_ready                   (_Vfdiv_io_in_ready),
    .io_in_valid                   (_in1ToN_io_out_0_valid),
    .io_in_bits_ctrl_fuOpType      (_in1ToN_io_out_0_bits_fuOpType),
    .io_in_bits_ctrl_robIdx_flag   (_in1ToN_io_out_0_bits_robIdx_flag),
    .io_in_bits_ctrl_robIdx_value  (_in1ToN_io_out_0_bits_robIdx_value),
    .io_in_bits_ctrl_pdest         ({1'h0, _in1ToN_io_out_0_bits_pdest}),
    .io_in_bits_ctrl_vecWen        (_in1ToN_io_out_0_bits_vecWen),
    .io_in_bits_ctrl_v0Wen         (_in1ToN_io_out_0_bits_v0Wen),
    .io_in_bits_ctrl_fpu_wflags    (_in1ToN_io_out_0_bits_fpu_wflags),
    .io_in_bits_ctrl_vpu_vma       (_in1ToN_io_out_0_bits_vpu_vma),
    .io_in_bits_ctrl_vpu_vta       (_in1ToN_io_out_0_bits_vpu_vta),
    .io_in_bits_ctrl_vpu_vsew      (_in1ToN_io_out_0_bits_vpu_vsew),
    .io_in_bits_ctrl_vpu_vlmul     (_in1ToN_io_out_0_bits_vpu_vlmul),
    .io_in_bits_ctrl_vpu_vm        (_in1ToN_io_out_0_bits_vpu_vm),
    .io_in_bits_ctrl_vpu_vstart    (_in1ToN_io_out_0_bits_vpu_vstart),
    .io_in_bits_ctrl_vpu_vuopIdx   (_in1ToN_io_out_0_bits_vpu_vuopIdx),
    .io_in_bits_ctrl_vpu_isNarrow  (_in1ToN_io_out_0_bits_vpu_isNarrow),
    .io_in_bits_ctrl_vpu_isDstMask (_in1ToN_io_out_0_bits_vpu_isDstMask),
    .io_in_bits_data_src_4         (io_in_bits_src_4[7:0]),
    .io_in_bits_data_src_3         (io_in_bits_src_3),
    .io_in_bits_data_src_2         (io_in_bits_src_2),
    .io_in_bits_data_src_1         (io_in_bits_src_1),
    .io_in_bits_data_src_0         (io_in_bits_src_0),
    .io_out_ready                  (io_out_ready),
    .io_out_valid                  (_Vfdiv_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag  (_Vfdiv_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value (_Vfdiv_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest        (_Vfdiv_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_vecWen       (_Vfdiv_io_out_bits_ctrl_vecWen),
    .io_out_bits_ctrl_v0Wen        (_Vfdiv_io_out_bits_ctrl_v0Wen),
    .io_out_bits_ctrl_fpu_wflags   (_Vfdiv_io_out_bits_ctrl_fpu_wflags),
    .io_out_bits_res_data          (_Vfdiv_io_out_bits_res_data),
    .io_out_bits_res_fflags        (_Vfdiv_io_out_bits_res_fflags),
    .io_frm                        (io_frm)
  );
  VIDiv Vidiv (
    .clock                         (_ClockGate_1_Q),
    .reset                         (reset),
    .io_flush_valid                (io_flush_valid),
    .io_flush_bits_robIdx_flag     (io_flush_bits_robIdx_flag),
    .io_flush_bits_robIdx_value    (io_flush_bits_robIdx_value),
    .io_flush_bits_level           (io_flush_bits_level),
    .io_in_ready                   (_Vidiv_io_in_ready),
    .io_in_valid                   (_in1ToN_io_out_1_valid),
    .io_in_bits_ctrl_fuOpType      (_in1ToN_io_out_1_bits_fuOpType),
    .io_in_bits_ctrl_robIdx_flag   (_in1ToN_io_out_1_bits_robIdx_flag),
    .io_in_bits_ctrl_robIdx_value  (_in1ToN_io_out_1_bits_robIdx_value),
    .io_in_bits_ctrl_pdest         ({1'h0, _in1ToN_io_out_1_bits_pdest}),
    .io_in_bits_ctrl_vecWen        (_in1ToN_io_out_1_bits_vecWen),
    .io_in_bits_ctrl_v0Wen         (_in1ToN_io_out_1_bits_v0Wen),
    .io_in_bits_ctrl_vpu_vma       (_in1ToN_io_out_1_bits_vpu_vma),
    .io_in_bits_ctrl_vpu_vta       (_in1ToN_io_out_1_bits_vpu_vta),
    .io_in_bits_ctrl_vpu_vsew      (_in1ToN_io_out_1_bits_vpu_vsew),
    .io_in_bits_ctrl_vpu_vm        (_in1ToN_io_out_1_bits_vpu_vm),
    .io_in_bits_ctrl_vpu_vstart    (_in1ToN_io_out_1_bits_vpu_vstart),
    .io_in_bits_ctrl_vpu_vuopIdx   (_in1ToN_io_out_1_bits_vpu_vuopIdx),
    .io_in_bits_ctrl_vpu_isNarrow  (_in1ToN_io_out_1_bits_vpu_isNarrow),
    .io_in_bits_ctrl_vpu_isDstMask (_in1ToN_io_out_1_bits_vpu_isDstMask),
    .io_in_bits_data_src_4         (io_in_bits_src_4[7:0]),
    .io_in_bits_data_src_3         (io_in_bits_src_3),
    .io_in_bits_data_src_2         (io_in_bits_src_2),
    .io_in_bits_data_src_1         (io_in_bits_src_1),
    .io_in_bits_data_src_0         (io_in_bits_src_0),
    .io_out_ready                  (io_out_ready),
    .io_out_valid                  (_Vidiv_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag  (_Vidiv_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value (_Vidiv_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest        (_Vidiv_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_vecWen       (_Vidiv_io_out_bits_ctrl_vecWen),
    .io_out_bits_ctrl_v0Wen        (_Vidiv_io_out_bits_ctrl_v0Wen),
    .io_out_bits_res_data          (_Vidiv_io_out_bits_res_data)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (_GEN | uncer_en_reg),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (_GEN_0 | uncer_en_reg_1),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  Dispatcher_17 in1ToN (
    .io_in_ready                 (_in1ToN_io_in_ready),
    .io_in_valid                 (io_in_valid & ~busy),
    .io_in_bits_fuType           (io_in_bits_fuType),
    .io_in_bits_fuOpType         (io_in_bits_fuOpType),
    .io_in_bits_robIdx_flag      (io_in_bits_robIdx_flag),
    .io_in_bits_robIdx_value     (io_in_bits_robIdx_value),
    .io_in_bits_pdest            (io_in_bits_pdest),
    .io_in_bits_vecWen           (io_in_bits_vecWen),
    .io_in_bits_v0Wen            (io_in_bits_v0Wen),
    .io_in_bits_fpu_wflags       (io_in_bits_fpu_wflags),
    .io_in_bits_vpu_vma          (io_in_bits_vpu_vma),
    .io_in_bits_vpu_vta          (io_in_bits_vpu_vta),
    .io_in_bits_vpu_vsew         (io_in_bits_vpu_vsew),
    .io_in_bits_vpu_vlmul        (io_in_bits_vpu_vlmul),
    .io_in_bits_vpu_vm           (io_in_bits_vpu_vm),
    .io_in_bits_vpu_vstart       (io_in_bits_vpu_vstart),
    .io_in_bits_vpu_vuopIdx      (io_in_bits_vpu_vuopIdx),
    .io_in_bits_vpu_isNarrow     (io_in_bits_vpu_isNarrow),
    .io_in_bits_vpu_isDstMask    (io_in_bits_vpu_isDstMask),
    .io_out_0_ready              (_Vfdiv_io_in_ready),
    .io_out_0_valid              (_in1ToN_io_out_0_valid),
    .io_out_0_bits_fuOpType      (_in1ToN_io_out_0_bits_fuOpType),
    .io_out_0_bits_robIdx_flag   (_in1ToN_io_out_0_bits_robIdx_flag),
    .io_out_0_bits_robIdx_value  (_in1ToN_io_out_0_bits_robIdx_value),
    .io_out_0_bits_pdest         (_in1ToN_io_out_0_bits_pdest),
    .io_out_0_bits_vecWen        (_in1ToN_io_out_0_bits_vecWen),
    .io_out_0_bits_v0Wen         (_in1ToN_io_out_0_bits_v0Wen),
    .io_out_0_bits_fpu_wflags    (_in1ToN_io_out_0_bits_fpu_wflags),
    .io_out_0_bits_vpu_vma       (_in1ToN_io_out_0_bits_vpu_vma),
    .io_out_0_bits_vpu_vta       (_in1ToN_io_out_0_bits_vpu_vta),
    .io_out_0_bits_vpu_vsew      (_in1ToN_io_out_0_bits_vpu_vsew),
    .io_out_0_bits_vpu_vlmul     (_in1ToN_io_out_0_bits_vpu_vlmul),
    .io_out_0_bits_vpu_vm        (_in1ToN_io_out_0_bits_vpu_vm),
    .io_out_0_bits_vpu_vstart    (_in1ToN_io_out_0_bits_vpu_vstart),
    .io_out_0_bits_vpu_vuopIdx   (_in1ToN_io_out_0_bits_vpu_vuopIdx),
    .io_out_0_bits_vpu_isNarrow  (_in1ToN_io_out_0_bits_vpu_isNarrow),
    .io_out_0_bits_vpu_isDstMask (_in1ToN_io_out_0_bits_vpu_isDstMask),
    .io_out_1_ready              (_Vidiv_io_in_ready),
    .io_out_1_valid              (_in1ToN_io_out_1_valid),
    .io_out_1_bits_fuOpType      (_in1ToN_io_out_1_bits_fuOpType),
    .io_out_1_bits_robIdx_flag   (_in1ToN_io_out_1_bits_robIdx_flag),
    .io_out_1_bits_robIdx_value  (_in1ToN_io_out_1_bits_robIdx_value),
    .io_out_1_bits_pdest         (_in1ToN_io_out_1_bits_pdest),
    .io_out_1_bits_vecWen        (_in1ToN_io_out_1_bits_vecWen),
    .io_out_1_bits_v0Wen         (_in1ToN_io_out_1_bits_v0Wen),
    .io_out_1_bits_vpu_vma       (_in1ToN_io_out_1_bits_vpu_vma),
    .io_out_1_bits_vpu_vta       (_in1ToN_io_out_1_bits_vpu_vta),
    .io_out_1_bits_vpu_vsew      (_in1ToN_io_out_1_bits_vpu_vsew),
    .io_out_1_bits_vpu_vm        (_in1ToN_io_out_1_bits_vpu_vm),
    .io_out_1_bits_vpu_vstart    (_in1ToN_io_out_1_bits_vpu_vstart),
    .io_out_1_bits_vpu_vuopIdx   (_in1ToN_io_out_1_bits_vpu_vuopIdx),
    .io_out_1_bits_vpu_isNarrow  (_in1ToN_io_out_1_bits_vpu_isNarrow),
    .io_out_1_bits_vpu_isDstMask (_in1ToN_io_out_1_bits_vpu_isDstMask)
  );
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = |_io_out_valid_T;
  assign io_out_bits_data_1 = io_out_bits_data_2_0;
  assign io_out_bits_data_2 = io_out_bits_data_2_0;
  assign io_out_bits_pdest =
    (_Vfdiv_io_out_valid ? _Vfdiv_io_out_bits_ctrl_pdest[6:0] : 7'h0)
    | (_Vidiv_io_out_valid ? _Vidiv_io_out_bits_ctrl_pdest[6:0] : 7'h0);
  assign io_out_bits_robIdx_flag =
    _Vfdiv_io_out_valid & _Vfdiv_io_out_bits_ctrl_robIdx_flag | _Vidiv_io_out_valid
    & _Vidiv_io_out_bits_ctrl_robIdx_flag;
  assign io_out_bits_robIdx_value =
    (_Vfdiv_io_out_valid ? _Vfdiv_io_out_bits_ctrl_robIdx_value : 8'h0)
    | (_Vidiv_io_out_valid ? _Vidiv_io_out_bits_ctrl_robIdx_value : 8'h0);
  assign io_out_bits_vecWen =
    _Vfdiv_io_out_valid & _Vfdiv_io_out_bits_ctrl_vecWen | _Vidiv_io_out_valid
    & _Vidiv_io_out_bits_ctrl_vecWen;
  assign io_out_bits_v0Wen =
    _Vfdiv_io_out_valid & _Vfdiv_io_out_bits_ctrl_v0Wen | _Vidiv_io_out_valid
    & _Vidiv_io_out_bits_ctrl_v0Wen;
  assign io_out_bits_fflags = _Vfdiv_io_out_valid ? _Vfdiv_io_out_bits_res_fflags : 5'h0;
  assign io_out_bits_wflags = _Vfdiv_io_out_valid & _Vfdiv_io_out_bits_ctrl_fpu_wflags;
endmodule

