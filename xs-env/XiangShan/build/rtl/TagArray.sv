// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TagArray(
  input         clock,
  input         reset,
  output        io_read_ready,
  input         io_read_valid,
  input  [7:0]  io_read_bits_idx,
  output [42:0] io_resp_0,
  output [42:0] io_resp_1,
  output [42:0] io_resp_2,
  output [42:0] io_resp_3,
  input         io_write_valid,
  input  [7:0]  io_write_bits_idx,
  input  [3:0]  io_write_bits_way_en,
  input  [35:0] io_write_bits_tag,
  input  [6:0]  io_write_bits_ecc
);

  reg  [8:0]  rst_cnt;
  wire [42:0] wdata = rst_cnt[8] ? {io_write_bits_ecc, io_write_bits_tag} : 43'h0;
  wire        wen = ~(rst_cnt[8]) | io_write_valid;
  always @(posedge clock or posedge reset) begin
    if (reset)
      rst_cnt <= 9'h0;
    else if (rst_cnt[8]) begin
    end
    else
      rst_cnt <= 9'(rst_cnt + 9'h1);
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        rst_cnt = _RANDOM[/*Zero width*/ 1'b0][8:0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        rst_cnt = 9'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_98 tag_array (
    .clock                 (clock),
    .io_r_req_valid        (~wen & io_read_valid),
    .io_r_req_bits_setIdx  (io_read_bits_idx),
    .io_r_resp_data_0      (io_resp_0),
    .io_r_resp_data_1      (io_resp_1),
    .io_r_resp_data_2      (io_resp_2),
    .io_r_resp_data_3      (io_resp_3),
    .io_w_req_valid        (wen),
    .io_w_req_bits_setIdx  (rst_cnt[8] ? io_write_bits_idx : rst_cnt[7:0]),
    .io_w_req_bits_data_0  (wdata),
    .io_w_req_bits_data_1  (wdata),
    .io_w_req_bits_data_2  (wdata),
    .io_w_req_bits_data_3  (wdata),
    .io_w_req_bits_waymask (rst_cnt[8] ? io_write_bits_way_en : 4'hF)
  );
  assign io_read_ready = ~wen;
endmodule

