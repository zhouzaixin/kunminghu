// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AcquireUnit(
  input          io_sourceA_ready,
  output         io_sourceA_valid,
  output [3:0]   io_sourceA_bits_opcode,
  output [2:0]   io_sourceA_bits_param,
  output [2:0]   io_sourceA_bits_size,
  output [7:0]   io_sourceA_bits_source,
  output [47:0]  io_sourceA_bits_address,
  output [3:0]   io_sourceA_bits_user_reqSource,
  output         io_sourceA_bits_echo_blockisdirty,
  output [31:0]  io_sourceA_bits_mask,
  output [255:0] io_sourceA_bits_data,
  output         io_sourceA_bits_corrupt,
  output         io_task_ready,
  input          io_task_valid,
  input  [32:0]  io_task_bits_tag,
  input  [6:0]   io_task_bits_set,
  input  [5:0]   io_task_bits_off,
  input  [2:0]   io_task_bits_opcode,
  input  [1:0]   io_task_bits_param,
  input  [2:0]   io_task_bits_size,
  input  [7:0]   io_task_bits_source,
  input  [3:0]   io_task_bits_reqSource
);

  assign io_sourceA_valid = io_task_valid;
  assign io_sourceA_bits_opcode = {1'h0, io_task_bits_opcode};
  assign io_sourceA_bits_param = {1'h0, io_task_bits_param};
  assign io_sourceA_bits_size = 3'h6;
  assign io_sourceA_bits_source = io_task_bits_source;
  assign io_sourceA_bits_address = {2'h0, io_task_bits_tag, io_task_bits_set, 6'h0};
  assign io_sourceA_bits_user_reqSource = io_task_bits_reqSource;
  assign io_sourceA_bits_echo_blockisdirty = 1'h1;
  assign io_sourceA_bits_mask = 32'hFFFFFFFF;
  assign io_sourceA_bits_data = 256'h0;
  assign io_sourceA_bits_corrupt = 1'h0;
  assign io_task_ready = io_sourceA_ready;
endmodule

