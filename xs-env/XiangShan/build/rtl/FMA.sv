// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FMA(
  input         clock,
  input         reset,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input  [1:0]  io_in_bits_ctrl_fpu_fmt,
  input  [2:0]  io_in_bits_ctrl_fpu_rm,
  input         io_in_bits_ctrlPipe_3_robIdx_flag,
  input  [7:0]  io_in_bits_ctrlPipe_3_robIdx_value,
  input  [7:0]  io_in_bits_ctrlPipe_3_pdest,
  input         io_in_bits_ctrlPipe_3_fpWen,
  input         io_in_bits_ctrlPipe_3_fpu_wflags,
  input         io_in_bits_validPipe_3,
  input  [63:0] io_in_bits_data_src_2,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_fpWen,
  output        io_out_bits_ctrl_fpu_wflags,
  output [63:0] io_out_bits_res_data,
  output [4:0]  io_out_bits_res_fflags,
  input  [2:0]  io_frm
);

  reg  validVecThisFu_1;
  reg  validVecThisFu_2;
  reg  validVecThisFu_3;
  wire _fp_cIsFpCanonicalNAN_T_2 = io_in_bits_ctrl_fpu_fmt == 2'h2;
  wire _fp_cIsFpCanonicalNAN_T_7 = io_in_bits_ctrl_fpu_fmt == 2'h1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVecThisFu_1 <= 1'h0;
      validVecThisFu_2 <= 1'h0;
      validVecThisFu_3 <= 1'h0;
    end
    else begin
      validVecThisFu_1 <= io_in_valid;
      validVecThisFu_2 <= validVecThisFu_1;
      validVecThisFu_3 <= validVecThisFu_2;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        validVecThisFu_1 = _RANDOM[/*Zero width*/ 1'b0][0];
        validVecThisFu_2 = _RANDOM[/*Zero width*/ 1'b0][1];
        validVecThisFu_3 = _RANDOM[/*Zero width*/ 1'b0][2];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVecThisFu_1 = 1'h0;
        validVecThisFu_2 = 1'h0;
        validVecThisFu_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FloatFMA fma (
    .clock                   (clock),
    .reset                   (reset),
    .io_fire                 (io_in_valid),
    .io_fp_a                 (io_in_bits_data_src_0),
    .io_fp_b                 (io_in_bits_data_src_1),
    .io_fp_c                 (io_in_bits_data_src_2),
    .io_round_mode
      (io_in_bits_ctrl_fpu_rm != 3'h7 ? io_in_bits_ctrl_fpu_rm : io_frm),
    .io_fp_format            (io_in_bits_ctrl_fpu_fmt),
    .io_op_code              (io_in_bits_ctrl_fuOpType[3:0]),
    .io_fp_result            (io_out_bits_res_data),
    .io_fflags               (io_out_bits_res_fflags),
    .io_fp_aIsFpCanonicalNAN
      (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_0[63:32] != 32'hFFFFFFFF
       | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_0[63:16] != 48'hFFFFFFFFFFFF),
    .io_fp_bIsFpCanonicalNAN
      (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_1[63:32] != 32'hFFFFFFFF
       | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_1[63:16] != 48'hFFFFFFFFFFFF),
    .io_fp_cIsFpCanonicalNAN
      ((|(io_in_bits_ctrl_fuOpType[3:0]))
       & (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_2[63:32] != 32'hFFFFFFFF
          | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_2[63:16] != 48'hFFFFFFFFFFFF))
  );
  assign io_out_valid = io_in_bits_validPipe_3 & validVecThisFu_3;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrlPipe_3_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrlPipe_3_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrlPipe_3_pdest;
  assign io_out_bits_ctrl_fpWen = io_in_bits_ctrlPipe_3_fpWen;
  assign io_out_bits_ctrl_fpu_wflags = io_in_bits_ctrlPipe_3_fpu_wflags;
endmodule

