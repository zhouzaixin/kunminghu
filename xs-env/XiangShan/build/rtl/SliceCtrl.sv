// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SliceCtrl(
  input          clock,
  input          reset,
  output         io_req_ready,
  input          io_req_valid,
  input  [7:0]   io_req_bits_cmd,
  input  [63:0]  io_req_bits_data_0,
  input  [63:0]  io_req_bits_data_1,
  input  [63:0]  io_req_bits_data_2,
  input  [63:0]  io_req_bits_data_3,
  input  [63:0]  io_req_bits_data_4,
  input  [63:0]  io_req_bits_data_5,
  input  [63:0]  io_req_bits_data_6,
  input  [63:0]  io_req_bits_data_7,
  input  [63:0]  io_req_bits_set,
  input  [63:0]  io_req_bits_tag,
  input  [63:0]  io_req_bits_way,
  input  [63:0]  io_req_bits_dir,
  input          io_resp_ready,
  output         io_resp_valid,
  output [7:0]   io_resp_bits_cmd,
  output [63:0]  io_resp_bits_data_0,
  output [63:0]  io_resp_bits_data_1,
  output [63:0]  io_resp_bits_data_2,
  output [63:0]  io_resp_bits_data_3,
  output [63:0]  io_resp_bits_data_4,
  output [63:0]  io_resp_bits_data_5,
  output [63:0]  io_resp_bits_data_6,
  output [63:0]  io_resp_bits_data_7,
  input          io_s_dir_w_ready,
  output         io_s_dir_w_valid,
  output [10:0]  io_s_dir_w_bits_set,
  output [2:0]   io_s_dir_w_bits_way,
  output         io_s_dir_w_bits_data_dirty,
  output [1:0]   io_s_dir_w_bits_data_state,
  output [1:0]   io_s_dir_w_bits_data_clientStates_0,
  output         io_s_dir_w_bits_data_prefetch,
  input          io_c_dir_w_ready,
  output         io_c_dir_w_valid,
  output [7:0]   io_c_dir_w_bits_set,
  output [3:0]   io_c_dir_w_bits_way,
  output [1:0]   io_c_dir_w_bits_data_0_state,
  input          io_s_tag_w_ready,
  output         io_s_tag_w_valid,
  output [10:0]  io_s_tag_w_bits_set,
  output [2:0]   io_s_tag_w_bits_way,
  output [30:0]  io_s_tag_w_bits_tag,
  input          io_c_tag_w_ready,
  output         io_c_tag_w_valid,
  output [7:0]   io_c_tag_w_bits_set,
  output [3:0]   io_c_tag_w_bits_way,
  output [33:0]  io_c_tag_w_bits_tag,
  input          io_bs_w_addr_ready,
  output         io_bs_w_addr_valid,
  output [2:0]   io_bs_w_addr_bits_way,
  output [10:0]  io_bs_w_addr_bits_set,
  output         io_bs_w_addr_bits_beat,
  output [255:0] io_bs_w_data_data,
  output         io_dir_read_valid,
  output [15:0]  io_dir_read_bits_idOH,
  output [30:0]  io_dir_read_bits_tag,
  output [10:0]  io_dir_read_bits_set,
  input          io_dir_result_valid,
  input          io_dir_result_bits_self_dirty,
  input  [1:0]   io_dir_result_bits_self_state,
  input  [1:0]   io_dir_result_bits_self_clientStates_0,
  input          io_dir_result_bits_self_prefetch,
  input          io_dir_result_bits_self_hit,
  input  [2:0]   io_dir_result_bits_self_way,
  input  [30:0]  io_dir_result_bits_self_tag,
  input          io_dir_result_bits_self_error,
  input  [1:0]   io_dir_result_bits_clients_states_0_state,
  input          io_dir_result_bits_clients_states_0_hit,
  input  [33:0]  io_dir_result_bits_clients_tag,
  input          io_bs_r_addr_ready,
  output         io_bs_r_addr_valid,
  output [2:0]   io_bs_r_addr_bits_way,
  output [10:0]  io_bs_r_addr_bits_set,
  output         io_bs_r_addr_bits_beat,
  input  [255:0] io_bs_r_data_data,
  input          io_cmo_req_ready,
  output         io_cmo_req_valid,
  output [2:0]   io_cmo_req_bits_param,
  output [10:0]  io_cmo_req_bits_set,
  output [30:0]  io_cmo_req_bits_tag
);

  reg  [7:0]  req_reg_cmd;
  reg  [63:0] req_reg_data_0;
  reg  [63:0] req_reg_data_1;
  reg  [63:0] req_reg_data_2;
  reg  [63:0] req_reg_data_3;
  reg  [63:0] req_reg_data_4;
  reg  [63:0] req_reg_data_5;
  reg  [63:0] req_reg_data_6;
  reg  [63:0] req_reg_data_7;
  reg  [63:0] req_reg_set;
  reg  [63:0] req_reg_tag;
  reg  [63:0] req_reg_way;
  reg  [63:0] req_reg_dir;
  reg         busy;
  reg         done;
  wire        _GEN = ~busy & io_req_valid;
  reg         s_wb_self_dir;
  reg         s_wb_client_dir;
  reg         s_wb_self_tag;
  reg         s_wb_client_tag;
  reg  [1:0]  s_data_write;
  reg  [1:0]  s_data_read;
  reg         s_dir_read;
  reg         s_cmo;
  wire        io_bs_r_addr_valid_0 = s_data_read != 2'h2;
  reg         data_wen_REG;
  reg         data_wen_REG_1;
  reg         data_wen;
  reg         w_counter;
  wire        io_bs_w_addr_valid_0 = s_data_write != 2'h2;
  always @(posedge clock) begin
    if (_GEN) begin
      req_reg_cmd <= io_req_bits_cmd;
      req_reg_set <= {53'h0, io_req_bits_set[10:0]};
      req_reg_tag <= {33'h0, io_req_bits_tag[30:0]};
      req_reg_way <= io_req_bits_way;
      req_reg_dir <= io_req_bits_dir;
    end
    if (data_wen & ~w_counter) begin
      req_reg_data_0 <= io_bs_r_data_data[63:0];
      req_reg_data_1 <= io_bs_r_data_data[127:64];
      req_reg_data_2 <= io_bs_r_data_data[191:128];
      req_reg_data_3 <= io_bs_r_data_data[255:192];
    end
    else begin
      if (io_dir_result_valid) begin
        if (req_reg_cmd == 8'h3)
          req_reg_data_0 <=
            {58'h0, io_dir_result_bits_self_tag[4:0], io_dir_result_bits_self_error};
        else if (req_reg_cmd == 8'h4)
          req_reg_data_0 <=
            {61'h0,
             io_dir_result_bits_clients_states_0_state,
             io_dir_result_bits_clients_states_0_hit};
        else if (req_reg_cmd == 8'h0)
          req_reg_data_0 <= {33'h0, io_dir_result_bits_self_tag};
        else if (req_reg_cmd == 8'h1)
          req_reg_data_0 <= {30'h0, io_dir_result_bits_clients_tag};
        else if (_GEN)
          req_reg_data_0 <= io_req_bits_data_0;
      end
      else if (_GEN)
        req_reg_data_0 <= io_req_bits_data_0;
      if (_GEN) begin
        req_reg_data_1 <= io_req_bits_data_1;
        req_reg_data_2 <= io_req_bits_data_2;
        req_reg_data_3 <= io_req_bits_data_3;
      end
    end
    if (data_wen & w_counter) begin
      req_reg_data_4 <= io_bs_r_data_data[63:0];
      req_reg_data_5 <= io_bs_r_data_data[127:64];
      req_reg_data_6 <= io_bs_r_data_data[191:128];
      req_reg_data_7 <= io_bs_r_data_data[255:192];
    end
    else if (_GEN) begin
      req_reg_data_4 <= io_req_bits_data_4;
      req_reg_data_5 <= io_req_bits_data_5;
      req_reg_data_6 <= io_req_bits_data_6;
      req_reg_data_7 <= io_req_bits_data_7;
    end
  end // always @(posedge)
  wire        _GEN_0 = io_resp_ready & done;
  wire        _GEN_1 = ~_GEN_0 & done;
  wire        _GEN_2 = io_req_bits_cmd == 8'h3;
  wire        _GEN_3 = io_req_bits_cmd == 8'h4;
  wire        _GEN_4 = io_req_bits_cmd == 8'h0;
  wire        _GEN_5 = io_req_bits_cmd == 8'h1;
  wire        _GEN_6 = _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5;
  wire        _GEN_7 = io_req_bits_cmd == 8'h2;
  wire        _GEN_8 = io_req_bits_cmd == 8'h8;
  wire        _GEN_9 = io_req_bits_cmd == 8'h9;
  wire        _GEN_10 = io_req_bits_cmd == 8'h5;
  wire        _GEN_11 = io_req_bits_cmd == 8'h6;
  wire        _GEN_12 = io_req_bits_cmd == 8'h7;
  wire        _data_wen_T = io_bs_r_addr_ready & io_bs_r_addr_valid_0;
  wire        _GEN_13 = io_s_dir_w_ready & s_wb_self_dir;
  wire        _GEN_14 = io_c_dir_w_ready & s_wb_client_dir;
  wire        _GEN_15 = io_s_tag_w_ready & s_wb_self_tag;
  wire        _GEN_16 = io_c_tag_w_ready & s_wb_client_tag;
  wire        _GEN_17 = io_cmo_req_ready & s_cmo;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      busy <= 1'h0;
      done <= 1'h0;
      s_wb_self_dir <= 1'h0;
      s_wb_client_dir <= 1'h0;
      s_wb_self_tag <= 1'h0;
      s_wb_client_tag <= 1'h0;
      s_data_write <= 2'h2;
      s_data_read <= 2'h2;
      s_dir_read <= 1'h0;
      s_cmo <= 1'h0;
      data_wen_REG <= 1'h0;
      data_wen_REG_1 <= 1'h0;
      data_wen <= 1'h0;
      w_counter <= 1'h0;
    end
    else begin
      busy <= ~_GEN_0 & (_GEN | busy);
      done <=
        _GEN_17 | _GEN_16 | _GEN_15 | _GEN_14 | _GEN_13
        | (data_wen
             ? w_counter | io_dir_result_valid | _GEN_1
             : io_dir_result_valid | _GEN_1);
      s_wb_self_dir <=
        ~_GEN_13
        & (_GEN & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7) & _GEN_8 | s_wb_self_dir);
      s_wb_client_dir <=
        ~_GEN_14
        & (_GEN & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8) & _GEN_9
           | s_wb_client_dir);
      s_wb_self_tag <=
        ~_GEN_15
        & (_GEN & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9)
           & _GEN_10 | s_wb_self_tag);
      s_wb_client_tag <=
        ~_GEN_16
        & (_GEN
           & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10)
           & _GEN_11 | s_wb_client_tag);
      if (io_bs_w_addr_ready & io_bs_w_addr_valid_0)
        s_data_write <= 2'(s_data_write + 2'h1);
      else if (~_GEN | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9
               | _GEN_10 | _GEN_11 | ~_GEN_12) begin
      end
      else
        s_data_write <= 2'h0;
      if (_data_wen_T)
        s_data_read <= 2'(s_data_read + 2'h1);
      else if (~_GEN | _GEN_6 | ~_GEN_7) begin
      end
      else
        s_data_read <= 2'h0;
      s_dir_read <= ~io_dir_result_valid & (_GEN & _GEN_6 | s_dir_read);
      s_cmo <=
        ~_GEN_17
        & (_GEN
           & ~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
               | _GEN_11 | _GEN_12)
           & (io_req_bits_cmd == 8'h10 | io_req_bits_cmd == 8'h11
              | io_req_bits_cmd == 8'h12) | s_cmo);
      data_wen_REG <= _data_wen_T;
      data_wen_REG_1 <= data_wen_REG;
      data_wen <= data_wen_REG_1;
      if (data_wen)
        w_counter <= ~w_counter & 1'(w_counter - 1'h1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:24];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h19; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_reg_cmd = _RANDOM[5'h0][7:0];
        req_reg_data_0 = {_RANDOM[5'h0][31:8], _RANDOM[5'h1], _RANDOM[5'h2][7:0]};
        req_reg_data_1 = {_RANDOM[5'h2][31:8], _RANDOM[5'h3], _RANDOM[5'h4][7:0]};
        req_reg_data_2 = {_RANDOM[5'h4][31:8], _RANDOM[5'h5], _RANDOM[5'h6][7:0]};
        req_reg_data_3 = {_RANDOM[5'h6][31:8], _RANDOM[5'h7], _RANDOM[5'h8][7:0]};
        req_reg_data_4 = {_RANDOM[5'h8][31:8], _RANDOM[5'h9], _RANDOM[5'hA][7:0]};
        req_reg_data_5 = {_RANDOM[5'hA][31:8], _RANDOM[5'hB], _RANDOM[5'hC][7:0]};
        req_reg_data_6 = {_RANDOM[5'hC][31:8], _RANDOM[5'hD], _RANDOM[5'hE][7:0]};
        req_reg_data_7 = {_RANDOM[5'hE][31:8], _RANDOM[5'hF], _RANDOM[5'h10][7:0]};
        req_reg_set = {_RANDOM[5'h10][31:8], _RANDOM[5'h11], _RANDOM[5'h12][7:0]};
        req_reg_tag = {_RANDOM[5'h12][31:8], _RANDOM[5'h13], _RANDOM[5'h14][7:0]};
        req_reg_way = {_RANDOM[5'h14][31:8], _RANDOM[5'h15], _RANDOM[5'h16][7:0]};
        req_reg_dir = {_RANDOM[5'h16][31:8], _RANDOM[5'h17], _RANDOM[5'h18][7:0]};
        busy = _RANDOM[5'h18][8];
        done = _RANDOM[5'h18][9];
        s_wb_self_dir = _RANDOM[5'h18][10];
        s_wb_client_dir = _RANDOM[5'h18][11];
        s_wb_self_tag = _RANDOM[5'h18][12];
        s_wb_client_tag = _RANDOM[5'h18][13];
        s_data_write = _RANDOM[5'h18][15:14];
        s_data_read = _RANDOM[5'h18][17:16];
        s_dir_read = _RANDOM[5'h18][18];
        s_cmo = _RANDOM[5'h18][19];
        data_wen_REG = _RANDOM[5'h18][20];
        data_wen_REG_1 = _RANDOM[5'h18][21];
        data_wen = _RANDOM[5'h18][22];
        w_counter = _RANDOM[5'h18][23];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        busy = 1'h0;
        done = 1'h0;
        s_wb_self_dir = 1'h0;
        s_wb_client_dir = 1'h0;
        s_wb_self_tag = 1'h0;
        s_wb_client_tag = 1'h0;
        s_data_write = 2'h2;
        s_data_read = 2'h2;
        s_dir_read = 1'h0;
        s_cmo = 1'h0;
        data_wen_REG = 1'h0;
        data_wen_REG_1 = 1'h0;
        data_wen = 1'h0;
        w_counter = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = ~busy;
  assign io_resp_valid = done;
  assign io_resp_bits_cmd = req_reg_cmd;
  assign io_resp_bits_data_0 = req_reg_data_0;
  assign io_resp_bits_data_1 = req_reg_data_1;
  assign io_resp_bits_data_2 = req_reg_data_2;
  assign io_resp_bits_data_3 = req_reg_data_3;
  assign io_resp_bits_data_4 = req_reg_data_4;
  assign io_resp_bits_data_5 = req_reg_data_5;
  assign io_resp_bits_data_6 = req_reg_data_6;
  assign io_resp_bits_data_7 = req_reg_data_7;
  assign io_s_dir_w_valid = s_wb_self_dir;
  assign io_s_dir_w_bits_set = req_reg_set[10:0];
  assign io_s_dir_w_bits_way = req_reg_way[2:0];
  assign io_s_dir_w_bits_data_dirty = req_reg_dir[5];
  assign io_s_dir_w_bits_data_state = req_reg_dir[4:3];
  assign io_s_dir_w_bits_data_clientStates_0 = req_reg_dir[2:1];
  assign io_s_dir_w_bits_data_prefetch = req_reg_dir[0];
  assign io_c_dir_w_valid = s_wb_client_dir;
  assign io_c_dir_w_bits_set = req_reg_set[7:0];
  assign io_c_dir_w_bits_way = req_reg_way[3:0];
  assign io_c_dir_w_bits_data_0_state = req_reg_dir[1:0];
  assign io_s_tag_w_valid = s_wb_self_tag;
  assign io_s_tag_w_bits_set = req_reg_set[10:0];
  assign io_s_tag_w_bits_way = req_reg_way[2:0];
  assign io_s_tag_w_bits_tag = req_reg_tag[30:0];
  assign io_c_tag_w_valid = s_wb_client_tag;
  assign io_c_tag_w_bits_set = req_reg_set[7:0];
  assign io_c_tag_w_bits_way = req_reg_way[3:0];
  assign io_c_tag_w_bits_tag = req_reg_tag[33:0];
  assign io_bs_w_addr_valid = io_bs_w_addr_valid_0;
  assign io_bs_w_addr_bits_way = req_reg_way[2:0];
  assign io_bs_w_addr_bits_set = req_reg_set[10:0];
  assign io_bs_w_addr_bits_beat = s_data_write[0];
  assign io_bs_w_data_data =
    s_data_write[0]
      ? {req_reg_data_7, req_reg_data_6, req_reg_data_5, req_reg_data_4}
      : {req_reg_data_3, req_reg_data_2, req_reg_data_1, req_reg_data_0};
  assign io_dir_read_valid = s_dir_read;
  assign io_dir_read_bits_idOH = {req_reg_way[13:0], 2'h3};
  assign io_dir_read_bits_tag = req_reg_tag[30:0];
  assign io_dir_read_bits_set = req_reg_set[10:0];
  assign io_bs_r_addr_valid = io_bs_r_addr_valid_0;
  assign io_bs_r_addr_bits_way = req_reg_way[2:0];
  assign io_bs_r_addr_bits_set = req_reg_set[10:0];
  assign io_bs_r_addr_bits_beat = s_data_read[0];
  assign io_cmo_req_valid = s_cmo;
  assign io_cmo_req_bits_param = {1'h0, io_req_bits_cmd[1:0]};
  assign io_cmo_req_bits_set = io_req_bits_set[10:0];
  assign io_cmo_req_bits_tag = io_req_bits_tag[30:0];
endmodule

