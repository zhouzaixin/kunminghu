// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FCVT(
  input         clock,
  input         reset,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input  [1:0]  io_in_bits_ctrl_fpu_fmt,
  input  [2:0]  io_in_bits_ctrl_fpu_rm,
  input  [8:0]  io_in_bits_ctrlPipe_2_fuOpType,
  input         io_in_bits_ctrlPipe_2_robIdx_flag,
  input  [7:0]  io_in_bits_ctrlPipe_2_robIdx_value,
  input  [7:0]  io_in_bits_ctrlPipe_2_pdest,
  input         io_in_bits_ctrlPipe_2_rfWen,
  input         io_in_bits_ctrlPipe_2_fpWen,
  input         io_in_bits_ctrlPipe_2_fpu_wflags,
  input         io_in_bits_validPipe_2,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_rfWen,
  output        io_out_bits_ctrl_fpWen,
  output        io_out_bits_ctrl_fpu_wflags,
  output [63:0] io_out_bits_res_data,
  output [4:0]  io_out_bits_res_fflags,
  input  [2:0]  io_frm
);

  wire [63:0] _fcvt_io_result;
  wire [4:0]  _fcvt_io_fflags;
  reg         validVecThisFu_1;
  reg         validVecThisFu_2;
  wire        isFcvtmod = io_in_bits_ctrl_fuOpType == 9'h191;
  wire        isRtz =
    io_in_bits_ctrl_fuOpType[2] & io_in_bits_ctrl_fuOpType[1] | isFcvtmod;
  wire        isRod =
    io_in_bits_ctrl_fuOpType[2] & ~(io_in_bits_ctrl_fuOpType[1])
    & io_in_bits_ctrl_fuOpType[0];
  reg         fireReg_last_r;
  reg         outIs16bits_REG;
  reg         outIs16bits;
  reg         outIs32bits_REG;
  reg         outIs32bits;
  wire        outIsMvInst = io_in_bits_ctrlPipe_2_fuOpType == 9'h180;
  reg  [63:0] result_r;
  reg  [63:0] result_r_1;
  wire [63:0] result =
    outIsMvInst
      ? result_r_1
      : outIs32bits & io_in_bits_ctrlPipe_2_fuOpType[6]
          ? {32'hFFFFFFFF, _fcvt_io_result[31:0]}
          : outIs16bits & io_in_bits_ctrlPipe_2_fuOpType[6]
              ? {48'hFFFFFFFFFFFF, _fcvt_io_result[15:0]}
              : _fcvt_io_result;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVecThisFu_1 <= 1'h0;
      validVecThisFu_2 <= 1'h0;
      fireReg_last_r <= 1'h0;
    end
    else begin
      validVecThisFu_1 <= io_in_valid;
      validVecThisFu_2 <= validVecThisFu_1;
      if (io_in_valid | fireReg_last_r)
        fireReg_last_r <= io_in_valid;
    end
  end // always @(posedge, posedge)
  wire [3:0]  output1H_invInputs =
    ~{io_in_bits_ctrl_fuOpType[4:3], io_in_bits_ctrl_fpu_fmt};
  always @(posedge clock) begin
    outIs16bits_REG <=
      |{&{io_in_bits_ctrl_fpu_fmt[0], output1H_invInputs[1], output1H_invInputs[2]},
        &{output1H_invInputs[0],
          output1H_invInputs[1],
          io_in_bits_ctrl_fuOpType[3],
          output1H_invInputs[3]},
        &{io_in_bits_ctrl_fpu_fmt[0],
          io_in_bits_ctrl_fpu_fmt[1],
          io_in_bits_ctrl_fuOpType[3],
          io_in_bits_ctrl_fuOpType[4]}};
    outIs16bits <= outIs16bits_REG;
    outIs32bits_REG <=
      |{&{output1H_invInputs[0], io_in_bits_ctrl_fpu_fmt[1], output1H_invInputs[2]},
        &{io_in_bits_ctrl_fpu_fmt[0],
          output1H_invInputs[1],
          io_in_bits_ctrl_fuOpType[3],
          output1H_invInputs[3]}};
    outIs32bits <= outIs32bits_REG;
    if (io_in_valid)
      result_r <=
        (io_in_bits_ctrl_fpu_fmt == 2'h0
           ? {{56{io_in_bits_data_src_0[7]}}, io_in_bits_data_src_0[7:0]}
           : 64'h0)
        | (io_in_bits_ctrl_fpu_fmt == 2'h1
             ? {{48{io_in_bits_data_src_0[15]}}, io_in_bits_data_src_0[15:0]}
             : 64'h0)
        | (io_in_bits_ctrl_fpu_fmt == 2'h2
             ? {{32{io_in_bits_data_src_0[31]}}, io_in_bits_data_src_0[31:0]}
             : 64'h0) | ((&io_in_bits_ctrl_fpu_fmt) ? io_in_bits_data_src_0 : 64'h0);
    if (fireReg_last_r)
      result_r_1 <= result_r;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:50];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h33; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validVecThisFu_1 = _RANDOM[6'h0][0];
        validVecThisFu_2 = _RANDOM[6'h0][1];
        fireReg_last_r = _RANDOM[6'h2E][16];
        outIs16bits_REG = _RANDOM[6'h2E][17];
        outIs16bits = _RANDOM[6'h2E][18];
        outIs32bits_REG = _RANDOM[6'h2E][19];
        outIs32bits = _RANDOM[6'h2E][20];
        result_r = {_RANDOM[6'h2E][31], _RANDOM[6'h2F], _RANDOM[6'h30][30:0]};
        result_r_1 = {_RANDOM[6'h30][31], _RANDOM[6'h31], _RANDOM[6'h32][30:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVecThisFu_1 = 1'h0;
        validVecThisFu_2 = 1'h0;
        fireReg_last_r = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FPCVT fcvt (
    .clock        (clock),
    .reset        (reset),
    .io_fire      (io_in_valid),
    .io_src       (io_in_bits_data_src_0),
    .io_opType    (io_in_bits_ctrl_fuOpType[7:0]),
    .io_sew       (io_in_bits_ctrl_fpu_fmt),
    .io_rm
      ({2'h0, isRtz} | (isRod ? 3'h6 : 3'h0)
       | (isRtz | isRod
            ? 3'h0
            : io_in_bits_ctrl_fpu_rm != 3'h7 ? io_in_bits_ctrl_fpu_rm : io_frm)),
    .io_isFround
      ({io_in_bits_ctrl_fuOpType == 9'hC4, io_in_bits_ctrl_fuOpType == 9'hC0}),
    .io_isFcvtmod (isFcvtmod),
    .io_result    (_fcvt_io_result),
    .io_fflags    (_fcvt_io_fflags)
  );
  assign io_out_valid = io_in_bits_validPipe_2 & validVecThisFu_2;
  assign io_out_bits_ctrl_robIdx_flag = io_in_bits_ctrlPipe_2_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = io_in_bits_ctrlPipe_2_robIdx_value;
  assign io_out_bits_ctrl_pdest = io_in_bits_ctrlPipe_2_pdest;
  assign io_out_bits_ctrl_rfWen = io_in_bits_ctrlPipe_2_rfWen;
  assign io_out_bits_ctrl_fpWen = io_in_bits_ctrlPipe_2_fpWen;
  assign io_out_bits_ctrl_fpu_wflags = io_in_bits_ctrlPipe_2_fpu_wflags;
  assign io_out_bits_res_data =
    outIs32bits & ~(io_in_bits_ctrlPipe_2_fuOpType[6])
      ? {{32{result[31]}}, result[31:0]}
      : result;
  assign io_out_bits_res_fflags = outIsMvInst ? 5'h0 : _fcvt_io_fflags;
endmodule

