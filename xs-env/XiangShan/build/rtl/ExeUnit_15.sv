// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ExeUnit_15(
  input          clock,
  input          reset,
  input          io_flush_valid,
  input          io_flush_bits_robIdx_flag,
  input  [7:0]   io_flush_bits_robIdx_value,
  input          io_flush_bits_level,
  input          io_in_valid,
  input  [34:0]  io_in_bits_fuType,
  input  [8:0]   io_in_bits_fuOpType,
  input  [127:0] io_in_bits_src_0,
  input  [127:0] io_in_bits_src_1,
  input  [127:0] io_in_bits_src_2,
  input  [127:0] io_in_bits_src_3,
  input  [127:0] io_in_bits_src_4,
  input          io_in_bits_robIdx_flag,
  input  [7:0]   io_in_bits_robIdx_value,
  input  [6:0]   io_in_bits_pdest,
  input          io_in_bits_vecWen,
  input          io_in_bits_v0Wen,
  input          io_in_bits_fpu_wflags,
  input          io_in_bits_vpu_vma,
  input          io_in_bits_vpu_vta,
  input  [1:0]   io_in_bits_vpu_vsew,
  input  [2:0]   io_in_bits_vpu_vlmul,
  input          io_in_bits_vpu_vm,
  input  [7:0]   io_in_bits_vpu_vstart,
  input  [6:0]   io_in_bits_vpu_vuopIdx,
  input          io_in_bits_vpu_isExt,
  input          io_in_bits_vpu_isNarrow,
  input          io_in_bits_vpu_isDstMask,
  input          io_in_bits_vpu_isOpMask,
  output         io_out_valid,
  output [127:0] io_out_bits_data_1,
  output [127:0] io_out_bits_data_2,
  output [6:0]   io_out_bits_pdest,
  output         io_out_bits_robIdx_flag,
  output [7:0]   io_out_bits_robIdx_value,
  output         io_out_bits_vecWen,
  output         io_out_bits_v0Wen,
  output [4:0]   io_out_bits_fflags,
  output         io_out_bits_wflags,
  output         io_out_bits_vxsat,
  input  [2:0]   io_frm,
  input  [1:0]   io_vxrm
);

  wire         _in1ToN_io_out_0_valid;
  wire [8:0]   _in1ToN_io_out_0_bits_fuOpType;
  wire [1:0]   _in1ToN_io_out_0_bits_vpu_vsew;
  wire [6:0]   _in1ToN_io_out_0_bits_vpu_vuopIdx;
  wire         _in1ToN_io_out_1_valid;
  wire [8:0]   _in1ToN_io_out_1_bits_fuOpType;
  wire         _in1ToN_io_out_1_bits_vpu_vma;
  wire [1:0]   _in1ToN_io_out_1_bits_vpu_vsew;
  wire         _in1ToN_io_out_1_bits_vpu_vm;
  wire [6:0]   _in1ToN_io_out_1_bits_vpu_vuopIdx;
  wire         _in1ToN_io_out_1_bits_vpu_isExt;
  wire         _in1ToN_io_out_1_bits_vpu_isNarrow;
  wire         _in1ToN_io_out_1_bits_vpu_isDstMask;
  wire         _ClockGate_1_Q;
  wire         _ClockGate_Q;
  wire         _VialuFix_io_out_valid;
  wire         _VialuFix_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]   _VialuFix_io_out_bits_ctrl_robIdx_value;
  wire [7:0]   _VialuFix_io_out_bits_ctrl_pdest;
  wire         _VialuFix_io_out_bits_ctrl_vecWen;
  wire         _VialuFix_io_out_bits_ctrl_v0Wen;
  wire [127:0] _VialuFix_io_out_bits_res_data;
  wire         _VialuFix_io_out_bits_res_vxsat;
  wire         _Vfma_io_out_valid;
  wire         _Vfma_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]   _Vfma_io_out_bits_ctrl_robIdx_value;
  wire [7:0]   _Vfma_io_out_bits_ctrl_pdest;
  wire         _Vfma_io_out_bits_ctrl_vecWen;
  wire         _Vfma_io_out_bits_ctrl_v0Wen;
  wire         _Vfma_io_out_bits_ctrl_fpu_wflags;
  wire [127:0] _Vfma_io_out_bits_res_data;
  wire [4:0]   _Vfma_io_out_bits_res_fflags;
  reg          fuVld_en_reg;
  reg          fuVldVec_1;
  reg          fuVldVec_2;
  reg          fuVldVec_3;
  wire         fuVld_en = _in1ToN_io_out_0_valid | fuVldVec_1 | fuVldVec_2 | fuVldVec_3;
  reg          fuVld_en_reg_1;
  reg          fuVldVec_1_1;
  wire         fuVld_en_1 = _in1ToN_io_out_1_valid | fuVldVec_1_1;
  reg          inPipe_2_1;
  reg          inPipe_2_2;
  reg          inPipe_2_3;
  reg  [8:0]   inPipe_1_1_fuOpType;
  reg  [127:0] inPipe_1_1_src_2;
  reg  [127:0] inPipe_1_1_src_3;
  reg  [127:0] inPipe_1_1_src_4;
  reg          inPipe_1_1_robIdx_flag;
  reg  [7:0]   inPipe_1_1_robIdx_value;
  reg  [6:0]   inPipe_1_1_pdest;
  reg          inPipe_1_1_vecWen;
  reg          inPipe_1_1_v0Wen;
  reg          inPipe_1_1_fpu_wflags;
  reg          inPipe_1_1_vpu_vma;
  reg          inPipe_1_1_vpu_vta;
  reg  [1:0]   inPipe_1_1_vpu_vsew;
  reg  [2:0]   inPipe_1_1_vpu_vlmul;
  reg          inPipe_1_1_vpu_vm;
  reg  [7:0]   inPipe_1_1_vpu_vstart;
  reg  [6:0]   inPipe_1_1_vpu_vuopIdx;
  reg          inPipe_1_1_vpu_isExt;
  reg          inPipe_1_1_vpu_isNarrow;
  reg          inPipe_1_1_vpu_isDstMask;
  reg          inPipe_1_1_vpu_isOpMask;
  reg  [8:0]   inPipe_1_2_fuOpType;
  reg  [127:0] inPipe_1_2_src_2;
  reg  [127:0] inPipe_1_2_src_3;
  reg  [127:0] inPipe_1_2_src_4;
  reg          inPipe_1_2_robIdx_flag;
  reg  [7:0]   inPipe_1_2_robIdx_value;
  reg  [6:0]   inPipe_1_2_pdest;
  reg          inPipe_1_2_vecWen;
  reg          inPipe_1_2_v0Wen;
  reg          inPipe_1_2_fpu_wflags;
  reg          inPipe_1_2_vpu_vma;
  reg          inPipe_1_2_vpu_vta;
  reg  [1:0]   inPipe_1_2_vpu_vsew;
  reg  [2:0]   inPipe_1_2_vpu_vlmul;
  reg          inPipe_1_2_vpu_vm;
  reg  [7:0]   inPipe_1_2_vpu_vstart;
  reg  [6:0]   inPipe_1_2_vpu_vuopIdx;
  reg          inPipe_1_2_vpu_isNarrow;
  reg          inPipe_1_2_vpu_isDstMask;
  reg  [8:0]   inPipe_1_3_fuOpType;
  reg  [127:0] inPipe_1_3_src_2;
  reg  [127:0] inPipe_1_3_src_3;
  reg  [127:0] inPipe_1_3_src_4;
  reg          inPipe_1_3_robIdx_flag;
  reg  [7:0]   inPipe_1_3_robIdx_value;
  reg  [6:0]   inPipe_1_3_pdest;
  reg          inPipe_1_3_vecWen;
  reg          inPipe_1_3_v0Wen;
  reg          inPipe_1_3_fpu_wflags;
  reg          inPipe_1_3_vpu_vma;
  reg          inPipe_1_3_vpu_vta;
  reg  [1:0]   inPipe_1_3_vpu_vsew;
  reg  [2:0]   inPipe_1_3_vpu_vlmul;
  reg          inPipe_1_3_vpu_vm;
  reg  [7:0]   inPipe_1_3_vpu_vstart;
  reg  [6:0]   inPipe_1_3_vpu_vuopIdx;
  reg          inPipe_1_3_vpu_isNarrow;
  reg          inPipe_1_3_vpu_isDstMask;
  wire [127:0] io_out_bits_data_2_0 =
    (_Vfma_io_out_valid ? _Vfma_io_out_bits_res_data : 128'h0)
    | (_VialuFix_io_out_valid ? _VialuFix_io_out_bits_res_data : 128'h0);
  wire [8:0]   _inPipe_flushVec_flushItself_T_14 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fuVld_en_reg <= 1'h0;
      fuVldVec_1 <= 1'h0;
      fuVldVec_2 <= 1'h0;
      fuVldVec_3 <= 1'h0;
      fuVld_en_reg_1 <= 1'h0;
      fuVldVec_1_1 <= 1'h0;
      inPipe_2_1 <= 1'h0;
      inPipe_2_2 <= 1'h0;
      inPipe_2_3 <= 1'h0;
    end
    else begin
      fuVld_en_reg <= fuVld_en;
      fuVldVec_1 <= _in1ToN_io_out_0_valid;
      fuVldVec_2 <= fuVldVec_1;
      fuVldVec_3 <= fuVldVec_2;
      fuVld_en_reg_1 <= fuVld_en_1;
      fuVldVec_1_1 <= _in1ToN_io_out_1_valid;
      inPipe_2_1 <=
        io_in_valid
        & ~(io_in_valid & io_flush_valid
            & (io_flush_bits_level
               & {io_in_bits_robIdx_flag,
                  io_in_bits_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | io_in_bits_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ io_in_bits_robIdx_value > io_flush_bits_robIdx_value));
      inPipe_2_2 <=
        inPipe_2_1
        & ~(inPipe_2_1 & io_flush_valid
            & (io_flush_bits_level
               & {inPipe_1_1_robIdx_flag,
                  inPipe_1_1_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | inPipe_1_1_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ inPipe_1_1_robIdx_value > io_flush_bits_robIdx_value));
      inPipe_2_3 <=
        inPipe_2_2
        & ~(inPipe_2_2 & io_flush_valid
            & (io_flush_bits_level
               & {inPipe_1_2_robIdx_flag,
                  inPipe_1_2_robIdx_value} == _inPipe_flushVec_flushItself_T_14
               | inPipe_1_2_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ inPipe_1_2_robIdx_value > io_flush_bits_robIdx_value));
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    inPipe_1_1_fuOpType <= io_in_bits_fuOpType;
    inPipe_1_1_src_2 <= io_in_bits_src_2;
    inPipe_1_1_src_3 <= io_in_bits_src_3;
    inPipe_1_1_src_4 <= io_in_bits_src_4;
    inPipe_1_1_robIdx_flag <= io_in_bits_robIdx_flag;
    inPipe_1_1_robIdx_value <= io_in_bits_robIdx_value;
    inPipe_1_1_pdest <= io_in_bits_pdest;
    inPipe_1_1_vecWen <= io_in_bits_vecWen;
    inPipe_1_1_v0Wen <= io_in_bits_v0Wen;
    inPipe_1_1_fpu_wflags <= io_in_bits_fpu_wflags;
    inPipe_1_1_vpu_vma <= io_in_bits_vpu_vma;
    inPipe_1_1_vpu_vta <= io_in_bits_vpu_vta;
    inPipe_1_1_vpu_vsew <= io_in_bits_vpu_vsew;
    inPipe_1_1_vpu_vlmul <= io_in_bits_vpu_vlmul;
    inPipe_1_1_vpu_vm <= io_in_bits_vpu_vm;
    inPipe_1_1_vpu_vstart <= io_in_bits_vpu_vstart;
    inPipe_1_1_vpu_vuopIdx <= io_in_bits_vpu_vuopIdx;
    inPipe_1_1_vpu_isExt <= io_in_bits_vpu_isExt;
    inPipe_1_1_vpu_isNarrow <= io_in_bits_vpu_isNarrow;
    inPipe_1_1_vpu_isDstMask <= io_in_bits_vpu_isDstMask;
    inPipe_1_1_vpu_isOpMask <= io_in_bits_vpu_isOpMask;
    inPipe_1_2_fuOpType <= inPipe_1_1_fuOpType;
    inPipe_1_2_src_2 <= inPipe_1_1_src_2;
    inPipe_1_2_src_3 <= inPipe_1_1_src_3;
    inPipe_1_2_src_4 <= inPipe_1_1_src_4;
    inPipe_1_2_robIdx_flag <= inPipe_1_1_robIdx_flag;
    inPipe_1_2_robIdx_value <= inPipe_1_1_robIdx_value;
    inPipe_1_2_pdest <= inPipe_1_1_pdest;
    inPipe_1_2_vecWen <= inPipe_1_1_vecWen;
    inPipe_1_2_v0Wen <= inPipe_1_1_v0Wen;
    inPipe_1_2_fpu_wflags <= inPipe_1_1_fpu_wflags;
    inPipe_1_2_vpu_vma <= inPipe_1_1_vpu_vma;
    inPipe_1_2_vpu_vta <= inPipe_1_1_vpu_vta;
    inPipe_1_2_vpu_vsew <= inPipe_1_1_vpu_vsew;
    inPipe_1_2_vpu_vlmul <= inPipe_1_1_vpu_vlmul;
    inPipe_1_2_vpu_vm <= inPipe_1_1_vpu_vm;
    inPipe_1_2_vpu_vstart <= inPipe_1_1_vpu_vstart;
    inPipe_1_2_vpu_vuopIdx <= inPipe_1_1_vpu_vuopIdx;
    inPipe_1_2_vpu_isNarrow <= inPipe_1_1_vpu_isNarrow;
    inPipe_1_2_vpu_isDstMask <= inPipe_1_1_vpu_isDstMask;
    inPipe_1_3_fuOpType <= inPipe_1_2_fuOpType;
    inPipe_1_3_src_2 <= inPipe_1_2_src_2;
    inPipe_1_3_src_3 <= inPipe_1_2_src_3;
    inPipe_1_3_src_4 <= inPipe_1_2_src_4;
    inPipe_1_3_robIdx_flag <= inPipe_1_2_robIdx_flag;
    inPipe_1_3_robIdx_value <= inPipe_1_2_robIdx_value;
    inPipe_1_3_pdest <= inPipe_1_2_pdest;
    inPipe_1_3_vecWen <= inPipe_1_2_vecWen;
    inPipe_1_3_v0Wen <= inPipe_1_2_v0Wen;
    inPipe_1_3_fpu_wflags <= inPipe_1_2_fpu_wflags;
    inPipe_1_3_vpu_vma <= inPipe_1_2_vpu_vma;
    inPipe_1_3_vpu_vta <= inPipe_1_2_vpu_vta;
    inPipe_1_3_vpu_vsew <= inPipe_1_2_vpu_vsew;
    inPipe_1_3_vpu_vlmul <= inPipe_1_2_vpu_vlmul;
    inPipe_1_3_vpu_vm <= inPipe_1_2_vpu_vm;
    inPipe_1_3_vpu_vstart <= inPipe_1_2_vpu_vstart;
    inPipe_1_3_vpu_vuopIdx <= inPipe_1_2_vpu_vuopIdx;
    inPipe_1_3_vpu_isNarrow <= inPipe_1_2_vpu_isNarrow;
    inPipe_1_3_vpu_isDstMask <= inPipe_1_2_vpu_isDstMask;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:129];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [7:0] i = 8'h0; i < 8'h82; i += 8'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fuVld_en_reg = _RANDOM[8'h0][0];
        fuVldVec_1 = _RANDOM[8'h0][2];
        fuVldVec_2 = _RANDOM[8'h0][3];
        fuVldVec_3 = _RANDOM[8'h0][4];
        fuVld_en_reg_1 = _RANDOM[8'h0][5];
        fuVldVec_1_1 = _RANDOM[8'h0][7];
        inPipe_2_1 = _RANDOM[8'h0][9];
        inPipe_2_2 = _RANDOM[8'h0][10];
        inPipe_2_3 = _RANDOM[8'h0][11];
        inPipe_1_1_fuOpType = _RANDOM[8'h1][23:15];
        inPipe_1_1_src_2 =
          {_RANDOM[8'h9][31:24],
           _RANDOM[8'hA],
           _RANDOM[8'hB],
           _RANDOM[8'hC],
           _RANDOM[8'hD][23:0]};
        inPipe_1_1_src_3 =
          {_RANDOM[8'hD][31:24],
           _RANDOM[8'hE],
           _RANDOM[8'hF],
           _RANDOM[8'h10],
           _RANDOM[8'h11][23:0]};
        inPipe_1_1_src_4 =
          {_RANDOM[8'h11][31:24],
           _RANDOM[8'h12],
           _RANDOM[8'h13],
           _RANDOM[8'h14],
           _RANDOM[8'h15][23:0]};
        inPipe_1_1_robIdx_flag = _RANDOM[8'h17][24];
        inPipe_1_1_robIdx_value = {_RANDOM[8'h17][31:25], _RANDOM[8'h18][0]};
        inPipe_1_1_pdest = _RANDOM[8'h18][12:6];
        inPipe_1_1_vecWen = _RANDOM[8'h18][13];
        inPipe_1_1_v0Wen = _RANDOM[8'h18][14];
        inPipe_1_1_fpu_wflags = _RANDOM[8'h18][17];
        inPipe_1_1_vpu_vma = _RANDOM[8'h18][26];
        inPipe_1_1_vpu_vta = _RANDOM[8'h18][27];
        inPipe_1_1_vpu_vsew = _RANDOM[8'h18][29:28];
        inPipe_1_1_vpu_vlmul = {_RANDOM[8'h18][31:30], _RANDOM[8'h19][0]};
        inPipe_1_1_vpu_vm = _RANDOM[8'h19][9];
        inPipe_1_1_vpu_vstart = _RANDOM[8'h19][17:10];
        inPipe_1_1_vpu_vuopIdx = {_RANDOM[8'h19][31:30], _RANDOM[8'h1A][4:0]};
        inPipe_1_1_vpu_isExt = _RANDOM[8'h1E][20];
        inPipe_1_1_vpu_isNarrow = _RANDOM[8'h1E][21];
        inPipe_1_1_vpu_isDstMask = _RANDOM[8'h1E][22];
        inPipe_1_1_vpu_isOpMask = _RANDOM[8'h1E][23];
        inPipe_1_2_fuOpType = _RANDOM[8'h32][28:20];
        inPipe_1_2_src_2 =
          {_RANDOM[8'h3A][31:29],
           _RANDOM[8'h3B],
           _RANDOM[8'h3C],
           _RANDOM[8'h3D],
           _RANDOM[8'h3E][28:0]};
        inPipe_1_2_src_3 =
          {_RANDOM[8'h3E][31:29],
           _RANDOM[8'h3F],
           _RANDOM[8'h40],
           _RANDOM[8'h41],
           _RANDOM[8'h42][28:0]};
        inPipe_1_2_src_4 =
          {_RANDOM[8'h42][31:29],
           _RANDOM[8'h43],
           _RANDOM[8'h44],
           _RANDOM[8'h45],
           _RANDOM[8'h46][28:0]};
        inPipe_1_2_robIdx_flag = _RANDOM[8'h48][29];
        inPipe_1_2_robIdx_value = {_RANDOM[8'h48][31:30], _RANDOM[8'h49][5:0]};
        inPipe_1_2_pdest = _RANDOM[8'h49][17:11];
        inPipe_1_2_vecWen = _RANDOM[8'h49][18];
        inPipe_1_2_v0Wen = _RANDOM[8'h49][19];
        inPipe_1_2_fpu_wflags = _RANDOM[8'h49][22];
        inPipe_1_2_vpu_vma = _RANDOM[8'h49][31];
        inPipe_1_2_vpu_vta = _RANDOM[8'h4A][0];
        inPipe_1_2_vpu_vsew = _RANDOM[8'h4A][2:1];
        inPipe_1_2_vpu_vlmul = _RANDOM[8'h4A][5:3];
        inPipe_1_2_vpu_vm = _RANDOM[8'h4A][14];
        inPipe_1_2_vpu_vstart = _RANDOM[8'h4A][22:15];
        inPipe_1_2_vpu_vuopIdx = _RANDOM[8'h4B][9:3];
        inPipe_1_2_vpu_isNarrow = _RANDOM[8'h4F][26];
        inPipe_1_2_vpu_isDstMask = _RANDOM[8'h4F][27];
        inPipe_1_3_fuOpType = {_RANDOM[8'h63][31:25], _RANDOM[8'h64][1:0]};
        inPipe_1_3_src_2 =
          {_RANDOM[8'h6C][31:2],
           _RANDOM[8'h6D],
           _RANDOM[8'h6E],
           _RANDOM[8'h6F],
           _RANDOM[8'h70][1:0]};
        inPipe_1_3_src_3 =
          {_RANDOM[8'h70][31:2],
           _RANDOM[8'h71],
           _RANDOM[8'h72],
           _RANDOM[8'h73],
           _RANDOM[8'h74][1:0]};
        inPipe_1_3_src_4 =
          {_RANDOM[8'h74][31:2],
           _RANDOM[8'h75],
           _RANDOM[8'h76],
           _RANDOM[8'h77],
           _RANDOM[8'h78][1:0]};
        inPipe_1_3_robIdx_flag = _RANDOM[8'h7A][2];
        inPipe_1_3_robIdx_value = _RANDOM[8'h7A][10:3];
        inPipe_1_3_pdest = _RANDOM[8'h7A][22:16];
        inPipe_1_3_vecWen = _RANDOM[8'h7A][23];
        inPipe_1_3_v0Wen = _RANDOM[8'h7A][24];
        inPipe_1_3_fpu_wflags = _RANDOM[8'h7A][27];
        inPipe_1_3_vpu_vma = _RANDOM[8'h7B][4];
        inPipe_1_3_vpu_vta = _RANDOM[8'h7B][5];
        inPipe_1_3_vpu_vsew = _RANDOM[8'h7B][7:6];
        inPipe_1_3_vpu_vlmul = _RANDOM[8'h7B][10:8];
        inPipe_1_3_vpu_vm = _RANDOM[8'h7B][19];
        inPipe_1_3_vpu_vstart = _RANDOM[8'h7B][27:20];
        inPipe_1_3_vpu_vuopIdx = _RANDOM[8'h7C][14:8];
        inPipe_1_3_vpu_isNarrow = _RANDOM[8'h80][31];
        inPipe_1_3_vpu_isDstMask = _RANDOM[8'h81][0];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fuVld_en_reg = 1'h0;
        fuVldVec_1 = 1'h0;
        fuVldVec_2 = 1'h0;
        fuVldVec_3 = 1'h0;
        fuVld_en_reg_1 = 1'h0;
        fuVldVec_1_1 = 1'h0;
        inPipe_2_1 = 1'h0;
        inPipe_2_2 = 1'h0;
        inPipe_2_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VFMA Vfma (
    .clock                               (_ClockGate_Q),
    .reset                               (reset),
    .io_in_valid                         (_in1ToN_io_out_0_valid),
    .io_in_bits_ctrl_fuOpType            (_in1ToN_io_out_0_bits_fuOpType),
    .io_in_bits_ctrl_vpu_vsew            (_in1ToN_io_out_0_bits_vpu_vsew),
    .io_in_bits_ctrl_vpu_vuopIdx         (_in1ToN_io_out_0_bits_vpu_vuopIdx),
    .io_in_bits_ctrlPipe_3_fuOpType      (inPipe_1_3_fuOpType),
    .io_in_bits_ctrlPipe_3_robIdx_flag   (inPipe_1_3_robIdx_flag),
    .io_in_bits_ctrlPipe_3_robIdx_value  (inPipe_1_3_robIdx_value),
    .io_in_bits_ctrlPipe_3_pdest         ({1'h0, inPipe_1_3_pdest}),
    .io_in_bits_ctrlPipe_3_vecWen        (inPipe_1_3_vecWen),
    .io_in_bits_ctrlPipe_3_v0Wen         (inPipe_1_3_v0Wen),
    .io_in_bits_ctrlPipe_3_fpu_wflags    (inPipe_1_3_fpu_wflags),
    .io_in_bits_ctrlPipe_3_vpu_vma       (inPipe_1_3_vpu_vma),
    .io_in_bits_ctrlPipe_3_vpu_vta       (inPipe_1_3_vpu_vta),
    .io_in_bits_ctrlPipe_3_vpu_vsew      (inPipe_1_3_vpu_vsew),
    .io_in_bits_ctrlPipe_3_vpu_vlmul     (inPipe_1_3_vpu_vlmul),
    .io_in_bits_ctrlPipe_3_vpu_vm        (inPipe_1_3_vpu_vm),
    .io_in_bits_ctrlPipe_3_vpu_vstart    (inPipe_1_3_vpu_vstart),
    .io_in_bits_ctrlPipe_3_vpu_vuopIdx   (inPipe_1_3_vpu_vuopIdx),
    .io_in_bits_ctrlPipe_3_vpu_isNarrow  (inPipe_1_3_vpu_isNarrow),
    .io_in_bits_ctrlPipe_3_vpu_isDstMask (inPipe_1_3_vpu_isDstMask),
    .io_in_bits_validPipe_3              (inPipe_2_3),
    .io_in_bits_data_src_2               (io_in_bits_src_2),
    .io_in_bits_data_src_1               (io_in_bits_src_1),
    .io_in_bits_data_src_0               (io_in_bits_src_0),
    .io_in_bits_dataPipe_3_src_4         (inPipe_1_3_src_4[7:0]),
    .io_in_bits_dataPipe_3_src_3         (inPipe_1_3_src_3),
    .io_in_bits_dataPipe_3_src_2         (inPipe_1_3_src_2),
    .io_out_valid                        (_Vfma_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag        (_Vfma_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value       (_Vfma_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest              (_Vfma_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_vecWen             (_Vfma_io_out_bits_ctrl_vecWen),
    .io_out_bits_ctrl_v0Wen              (_Vfma_io_out_bits_ctrl_v0Wen),
    .io_out_bits_ctrl_fpu_wflags         (_Vfma_io_out_bits_ctrl_fpu_wflags),
    .io_out_bits_res_data                (_Vfma_io_out_bits_res_data),
    .io_out_bits_res_fflags              (_Vfma_io_out_bits_res_fflags),
    .io_frm                              (io_frm)
  );
  VIAluFix VialuFix (
    .clock                               (_ClockGate_1_Q),
    .reset                               (reset),
    .io_in_valid                         (_in1ToN_io_out_1_valid),
    .io_in_bits_ctrl_fuOpType            (_in1ToN_io_out_1_bits_fuOpType),
    .io_in_bits_ctrl_vpu_vma             (_in1ToN_io_out_1_bits_vpu_vma),
    .io_in_bits_ctrl_vpu_vsew            (_in1ToN_io_out_1_bits_vpu_vsew),
    .io_in_bits_ctrl_vpu_vm              (_in1ToN_io_out_1_bits_vpu_vm),
    .io_in_bits_ctrl_vpu_vuopIdx         (_in1ToN_io_out_1_bits_vpu_vuopIdx),
    .io_in_bits_ctrl_vpu_isExt           (_in1ToN_io_out_1_bits_vpu_isExt),
    .io_in_bits_ctrl_vpu_isNarrow        (_in1ToN_io_out_1_bits_vpu_isNarrow),
    .io_in_bits_ctrl_vpu_isDstMask       (_in1ToN_io_out_1_bits_vpu_isDstMask),
    .io_in_bits_ctrlPipe_1_fuOpType      (inPipe_1_1_fuOpType),
    .io_in_bits_ctrlPipe_1_robIdx_flag   (inPipe_1_1_robIdx_flag),
    .io_in_bits_ctrlPipe_1_robIdx_value  (inPipe_1_1_robIdx_value),
    .io_in_bits_ctrlPipe_1_pdest         ({1'h0, inPipe_1_1_pdest}),
    .io_in_bits_ctrlPipe_1_vecWen        (inPipe_1_1_vecWen),
    .io_in_bits_ctrlPipe_1_v0Wen         (inPipe_1_1_v0Wen),
    .io_in_bits_ctrlPipe_1_vpu_vma       (inPipe_1_1_vpu_vma),
    .io_in_bits_ctrlPipe_1_vpu_vta       (inPipe_1_1_vpu_vta),
    .io_in_bits_ctrlPipe_1_vpu_vsew      (inPipe_1_1_vpu_vsew),
    .io_in_bits_ctrlPipe_1_vpu_vm        (inPipe_1_1_vpu_vm),
    .io_in_bits_ctrlPipe_1_vpu_vstart    (inPipe_1_1_vpu_vstart),
    .io_in_bits_ctrlPipe_1_vpu_vuopIdx   (inPipe_1_1_vpu_vuopIdx),
    .io_in_bits_ctrlPipe_1_vpu_isExt     (inPipe_1_1_vpu_isExt),
    .io_in_bits_ctrlPipe_1_vpu_isNarrow  (inPipe_1_1_vpu_isNarrow),
    .io_in_bits_ctrlPipe_1_vpu_isDstMask (inPipe_1_1_vpu_isDstMask),
    .io_in_bits_ctrlPipe_1_vpu_isOpMask  (inPipe_1_1_vpu_isOpMask),
    .io_in_bits_validPipe_0              (io_in_valid),
    .io_in_bits_validPipe_1              (inPipe_2_1),
    .io_in_bits_data_src_3               (io_in_bits_src_3),
    .io_in_bits_data_src_2               (io_in_bits_src_2),
    .io_in_bits_data_src_1               (io_in_bits_src_1),
    .io_in_bits_data_src_0               (io_in_bits_src_0),
    .io_in_bits_dataPipe_1_src_4         (inPipe_1_1_src_4[7:0]),
    .io_in_bits_dataPipe_1_src_3         (inPipe_1_1_src_3),
    .io_in_bits_dataPipe_1_src_2         (inPipe_1_1_src_2),
    .io_out_valid                        (_VialuFix_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag        (_VialuFix_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value       (_VialuFix_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest              (_VialuFix_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_vecWen             (_VialuFix_io_out_bits_ctrl_vecWen),
    .io_out_bits_ctrl_v0Wen              (_VialuFix_io_out_bits_ctrl_v0Wen),
    .io_out_bits_res_data                (_VialuFix_io_out_bits_res_data),
    .io_out_bits_res_vxsat               (_VialuFix_io_out_bits_res_vxsat),
    .io_vxrm                             (io_vxrm)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (fuVld_en | fuVld_en_reg),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (fuVld_en_1 | fuVld_en_reg_1),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  Dispatcher_15 in1ToN (
    .io_in_valid                 (io_in_valid),
    .io_in_bits_fuType           (io_in_bits_fuType),
    .io_in_bits_fuOpType         (io_in_bits_fuOpType),
    .io_in_bits_vpu_vma          (io_in_bits_vpu_vma),
    .io_in_bits_vpu_vsew         (io_in_bits_vpu_vsew),
    .io_in_bits_vpu_vm           (io_in_bits_vpu_vm),
    .io_in_bits_vpu_vuopIdx      (io_in_bits_vpu_vuopIdx),
    .io_in_bits_vpu_isExt        (io_in_bits_vpu_isExt),
    .io_in_bits_vpu_isNarrow     (io_in_bits_vpu_isNarrow),
    .io_in_bits_vpu_isDstMask    (io_in_bits_vpu_isDstMask),
    .io_out_0_valid              (_in1ToN_io_out_0_valid),
    .io_out_0_bits_fuOpType      (_in1ToN_io_out_0_bits_fuOpType),
    .io_out_0_bits_vpu_vsew      (_in1ToN_io_out_0_bits_vpu_vsew),
    .io_out_0_bits_vpu_vuopIdx   (_in1ToN_io_out_0_bits_vpu_vuopIdx),
    .io_out_1_valid              (_in1ToN_io_out_1_valid),
    .io_out_1_bits_fuOpType      (_in1ToN_io_out_1_bits_fuOpType),
    .io_out_1_bits_vpu_vma       (_in1ToN_io_out_1_bits_vpu_vma),
    .io_out_1_bits_vpu_vsew      (_in1ToN_io_out_1_bits_vpu_vsew),
    .io_out_1_bits_vpu_vm        (_in1ToN_io_out_1_bits_vpu_vm),
    .io_out_1_bits_vpu_vuopIdx   (_in1ToN_io_out_1_bits_vpu_vuopIdx),
    .io_out_1_bits_vpu_isExt     (_in1ToN_io_out_1_bits_vpu_isExt),
    .io_out_1_bits_vpu_isNarrow  (_in1ToN_io_out_1_bits_vpu_isNarrow),
    .io_out_1_bits_vpu_isDstMask (_in1ToN_io_out_1_bits_vpu_isDstMask)
  );
  assign io_out_valid = |{_Vfma_io_out_valid, _VialuFix_io_out_valid};
  assign io_out_bits_data_1 = io_out_bits_data_2_0;
  assign io_out_bits_data_2 = io_out_bits_data_2_0;
  assign io_out_bits_pdest =
    (_Vfma_io_out_valid ? _Vfma_io_out_bits_ctrl_pdest[6:0] : 7'h0)
    | (_VialuFix_io_out_valid ? _VialuFix_io_out_bits_ctrl_pdest[6:0] : 7'h0);
  assign io_out_bits_robIdx_flag =
    _Vfma_io_out_valid & _Vfma_io_out_bits_ctrl_robIdx_flag | _VialuFix_io_out_valid
    & _VialuFix_io_out_bits_ctrl_robIdx_flag;
  assign io_out_bits_robIdx_value =
    (_Vfma_io_out_valid ? _Vfma_io_out_bits_ctrl_robIdx_value : 8'h0)
    | (_VialuFix_io_out_valid ? _VialuFix_io_out_bits_ctrl_robIdx_value : 8'h0);
  assign io_out_bits_vecWen =
    _Vfma_io_out_valid & _Vfma_io_out_bits_ctrl_vecWen | _VialuFix_io_out_valid
    & _VialuFix_io_out_bits_ctrl_vecWen;
  assign io_out_bits_v0Wen =
    _Vfma_io_out_valid & _Vfma_io_out_bits_ctrl_v0Wen | _VialuFix_io_out_valid
    & _VialuFix_io_out_bits_ctrl_v0Wen;
  assign io_out_bits_fflags = _Vfma_io_out_valid ? _Vfma_io_out_bits_res_fflags : 5'h0;
  assign io_out_bits_wflags = _Vfma_io_out_valid & _Vfma_io_out_bits_ctrl_fpu_wflags;
  assign io_out_bits_vxsat = _VialuFix_io_out_valid & _VialuFix_io_out_bits_res_vxsat;
endmodule

