// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CVT64(
  input         clock,
  input         reset,
  input         io_fire,
  input  [63:0] io_src,
  input  [7:0]  io_opType,
  input  [2:0]  io_rm,
  input  [3:0]  io_input1H,
  input  [3:0]  io_output1H,
  input  [1:0]  io_isFround,
  input         io_isFcvtmod,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire [63:0] _fpcvt_io_result;
  wire [4:0]  _fpcvt_io_fflags;
  reg         fireReg_last_r;
  reg         isFroundReg;
  reg         s1_outIsFP;
  reg         s1_outIsF64;
  reg         s1_outIsF32;
  reg         s1_outIsF16;
  reg         s1_outIsU32;
  reg         s1_outIsS32;
  reg         s1_outIsU64;
  reg         s1_outIsS64;
  reg         s1_fpCanonicalNAN;
  reg         s2_outIsFP;
  reg         s2_fpCanonicalNAN;
  reg         s2_isFround;
  reg  [63:0] s2_resultForfpCanonicalNAN;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fireReg_last_r <= 1'h0;
      isFroundReg <= 1'h0;
    end
    else begin
      if (io_fire | fireReg_last_r)
        fireReg_last_r <= io_fire;
      if (io_fire)
        isFroundReg <= |io_isFround;
    end
  end // always @(posedge, posedge)
  wire [30:0] _s1_resultForfpCanonicalNAN_T_11 = s1_outIsF32 ? 31'h7FC00000 : 31'h0;
  wire [63:0] _s1_resultForfpCanonicalNAN_T_18 =
    {1'h0,
     s1_outIsF64 ? 32'hFFF00000 : 32'h0,
     _s1_resultForfpCanonicalNAN_T_11[30:15],
     _s1_resultForfpCanonicalNAN_T_11[14:0] | (s1_outIsF16 ? 15'h7E00 : 15'h0)}
    | {64{s1_outIsU32 | s1_outIsU64}};
  always @(posedge clock) begin
    if (io_fire) begin
      s1_outIsFP <= io_opType[6];
      s1_outIsF64 <= io_opType[6] & io_output1H[3];
      s1_outIsF32 <= io_opType[6] & io_output1H[2];
      s1_outIsF16 <= io_opType[6] & io_output1H[1];
      s1_outIsU32 <= ~(io_opType[6]) & io_output1H[2] & ~(io_opType[0]);
      s1_outIsS32 <= ~(io_opType[6]) & io_output1H[2] & io_opType[0];
      s1_outIsU64 <= ~(io_opType[6]) & io_output1H[3] & ~(io_opType[0]);
      s1_outIsS64 <= ~(io_opType[6]) & io_output1H[3] & io_opType[0];
      s1_fpCanonicalNAN <=
        io_opType[7]
        & (io_input1H[1] & io_src[63:16] != 48'hFFFFFFFFFFFF | io_input1H[2]
           & io_src[63:32] != 32'hFFFFFFFF);
    end
    if (fireReg_last_r) begin
      s2_outIsFP <= s1_outIsFP;
      s2_fpCanonicalNAN <= s1_fpCanonicalNAN;
      s2_isFround <= isFroundReg;
      s2_resultForfpCanonicalNAN <=
        {_s1_resultForfpCanonicalNAN_T_18[63],
         {_s1_resultForfpCanonicalNAN_T_18[62:31],
          _s1_resultForfpCanonicalNAN_T_18[30:0] | {31{s1_outIsS32}}}
           | {63{s1_outIsS64}}};
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fireReg_last_r = _RANDOM[2'h0][0];
        isFroundReg = _RANDOM[2'h0][6];
        s1_outIsFP = _RANDOM[2'h0][10];
        s1_outIsF64 = _RANDOM[2'h0][11];
        s1_outIsF32 = _RANDOM[2'h0][12];
        s1_outIsF16 = _RANDOM[2'h0][13];
        s1_outIsU32 = _RANDOM[2'h0][14];
        s1_outIsS32 = _RANDOM[2'h0][15];
        s1_outIsU64 = _RANDOM[2'h0][16];
        s1_outIsS64 = _RANDOM[2'h0][17];
        s1_fpCanonicalNAN = _RANDOM[2'h0][18];
        s2_outIsFP = _RANDOM[2'h0][20];
        s2_fpCanonicalNAN = _RANDOM[2'h0][21];
        s2_isFround = _RANDOM[2'h0][25];
        s2_resultForfpCanonicalNAN =
          {_RANDOM[2'h0][31:26], _RANDOM[2'h1], _RANDOM[2'h2][25:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fireReg_last_r = 1'h0;
        isFroundReg = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FP_INCVT fpcvt (
    .clock            (clock),
    .reset            (reset),
    .io_fire          (io_fire),
    .io_src           (io_src),
    .io_opType        (io_opType),
    .io_rm            (io_rm),
    .io_input1H       (io_input1H),
    .io_output1H      (io_output1H),
    .io_isFpToVecInst (1'h1),
    .io_isFround      (io_isFround),
    .io_isFcvtmod     (io_isFcvtmod),
    .io_result        (_fpcvt_io_result),
    .io_fflags        (_fpcvt_io_fflags)
  );
  assign io_result = s2_fpCanonicalNAN ? s2_resultForfpCanonicalNAN : _fpcvt_io_result;
  assign io_fflags =
    s2_fpCanonicalNAN & ~s2_outIsFP
      ? 5'h10
      : s2_fpCanonicalNAN & s2_isFround ? 5'h0 : _fpcvt_io_fflags;
endmodule

