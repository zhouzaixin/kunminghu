// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FPCVT(
  input         clock,
  input         reset,
  input         io_fire,
  input  [63:0] io_src,
  input  [7:0]  io_opType,
  input  [1:0]  io_sew,
  input  [2:0]  io_rm,
  input  [1:0]  io_isFround,
  input         io_isFcvtmod,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire [3:0] input1H_plaInput = {io_opType[4:3], io_sew};
  wire [3:0] input1H_invInputs = ~input1H_plaInput;
  wire [3:0] input1H =
    {|{&{io_sew[0], io_sew[1], input1H_invInputs[2], input1H_invInputs[3]},
       &{input1H_invInputs[0], io_sew[1], input1H_invInputs[2], io_opType[4]},
       &{io_sew[0], io_sew[1], io_opType[3], io_opType[4]}},
     |{&{input1H_invInputs[0], io_sew[1], input1H_invInputs[3]},
       &{io_sew[0], input1H_invInputs[1], input1H_invInputs[2], io_opType[4]}},
     |{&{io_sew[0], input1H_invInputs[1], input1H_invInputs[3]},
       &{io_sew[0], input1H_invInputs[1], io_opType[3]},
       &{input1H_invInputs[0], input1H_invInputs[1], input1H_invInputs[2], io_opType[4]}},
     &{input1H_invInputs[0], input1H_invInputs[1], io_opType[3], input1H_invInputs[3]}};
  wire [3:0] output1H_invInputs = ~input1H_plaInput;
  wire [3:0] output1H =
    {|{&{io_sew[0], io_sew[1], output1H_invInputs[2], output1H_invInputs[3]},
       &{output1H_invInputs[0], io_sew[1], io_opType[3], output1H_invInputs[3]},
       &{io_sew[0], output1H_invInputs[1], io_opType[3], io_opType[4]}},
     |{&{output1H_invInputs[0], io_sew[1], output1H_invInputs[2]},
       &{io_sew[0], output1H_invInputs[1], io_opType[3], output1H_invInputs[3]}},
     |{&{io_sew[0], output1H_invInputs[1], output1H_invInputs[2]},
       &{output1H_invInputs[0],
         output1H_invInputs[1],
         io_opType[3],
         output1H_invInputs[3]},
       &{io_sew[0], io_sew[1], io_opType[3], io_opType[4]}},
     &{output1H_invInputs[0],
       output1H_invInputs[1],
       output1H_invInputs[2],
       io_opType[4]}};
  CVT64 fcvt (
    .clock        (clock),
    .reset        (reset),
    .io_fire      (io_fire),
    .io_src       (io_src),
    .io_opType    (io_opType),
    .io_rm        (io_rm),
    .io_input1H   (input1H),
    .io_output1H  (output1H),
    .io_isFround  (io_isFround),
    .io_isFcvtmod (io_isFcvtmod),
    .io_result    (io_result),
    .io_fflags    (io_fflags)
  );
endmodule

