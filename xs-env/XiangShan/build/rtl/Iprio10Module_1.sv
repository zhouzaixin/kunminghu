// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Iprio10Module_1(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  input         sie_SSIE,
  input         sie_STIE,
  input         sie_SEIE,
  input         sie_LCOFIE,
  input         sie_LC14IE,
  input         sie_LC15IE,
  input         sie_LC16IE,
  input         sie_LC17IE,
  input         sie_LC18IE,
  input         sie_LC19IE,
  input         sie_LC20IE,
  input         sie_LC21IE,
  input         sie_LC22IE,
  input         sie_LC23IE,
  input         sie_LC24IE,
  input         sie_LC25IE,
  input         sie_LC26IE,
  input         sie_LC27IE,
  input         sie_LC28IE,
  input         sie_LC29IE,
  input         sie_LC30IE,
  input         sie_LC31IE,
  input         sie_LC32IE,
  input         sie_LC33IE,
  input         sie_LC34IE,
  input         sie_LPRASEIE,
  input         sie_LC36IE,
  input         sie_LC37IE,
  input         sie_LC38IE,
  input         sie_LC39IE,
  input         sie_LC40IE,
  input         sie_LC41IE,
  input         sie_LC42IE,
  input         sie_HPRASEIE,
  input         sie_LC44IE,
  input         sie_LC45IE,
  input         sie_LC46IE,
  input         sie_LC47IE,
  input         sie_LC48IE,
  input         sie_LC49IE,
  input         sie_LC50IE,
  input         sie_LC51IE,
  input         sie_LC52IE,
  input         sie_LC53IE,
  input         sie_LC54IE,
  input         sie_LC55IE,
  input         sie_LC56IE,
  input         sie_LC57IE,
  input         sie_LC58IE,
  input         sie_LC59IE,
  input         sie_LC60IE,
  input         sie_LC61IE,
  input         sie_LC62IE,
  input         sie_LC63IE
);

  reg [63:0] reg_ALL;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_ALL <= 64'h0;
    else if (w_wen)
      reg_ALL <= w_wdata;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        reg_ALL = {_RANDOM[1'h0], _RANDOM[1'h1]};
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        reg_ALL = 64'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    reg_ALL
    & {{8{sie_LC47IE}},
       {8{sie_LC46IE}},
       {8{sie_LC45IE}},
       {8{sie_LC44IE}},
       {8{sie_HPRASEIE}},
       {8{sie_LC42IE}},
       {8{sie_LC41IE}},
       {8{sie_LC40IE}}};
endmodule

