// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_60(
  input         clock,
  input         reset,
  output        io_r_req_ready,
  input         io_r_req_valid,
  input  [6:0]  io_r_req_bits_setIdx,
  output        io_r_resp_data_0_valid,
  output [8:0]  io_r_resp_data_0_tag,
  output [1:0]  io_r_resp_data_0_ctr,
  output [19:0] io_r_resp_data_0_target_offset_offset,
  output [3:0]  io_r_resp_data_0_target_offset_pointer,
  output        io_r_resp_data_0_target_offset_usePCRegion,
  output        io_r_resp_data_0_useful,
  output        io_r_resp_data_1_valid,
  output [8:0]  io_r_resp_data_1_tag,
  output [1:0]  io_r_resp_data_1_ctr,
  output [19:0] io_r_resp_data_1_target_offset_offset,
  output [3:0]  io_r_resp_data_1_target_offset_pointer,
  output        io_r_resp_data_1_target_offset_usePCRegion,
  output        io_r_resp_data_1_useful,
  input         io_w_req_valid,
  input  [6:0]  io_w_req_bits_setIdx,
  input  [8:0]  io_w_req_bits_data_0_tag,
  input  [1:0]  io_w_req_bits_data_0_ctr,
  input  [19:0] io_w_req_bits_data_0_target_offset_offset,
  input  [3:0]  io_w_req_bits_data_0_target_offset_pointer,
  input         io_w_req_bits_data_0_target_offset_usePCRegion,
  input         io_w_req_bits_data_0_useful,
  input  [8:0]  io_w_req_bits_data_1_tag,
  input  [1:0]  io_w_req_bits_data_1_ctr,
  input  [19:0] io_w_req_bits_data_1_target_offset_offset,
  input  [3:0]  io_w_req_bits_data_1_target_offset_pointer,
  input         io_w_req_bits_data_1_target_offset_usePCRegion,
  input         io_w_req_bits_data_1_useful,
  input  [75:0] io_w_req_bits_flattened_bitmask
);

  wire [6:0]  setIdx;
  wire        realRen;
  wire        wen;
  wire        _ClockGate_Q;
  wire [75:0] _array_RW0_rdata;
  reg         _resetState;
  reg  [6:0]  _resetSet;
  assign wen = io_w_req_valid | _resetState;
  assign realRen = io_r_req_valid & ~wen;
  assign setIdx = _resetState ? _resetSet : io_w_req_bits_setIdx;
  reg         rdata_last_REG;
  reg  [37:0] rdata_hold_data_0;
  reg  [37:0] rdata_hold_data_1;
  wire [37:0] _rdata_T_0 = rdata_last_REG ? _array_RW0_rdata[37:0] : rdata_hold_data_0;
  wire [37:0] _rdata_T_1 = rdata_last_REG ? _array_RW0_rdata[75:38] : rdata_hold_data_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      _resetState <= 1'h1;
      _resetSet <= 7'h0;
      rdata_last_REG <= 1'h0;
    end
    else begin
      _resetState <= ~(_resetState & (&_resetSet)) & _resetState;
      if (_resetState)
        _resetSet <= 7'(_resetSet + 7'h1);
      rdata_last_REG <= realRen;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (rdata_last_REG) begin
      rdata_hold_data_0 <= _array_RW0_rdata[37:0];
      rdata_hold_data_1 <= _array_RW0_rdata[75:38];
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;
        end
        _resetState = _RANDOM[3'h0][0];
        _resetSet = _RANDOM[3'h0][7:1];
        rdata_last_REG = _RANDOM[3'h4][25];
        rdata_hold_data_0 = {_RANDOM[3'h4][31:26], _RANDOM[3'h5]};
        rdata_hold_data_1 = {_RANDOM[3'h6], _RANDOM[3'h7][5:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        _resetState = 1'h1;
        _resetSet = 7'h0;
        rdata_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_6 array (
    .RW0_addr  (wen ? setIdx : io_r_req_bits_setIdx),
    .RW0_en    (realRen | wen),
    .RW0_clk   (_ClockGate_Q),
    .RW0_wmode (wen),
    .RW0_wdata
      ({~_resetState,
        _resetState ? 9'h0 : io_w_req_bits_data_1_tag,
        _resetState ? 2'h0 : io_w_req_bits_data_1_ctr,
        _resetState ? 20'h0 : io_w_req_bits_data_1_target_offset_offset,
        _resetState ? 4'h0 : io_w_req_bits_data_1_target_offset_pointer,
        ~_resetState & io_w_req_bits_data_1_target_offset_usePCRegion,
        ~_resetState & io_w_req_bits_data_1_useful,
        ~_resetState,
        _resetState ? 9'h0 : io_w_req_bits_data_0_tag,
        _resetState ? 2'h0 : io_w_req_bits_data_0_ctr,
        _resetState ? 20'h0 : io_w_req_bits_data_0_target_offset_offset,
        _resetState ? 4'h0 : io_w_req_bits_data_0_target_offset_pointer,
        ~_resetState & io_w_req_bits_data_0_target_offset_usePCRegion,
        ~_resetState & io_w_req_bits_data_0_useful}),
    .RW0_rdata (_array_RW0_rdata),
    .RW0_wmask (_resetState ? 76'hFFFFFFFFFFFFFFFFFFF : io_w_req_bits_flattened_bitmask)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_r_req_valid | wen),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  assign io_r_req_ready = ~_resetState & ~wen;
  assign io_r_resp_data_0_valid = _rdata_T_0[37];
  assign io_r_resp_data_0_tag = _rdata_T_0[36:28];
  assign io_r_resp_data_0_ctr = _rdata_T_0[27:26];
  assign io_r_resp_data_0_target_offset_offset = _rdata_T_0[25:6];
  assign io_r_resp_data_0_target_offset_pointer = _rdata_T_0[5:2];
  assign io_r_resp_data_0_target_offset_usePCRegion = _rdata_T_0[1];
  assign io_r_resp_data_0_useful = _rdata_T_0[0];
  assign io_r_resp_data_1_valid = _rdata_T_1[37];
  assign io_r_resp_data_1_tag = _rdata_T_1[36:28];
  assign io_r_resp_data_1_ctr = _rdata_T_1[27:26];
  assign io_r_resp_data_1_target_offset_offset = _rdata_T_1[25:6];
  assign io_r_resp_data_1_target_offset_pointer = _rdata_T_1[5:2];
  assign io_r_resp_data_1_target_offset_usePCRegion = _rdata_T_1[1];
  assign io_r_resp_data_1_useful = _rdata_T_1[0];
endmodule

