// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FloatDividerR64(
  input         clock,
  input         reset,
  input         io_start_valid_i,
  output        io_start_ready_o,
  input         io_flush_i,
  input  [1:0]  io_fp_format_i,
  input  [63:0] io_opa_i,
  input  [63:0] io_opb_i,
  input  [2:0]  io_rm_i,
  input         io_fp_aIsFpCanonicalNAN,
  input         io_fp_bIsFpCanonicalNAN,
  output        io_finish_valid_o,
  input         io_finish_ready_i,
  output [63:0] io_fpdiv_res_o,
  output [4:0]  io_fflags_o
);

  wire         res_is_denormal_f64_0;
  wire [4:0]   _u_r64_block_vector_io_nxt_quo_dig_o_0_0;
  wire [4:0]   _u_r64_block_vector_io_nxt_quo_dig_o_0_1;
  wire [4:0]   _u_r64_block_vector_io_nxt_quo_dig_o_0_2;
  wire [71:0]  _u_r64_block_vector_io_nxt_f_r_s_o_2;
  wire [71:0]  _u_r64_block_vector_io_nxt_f_r_c_o_2;
  wire [5:0]   _u_r64_block_vector_io_adder_6b_res_for_nxt_cycle_s0_qds_o;
  wire [6:0]   _u_r64_block_vector_io_adder_7b_res_for_nxt_cycle_s1_qds_o;
  wire [52:0]  _U_Left_Shift_opb_f64_0_io_lshift_result;
  wire [5:0]   _U_Left_Shift_opb_f64_0_io_lzd_result;
  wire [52:0]  _U_Left_Shift_opa_f64_0_io_lshift_result;
  wire [5:0]   _U_Left_Shift_opa_f64_0_io_lzd_result;
  wire         fp_format_is_fp16 = io_fp_format_i == 2'h1;
  wire         fp_format_is_fp32 = io_fp_format_i == 2'h2;
  reg  [5:0]   fsm_q;
  reg          opb_is_power_of_2_q;
  wire [10:0]  opa_exp_f64_0 =
    ((&io_fp_format_i) ? io_opa_i[62:52] : 11'h0)
    | (fp_format_is_fp32 ? {3'h0, io_opa_i[30:23]} : 11'h0)
    | (fp_format_is_fp16 ? {6'h0, io_opa_i[14:10]} : 11'h0);
  wire [10:0]  opb_exp_f64_0 =
    ((&io_fp_format_i) ? io_opb_i[62:52] : 11'h0)
    | (fp_format_is_fp32 ? {3'h0, io_opb_i[30:23]} : 11'h0)
    | (fp_format_is_fp16 ? {6'h0, io_opb_i[14:10]} : 11'h0);
  wire         opa_exp_is_zero_f64_0 = opa_exp_f64_0 == 11'h0;
  wire         opb_exp_is_zero_f64_0 = opb_exp_f64_0 == 11'h0;
  wire         _init_cycles_T_1 = opa_exp_is_zero_f64_0 | opb_exp_is_zero_f64_0;
  wire [10:0]  _opb_exp_is_max_f64_0_T = {11{&io_fp_format_i}};
  wire [10:0]  _opb_exp_is_max_f64_0_T_1 = fp_format_is_fp32 ? 11'hFF : 11'h0;
  wire [10:0]  _opb_exp_is_max_f64_0_T_2 = fp_format_is_fp16 ? 11'h1F : 11'h0;
  wire         opa_exp_is_max_f64_0 =
    opa_exp_f64_0 == (_opb_exp_is_max_f64_0_T | _opb_exp_is_max_f64_0_T_1
                      | _opb_exp_is_max_f64_0_T_2);
  wire         opb_exp_is_max_f64_0 =
    opb_exp_f64_0 == (_opb_exp_is_max_f64_0_T | _opb_exp_is_max_f64_0_T_1
                      | _opb_exp_is_max_f64_0_T_2);
  wire [51:0]  opa_frac_f64_0 =
    ((&io_fp_format_i) ? io_opa_i[51:0] : 52'h0)
    | (fp_format_is_fp32 ? {io_opa_i[22:0], 29'h0} : 52'h0)
    | (fp_format_is_fp16 ? {io_opa_i[9:0], 42'h0} : 52'h0);
  wire [51:0]  opb_frac_f64_0 =
    ((&io_fp_format_i) ? io_opb_i[51:0] : 52'h0)
    | (fp_format_is_fp32 ? {io_opb_i[22:0], 29'h0} : 52'h0)
    | (fp_format_is_fp16 ? {io_opb_i[9:0], 42'h0} : 52'h0);
  wire         opa_is_zero_f64_0 =
    ~io_fp_aIsFpCanonicalNAN & opa_exp_is_zero_f64_0 & ~(|opa_frac_f64_0);
  wire         opb_is_zero_f64_0 =
    ~io_fp_bIsFpCanonicalNAN & opb_exp_is_zero_f64_0 & ~(|opb_frac_f64_0);
  wire         opa_is_inf_f64_0 =
    ~io_fp_aIsFpCanonicalNAN & opa_exp_is_max_f64_0 & ~(|opa_frac_f64_0);
  wire         opb_is_inf_f64_0 =
    ~io_fp_bIsFpCanonicalNAN & opb_exp_is_max_f64_0 & ~(|opb_frac_f64_0);
  wire         opa_is_snan_f64_0 =
    ~io_fp_aIsFpCanonicalNAN & opa_exp_is_max_f64_0 & ~(opa_frac_f64_0[51])
    & (|opa_frac_f64_0);
  wire         opb_is_snan_f64_0 =
    ~io_fp_bIsFpCanonicalNAN & opb_exp_is_max_f64_0 & ~(opb_frac_f64_0[51])
    & (|opb_frac_f64_0);
  wire         op_invalid_f64_0 =
    opa_is_inf_f64_0 & opb_is_inf_f64_0 | opa_is_zero_f64_0 & opb_is_zero_f64_0
    | opa_is_snan_f64_0 | opb_is_snan_f64_0;
  wire         res_is_nan_f64_0 =
    io_fp_aIsFpCanonicalNAN | opa_exp_is_max_f64_0 & opa_frac_f64_0[51]
    | opa_is_snan_f64_0 | io_fp_bIsFpCanonicalNAN | opb_exp_is_max_f64_0
    & opb_frac_f64_0[51] | opb_is_snan_f64_0 | op_invalid_f64_0;
  wire         res_is_inf_f64_0 = opa_is_inf_f64_0 | opb_is_zero_f64_0;
  wire         res_is_exact_zero_f64_0 = opa_is_zero_f64_0 | opb_is_inf_f64_0;
  reg  [2:0]   fp_format_onehot_q;
  reg  [2:0]   rm_q;
  reg          out_sign_q;
  reg          res_is_nan_q;
  reg          res_is_inf_q;
  reg          res_is_exact_zero_q;
  reg          op_invalid_div_q;
  reg          divided_by_zero_q;
  reg  [12:0]  out_exp_diff_q_f64_0;
  assign res_is_denormal_f64_0 =
    out_exp_diff_q_f64_0[11:0] == 12'h0 | out_exp_diff_q_f64_0[12];
  reg  [3:0]   iter_num_q;
  wire [52:0]  opa_frac_pre_shifted_f64_0 = {1'h0, opa_frac_f64_0};
  wire [52:0]  opb_frac_pre_shifted_f64_0 = {1'h0, opb_frac_f64_0};
  reg  [53:0]  quo_iter_q_f64_0;
  reg  [53:0]  quo_m1_iter_q_f64_0;
  reg  [59:0]  frac_divisor_q_60bit;
  reg  [5:0]   nr_f_r_6b_for_nxt_cycle_s0_qds_q_f64_0;
  reg  [6:0]   nr_f_r_7b_for_nxt_cycle_s1_qds_q_f64_0;
  reg  [71:0]  f_r_s_q_72bit;
  reg  [71:0]  f_r_c_q_72bit;
  reg  [4:0]   prev_quo_dig_q_f64_0;
  wire [54:0]  _GEN = {55{prev_quo_dig_q_f64_0[0]}};
  wire [54:0]  _GEN_0 = {55{prev_quo_dig_q_f64_0[1]}};
  wire [54:0]  _GEN_1 = {quo_iter_q_f64_0[52:0], 2'h1};
  wire [54:0]  _GEN_2 = {55{prev_quo_dig_q_f64_0[2]}};
  wire [54:0]  _GEN_3 = {quo_iter_q_f64_0[52:0], 2'h0};
  wire [54:0]  _GEN_4 = {55{prev_quo_dig_q_f64_0[3]}};
  wire [54:0]  _GEN_5 = {quo_m1_iter_q_f64_0[52:0], 2'h3};
  wire [54:0]  _GEN_6 = {55{prev_quo_dig_q_f64_0[4]}};
  wire [54:0]  _GEN_7 = {quo_m1_iter_q_f64_0[52:0], 2'h2};
  wire [54:0]  nxt_quo_iter_f64_0_0 =
    _GEN & {quo_iter_q_f64_0[52:0], 2'h2} | _GEN_0 & _GEN_1 | _GEN_2 & _GEN_3 | _GEN_4
    & _GEN_5 | _GEN_6 & _GEN_7;
  wire [54:0]  nxt_quo_m1_iter_f64_0_0 =
    _GEN & _GEN_1 | _GEN_0 & _GEN_3 | _GEN_2 & _GEN_5 | _GEN_4 & _GEN_7 | _GEN_6
    & {quo_m1_iter_q_f64_0[52:0], 2'h1};
  wire [59:0]  _nr_f_r_f64_0_T = 60'(f_r_s_q_72bit[71:12] + f_r_c_q_72bit[71:12]);
  wire         rem_is_not_zero_f64_0 =
    ~opb_is_power_of_2_q
    & (_nr_f_r_f64_0_T[59]
       | (f_r_s_q_72bit[70:13]
          ^ f_r_c_q_72bit[70:13]) != (f_r_s_q_72bit[69:12] | f_r_c_q_72bit[69:12]));
  wire [53:0]  quo_pre_shift_f64_0 =
    opb_is_power_of_2_q
      ? {quo_iter_q_f64_0[52:0], 1'h0}
      : {nxt_quo_iter_f64_0_0[54:26],
         fp_format_onehot_q[1] ? nxt_quo_iter_f64_0_0[24:0] : nxt_quo_iter_f64_0_0[25:1]};
  wire [24:0]  _quo_m1_pre_shift_f64_0_T_3 =
    fp_format_onehot_q[1] ? nxt_quo_m1_iter_f64_0_0[24:0] : nxt_quo_m1_iter_f64_0_0[25:1];
  wire [12:0]  _r_shift_num_pre_minus_limit_f64_0_T = 13'(13'h1 - out_exp_diff_q_f64_0);
  wire [12:0]  _r_shift_num_pre_minus_limit_f64_0_T_2 =
    13'(_r_shift_num_pre_minus_limit_f64_0_T - 13'h36);
  wire [107:0] _GEN_8 =
    {102'h0,
     _r_shift_num_pre_minus_limit_f64_0_T[12]
       ? 6'h0
       : _r_shift_num_pre_minus_limit_f64_0_T_2[12]
           ? _r_shift_num_pre_minus_limit_f64_0_T[5:0]
           : 6'h36};
  wire [107:0] quo_r_shifted_f64_0 = {quo_pre_shift_f64_0, 54'h0} >> _GEN_8;
  wire [107:0] quo_m1_r_shifted_f64_0 =
    {nxt_quo_m1_iter_f64_0_0[54:26], _quo_m1_pre_shift_f64_0_T_3, 54'h0} >> _GEN_8;
  wire         select_quo_m1_f64_0 = _nr_f_r_f64_0_T[59] & ~opb_is_power_of_2_q;
  wire [52:0]  correct_quo_r_shifted_f64_0 =
    select_quo_m1_f64_0 ? quo_m1_r_shifted_f64_0[106:54] : quo_r_shifted_f64_0[106:54];
  wire [53:0]  sticky_without_rem_f64_0 =
    select_quo_m1_f64_0 ? quo_m1_r_shifted_f64_0[53:0] : quo_r_shifted_f64_0[53:0];
  wire [51:0]  quo_pre_inc_f64_0 =
    fsm_q[4]
      ? {quo_pre_shift_f64_0[52:25],
         ~(fp_format_onehot_q[1]) & quo_pre_shift_f64_0[24],
         quo_pre_shift_f64_0[23:12],
         ~(fp_format_onehot_q[0]) & quo_pre_shift_f64_0[11],
         quo_pre_shift_f64_0[10:1]}
      : {quo_m1_iter_q_f64_0[52:25],
         ~(fp_format_onehot_q[1]) & quo_m1_iter_q_f64_0[24],
         quo_m1_iter_q_f64_0[23:12],
         ~(fp_format_onehot_q[0]) & quo_m1_iter_q_f64_0[11],
         quo_m1_iter_q_f64_0[10:1]};
  wire [52:0]  _quo_inc_res_f64_0_T_3 = 53'({1'h0, quo_pre_inc_f64_0} + 53'h1);
  wire         round_bit_quo_f64_0 =
    fsm_q[4] | ~res_is_denormal_f64_0 ? quo_pre_shift_f64_0[0] : quo_m1_iter_q_f64_0[0];
  wire         sticky_bit_quo_f64_0 =
    fsm_q[4] | ~res_is_denormal_f64_0
      ? rem_is_not_zero_f64_0
      : quo_m1_iter_q_f64_0[53] | (|(frac_divisor_q_60bit[59:3]));
  wire         _overflow_to_inf_f64_0_T = rm_q == 3'h0;
  wire         _overflow_to_inf_f64_0_T_7 = rm_q == 3'h2;
  wire         inexact_quo_f64_0 = round_bit_quo_f64_0 | sticky_bit_quo_f64_0;
  wire         _overflow_to_inf_f64_0_T_3 = rm_q == 3'h3;
  wire         _overflow_to_inf_f64_0_T_1 = rm_q == 3'h4;
  wire         sticky_correct_f64_0 =
    select_quo_m1_f64_0 | (|(sticky_without_rem_f64_0[52:0])) | rem_is_not_zero_f64_0;
  wire         _test_uf_need_rup_correct_f64_0_T_11 =
    sticky_without_rem_f64_0[53] | sticky_correct_f64_0;
  wire [52:0]  quo_rounded_f64_0 =
    _overflow_to_inf_f64_0_T
    & (round_bit_quo_f64_0 & sticky_bit_quo_f64_0
       | (fsm_q[4] | ~res_is_denormal_f64_0
            ? quo_pre_shift_f64_0[1]
            : quo_m1_iter_q_f64_0[1]) & round_bit_quo_f64_0) | _overflow_to_inf_f64_0_T_7
    & inexact_quo_f64_0 & out_sign_q | _overflow_to_inf_f64_0_T_3 & inexact_quo_f64_0
    & ~out_sign_q | _overflow_to_inf_f64_0_T_1 & round_bit_quo_f64_0
      ? _quo_inc_res_f64_0_T_3
      : {1'h0, quo_pre_inc_f64_0};
  wire         inexact_f64_0 =
    (fsm_q[4] | ~res_is_denormal_f64_0) & select_quo_m1_f64_0 | inexact_quo_f64_0;
  wire [51:0]  frac_rounded_post_0_f64_0 =
    select_quo_m1_f64_0
      ? (_overflow_to_inf_f64_0_T
         & (_quo_m1_pre_shift_f64_0_T_3[0] | _quo_m1_pre_shift_f64_0_T_3[1]
            & _quo_m1_pre_shift_f64_0_T_3[0]) | _overflow_to_inf_f64_0_T_7 & out_sign_q
         | _overflow_to_inf_f64_0_T_3 & ~out_sign_q | _overflow_to_inf_f64_0_T_1
         & _quo_m1_pre_shift_f64_0_T_3[0]
           ? (quo_pre_inc_f64_0[0] == _quo_m1_pre_shift_f64_0_T_3[1]
                ? _quo_inc_res_f64_0_T_3[51:0]
                : quo_pre_inc_f64_0)
           : {nxt_quo_m1_iter_f64_0_0[53:26],
              ~(fp_format_onehot_q[1]) & _quo_m1_pre_shift_f64_0_T_3[24],
              _quo_m1_pre_shift_f64_0_T_3[23:12],
              ~(fp_format_onehot_q[0]) & _quo_m1_pre_shift_f64_0_T_3[11],
              _quo_m1_pre_shift_f64_0_T_3[10:1]})
      : quo_rounded_f64_0[51:0];
  wire         carry_after_round_f64_0 =
    fp_format_onehot_q[0]
      ? quo_rounded_f64_0[10]
      : fp_format_onehot_q[1] ? quo_rounded_f64_0[23] : quo_rounded_f64_0[52];
  wire         overflow_f64_0 =
    out_exp_diff_q_f64_0[11:0] >= (fp_format_onehot_q[0]
                                     ? 12'h1F
                                     : fp_format_onehot_q[1] ? 12'hFF : 12'h7FF);
  wire         overflow_to_inf_f64_0 =
    _overflow_to_inf_f64_0_T | _overflow_to_inf_f64_0_T_1 | _overflow_to_inf_f64_0_T_3
    & ~out_sign_q | _overflow_to_inf_f64_0_T_7 & out_sign_q;
  wire         _out_frac_post_0_f64_0_T = overflow_f64_0 & overflow_to_inf_f64_0;
  wire [4:0]   out_exp_post_0_f16_0 =
    _out_frac_post_0_f64_0_T
      ? 5'h1F
      : overflow_f64_0 & ~overflow_to_inf_f64_0 ? 5'h1E : out_exp_diff_q_f64_0[4:0];
  wire [7:0]   out_exp_post_0_f32_0 =
    _out_frac_post_0_f64_0_T
      ? 8'hFF
      : overflow_f64_0 & ~overflow_to_inf_f64_0 ? 8'hFE : out_exp_diff_q_f64_0[7:0];
  wire [10:0]  out_exp_post_0_f64_0 =
    _out_frac_post_0_f64_0_T
      ? 11'h7FF
      : overflow_f64_0 & ~overflow_to_inf_f64_0 ? 11'h7FE : out_exp_diff_q_f64_0[10:0];
  wire [22:0]  out_frac_post_0_f32_0 =
    _out_frac_post_0_f64_0_T
      ? 23'h0
      : overflow_f64_0 & ~overflow_to_inf_f64_0
          ? 23'h7FFFFF
          : frac_rounded_post_0_f64_0[22:0];
  wire [51:0]  out_frac_post_0_f64_0 =
    _out_frac_post_0_f64_0_T
      ? 52'h0
      : overflow_f64_0 & ~overflow_to_inf_f64_0
          ? 52'hFFFFFFFFFFFFF
          : frac_rounded_post_0_f64_0;
  wire         _out_frac_post_1_f64_0_T = res_is_denormal_f64_0 | res_is_nan_q;
  wire         _out_exp_post_1_f64_0_T_3 = res_is_nan_q | res_is_inf_q;
  wire         _out_frac_post_1_f64_0_T_4 = res_is_inf_q | res_is_exact_zero_q;
  wire [22:0]  out_frac_post_1_f32_0 =
    _out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
      ? (res_is_nan_q
           ? 23'h400000
           : _out_frac_post_1_f64_0_T_4 ? 23'h0 : quo_rounded_f64_0[22:0])
      : quo_m1_iter_q_f64_0[22:0];
  wire [51:0]  out_frac_post_1_f64_0 =
    _out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
      ? (res_is_nan_q
           ? 52'h8000000000000
           : _out_frac_post_1_f64_0_T_4 ? 52'h0 : quo_rounded_f64_0[51:0])
      : quo_m1_iter_q_f64_0[51:0];
  wire         fflags_overflow =
    fsm_q[4] & overflow_f64_0 | fsm_q[5] & ~res_is_denormal_f64_0 & overflow_f64_0
    & ~res_is_exact_zero_q & ~res_is_inf_q & ~res_is_nan_q;
  always @(posedge clock or posedge reset) begin
    if (reset)
      fsm_q <= 6'h1;
    else if (io_flush_i)
      fsm_q <= 6'h1;
    else if (fsm_q == 6'h1)
      fsm_q <=
        io_start_valid_i
          ? (res_is_nan_f64_0 | res_is_inf_f64_0 | res_is_exact_zero_f64_0
               ? 6'h20
               : (|opb_frac_f64_0) ? (_init_cycles_T_1 ? 6'h2 : 6'h4) : 6'h10)
          : 6'h1;
    else if (fsm_q == 6'h2)
      fsm_q <= 6'h4;
    else if (fsm_q == 6'h4)
      fsm_q <= 6'h8;
    else if (fsm_q == 6'h8)
      fsm_q <= (|iter_num_q) ? 6'h8 : 6'h10;
    else if (fsm_q == 6'h10)
      fsm_q <= res_is_denormal_f64_0 ? 6'h20 : io_finish_ready_i ? 6'h1 : 6'h10;
    else if (fsm_q != 6'h20 | io_finish_ready_i)
      fsm_q <= 6'h1;
    else
      fsm_q <= 6'h20;
  end // always @(posedge, posedge)
  wire [51:0]  _opa_frac_l_shifted_f64_0_T_1 =
    opa_exp_is_zero_f64_0
      ? _U_Left_Shift_opa_f64_0_io_lshift_result[51:0]
      : opa_frac_f64_0;
  wire         start_handshaked = io_start_valid_i & fsm_q[0];
  wire [51:0]  _prescaled_a_frac_f64_0_T_2 =
    fsm_q[0] ? opa_frac_f64_0 : quo_iter_q_f64_0[51:0];
  wire [51:0]  _prescaled_b_frac_f64_0_T_2 =
    fsm_q[0] ? opb_frac_f64_0 : quo_m1_iter_q_f64_0[51:0];
  wire         _scale_adder_opb_in_f64_0_2_T = _prescaled_b_frac_f64_0_T_2[51:49] == 3'h0;
  wire         _scale_adder_opb_in_f64_0_2_T_1 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h1;
  wire         _scale_adder_opb_in_f64_0_2_T_2 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h2;
  wire         _scale_adder_opb_in_f64_0_2_T_3 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h3;
  wire         _scale_adder_opb_in_f64_0_2_T_4 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h4;
  wire         _scale_adder_opb_in_f64_0_2_T_5 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h5;
  wire         _scale_adder_opb_in_f64_0_2_T_6 =
    _prescaled_b_frac_f64_0_T_2[51:49] == 3'h6;
  wire [56:0]  _scale_adder_opa_in_f64_0_2_T_13 = {5'h1, _prescaled_a_frac_f64_0_T_2};
  wire [56:0]  _scale_adder_opa_f64_0_T_2 =
    57'({2'h1, _prescaled_a_frac_f64_0_T_2, 3'h0}
        + 57'(((_scale_adder_opb_in_f64_0_2_T
                  ? {3'h1, _prescaled_a_frac_f64_0_T_2, 2'h0}
                  : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_1
                    ? {4'h1, _prescaled_a_frac_f64_0_T_2, 1'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_2
                    ? {3'h1, _prescaled_a_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_3
                    ? {3'h1, _prescaled_a_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_4
                    ? {4'h1, _prescaled_a_frac_f64_0_T_2, 1'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_5
                    ? {4'h1, _prescaled_a_frac_f64_0_T_2, 1'h0}
                    : 57'h0))
              + ((_scale_adder_opb_in_f64_0_2_T
                    ? {3'h1, _prescaled_a_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_1
                      ? {3'h1, _prescaled_a_frac_f64_0_T_2, 2'h0}
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_2
                      ? _scale_adder_opa_in_f64_0_2_T_13
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_4
                      ? _scale_adder_opa_in_f64_0_2_T_13
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_6
                      ? _scale_adder_opa_in_f64_0_2_T_13
                      : 57'h0)
                 | ((&(_prescaled_b_frac_f64_0_T_2[51:49]))
                      ? _scale_adder_opa_in_f64_0_2_T_13
                      : 57'h0))));
  wire [57:0]  _f_r_s_iter_init_pre_f64_0_T_2 =
    iter_num_q[0]
      ? {quo_m1_iter_q_f64_0[2:0], quo_iter_q_f64_0, 1'h0}
      : {1'h0, quo_m1_iter_q_f64_0[2:0], quo_iter_q_f64_0};
  wire         integer_quo_is_pos_2_f64_0 =
    _f_r_s_iter_init_pre_f64_0_T_2[57] | (&(_f_r_s_iter_init_pre_f64_0_T_2[56:55]));
  wire [59:0]  f_r_c_iter_init_f64_0 =
    integer_quo_is_pos_2_f64_0
      ? {1'h1, ~(frac_divisor_q_60bit[59:3]), 2'h3}
      : {2'h3, ~(frac_divisor_q_60bit[59:3]), 1'h1};
  wire [51:0]  _GEN_9 = {52{_u_r64_block_vector_io_nxt_quo_dig_o_0_0[0]}};
  wire [51:0]  _GEN_10 = {52{_u_r64_block_vector_io_nxt_quo_dig_o_0_0[1]}};
  wire [51:0]  _GEN_11 = {nxt_quo_iter_f64_0_0[49:0], 2'h1};
  wire [51:0]  _GEN_12 = {52{_u_r64_block_vector_io_nxt_quo_dig_o_0_0[2]}};
  wire [51:0]  _GEN_13 = {nxt_quo_iter_f64_0_0[49:0], 2'h0};
  wire [51:0]  _GEN_14 = {52{_u_r64_block_vector_io_nxt_quo_dig_o_0_0[3]}};
  wire [51:0]  _GEN_15 = {nxt_quo_m1_iter_f64_0_0[49:0], 2'h3};
  wire [51:0]  _GEN_16 = {52{_u_r64_block_vector_io_nxt_quo_dig_o_0_0[4]}};
  wire [51:0]  _GEN_17 = {nxt_quo_m1_iter_f64_0_0[49:0], 2'h2};
  wire [51:0]  nxt_quo_iter_f64_0_1 =
    _GEN_9 & {nxt_quo_iter_f64_0_0[49:0], 2'h2} | _GEN_10 & _GEN_11 | _GEN_12 & _GEN_13
    | _GEN_14 & _GEN_15 | _GEN_16 & _GEN_17;
  wire [51:0]  nxt_quo_m1_iter_f64_0_1 =
    _GEN_9 & _GEN_11 | _GEN_10 & _GEN_13 | _GEN_12 & _GEN_15 | _GEN_14 & _GEN_17 | _GEN_16
    & {nxt_quo_m1_iter_f64_0_0[49:0], 2'h1};
  wire [53:0]  _GEN_18 = {54{_u_r64_block_vector_io_nxt_quo_dig_o_0_1[0]}};
  wire [53:0]  _GEN_19 = {54{_u_r64_block_vector_io_nxt_quo_dig_o_0_1[1]}};
  wire [53:0]  _GEN_20 = {nxt_quo_iter_f64_0_1, 2'h1};
  wire [53:0]  _GEN_21 = {54{_u_r64_block_vector_io_nxt_quo_dig_o_0_1[2]}};
  wire [53:0]  _GEN_22 = {nxt_quo_iter_f64_0_1, 2'h0};
  wire [53:0]  _GEN_23 = {54{_u_r64_block_vector_io_nxt_quo_dig_o_0_1[3]}};
  wire [53:0]  _GEN_24 = {nxt_quo_m1_iter_f64_0_1, 2'h3};
  wire [53:0]  _GEN_25 = {54{_u_r64_block_vector_io_nxt_quo_dig_o_0_1[4]}};
  wire [53:0]  _GEN_26 = {nxt_quo_m1_iter_f64_0_1, 2'h2};
  wire [56:0]  _scale_adder_opb_in_f64_0_2_T_13 = {5'h1, _prescaled_b_frac_f64_0_T_2};
  wire [56:0]  _scale_adder_opb_f64_0_T_2 =
    57'({2'h1, _prescaled_b_frac_f64_0_T_2, 3'h0}
        + 57'(((_scale_adder_opb_in_f64_0_2_T
                  ? {3'h1, _prescaled_b_frac_f64_0_T_2, 2'h0}
                  : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_1
                    ? {4'h1, _prescaled_b_frac_f64_0_T_2, 1'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_2
                    ? {3'h1, _prescaled_b_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_3
                    ? {3'h1, _prescaled_b_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_4
                    ? {4'h1, _prescaled_b_frac_f64_0_T_2, 1'h0}
                    : 57'h0)
               | (_scale_adder_opb_in_f64_0_2_T_5
                    ? {4'h1, _prescaled_b_frac_f64_0_T_2, 1'h0}
                    : 57'h0))
              + ((_scale_adder_opb_in_f64_0_2_T
                    ? {3'h1, _prescaled_b_frac_f64_0_T_2, 2'h0}
                    : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_1
                      ? {3'h1, _prescaled_b_frac_f64_0_T_2, 2'h0}
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_2
                      ? _scale_adder_opb_in_f64_0_2_T_13
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_4
                      ? _scale_adder_opb_in_f64_0_2_T_13
                      : 57'h0)
                 | (_scale_adder_opb_in_f64_0_2_T_6
                      ? _scale_adder_opb_in_f64_0_2_T_13
                      : 57'h0)
                 | ((&(_prescaled_b_frac_f64_0_T_2[51:49]))
                      ? _scale_adder_opb_in_f64_0_2_T_13
                      : 57'h0))));
  always @(posedge clock) begin
    if (start_handshaked) begin
      opb_is_power_of_2_q <= ~(|opb_frac_f64_0);
      fp_format_onehot_q <= {&io_fp_format_i, fp_format_is_fp32, fp_format_is_fp16};
      rm_q <= io_rm_i;
      out_sign_q <=
        ~res_is_nan_f64_0
        & (((&io_fp_format_i) & io_opa_i[63] | fp_format_is_fp32 & io_opa_i[31]
            | fp_format_is_fp16 & io_opa_i[15])
           ^ ((&io_fp_format_i) & io_opb_i[63] | fp_format_is_fp32 & io_opb_i[31]
              | fp_format_is_fp16 & io_opb_i[15]));
      res_is_nan_q <= res_is_nan_f64_0;
      res_is_inf_q <= res_is_inf_f64_0;
      res_is_exact_zero_q <= res_is_exact_zero_f64_0;
      op_invalid_div_q <= op_invalid_f64_0;
      divided_by_zero_q <= ~res_is_nan_f64_0 & ~opa_is_inf_f64_0 & opb_is_zero_f64_0;
    end
    if (start_handshaked | fsm_q[2]) begin
      if (fsm_q[0])
        out_exp_diff_q_f64_0 <=
          13'(13'(13'({1'h0,
                       12'({1'h0,
                            opa_exp_f64_0[10:1],
                            opa_exp_f64_0[0] | opa_exp_is_zero_f64_0}
                           + (fp_format_is_fp16
                                ? 12'hF
                                : fp_format_is_fp32 ? 12'h7F : 12'h3FF))}
                      - {7'h0,
                         {6{opa_exp_is_zero_f64_0}}
                           & _U_Left_Shift_opa_f64_0_io_lzd_result})
                  - {2'h0, opb_exp_f64_0[10:1], opb_exp_f64_0[0] | opb_exp_is_zero_f64_0})
              + {7'h0,
                 {6{opb_exp_is_zero_f64_0}} & _U_Left_Shift_opb_f64_0_io_lzd_result});
      else
        out_exp_diff_q_f64_0 <= 13'(out_exp_diff_q_f64_0 - {12'h0, iter_num_q[0]});
    end
    if (start_handshaked | fsm_q[1] | fsm_q[2] | fsm_q[3]) begin
      if (fsm_q[0])
        iter_num_q <= {3'h0, opa_frac_f64_0 < opb_frac_f64_0};
      else if (fsm_q[1])
        iter_num_q <= {3'h0, quo_iter_q_f64_0[51:0] < quo_m1_iter_q_f64_0[51:0]};
      else if (fsm_q[2])
        iter_num_q <= fp_format_onehot_q[0] ? 4'h1 : fp_format_onehot_q[1] ? 4'h3 : 4'h8;
      else
        iter_num_q <= 4'(iter_num_q - 4'h1);
    end
    if ((start_handshaked | fsm_q[1] | fsm_q[2] | fsm_q[3])
        & (start_handshaked | ~opb_is_power_of_2_q))
      quo_iter_q_f64_0 <=
        {54{fsm_q[0]}}
        & (_init_cycles_T_1
             ? ((|opb_frac_f64_0)
                  ? {2'h1, _opa_frac_l_shifted_f64_0_T_1}
                  : (&io_fp_format_i)
                      ? {2'h1, _opa_frac_l_shifted_f64_0_T_1}
                      : fp_format_is_fp32
                          ? {31'h1, _opa_frac_l_shifted_f64_0_T_1[51:29]}
                          : {44'h1, _opa_frac_l_shifted_f64_0_T_1[51:42]})
             : (|opb_frac_f64_0)
                 ? _scale_adder_opa_f64_0_T_2[53:0]
                 : (&io_fp_format_i)
                     ? {2'h1, io_opa_i[51:0]}
                     : fp_format_is_fp32
                         ? {31'h1, io_opa_i[22:0]}
                         : {44'h1, io_opa_i[9:0]}) | {54{fsm_q[1]}}
        & _scale_adder_opa_f64_0_T_2[53:0] | {54{fsm_q[3]}}
        & (_GEN_18 & {nxt_quo_iter_f64_0_1, 2'h2} | _GEN_19 & _GEN_20 | _GEN_21 & _GEN_22
           | _GEN_23 & _GEN_24 | _GEN_25 & _GEN_26);
    if (start_handshaked | fsm_q[1] | fsm_q[3] | fsm_q[4] & res_is_denormal_f64_0)
      quo_m1_iter_q_f64_0 <=
        {54{fsm_q[0]}}
        & (_init_cycles_T_1
             ? {2'h1,
                opb_exp_is_zero_f64_0
                  ? _U_Left_Shift_opb_f64_0_io_lshift_result[51:0]
                  : opb_frac_f64_0}
             : {51'h0, _scale_adder_opa_f64_0_T_2[56:54]}) | {54{fsm_q[1]}}
        & {51'h0, _scale_adder_opa_f64_0_T_2[56:54]} | {54{fsm_q[3]}}
        & (_GEN_18 & _GEN_20 | _GEN_19 & _GEN_22 | _GEN_21 & _GEN_24 | _GEN_23 & _GEN_26
           | _GEN_25 & {nxt_quo_m1_iter_f64_0_1, 2'h1}) | {54{fsm_q[4]}}
        & (res_is_denormal_f64_0
             ? {rem_is_not_zero_f64_0, correct_quo_r_shifted_f64_0}
             : {2'h0, out_frac_post_0_f64_0});
    if (start_handshaked | fsm_q[1] | fsm_q[2] | fsm_q[4])
      frac_divisor_q_60bit <=
        {fsm_q[4] & ~res_is_denormal_f64_0
           ? frac_divisor_q_60bit[59:3]
           : {57{fsm_q[0]}}
             & (_init_cycles_T_1
                  ? frac_divisor_q_60bit[59:3]
                  : _scale_adder_opb_f64_0_T_2) | {57{fsm_q[1]}}
             & _scale_adder_opb_f64_0_T_2 | {57{fsm_q[2]}} & frac_divisor_q_60bit[59:3]
             | {57{fsm_q[4]}} & {3'h0, sticky_without_rem_f64_0},
         3'h0};
    if (start_handshaked | fsm_q[2] | fsm_q[3])
      nr_f_r_6b_for_nxt_cycle_s0_qds_q_f64_0 <=
        fsm_q[2]
          ? 6'(_f_r_s_iter_init_pre_f64_0_T_2[56:51] + f_r_c_iter_init_f64_0[57:52])
          : _u_r64_block_vector_io_adder_6b_res_for_nxt_cycle_s0_qds_o;
    if (start_handshaked | fsm_q[2] | fsm_q[3])
      nr_f_r_7b_for_nxt_cycle_s1_qds_q_f64_0 <=
        fsm_q[2]
          ? 7'(_f_r_s_iter_init_pre_f64_0_T_2[54:48] + f_r_c_iter_init_f64_0[55:49])
          : _u_r64_block_vector_io_adder_7b_res_for_nxt_cycle_s1_qds_o;
    if (start_handshaked | fsm_q[2] | fsm_q[3])
      f_r_s_q_72bit <=
        fsm_q[2]
          ? {1'h0, _f_r_s_iter_init_pre_f64_0_T_2, 13'h1000}
          : _u_r64_block_vector_io_nxt_f_r_s_o_2;
    if (start_handshaked | fsm_q[2] | fsm_q[3])
      f_r_c_q_72bit <=
        fsm_q[2] ? {f_r_c_iter_init_f64_0, 12'h0} : _u_r64_block_vector_io_nxt_f_r_c_o_2;
    if (start_handshaked | fsm_q[2] | fsm_q[3])
      prev_quo_dig_q_f64_0 <=
        fsm_q[2]
          ? {3'h0, ~integer_quo_is_pos_2_f64_0, integer_quo_is_pos_2_f64_0}
          : _u_r64_block_vector_io_nxt_quo_dig_o_0_2;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:15];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM[i[3:0]] = `RANDOM;
        end
        fsm_q = _RANDOM[4'h0][5:0];
        opb_is_power_of_2_q = _RANDOM[4'h0][6];
        fp_format_onehot_q = _RANDOM[4'h0][9:7];
        rm_q = _RANDOM[4'h0][12:10];
        out_sign_q = _RANDOM[4'h0][13];
        res_is_nan_q = _RANDOM[4'h0][14];
        res_is_inf_q = _RANDOM[4'h0][15];
        res_is_exact_zero_q = _RANDOM[4'h0][16];
        op_invalid_div_q = _RANDOM[4'h0][17];
        divided_by_zero_q = _RANDOM[4'h0][18];
        out_exp_diff_q_f64_0 = _RANDOM[4'h0][31:19];
        iter_num_q = _RANDOM[4'h1][3:0];
        quo_iter_q_f64_0 = {_RANDOM[4'h1][31:4], _RANDOM[4'h2][25:0]};
        quo_m1_iter_q_f64_0 = {_RANDOM[4'h2][31:26], _RANDOM[4'h3], _RANDOM[4'h4][15:0]};
        frac_divisor_q_60bit = {_RANDOM[4'h4][31:16], _RANDOM[4'h5], _RANDOM[4'h6][11:0]};
        nr_f_r_6b_for_nxt_cycle_s0_qds_q_f64_0 = _RANDOM[4'h6][17:12];
        nr_f_r_7b_for_nxt_cycle_s1_qds_q_f64_0 = _RANDOM[4'h6][24:18];
        f_r_s_q_72bit =
          {_RANDOM[4'h6][31:25], _RANDOM[4'h7], _RANDOM[4'h8], _RANDOM[4'h9][0]};
        f_r_c_q_72bit = {_RANDOM[4'h9][31:1], _RANDOM[4'hA], _RANDOM[4'hB][8:0]};
        prev_quo_dig_q_f64_0 = _RANDOM[4'hF][5:1];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        fsm_q = 6'h1;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ShiftLeftPriorityWithLZDResult U_Left_Shift_opa_f64_0 (
    .io_src                 (opa_frac_pre_shifted_f64_0),
    .io_priority_shiftValue (opa_frac_pre_shifted_f64_0),
    .io_lshift_result       (_U_Left_Shift_opa_f64_0_io_lshift_result),
    .io_lzd_result          (_U_Left_Shift_opa_f64_0_io_lzd_result)
  );
  ShiftLeftPriorityWithLZDResult U_Left_Shift_opb_f64_0 (
    .io_src                 (opb_frac_pre_shifted_f64_0),
    .io_priority_shiftValue (opb_frac_pre_shifted_f64_0),
    .io_lshift_result       (_U_Left_Shift_opb_f64_0_io_lshift_result),
    .io_lzd_result          (_U_Left_Shift_opb_f64_0_io_lzd_result)
  );
  fpdiv_r64_block u_r64_block_vector (
    .io_f_r_s_i                             (f_r_s_q_72bit),
    .io_f_r_c_i                             (f_r_c_q_72bit),
    .io_divisor_i                           (frac_divisor_q_60bit),
    .io_nr_f_r_6b_for_nxt_cycle_s0_qds_i    (nr_f_r_6b_for_nxt_cycle_s0_qds_q_f64_0),
    .io_nr_f_r_7b_for_nxt_cycle_s1_qds_i    (nr_f_r_7b_for_nxt_cycle_s1_qds_q_f64_0),
    .io_nxt_quo_dig_o_0_0                   (_u_r64_block_vector_io_nxt_quo_dig_o_0_0),
    .io_nxt_quo_dig_o_0_1                   (_u_r64_block_vector_io_nxt_quo_dig_o_0_1),
    .io_nxt_quo_dig_o_0_2                   (_u_r64_block_vector_io_nxt_quo_dig_o_0_2),
    .io_nxt_f_r_s_o_2                       (_u_r64_block_vector_io_nxt_f_r_s_o_2),
    .io_nxt_f_r_c_o_2                       (_u_r64_block_vector_io_nxt_f_r_c_o_2),
    .io_adder_6b_res_for_nxt_cycle_s0_qds_o
      (_u_r64_block_vector_io_adder_6b_res_for_nxt_cycle_s0_qds_o),
    .io_adder_7b_res_for_nxt_cycle_s1_qds_o
      (_u_r64_block_vector_io_adder_7b_res_for_nxt_cycle_s1_qds_o)
  );
  assign io_start_ready_o = fsm_q[0];
  assign io_finish_valid_o = fsm_q[5] | fsm_q[4] & ~res_is_denormal_f64_0;
  assign io_fpdiv_res_o =
    {out_sign_q,
     fsm_q[4]
       ? {out_exp_post_0_f64_0,
          out_frac_post_0_f64_0[51:32],
          fp_format_onehot_q[1]
            ? {out_sign_q, out_exp_post_0_f32_0, out_frac_post_0_f32_0[22:16]}
            : out_frac_post_0_f64_0[31:16],
          fp_format_onehot_q[0]
            ? {out_sign_q,
               out_exp_post_0_f16_0,
               _out_frac_post_0_f64_0_T
                 ? 10'h0
                 : overflow_f64_0 & ~overflow_to_inf_f64_0
                     ? 10'h3FF
                     : frac_rounded_post_0_f64_0[9:0]}
            : fp_format_onehot_q[1]
                ? out_frac_post_0_f32_0[15:0]
                : out_frac_post_0_f64_0[15:0]}
       : {_out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
            ? (_out_exp_post_1_f64_0_T_3
                 ? 11'h7FF
                 : res_is_exact_zero_q ? 11'h0 : {10'h0, carry_after_round_f64_0})
            : out_exp_post_0_f64_0,
          out_frac_post_1_f64_0[51:32],
          fp_format_onehot_q[1]
            ? {out_sign_q,
               _out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
                 ? (_out_exp_post_1_f64_0_T_3
                      ? 8'hFF
                      : res_is_exact_zero_q ? 8'h0 : {7'h0, carry_after_round_f64_0})
                 : out_exp_post_0_f32_0,
               out_frac_post_1_f32_0[22:16]}
            : out_frac_post_1_f64_0[31:16],
          fp_format_onehot_q[0]
            ? {out_sign_q,
               _out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
                 ? (_out_exp_post_1_f64_0_T_3
                      ? 5'h1F
                      : res_is_exact_zero_q ? 5'h0 : {4'h0, carry_after_round_f64_0})
                 : out_exp_post_0_f16_0,
               _out_frac_post_1_f64_0_T | res_is_inf_q | res_is_exact_zero_q
                 ? (res_is_nan_q
                      ? 10'h200
                      : _out_frac_post_1_f64_0_T_4 ? 10'h0 : quo_rounded_f64_0[9:0])
                 : quo_m1_iter_q_f64_0[9:0]}
            : fp_format_onehot_q[1]
                ? out_frac_post_1_f32_0[15:0]
                : out_frac_post_1_f64_0[15:0]}};
  assign io_fflags_o =
    {op_invalid_div_q,
     divided_by_zero_q,
     fflags_overflow,
     res_is_denormal_f64_0 & fsm_q[5]
       & (~carry_after_round_f64_0
          | ~(correct_quo_r_shifted_f64_0[0]
              & (_overflow_to_inf_f64_0_T
                 & (sticky_without_rem_f64_0[53] & sticky_correct_f64_0
                    | correct_quo_r_shifted_f64_0[0] & sticky_without_rem_f64_0[53])
                 | _overflow_to_inf_f64_0_T_7 & _test_uf_need_rup_correct_f64_0_T_11
                 & out_sign_q | _overflow_to_inf_f64_0_T_3
                 & _test_uf_need_rup_correct_f64_0_T_11 & ~out_sign_q
                 | _overflow_to_inf_f64_0_T_1 & sticky_without_rem_f64_0[53])))
       & inexact_f64_0 & ~res_is_exact_zero_q & ~res_is_inf_q & ~res_is_nan_q,
     (fflags_overflow | inexact_f64_0) & ~res_is_inf_q & ~res_is_nan_q
       & ~res_is_exact_zero_q};
endmodule

