// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VtypeModule(
  input         clock,
  input         reset,
  output [63:0] rdata,
  input         robCommit_vtype_valid,
  input         robCommit_vtype_bits_VILL,
  input         robCommit_vtype_bits_VMA,
  input         robCommit_vtype_bits_VTA,
  input  [2:0]  robCommit_vtype_bits_VSEW,
  input  [2:0]  robCommit_vtype_bits_VLMUL
);

  reg       reg_VILL;
  reg       reg_VMA;
  reg       reg_VTA;
  reg [2:0] reg_VSEW;
  reg [2:0] reg_VLMUL;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_VILL <= 1'h1;
      reg_VMA <= 1'h0;
      reg_VTA <= 1'h0;
      reg_VSEW <= 3'h0;
      reg_VLMUL <= 3'h0;
    end
    else if (robCommit_vtype_valid) begin
      reg_VILL <= robCommit_vtype_bits_VILL;
      reg_VMA <= robCommit_vtype_bits_VMA;
      reg_VTA <= robCommit_vtype_bits_VTA;
      reg_VSEW <= robCommit_vtype_bits_VSEW;
      reg_VLMUL <= robCommit_vtype_bits_VLMUL;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_VILL = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_VMA = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_VTA = _RANDOM[/*Zero width*/ 1'b0][2];
        reg_VSEW = _RANDOM[/*Zero width*/ 1'b0][5:3];
        reg_VLMUL = _RANDOM[/*Zero width*/ 1'b0][8:6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_VILL = 1'h1;
        reg_VMA = 1'h0;
        reg_VTA = 1'h0;
        reg_VSEW = 3'h0;
        reg_VLMUL = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata = {reg_VILL, 55'h0, reg_VMA, reg_VTA, reg_VSEW, reg_VLMUL};
endmodule

