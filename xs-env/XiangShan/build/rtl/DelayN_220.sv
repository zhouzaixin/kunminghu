// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayN_220(
  input         clock,
  input         io_in_valid,
  input  [49:0] io_in_bits_pc,
  input         io_in_bits_exceptionVec_0,
  input         io_in_bits_exceptionVec_1,
  input         io_in_bits_exceptionVec_2,
  input         io_in_bits_exceptionVec_3,
  input         io_in_bits_exceptionVec_4,
  input         io_in_bits_exceptionVec_5,
  input         io_in_bits_exceptionVec_6,
  input         io_in_bits_exceptionVec_7,
  input         io_in_bits_exceptionVec_8,
  input         io_in_bits_exceptionVec_9,
  input         io_in_bits_exceptionVec_10,
  input         io_in_bits_exceptionVec_11,
  input         io_in_bits_exceptionVec_12,
  input         io_in_bits_exceptionVec_13,
  input         io_in_bits_exceptionVec_14,
  input         io_in_bits_exceptionVec_15,
  input         io_in_bits_exceptionVec_16,
  input         io_in_bits_exceptionVec_17,
  input         io_in_bits_exceptionVec_18,
  input         io_in_bits_exceptionVec_19,
  input         io_in_bits_exceptionVec_20,
  input         io_in_bits_exceptionVec_21,
  input         io_in_bits_exceptionVec_22,
  input         io_in_bits_exceptionVec_23,
  input         io_in_bits_isPcBkpt,
  input         io_in_bits_isFetchMalAddr,
  input  [63:0] io_in_bits_gpaddr,
  input         io_in_bits_singleStep,
  input         io_in_bits_crossPageIPFFix,
  input         io_in_bits_isInterrupt,
  input         io_in_bits_isHls,
  input  [3:0]  io_in_bits_trigger,
  input         io_in_bits_isForVSnonLeafPTE,
  output        io_out_valid,
  output [49:0] io_out_bits_pc,
  output        io_out_bits_exceptionVec_0,
  output        io_out_bits_exceptionVec_1,
  output        io_out_bits_exceptionVec_2,
  output        io_out_bits_exceptionVec_3,
  output        io_out_bits_exceptionVec_4,
  output        io_out_bits_exceptionVec_5,
  output        io_out_bits_exceptionVec_6,
  output        io_out_bits_exceptionVec_7,
  output        io_out_bits_exceptionVec_8,
  output        io_out_bits_exceptionVec_9,
  output        io_out_bits_exceptionVec_10,
  output        io_out_bits_exceptionVec_11,
  output        io_out_bits_exceptionVec_12,
  output        io_out_bits_exceptionVec_13,
  output        io_out_bits_exceptionVec_14,
  output        io_out_bits_exceptionVec_15,
  output        io_out_bits_exceptionVec_16,
  output        io_out_bits_exceptionVec_17,
  output        io_out_bits_exceptionVec_18,
  output        io_out_bits_exceptionVec_19,
  output        io_out_bits_exceptionVec_20,
  output        io_out_bits_exceptionVec_21,
  output        io_out_bits_exceptionVec_22,
  output        io_out_bits_exceptionVec_23,
  output        io_out_bits_isPcBkpt,
  output        io_out_bits_isFetchMalAddr,
  output [63:0] io_out_bits_gpaddr,
  output        io_out_bits_singleStep,
  output        io_out_bits_crossPageIPFFix,
  output        io_out_bits_isInterrupt,
  output        io_out_bits_isHls,
  output [3:0]  io_out_bits_trigger,
  output        io_out_bits_isForVSnonLeafPTE
);

  reg        REG_valid;
  reg [49:0] REG_bits_pc;
  reg        REG_bits_exceptionVec_0;
  reg        REG_bits_exceptionVec_1;
  reg        REG_bits_exceptionVec_2;
  reg        REG_bits_exceptionVec_3;
  reg        REG_bits_exceptionVec_4;
  reg        REG_bits_exceptionVec_5;
  reg        REG_bits_exceptionVec_6;
  reg        REG_bits_exceptionVec_7;
  reg        REG_bits_exceptionVec_8;
  reg        REG_bits_exceptionVec_9;
  reg        REG_bits_exceptionVec_10;
  reg        REG_bits_exceptionVec_11;
  reg        REG_bits_exceptionVec_12;
  reg        REG_bits_exceptionVec_13;
  reg        REG_bits_exceptionVec_14;
  reg        REG_bits_exceptionVec_15;
  reg        REG_bits_exceptionVec_16;
  reg        REG_bits_exceptionVec_17;
  reg        REG_bits_exceptionVec_18;
  reg        REG_bits_exceptionVec_19;
  reg        REG_bits_exceptionVec_20;
  reg        REG_bits_exceptionVec_21;
  reg        REG_bits_exceptionVec_22;
  reg        REG_bits_exceptionVec_23;
  reg        REG_bits_isPcBkpt;
  reg        REG_bits_isFetchMalAddr;
  reg [63:0] REG_bits_gpaddr;
  reg        REG_bits_singleStep;
  reg        REG_bits_crossPageIPFFix;
  reg        REG_bits_isInterrupt;
  reg        REG_bits_isHls;
  reg [3:0]  REG_bits_trigger;
  reg        REG_bits_isForVSnonLeafPTE;
  reg        REG_1_valid;
  reg [49:0] REG_1_bits_pc;
  reg        REG_1_bits_exceptionVec_0;
  reg        REG_1_bits_exceptionVec_1;
  reg        REG_1_bits_exceptionVec_2;
  reg        REG_1_bits_exceptionVec_3;
  reg        REG_1_bits_exceptionVec_4;
  reg        REG_1_bits_exceptionVec_5;
  reg        REG_1_bits_exceptionVec_6;
  reg        REG_1_bits_exceptionVec_7;
  reg        REG_1_bits_exceptionVec_8;
  reg        REG_1_bits_exceptionVec_9;
  reg        REG_1_bits_exceptionVec_10;
  reg        REG_1_bits_exceptionVec_11;
  reg        REG_1_bits_exceptionVec_12;
  reg        REG_1_bits_exceptionVec_13;
  reg        REG_1_bits_exceptionVec_14;
  reg        REG_1_bits_exceptionVec_15;
  reg        REG_1_bits_exceptionVec_16;
  reg        REG_1_bits_exceptionVec_17;
  reg        REG_1_bits_exceptionVec_18;
  reg        REG_1_bits_exceptionVec_19;
  reg        REG_1_bits_exceptionVec_20;
  reg        REG_1_bits_exceptionVec_21;
  reg        REG_1_bits_exceptionVec_22;
  reg        REG_1_bits_exceptionVec_23;
  reg        REG_1_bits_isPcBkpt;
  reg        REG_1_bits_isFetchMalAddr;
  reg [63:0] REG_1_bits_gpaddr;
  reg        REG_1_bits_singleStep;
  reg        REG_1_bits_crossPageIPFFix;
  reg        REG_1_bits_isInterrupt;
  reg        REG_1_bits_isHls;
  reg [3:0]  REG_1_bits_trigger;
  reg        REG_1_bits_isForVSnonLeafPTE;
  always @(posedge clock) begin
    REG_valid <= io_in_valid;
    REG_bits_pc <= io_in_bits_pc;
    REG_bits_exceptionVec_0 <= io_in_bits_exceptionVec_0;
    REG_bits_exceptionVec_1 <= io_in_bits_exceptionVec_1;
    REG_bits_exceptionVec_2 <= io_in_bits_exceptionVec_2;
    REG_bits_exceptionVec_3 <= io_in_bits_exceptionVec_3;
    REG_bits_exceptionVec_4 <= io_in_bits_exceptionVec_4;
    REG_bits_exceptionVec_5 <= io_in_bits_exceptionVec_5;
    REG_bits_exceptionVec_6 <= io_in_bits_exceptionVec_6;
    REG_bits_exceptionVec_7 <= io_in_bits_exceptionVec_7;
    REG_bits_exceptionVec_8 <= io_in_bits_exceptionVec_8;
    REG_bits_exceptionVec_9 <= io_in_bits_exceptionVec_9;
    REG_bits_exceptionVec_10 <= io_in_bits_exceptionVec_10;
    REG_bits_exceptionVec_11 <= io_in_bits_exceptionVec_11;
    REG_bits_exceptionVec_12 <= io_in_bits_exceptionVec_12;
    REG_bits_exceptionVec_13 <= io_in_bits_exceptionVec_13;
    REG_bits_exceptionVec_14 <= io_in_bits_exceptionVec_14;
    REG_bits_exceptionVec_15 <= io_in_bits_exceptionVec_15;
    REG_bits_exceptionVec_16 <= io_in_bits_exceptionVec_16;
    REG_bits_exceptionVec_17 <= io_in_bits_exceptionVec_17;
    REG_bits_exceptionVec_18 <= io_in_bits_exceptionVec_18;
    REG_bits_exceptionVec_19 <= io_in_bits_exceptionVec_19;
    REG_bits_exceptionVec_20 <= io_in_bits_exceptionVec_20;
    REG_bits_exceptionVec_21 <= io_in_bits_exceptionVec_21;
    REG_bits_exceptionVec_22 <= io_in_bits_exceptionVec_22;
    REG_bits_exceptionVec_23 <= io_in_bits_exceptionVec_23;
    REG_bits_isPcBkpt <= io_in_bits_isPcBkpt;
    REG_bits_isFetchMalAddr <= io_in_bits_isFetchMalAddr;
    REG_bits_gpaddr <= io_in_bits_gpaddr;
    REG_bits_singleStep <= io_in_bits_singleStep;
    REG_bits_crossPageIPFFix <= io_in_bits_crossPageIPFFix;
    REG_bits_isInterrupt <= io_in_bits_isInterrupt;
    REG_bits_isHls <= io_in_bits_isHls;
    REG_bits_trigger <= io_in_bits_trigger;
    REG_bits_isForVSnonLeafPTE <= io_in_bits_isForVSnonLeafPTE;
    REG_1_valid <= REG_valid;
    REG_1_bits_pc <= REG_bits_pc;
    REG_1_bits_exceptionVec_0 <= REG_bits_exceptionVec_0;
    REG_1_bits_exceptionVec_1 <= REG_bits_exceptionVec_1;
    REG_1_bits_exceptionVec_2 <= REG_bits_exceptionVec_2;
    REG_1_bits_exceptionVec_3 <= REG_bits_exceptionVec_3;
    REG_1_bits_exceptionVec_4 <= REG_bits_exceptionVec_4;
    REG_1_bits_exceptionVec_5 <= REG_bits_exceptionVec_5;
    REG_1_bits_exceptionVec_6 <= REG_bits_exceptionVec_6;
    REG_1_bits_exceptionVec_7 <= REG_bits_exceptionVec_7;
    REG_1_bits_exceptionVec_8 <= REG_bits_exceptionVec_8;
    REG_1_bits_exceptionVec_9 <= REG_bits_exceptionVec_9;
    REG_1_bits_exceptionVec_10 <= REG_bits_exceptionVec_10;
    REG_1_bits_exceptionVec_11 <= REG_bits_exceptionVec_11;
    REG_1_bits_exceptionVec_12 <= REG_bits_exceptionVec_12;
    REG_1_bits_exceptionVec_13 <= REG_bits_exceptionVec_13;
    REG_1_bits_exceptionVec_14 <= REG_bits_exceptionVec_14;
    REG_1_bits_exceptionVec_15 <= REG_bits_exceptionVec_15;
    REG_1_bits_exceptionVec_16 <= REG_bits_exceptionVec_16;
    REG_1_bits_exceptionVec_17 <= REG_bits_exceptionVec_17;
    REG_1_bits_exceptionVec_18 <= REG_bits_exceptionVec_18;
    REG_1_bits_exceptionVec_19 <= REG_bits_exceptionVec_19;
    REG_1_bits_exceptionVec_20 <= REG_bits_exceptionVec_20;
    REG_1_bits_exceptionVec_21 <= REG_bits_exceptionVec_21;
    REG_1_bits_exceptionVec_22 <= REG_bits_exceptionVec_22;
    REG_1_bits_exceptionVec_23 <= REG_bits_exceptionVec_23;
    REG_1_bits_isPcBkpt <= REG_bits_isPcBkpt;
    REG_1_bits_isFetchMalAddr <= REG_bits_isFetchMalAddr;
    REG_1_bits_gpaddr <= REG_bits_gpaddr;
    REG_1_bits_singleStep <= REG_bits_singleStep;
    REG_1_bits_crossPageIPFFix <= REG_bits_crossPageIPFFix;
    REG_1_bits_isInterrupt <= REG_bits_isInterrupt;
    REG_1_bits_isHls <= REG_bits_isHls;
    REG_1_bits_trigger <= REG_bits_trigger;
    REG_1_bits_isForVSnonLeafPTE <= REG_bits_isForVSnonLeafPTE;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:11];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hC; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_valid = _RANDOM[4'h0][0];
        REG_bits_pc = {_RANDOM[4'h0][31:1], _RANDOM[4'h1][18:0]};
        REG_bits_exceptionVec_0 = _RANDOM[4'h2][22];
        REG_bits_exceptionVec_1 = _RANDOM[4'h2][23];
        REG_bits_exceptionVec_2 = _RANDOM[4'h2][24];
        REG_bits_exceptionVec_3 = _RANDOM[4'h2][25];
        REG_bits_exceptionVec_4 = _RANDOM[4'h2][26];
        REG_bits_exceptionVec_5 = _RANDOM[4'h2][27];
        REG_bits_exceptionVec_6 = _RANDOM[4'h2][28];
        REG_bits_exceptionVec_7 = _RANDOM[4'h2][29];
        REG_bits_exceptionVec_8 = _RANDOM[4'h2][30];
        REG_bits_exceptionVec_9 = _RANDOM[4'h2][31];
        REG_bits_exceptionVec_10 = _RANDOM[4'h3][0];
        REG_bits_exceptionVec_11 = _RANDOM[4'h3][1];
        REG_bits_exceptionVec_12 = _RANDOM[4'h3][2];
        REG_bits_exceptionVec_13 = _RANDOM[4'h3][3];
        REG_bits_exceptionVec_14 = _RANDOM[4'h3][4];
        REG_bits_exceptionVec_15 = _RANDOM[4'h3][5];
        REG_bits_exceptionVec_16 = _RANDOM[4'h3][6];
        REG_bits_exceptionVec_17 = _RANDOM[4'h3][7];
        REG_bits_exceptionVec_18 = _RANDOM[4'h3][8];
        REG_bits_exceptionVec_19 = _RANDOM[4'h3][9];
        REG_bits_exceptionVec_20 = _RANDOM[4'h3][10];
        REG_bits_exceptionVec_21 = _RANDOM[4'h3][11];
        REG_bits_exceptionVec_22 = _RANDOM[4'h3][12];
        REG_bits_exceptionVec_23 = _RANDOM[4'h3][13];
        REG_bits_isPcBkpt = _RANDOM[4'h3][14];
        REG_bits_isFetchMalAddr = _RANDOM[4'h3][15];
        REG_bits_gpaddr = {_RANDOM[4'h3][31:16], _RANDOM[4'h4], _RANDOM[4'h5][15:0]};
        REG_bits_singleStep = _RANDOM[4'h5][16];
        REG_bits_crossPageIPFFix = _RANDOM[4'h5][17];
        REG_bits_isInterrupt = _RANDOM[4'h5][18];
        REG_bits_isHls = _RANDOM[4'h5][19];
        REG_bits_trigger = _RANDOM[4'h5][24:21];
        REG_bits_isForVSnonLeafPTE = _RANDOM[4'h5][25];
        REG_1_valid = _RANDOM[4'h5][26];
        REG_1_bits_pc = {_RANDOM[4'h5][31:27], _RANDOM[4'h6], _RANDOM[4'h7][12:0]};
        REG_1_bits_exceptionVec_0 = _RANDOM[4'h8][16];
        REG_1_bits_exceptionVec_1 = _RANDOM[4'h8][17];
        REG_1_bits_exceptionVec_2 = _RANDOM[4'h8][18];
        REG_1_bits_exceptionVec_3 = _RANDOM[4'h8][19];
        REG_1_bits_exceptionVec_4 = _RANDOM[4'h8][20];
        REG_1_bits_exceptionVec_5 = _RANDOM[4'h8][21];
        REG_1_bits_exceptionVec_6 = _RANDOM[4'h8][22];
        REG_1_bits_exceptionVec_7 = _RANDOM[4'h8][23];
        REG_1_bits_exceptionVec_8 = _RANDOM[4'h8][24];
        REG_1_bits_exceptionVec_9 = _RANDOM[4'h8][25];
        REG_1_bits_exceptionVec_10 = _RANDOM[4'h8][26];
        REG_1_bits_exceptionVec_11 = _RANDOM[4'h8][27];
        REG_1_bits_exceptionVec_12 = _RANDOM[4'h8][28];
        REG_1_bits_exceptionVec_13 = _RANDOM[4'h8][29];
        REG_1_bits_exceptionVec_14 = _RANDOM[4'h8][30];
        REG_1_bits_exceptionVec_15 = _RANDOM[4'h8][31];
        REG_1_bits_exceptionVec_16 = _RANDOM[4'h9][0];
        REG_1_bits_exceptionVec_17 = _RANDOM[4'h9][1];
        REG_1_bits_exceptionVec_18 = _RANDOM[4'h9][2];
        REG_1_bits_exceptionVec_19 = _RANDOM[4'h9][3];
        REG_1_bits_exceptionVec_20 = _RANDOM[4'h9][4];
        REG_1_bits_exceptionVec_21 = _RANDOM[4'h9][5];
        REG_1_bits_exceptionVec_22 = _RANDOM[4'h9][6];
        REG_1_bits_exceptionVec_23 = _RANDOM[4'h9][7];
        REG_1_bits_isPcBkpt = _RANDOM[4'h9][8];
        REG_1_bits_isFetchMalAddr = _RANDOM[4'h9][9];
        REG_1_bits_gpaddr = {_RANDOM[4'h9][31:10], _RANDOM[4'hA], _RANDOM[4'hB][9:0]};
        REG_1_bits_singleStep = _RANDOM[4'hB][10];
        REG_1_bits_crossPageIPFFix = _RANDOM[4'hB][11];
        REG_1_bits_isInterrupt = _RANDOM[4'hB][12];
        REG_1_bits_isHls = _RANDOM[4'hB][13];
        REG_1_bits_trigger = _RANDOM[4'hB][18:15];
        REG_1_bits_isForVSnonLeafPTE = _RANDOM[4'hB][19];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = REG_1_valid;
  assign io_out_bits_pc = REG_1_bits_pc;
  assign io_out_bits_exceptionVec_0 = REG_1_bits_exceptionVec_0;
  assign io_out_bits_exceptionVec_1 = REG_1_bits_exceptionVec_1;
  assign io_out_bits_exceptionVec_2 = REG_1_bits_exceptionVec_2;
  assign io_out_bits_exceptionVec_3 = REG_1_bits_exceptionVec_3;
  assign io_out_bits_exceptionVec_4 = REG_1_bits_exceptionVec_4;
  assign io_out_bits_exceptionVec_5 = REG_1_bits_exceptionVec_5;
  assign io_out_bits_exceptionVec_6 = REG_1_bits_exceptionVec_6;
  assign io_out_bits_exceptionVec_7 = REG_1_bits_exceptionVec_7;
  assign io_out_bits_exceptionVec_8 = REG_1_bits_exceptionVec_8;
  assign io_out_bits_exceptionVec_9 = REG_1_bits_exceptionVec_9;
  assign io_out_bits_exceptionVec_10 = REG_1_bits_exceptionVec_10;
  assign io_out_bits_exceptionVec_11 = REG_1_bits_exceptionVec_11;
  assign io_out_bits_exceptionVec_12 = REG_1_bits_exceptionVec_12;
  assign io_out_bits_exceptionVec_13 = REG_1_bits_exceptionVec_13;
  assign io_out_bits_exceptionVec_14 = REG_1_bits_exceptionVec_14;
  assign io_out_bits_exceptionVec_15 = REG_1_bits_exceptionVec_15;
  assign io_out_bits_exceptionVec_16 = REG_1_bits_exceptionVec_16;
  assign io_out_bits_exceptionVec_17 = REG_1_bits_exceptionVec_17;
  assign io_out_bits_exceptionVec_18 = REG_1_bits_exceptionVec_18;
  assign io_out_bits_exceptionVec_19 = REG_1_bits_exceptionVec_19;
  assign io_out_bits_exceptionVec_20 = REG_1_bits_exceptionVec_20;
  assign io_out_bits_exceptionVec_21 = REG_1_bits_exceptionVec_21;
  assign io_out_bits_exceptionVec_22 = REG_1_bits_exceptionVec_22;
  assign io_out_bits_exceptionVec_23 = REG_1_bits_exceptionVec_23;
  assign io_out_bits_isPcBkpt = REG_1_bits_isPcBkpt;
  assign io_out_bits_isFetchMalAddr = REG_1_bits_isFetchMalAddr;
  assign io_out_bits_gpaddr = REG_1_bits_gpaddr;
  assign io_out_bits_singleStep = REG_1_bits_singleStep;
  assign io_out_bits_crossPageIPFFix = REG_1_bits_crossPageIPFFix;
  assign io_out_bits_isInterrupt = REG_1_bits_isInterrupt;
  assign io_out_bits_isHls = REG_1_bits_isHls;
  assign io_out_bits_trigger = REG_1_bits_trigger;
  assign io_out_bits_isForVSnonLeafPTE = REG_1_bits_isForVSnonLeafPTE;
endmodule

