// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FIFOReg(
  input        clock,
  input        reset,
  input        io_enq_valid,
  input  [3:0] io_enq_bits,
  input        io_deq_ready,
  output [3:0] io_deq_bits,
  input        io_flush
);

  reg  [3:0]       regFiles_0;
  reg  [3:0]       regFiles_1;
  reg  [3:0]       regFiles_2;
  reg  [3:0]       regFiles_3;
  reg  [3:0]       regFiles_4;
  reg  [3:0]       regFiles_5;
  reg  [3:0]       regFiles_6;
  reg  [3:0]       regFiles_7;
  reg  [3:0]       regFiles_8;
  reg  [3:0]       regFiles_9;
  reg              enq_ptr_flag;
  reg  [3:0]       enq_ptr_value;
  reg              deq_ptr_flag;
  reg  [3:0]       deq_ptr_value;
  wire [15:0][3:0] _GEN =
    {{regFiles_0},
     {regFiles_0},
     {regFiles_0},
     {regFiles_0},
     {regFiles_0},
     {regFiles_0},
     {regFiles_9},
     {regFiles_8},
     {regFiles_7},
     {regFiles_6},
     {regFiles_5},
     {regFiles_4},
     {regFiles_3},
     {regFiles_2},
     {regFiles_1},
     {regFiles_0}};
  wire             _GEN_0 =
    ~(enq_ptr_value == deq_ptr_value & (enq_ptr_flag ^ deq_ptr_flag)) & io_enq_valid;
  wire [4:0]       enq_ptr_new_value = 5'({1'h0, enq_ptr_value} + 5'h1);
  wire [5:0]       _enq_ptr_diff_T_4 = 6'({1'h0, enq_ptr_new_value} - 6'hA);
  wire             enq_ptr_reverse_flag = $signed(_enq_ptr_diff_T_4) > -6'sh1;
  wire             _GEN_1 =
    io_deq_ready & {enq_ptr_flag, enq_ptr_value} != {deq_ptr_flag, deq_ptr_value};
  wire [4:0]       deq_ptr_new_value = 5'({1'h0, deq_ptr_value} + 5'h1);
  wire [5:0]       _deq_ptr_diff_T_4 = 6'({1'h0, deq_ptr_new_value} - 6'hA);
  wire             deq_ptr_reverse_flag = $signed(_deq_ptr_diff_T_4) > -6'sh1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      regFiles_0 <= 4'h0;
      regFiles_1 <= 4'h0;
      regFiles_2 <= 4'h0;
      regFiles_3 <= 4'h0;
      regFiles_4 <= 4'h0;
      regFiles_5 <= 4'h0;
      regFiles_6 <= 4'h0;
      regFiles_7 <= 4'h0;
      regFiles_8 <= 4'h0;
      regFiles_9 <= 4'h0;
      enq_ptr_flag <= 1'h0;
      enq_ptr_value <= 4'h0;
      deq_ptr_flag <= 1'h0;
      deq_ptr_value <= 4'h0;
    end
    else begin
      if (_GEN_0 & enq_ptr_value == 4'h0)
        regFiles_0 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h1)
        regFiles_1 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h2)
        regFiles_2 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h3)
        regFiles_3 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h4)
        regFiles_4 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h5)
        regFiles_5 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h6)
        regFiles_6 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h7)
        regFiles_7 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h8)
        regFiles_8 <= io_enq_bits;
      if (_GEN_0 & enq_ptr_value == 4'h9)
        regFiles_9 <= io_enq_bits;
      enq_ptr_flag <= ~io_flush & (_GEN_0 & enq_ptr_reverse_flag ^ enq_ptr_flag);
      if (io_flush) begin
        enq_ptr_value <= 4'h0;
        deq_ptr_value <= 4'h0;
      end
      else begin
        if (_GEN_0)
          enq_ptr_value <=
            enq_ptr_reverse_flag ? _enq_ptr_diff_T_4[3:0] : enq_ptr_new_value[3:0];
        if (_GEN_1)
          deq_ptr_value <=
            deq_ptr_reverse_flag ? _deq_ptr_diff_T_4[3:0] : deq_ptr_new_value[3:0];
      end
      deq_ptr_flag <= ~io_flush & (_GEN_1 & deq_ptr_reverse_flag ^ deq_ptr_flag);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        regFiles_0 = _RANDOM[1'h0][3:0];
        regFiles_1 = _RANDOM[1'h0][7:4];
        regFiles_2 = _RANDOM[1'h0][11:8];
        regFiles_3 = _RANDOM[1'h0][15:12];
        regFiles_4 = _RANDOM[1'h0][19:16];
        regFiles_5 = _RANDOM[1'h0][23:20];
        regFiles_6 = _RANDOM[1'h0][27:24];
        regFiles_7 = _RANDOM[1'h0][31:28];
        regFiles_8 = _RANDOM[1'h1][3:0];
        regFiles_9 = _RANDOM[1'h1][7:4];
        enq_ptr_flag = _RANDOM[1'h1][8];
        enq_ptr_value = _RANDOM[1'h1][12:9];
        deq_ptr_flag = _RANDOM[1'h1][13];
        deq_ptr_value = _RANDOM[1'h1][17:14];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        regFiles_0 = 4'h0;
        regFiles_1 = 4'h0;
        regFiles_2 = 4'h0;
        regFiles_3 = 4'h0;
        regFiles_4 = 4'h0;
        regFiles_5 = 4'h0;
        regFiles_6 = 4'h0;
        regFiles_7 = 4'h0;
        regFiles_8 = 4'h0;
        regFiles_9 = 4'h0;
        enq_ptr_flag = 1'h0;
        enq_ptr_value = 4'h0;
        deq_ptr_flag = 1'h0;
        deq_ptr_value = 4'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_deq_bits = _GEN[deq_ptr_value];
endmodule

