// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module HenvcfgModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [63:0] rdata,
  output        regOut_STCE,
  output        regOut_PBMTE,
  output        regOut_DTE,
  output [1:0]  regOut_PMM,
  output        regOut_CBZE,
  output        regOut_CBCFE,
  output [1:0]  regOut_CBIE,
  input         menvcfg_STCE,
  input         menvcfg_PBMTE,
  input         menvcfg_DTE
);

  wire       _regOut_DTE_output;
  wire       _regOut_PBMTE_output;
  wire       _regOut_STCE_output;
  reg        reg_STCE;
  reg        reg_PBMTE;
  reg        reg_DTE;
  reg  [1:0] reg_PMM;
  reg        reg_CBZE;
  reg        reg_CBCFE;
  reg  [1:0] reg_CBIE;
  assign _regOut_STCE_output = menvcfg_STCE & reg_STCE;
  assign _regOut_PBMTE_output = menvcfg_PBMTE & reg_PBMTE;
  assign _regOut_DTE_output = menvcfg_DTE & reg_DTE;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_STCE <= 1'h1;
      reg_PBMTE <= 1'h0;
      reg_DTE <= 1'h0;
      reg_PMM <= 2'h0;
      reg_CBZE <= 1'h1;
      reg_CBCFE <= 1'h1;
      reg_CBIE <= 2'h3;
    end
    else begin
      if (w_wen) begin
        reg_STCE <= w_wdata[63];
        reg_PBMTE <= w_wdata[62];
        reg_DTE <= w_wdata[59];
        reg_CBZE <= w_wdata[7];
        reg_CBCFE <= w_wdata[6];
      end
      if (w_wen & (|{&(w_wdata[33:32]), w_wdata[33:32] == 2'h2, w_wdata[33:32] == 2'h0}))
        reg_PMM <= w_wdata[33:32];
      if (w_wen & (|{&(w_wdata[5:4]), w_wdata[5:4] == 2'h1, w_wdata[5:4] == 2'h0}))
        reg_CBIE <= w_wdata[5:4];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_STCE = _RANDOM[/*Zero width*/ 1'b0][0];
        reg_PBMTE = _RANDOM[/*Zero width*/ 1'b0][1];
        reg_DTE = _RANDOM[/*Zero width*/ 1'b0][3];
        reg_PMM = _RANDOM[/*Zero width*/ 1'b0][5:4];
        reg_CBZE = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_CBCFE = _RANDOM[/*Zero width*/ 1'b0][7];
        reg_CBIE = _RANDOM[/*Zero width*/ 1'b0][9:8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_STCE = 1'h1;
        reg_PBMTE = 1'h0;
        reg_DTE = 1'h0;
        reg_PMM = 2'h0;
        reg_CBZE = 1'h1;
        reg_CBCFE = 1'h1;
        reg_CBIE = 2'h3;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {_regOut_STCE_output,
     _regOut_PBMTE_output,
     2'h0,
     _regOut_DTE_output,
     25'h0,
     reg_PMM,
     24'h0,
     reg_CBZE,
     reg_CBCFE,
     reg_CBIE,
     4'h0};
  assign regOut_STCE = _regOut_STCE_output;
  assign regOut_PBMTE = _regOut_PBMTE_output;
  assign regOut_DTE = _regOut_DTE_output;
  assign regOut_PMM = reg_PMM;
  assign regOut_CBZE = reg_CBZE;
  assign regOut_CBCFE = reg_CBCFE;
  assign regOut_CBIE = reg_CBIE;
endmodule

