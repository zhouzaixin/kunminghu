// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VSegmentUnit(
  input          clock,
  input          reset,
  input          io_in_valid,
  input  [34:0]  io_in_bits_uop_fuType,
  input  [8:0]   io_in_bits_uop_fuOpType,
  input          io_in_bits_uop_vecWen,
  input          io_in_bits_uop_v0Wen,
  input          io_in_bits_uop_vlWen,
  input          io_in_bits_uop_vpu_vma,
  input          io_in_bits_uop_vpu_vta,
  input  [1:0]   io_in_bits_uop_vpu_vsew,
  input  [2:0]   io_in_bits_uop_vpu_vlmul,
  input          io_in_bits_uop_vpu_vm,
  input  [7:0]   io_in_bits_uop_vpu_vstart,
  input  [6:0]   io_in_bits_uop_vpu_vuopIdx,
  input          io_in_bits_uop_vpu_lastUop,
  input  [2:0]   io_in_bits_uop_vpu_nf,
  input  [1:0]   io_in_bits_uop_vpu_veew,
  input  [7:0]   io_in_bits_uop_pdest,
  input          io_in_bits_uop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_robIdx_value,
  input          io_in_bits_uop_lqIdx_flag,
  input  [6:0]   io_in_bits_uop_lqIdx_value,
  input          io_in_bits_uop_sqIdx_flag,
  input  [5:0]   io_in_bits_uop_sqIdx_value,
  input  [127:0] io_in_bits_src_0,
  input  [127:0] io_in_bits_src_1,
  input  [127:0] io_in_bits_src_2,
  input  [127:0] io_in_bits_src_3,
  input  [127:0] io_in_bits_src_4,
  output         io_uopwriteback_valid,
  output         io_uopwriteback_bits_uop_exceptionVec_3,
  output         io_uopwriteback_bits_uop_exceptionVec_4,
  output         io_uopwriteback_bits_uop_exceptionVec_5,
  output         io_uopwriteback_bits_uop_exceptionVec_6,
  output         io_uopwriteback_bits_uop_exceptionVec_7,
  output         io_uopwriteback_bits_uop_exceptionVec_13,
  output         io_uopwriteback_bits_uop_exceptionVec_15,
  output         io_uopwriteback_bits_uop_exceptionVec_21,
  output         io_uopwriteback_bits_uop_exceptionVec_23,
  output [3:0]   io_uopwriteback_bits_uop_trigger,
  output [8:0]   io_uopwriteback_bits_uop_fuOpType,
  output         io_uopwriteback_bits_uop_vecWen,
  output         io_uopwriteback_bits_uop_v0Wen,
  output         io_uopwriteback_bits_uop_vlWen,
  output         io_uopwriteback_bits_uop_vpu_vma,
  output         io_uopwriteback_bits_uop_vpu_vta,
  output [1:0]   io_uopwriteback_bits_uop_vpu_vsew,
  output [2:0]   io_uopwriteback_bits_uop_vpu_vlmul,
  output         io_uopwriteback_bits_uop_vpu_vm,
  output [7:0]   io_uopwriteback_bits_uop_vpu_vstart,
  output [6:0]   io_uopwriteback_bits_uop_vpu_vuopIdx,
  output [127:0] io_uopwriteback_bits_uop_vpu_vmask,
  output [7:0]   io_uopwriteback_bits_uop_vpu_vl,
  output [2:0]   io_uopwriteback_bits_uop_vpu_nf,
  output [1:0]   io_uopwriteback_bits_uop_vpu_veew,
  output [7:0]   io_uopwriteback_bits_uop_pdest,
  output         io_uopwriteback_bits_uop_robIdx_flag,
  output [7:0]   io_uopwriteback_bits_uop_robIdx_value,
  output [127:0] io_uopwriteback_bits_data,
  output [2:0]   io_uopwriteback_bits_vdIdxInField,
  input          io_rdcache_req_ready,
  output         io_rdcache_req_valid,
  output [49:0]  io_rdcache_req_bits_vaddr,
  output [49:0]  io_rdcache_req_bits_vaddr_dup,
  input          io_rdcache_resp_valid,
  input  [127:0] io_rdcache_resp_bits_data_delayed,
  input          io_rdcache_resp_bits_miss,
  output         io_rdcache_is128Req,
  output [47:0]  io_rdcache_s1_paddr_dup_lsu,
  output [47:0]  io_rdcache_s1_paddr_dup_dcache,
  input          io_rdcache_s2_bank_conflict,
  input          io_sbuffer_ready,
  output         io_sbuffer_valid,
  output [49:0]  io_sbuffer_bits_vaddr,
  output [127:0] io_sbuffer_bits_data,
  output [15:0]  io_sbuffer_bits_mask,
  output [47:0]  io_sbuffer_bits_addr,
  output         io_sbuffer_bits_vecValid,
  output         io_dtlb_req_valid,
  output [49:0]  io_dtlb_req_bits_vaddr,
  output [63:0]  io_dtlb_req_bits_fullva,
  output [2:0]   io_dtlb_req_bits_cmd,
  output         io_dtlb_req_bits_debug_robIdx_flag,
  output [7:0]   io_dtlb_req_bits_debug_robIdx_value,
  input          io_dtlb_resp_valid,
  input  [47:0]  io_dtlb_resp_bits_paddr_0,
  input  [63:0]  io_dtlb_resp_bits_gpaddr_0,
  input  [63:0]  io_dtlb_resp_bits_fullva,
  input          io_dtlb_resp_bits_miss,
  input          io_dtlb_resp_bits_isForVSnonLeafPTE,
  input          io_dtlb_resp_bits_excp_0_gpf_ld,
  input          io_dtlb_resp_bits_excp_0_gpf_st,
  input          io_dtlb_resp_bits_excp_0_pf_ld,
  input          io_dtlb_resp_bits_excp_0_pf_st,
  input          io_dtlb_resp_bits_excp_0_af_ld,
  input          io_dtlb_resp_bits_excp_0_af_st,
  input          io_pmpResp_ld,
  input          io_pmpResp_st,
  input          io_pmpResp_instr,
  input          io_pmpResp_mmio,
  input          io_pmpResp_atomic,
  output         io_flush_sbuffer_valid,
  input          io_flush_sbuffer_empty,
  output         io_feedback_valid,
  output         io_feedback_bits_sqIdx_flag,
  output [5:0]   io_feedback_bits_sqIdx_value,
  output         io_feedback_bits_lqIdx_flag,
  output [6:0]   io_feedback_bits_lqIdx_value,
  output         io_exceptionInfo_valid,
  output [63:0]  io_exceptionInfo_bits_vaddr,
  output [49:0]  io_exceptionInfo_bits_gpaddr,
  output         io_exceptionInfo_bits_isForVSnonLeafPTE,
  input  [1:0]   io_fromCsrTrigger_tdataVec_0_matchType,
  input          io_fromCsrTrigger_tdataVec_0_select,
  input          io_fromCsrTrigger_tdataVec_0_timing,
  input  [3:0]   io_fromCsrTrigger_tdataVec_0_action,
  input          io_fromCsrTrigger_tdataVec_0_chain,
  input          io_fromCsrTrigger_tdataVec_0_store,
  input          io_fromCsrTrigger_tdataVec_0_load,
  input  [63:0]  io_fromCsrTrigger_tdataVec_0_tdata2,
  input  [1:0]   io_fromCsrTrigger_tdataVec_1_matchType,
  input          io_fromCsrTrigger_tdataVec_1_select,
  input          io_fromCsrTrigger_tdataVec_1_timing,
  input  [3:0]   io_fromCsrTrigger_tdataVec_1_action,
  input          io_fromCsrTrigger_tdataVec_1_chain,
  input          io_fromCsrTrigger_tdataVec_1_store,
  input          io_fromCsrTrigger_tdataVec_1_load,
  input  [63:0]  io_fromCsrTrigger_tdataVec_1_tdata2,
  input  [1:0]   io_fromCsrTrigger_tdataVec_2_matchType,
  input          io_fromCsrTrigger_tdataVec_2_select,
  input          io_fromCsrTrigger_tdataVec_2_timing,
  input  [3:0]   io_fromCsrTrigger_tdataVec_2_action,
  input          io_fromCsrTrigger_tdataVec_2_chain,
  input          io_fromCsrTrigger_tdataVec_2_store,
  input          io_fromCsrTrigger_tdataVec_2_load,
  input  [63:0]  io_fromCsrTrigger_tdataVec_2_tdata2,
  input  [1:0]   io_fromCsrTrigger_tdataVec_3_matchType,
  input          io_fromCsrTrigger_tdataVec_3_select,
  input          io_fromCsrTrigger_tdataVec_3_timing,
  input  [3:0]   io_fromCsrTrigger_tdataVec_3_action,
  input          io_fromCsrTrigger_tdataVec_3_chain,
  input          io_fromCsrTrigger_tdataVec_3_store,
  input          io_fromCsrTrigger_tdataVec_3_load,
  input  [63:0]  io_fromCsrTrigger_tdataVec_3_tdata2,
  input          io_fromCsrTrigger_tEnableVec_0,
  input          io_fromCsrTrigger_tEnableVec_1,
  input          io_fromCsrTrigger_tEnableVec_2,
  input          io_fromCsrTrigger_tEnableVec_3,
  input          io_fromCsrTrigger_debugMode,
  input          io_fromCsrTrigger_triggerCanRaiseBpExp
);

  reg  [63:0]       nextBaseVaddr_r;
  wire              sbufferOut_valid;
  wire              io_rdcache_req_valid_0;
  wire              exception_pa;
  wire              exception_gpa;
  wire              exception_va;
  wire              _canHandleMisalign_T_3;
  wire              _canHandleMisalign_T;
  wire              isMisalignWire;
  wire              notCross16ByteWire;
  wire              _VSegmentUnitPipelineConnect_io_in_ready;
  wire              _VSegmentUnitPipelineConnect_io_out_valid;
  wire [3:0]        _segmentTrigger_tdataVec_io_toLoadStore_triggerAction;
  reg  [63:0]       instMicroOp_baseVaddr;
  reg               instMicroOp_uop_exceptionVec_3;
  reg               instMicroOp_uop_exceptionVec_4;
  reg               instMicroOp_uop_exceptionVec_5;
  reg               instMicroOp_uop_exceptionVec_6;
  reg               instMicroOp_uop_exceptionVec_7;
  reg               instMicroOp_uop_exceptionVec_13;
  reg               instMicroOp_uop_exceptionVec_15;
  reg               instMicroOp_uop_exceptionVec_21;
  reg               instMicroOp_uop_exceptionVec_23;
  reg  [3:0]        instMicroOp_uop_trigger;
  reg  [8:0]        instMicroOp_uop_fuOpType;
  reg               instMicroOp_uop_vpu_vma;
  reg               instMicroOp_uop_vpu_vta;
  reg  [1:0]        instMicroOp_uop_vpu_vsew;
  reg  [2:0]        instMicroOp_uop_vpu_vlmul;
  reg               instMicroOp_uop_vpu_vm;
  reg  [7:0]        instMicroOp_uop_vpu_vstart;
  reg  [2:0]        instMicroOp_uop_vpu_nf;
  reg  [1:0]        instMicroOp_uop_vpu_veew;
  reg               instMicroOp_uop_robIdx_flag;
  reg  [7:0]        instMicroOp_uop_robIdx_value;
  reg  [47:0]       instMicroOp_paddr;
  reg  [127:0]      instMicroOp_mask;
  reg  [2:0]        instMicroOp_alignedType;
  reg  [7:0]        instMicroOp_vl;
  reg  [7:0]        instMicroOp_uopFlowNumMask;
  reg               instMicroOp_isVSegLoad;
  reg               instMicroOp_isVSegStore;
  reg  [63:0]       instMicroOp_exceptionVaddr;
  reg  [63:0]       instMicroOp_exceptionGpaddr;
  reg               instMicroOp_exceptionIsForVSnonLeafPTE;
  reg  [7:0]        instMicroOp_exceptionVstart;
  reg               instMicroOp_exceptionVl_valid;
  reg  [7:0]        instMicroOp_exceptionVl_bits;
  reg               instMicroOp_isFof;
  reg               instMicroOpValid;
  reg  [127:0]      data_0;
  reg  [127:0]      data_1;
  reg  [127:0]      data_2;
  reg  [127:0]      data_3;
  reg  [127:0]      data_4;
  reg  [127:0]      data_5;
  reg  [127:0]      data_6;
  reg  [127:0]      data_7;
  reg               uopq_0_uop_vecWen;
  reg               uopq_0_uop_v0Wen;
  reg               uopq_0_uop_vlWen;
  reg  [6:0]        uopq_0_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_0_uop_pdest;
  reg               uopq_0_uop_lqIdx_flag;
  reg  [6:0]        uopq_0_uop_lqIdx_value;
  reg               uopq_0_uop_sqIdx_flag;
  reg  [5:0]        uopq_0_uop_sqIdx_value;
  reg               uopq_1_uop_vecWen;
  reg               uopq_1_uop_v0Wen;
  reg               uopq_1_uop_vlWen;
  reg  [6:0]        uopq_1_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_1_uop_pdest;
  reg               uopq_1_uop_lqIdx_flag;
  reg  [6:0]        uopq_1_uop_lqIdx_value;
  reg               uopq_1_uop_sqIdx_flag;
  reg  [5:0]        uopq_1_uop_sqIdx_value;
  reg               uopq_2_uop_vecWen;
  reg               uopq_2_uop_v0Wen;
  reg               uopq_2_uop_vlWen;
  reg  [6:0]        uopq_2_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_2_uop_pdest;
  reg               uopq_2_uop_lqIdx_flag;
  reg  [6:0]        uopq_2_uop_lqIdx_value;
  reg               uopq_2_uop_sqIdx_flag;
  reg  [5:0]        uopq_2_uop_sqIdx_value;
  reg               uopq_3_uop_vecWen;
  reg               uopq_3_uop_v0Wen;
  reg               uopq_3_uop_vlWen;
  reg  [6:0]        uopq_3_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_3_uop_pdest;
  reg               uopq_3_uop_lqIdx_flag;
  reg  [6:0]        uopq_3_uop_lqIdx_value;
  reg               uopq_3_uop_sqIdx_flag;
  reg  [5:0]        uopq_3_uop_sqIdx_value;
  reg               uopq_4_uop_vecWen;
  reg               uopq_4_uop_v0Wen;
  reg               uopq_4_uop_vlWen;
  reg  [6:0]        uopq_4_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_4_uop_pdest;
  reg               uopq_4_uop_lqIdx_flag;
  reg  [6:0]        uopq_4_uop_lqIdx_value;
  reg               uopq_4_uop_sqIdx_flag;
  reg  [5:0]        uopq_4_uop_sqIdx_value;
  reg               uopq_5_uop_vecWen;
  reg               uopq_5_uop_v0Wen;
  reg               uopq_5_uop_vlWen;
  reg  [6:0]        uopq_5_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_5_uop_pdest;
  reg               uopq_5_uop_lqIdx_flag;
  reg  [6:0]        uopq_5_uop_lqIdx_value;
  reg               uopq_5_uop_sqIdx_flag;
  reg  [5:0]        uopq_5_uop_sqIdx_value;
  reg               uopq_6_uop_vecWen;
  reg               uopq_6_uop_v0Wen;
  reg               uopq_6_uop_vlWen;
  reg  [6:0]        uopq_6_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_6_uop_pdest;
  reg               uopq_6_uop_lqIdx_flag;
  reg  [6:0]        uopq_6_uop_lqIdx_value;
  reg               uopq_6_uop_sqIdx_flag;
  reg  [5:0]        uopq_6_uop_sqIdx_value;
  reg               uopq_7_uop_vecWen;
  reg               uopq_7_uop_v0Wen;
  reg               uopq_7_uop_vlWen;
  reg  [6:0]        uopq_7_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_7_uop_pdest;
  reg               uopq_7_uop_lqIdx_flag;
  reg  [6:0]        uopq_7_uop_lqIdx_value;
  reg               uopq_7_uop_sqIdx_flag;
  reg  [5:0]        uopq_7_uop_sqIdx_value;
  reg  [127:0]      stride_0;
  reg  [127:0]      stride_1;
  reg  [127:0]      stride_2;
  reg  [127:0]      stride_3;
  reg  [127:0]      stride_4;
  reg  [127:0]      stride_5;
  reg  [127:0]      stride_6;
  reg  [127:0]      stride_7;
  reg               enqPtr_flag;
  reg  [2:0]        enqPtr_value;
  reg               deqPtr_flag;
  reg  [2:0]        deqPtr_value;
  reg  [2:0]        stridePtrReg_value;
  reg  [7:0]        segmentIdx;
  reg  [3:0]        fieldIdx;
  reg  [63:0]       segmentOffset;
  reg               splitPtr_flag;
  reg  [2:0]        splitPtr_value;
  wire [7:0]        _maxSegIdx_T = 8'(instMicroOp_vl - 8'h1);
  reg  [49:0]       latchVaddr;
  reg  [49:0]       latchVaddrDup;
  wire [2:0]        _GEN = {1'h0, instMicroOp_uop_vpu_veew};
  wire [2:0]        _GEN_0 = {1'h0, instMicroOp_uop_vpu_vsew};
  wire [2:0]        _issueEmul_T_3 = 3'(3'(_GEN - _GEN_0) + instMicroOp_uop_vpu_vlmul);
  wire [7:0]        issueIndexIdx =
    segmentIdx
    & 8'((8'h1
          << 3'(3'(($signed(_issueEmul_T_3) > 3'sh0 ? 3'h0 : _issueEmul_T_3) - 3'h4)
                - _GEN)) - 8'h1);
  wire [255:0]      _segmentActive_T = 256'h1 << segmentIdx;
  wire [127:0]      _GEN_1 = _segmentActive_T[127:0] & instMicroOp_mask;
  reg  [8:0]        fofBuffer_fuOpType;
  reg               fofBuffer_vecWen;
  reg               fofBuffer_v0Wen;
  reg               fofBuffer_vlWen;
  reg               fofBuffer_vpu_vma;
  reg               fofBuffer_vpu_vta;
  reg  [1:0]        fofBuffer_vpu_vsew;
  reg  [2:0]        fofBuffer_vpu_vlmul;
  reg               fofBuffer_vpu_vm;
  reg  [7:0]        fofBuffer_vpu_vstart;
  reg  [6:0]        fofBuffer_vpu_vuopIdx;
  reg  [2:0]        fofBuffer_vpu_nf;
  reg  [1:0]        fofBuffer_vpu_veew;
  reg  [7:0]        fofBuffer_pdest;
  reg               fofBuffer_robIdx_flag;
  reg  [7:0]        fofBuffer_robIdx_value;
  reg               fofBufferValid;
  reg  [3:0]        state;
  wire              _instMicroOp_isFof_T = io_in_bits_uop_fuOpType == 9'h90;
  wire              isEnqFixVlUop =
    _instMicroOp_isFof_T & io_in_valid & io_in_bits_uop_vpu_lastUop;
  reg               curPtr;
  reg               isMisalignReg;
  reg               notCross16ByteReg;
  reg  [63:0]       combinedData;
  reg  [47:0]       lowPagePaddr;
  wire              _GEN_2 = state == 4'h5;
  wire              _GEN_3 = isMisalignReg & ~notCross16ByteReg;
  wire              _GEN_4 = _GEN_3 & ~curPtr;
  wire              _GEN_5 = segmentIdx == _maxSegIdx_T;
  wire [3:0]        _GEN_6 = {1'h0, instMicroOp_uop_vpu_nf};
  wire              _GEN_7 = fieldIdx == _GEN_6;
  wire              _GEN_8 = _GEN_5 & ~(|_GEN_1);
  wire              _GEN_9 = _VSegmentUnitPipelineConnect_io_in_ready & sbufferOut_valid;
  wire [3:0]        _GEN_10 = state == 4'hD & fofBufferValid ? 4'hD : 4'h0;
  wire [15:0][3:0]  _GEN_11 =
    {{_GEN_10},
     {_GEN_10},
     {_GEN_10},
     {(enqPtr_flag == deqPtr_flag
         ? {1'h0, 3'(enqPtr_value - deqPtr_value)}
         : 4'(4'({1'h0, enqPtr_value} - 4'h8) - {1'h0, deqPtr_value})) == 4'h0
        ? (fofBufferValid ? 4'hD : 4'h0)
        : 4'hC},
     {io_sbuffer_ready & _VSegmentUnitPipelineConnect_io_out_valid ? 4'hC : 4'hB},
     {~_GEN_9 & (|_GEN_1) | _GEN_4
        ? 4'hA
        : _GEN_5
          & (_GEN_7 & _GEN_9 | ~(|_GEN_1) & _VSegmentUnitPipelineConnect_io_out_valid
             & ~io_sbuffer_ready)
            ? 4'hB
            : _GEN_8 ? 4'hC : 4'h3},
     {_GEN_5 & _GEN_7 | _GEN_8 ? 4'hC : 4'h3},
     {curPtr ? 4'h9 : 4'h3},
     {io_rdcache_resp_valid
        ? (io_rdcache_resp_bits_miss | io_rdcache_s2_bank_conflict
             ? 4'h6
             : instMicroOp_isVSegLoad
                 ? {3'h4, ~(isMisalignReg & ~notCross16ByteReg)}
                 : 4'hA)
        : 4'h7},
     {{3'h3, io_rdcache_req_ready & io_rdcache_req_valid_0}},
     {exception_pa | exception_va | exception_gpa
        ? 4'hC
        : _GEN_2 & _canHandleMisalign_T
          & (|_segmentTrigger_tdataVec_io_toLoadStore_triggerAction)
          & _canHandleMisalign_T_3 & isMisalignWire & ~notCross16ByteWire | _GEN_4
          & instMicroOp_isVSegStore
            ? 4'h3
            : instMicroOp_isVSegLoad ? 4'h6 : 4'hA},
     {io_dtlb_resp_valid ? (io_dtlb_resp_bits_miss ? 4'h3 : 4'h5) : 4'h4},
     {(|_GEN_1) ? 4'h4 : instMicroOp_isVSegLoad ? 4'h9 : 4'hA},
     {{3'h1, io_flush_sbuffer_empty}},
     {{3'h1, io_flush_sbuffer_empty}},
     {{3'h0, enqPtr_flag ^ deqPtr_flag ^ enqPtr_value > deqPtr_value}}};
  wire [3:0]        stateNext = _GEN_11[state];
  wire [2:0]        _emul_T_3 =
    3'(3'({1'h0, io_in_bits_uop_vpu_veew} - {1'h0, io_in_bits_uop_vpu_vsew})
       + io_in_bits_uop_vpu_vlmul);
  wire              _GEN_12 = io_in_valid & ~instMicroOpValid;
  wire              _GEN_13 = _GEN_12 & ~isEnqFixVlUop;
  wire              _GEN_14 = io_in_valid & ~isEnqFixVlUop;
  wire [7:0][127:0] _GEN_15 =
    {{stride_7},
     {stride_6},
     {stride_5},
     {stride_4},
     {stride_3},
     {stride_2},
     {stride_1},
     {stride_0}};
  wire [127:0]      _GEN_16 = _GEN_15[stridePtrReg_value];
  wire              _indexStride_T_111 = issueIndexIdx == 8'h0;
  wire              _indexStride_T_112 = issueIndexIdx == 8'h1;
  wire              _indexStride_T_100 = issueIndexIdx == 8'h2;
  wire              _indexStride_T_101 = issueIndexIdx == 8'h3;
  wire              _indexStride_T_75 = issueIndexIdx == 8'h4;
  wire              _indexStride_T_76 = issueIndexIdx == 8'h5;
  wire              _indexStride_T_77 = issueIndexIdx == 8'h6;
  wire              _indexStride_T_78 = issueIndexIdx == 8'h7;
  wire [63:0]       _vaddr_T =
    64'(nextBaseVaddr_r
        + (instMicroOp_uop_fuOpType[5]
             ? {32'h0,
                {16'h0,
                 {8'h0,
                  instMicroOp_uop_vpu_veew == 2'h0
                    ? (_indexStride_T_111 ? _GEN_16[7:0] : 8'h0)
                      | (_indexStride_T_112 ? _GEN_16[15:8] : 8'h0)
                      | (_indexStride_T_100 ? _GEN_16[23:16] : 8'h0)
                      | (_indexStride_T_101 ? _GEN_16[31:24] : 8'h0)
                      | (_indexStride_T_75 ? _GEN_16[39:32] : 8'h0)
                      | (_indexStride_T_76 ? _GEN_16[47:40] : 8'h0)
                      | (_indexStride_T_77 ? _GEN_16[55:48] : 8'h0)
                      | (_indexStride_T_78 ? _GEN_16[63:56] : 8'h0)
                      | (issueIndexIdx == 8'h8 ? _GEN_16[71:64] : 8'h0)
                      | (issueIndexIdx == 8'h9 ? _GEN_16[79:72] : 8'h0)
                      | (issueIndexIdx == 8'hA ? _GEN_16[87:80] : 8'h0)
                      | (issueIndexIdx == 8'hB ? _GEN_16[95:88] : 8'h0)
                      | (issueIndexIdx == 8'hC ? _GEN_16[103:96] : 8'h0)
                      | (issueIndexIdx == 8'hD ? _GEN_16[111:104] : 8'h0)
                      | (issueIndexIdx == 8'hE ? _GEN_16[119:112] : 8'h0)
                      | (issueIndexIdx == 8'hF ? _GEN_16[127:120] : 8'h0)
                    : 8'h0}
                   | (instMicroOp_uop_vpu_veew == 2'h1
                        ? (_indexStride_T_111 ? _GEN_16[15:0] : 16'h0)
                          | (_indexStride_T_112 ? _GEN_16[31:16] : 16'h0)
                          | (_indexStride_T_100 ? _GEN_16[47:32] : 16'h0)
                          | (_indexStride_T_101 ? _GEN_16[63:48] : 16'h0)
                          | (_indexStride_T_75 ? _GEN_16[79:64] : 16'h0)
                          | (_indexStride_T_76 ? _GEN_16[95:80] : 16'h0)
                          | (_indexStride_T_77 ? _GEN_16[111:96] : 16'h0)
                          | (_indexStride_T_78 ? _GEN_16[127:112] : 16'h0)
                        : 16'h0)}
                  | (instMicroOp_uop_vpu_veew == 2'h2
                       ? (_indexStride_T_111 ? _GEN_16[31:0] : 32'h0)
                         | (_indexStride_T_112 ? _GEN_16[63:32] : 32'h0)
                         | (_indexStride_T_100 ? _GEN_16[95:64] : 32'h0)
                         | (_indexStride_T_101 ? _GEN_16[127:96] : 32'h0)
                       : 32'h0)}
               | ((&instMicroOp_uop_vpu_veew)
                    ? (_indexStride_T_111 ? _GEN_16[63:0] : 64'h0)
                      | (_indexStride_T_112 ? _GEN_16[127:64] : 64'h0)
                    : 64'h0)
             : segmentOffset));
  wire [46:0]       _GEN_17 = curPtr ? 47'(latchVaddr[49:3] + 47'h1) : latchVaddr[49:3];
  wire [63:0]       tlbReqVaddr = isMisalignReg ? {14'h0, _GEN_17, 3'h0} : _vaddr_T;
  wire              _io_dtlb_req_valid_T = state == 4'h3;
  wire [49:0]       dcacheReqVaddr = isMisalignReg ? {_GEN_17, 3'h0} : latchVaddr;
  wire              triggerDebugMode =
    _segmentTrigger_tdataVec_io_toLoadStore_triggerAction == 4'h1;
  wire              _GEN_18 = io_dtlb_resp_valid & state == 4'h4;
  wire              _exception_va_T =
    instMicroOp_uop_exceptionVec_15 | instMicroOp_uop_exceptionVec_13;
  wire [3:0]        _pmp_T_4 =
    {io_pmpResp_ld, io_pmpResp_st, io_pmpResp_instr, io_pmpResp_mmio}
    & {4{~(_exception_va_T | instMicroOp_uop_exceptionVec_23
           | instMicroOp_uop_exceptionVec_21)}};
  wire [1:0]        _highAddress_T_4 =
    instMicroOp_uop_fuOpType[5] ? instMicroOp_uop_vpu_vsew : instMicroOp_uop_vpu_veew;
  wire [4:0]        _highAddress_T_17 =
    5'({2'h0,
        {1'h0, {1'h0, _highAddress_T_4 == 2'h1} | {2{_highAddress_T_4 == 2'h2}}}
          | {3{&_highAddress_T_4}}} + _vaddr_T[4:0]);
  wire [1:0]        _addr_aligned_T_4 =
    instMicroOp_uop_fuOpType[5] ? instMicroOp_uop_vpu_vsew : instMicroOp_uop_vpu_veew;
  assign notCross16ByteWire = _GEN_2 & _highAddress_T_17[4] == _vaddr_T[4];
  assign isMisalignWire =
    _GEN_2
    & ~(_addr_aligned_T_4 == 2'h0 | _addr_aligned_T_4 == 2'h1 & ~(_vaddr_T[0])
        | _addr_aligned_T_4 == 2'h2 & _vaddr_T[1:0] == 2'h0 | (&_addr_aligned_T_4)
        & _vaddr_T[2:0] == 3'h0) & ~isMisalignReg;
  assign _canHandleMisalign_T = ~(_pmp_T_4[0]);
  assign _canHandleMisalign_T_3 = ~triggerDebugMode;
  assign exception_va =
    _GEN_2
    & (_exception_va_T | instMicroOp_uop_exceptionVec_7 | instMicroOp_uop_exceptionVec_5
       | ~(|_segmentTrigger_tdataVec_io_toLoadStore_triggerAction) | triggerDebugMode
       | _pmp_T_4[0]);
  assign exception_gpa =
    _GEN_2 & (instMicroOp_uop_exceptionVec_23 | instMicroOp_uop_exceptionVec_21);
  assign exception_pa = _GEN_2 & (_pmp_T_4[2] | _pmp_T_4[3] | _pmp_T_4[0]);
  wire              _GEN_19 = exception_va | exception_gpa | exception_pa;
  wire              _io_exceptionInfo_valid_T = state == 4'hC;
  wire              _segmentInactiveFinish_T = state == 4'h9;
  wire              _segmentInactiveFinish_T_1 = state == 4'hA;
  wire              _segmentInactiveFinish_T_2 = stateNext != 4'hA;
  wire              _GEN_20 = _segmentInactiveFinish_T_1 & _segmentInactiveFinish_T_2;
  wire [3:0]        _splitData_T = segmentIdx[3:0] & instMicroOp_uopFlowNumMask[3:0];
  wire [7:0][127:0] _GEN_21 =
    {{data_7}, {data_6}, {data_5}, {data_4}, {data_3}, {data_2}, {data_1}, {data_0}};
  wire [127:0]      _GEN_22 = _GEN_21[splitPtr_value];
  wire [2:0]        _splitData_T_65 = segmentIdx[2:0] & instMicroOp_uopFlowNumMask[2:0];
  wire [1:0]        _splitData_T_98 = segmentIdx[1:0] & instMicroOp_uopFlowNumMask[1:0];
  wire              _splitData_T_119 = segmentIdx[0] & instMicroOp_uopFlowNumMask[0];
  wire              _GEN_23 = _segmentInactiveFinish_T & (|_GEN_1);
  wire              _flowData_T_15 = instMicroOp_alignedType == 3'h0;
  wire              _flowData_T_16 = instMicroOp_alignedType == 3'h1;
  wire              _flowData_T_17 = instMicroOp_alignedType == 3'h2;
  wire              _flowData_T_18 = instMicroOp_alignedType == 3'h3;
  wire              _flowData_T_19 = instMicroOp_alignedType == 3'h4;
  wire [127:0]      splitData =
    (_flowData_T_15
       ? {120'h0,
          (_splitData_T == 4'h0 ? _GEN_22[7:0] : 8'h0)
            | (_splitData_T == 4'h1 ? _GEN_22[15:8] : 8'h0)
            | (_splitData_T == 4'h2 ? _GEN_22[23:16] : 8'h0)
            | (_splitData_T == 4'h3 ? _GEN_22[31:24] : 8'h0)
            | (_splitData_T == 4'h4 ? _GEN_22[39:32] : 8'h0)
            | (_splitData_T == 4'h5 ? _GEN_22[47:40] : 8'h0)
            | (_splitData_T == 4'h6 ? _GEN_22[55:48] : 8'h0)
            | (_splitData_T == 4'h7 ? _GEN_22[63:56] : 8'h0)
            | (_splitData_T == 4'h8 ? _GEN_22[71:64] : 8'h0)
            | (_splitData_T == 4'h9 ? _GEN_22[79:72] : 8'h0)
            | (_splitData_T == 4'hA ? _GEN_22[87:80] : 8'h0)
            | (_splitData_T == 4'hB ? _GEN_22[95:88] : 8'h0)
            | (_splitData_T == 4'hC ? _GEN_22[103:96] : 8'h0)
            | (_splitData_T == 4'hD ? _GEN_22[111:104] : 8'h0)
            | (_splitData_T == 4'hE ? _GEN_22[119:112] : 8'h0)
            | ((&_splitData_T) ? _GEN_22[127:120] : 8'h0)}
       : 128'h0)
    | (_flowData_T_16
         ? {112'h0,
            (_splitData_T_65 == 3'h0 ? _GEN_22[15:0] : 16'h0)
              | (_splitData_T_65 == 3'h1 ? _GEN_22[31:16] : 16'h0)
              | (_splitData_T_65 == 3'h2 ? _GEN_22[47:32] : 16'h0)
              | (_splitData_T_65 == 3'h3 ? _GEN_22[63:48] : 16'h0)
              | (_splitData_T_65 == 3'h4 ? _GEN_22[79:64] : 16'h0)
              | (_splitData_T_65 == 3'h5 ? _GEN_22[95:80] : 16'h0)
              | (_splitData_T_65 == 3'h6 ? _GEN_22[111:96] : 16'h0)
              | ((&_splitData_T_65) ? _GEN_22[127:112] : 16'h0)}
         : 128'h0)
    | (_flowData_T_17
         ? {96'h0,
            (_splitData_T_98 == 2'h0 ? _GEN_22[31:0] : 32'h0)
              | (_splitData_T_98 == 2'h1 ? _GEN_22[63:32] : 32'h0)
              | (_splitData_T_98 == 2'h2 ? _GEN_22[95:64] : 32'h0)
              | ((&_splitData_T_98) ? _GEN_22[127:96] : 32'h0)}
         : 128'h0)
    | (_flowData_T_18
         ? {64'h0,
            (_splitData_T_119 ? 64'h0 : _GEN_22[63:0])
              | (_splitData_T_119 ? _GEN_22[127:64] : 64'h0)}
         : 128'h0) | (_flowData_T_19 ? _GEN_22 : 128'h0);
  wire [127:0]      flowData =
    (_flowData_T_15 ? {2{{2{{2{{2{splitData[7:0]}}}}}}}} : 128'h0)
    | (_flowData_T_16 ? {2{{2{{2{splitData[15:0]}}}}}} : 128'h0)
    | (_flowData_T_17 ? {2{{2{splitData[31:0]}}}} : 128'h0)
    | (_flowData_T_18 ? {2{splitData[63:0]}} : 128'h0)
    | (_flowData_T_19 ? splitData : 128'h0);
  wire [22:0]       _wmask_T_13 =
    {15'h0,
     {4'h0,
      {2'h0,
       {1'h0, ~(|(instMicroOp_alignedType[1:0]))}
         | {2{instMicroOp_alignedType[1:0] == 2'h1}}}
        | {4{instMicroOp_alignedType[1:0] == 2'h2}}}
       | {8{&(instMicroOp_alignedType[1:0])}}} << latchVaddr[3:0];
  wire [22:0]       wmask = {7'h0, _wmask_T_13[15:0] & {16{|_GEN_1}}};
  wire [47:0]       dcacheReqPaddr =
    isMisalignReg ? {instMicroOp_paddr[47:12], _GEN_17[8:0], 3'h0} : instMicroOp_paddr;
  assign io_rdcache_req_valid_0 = state == 4'h6 & instMicroOp_isVSegLoad;
  wire [254:0]      _GEN_24 = {127'h0, flowData};
  wire [254:0]      _GEN_25 = {248'h0, latchVaddr[3:0], 3'h0};
  wire [254:0]      notCross16ByteData = _GEN_24 << _GEN_25;
  wire [31:0]       Cross16ByteMask =
    {1'h0,
     {23'h0,
      {8{|_GEN_1}}
        & ({4'h0,
            {2'h0,
             {1'h0, ~(|(instMicroOp_alignedType[1:0]))}
               | {2{instMicroOp_alignedType[1:0] == 2'h1}}}
              | {4{instMicroOp_alignedType[1:0] == 2'h2}}}
           | {8{&(instMicroOp_alignedType[1:0])}})} << latchVaddr[3:0]};
  wire [254:0]      _Cross16ByteData_T_1 = _GEN_24 << _GEN_25;
  assign sbufferOut_valid = _segmentInactiveFinish_T_1 & (|_GEN_1);
  wire              fieldActiveWirteFinish =
    _VSegmentUnitPipelineConnect_io_in_ready & sbufferOut_valid & (|_GEN_1);
  wire              segmentInactiveFinish =
    (_segmentInactiveFinish_T | _segmentInactiveFinish_T_1 & _segmentInactiveFinish_T_2)
    & ~(|_GEN_1);
  wire              _fieldIdxWire_T = fieldIdx == _GEN_6;
  wire [8:0]        _segmentIdxWire_T_2 = 9'({1'h0, segmentIdx} + 9'h1);
  wire [3:0]        _io_exceptionInfo_valid_T_5 = {deqPtr_flag, deqPtr_value};
  wire              _GEN_26 = _GEN_20 & fieldActiveWirteFinish;
  wire              _GEN_27 = _GEN_23 | _GEN_26;
  wire [3:0]        _fieldIdxWire_T_1 = 4'(fieldIdx + 4'h1);
  wire              _GEN_28 = _fieldIdxWire_T & (_segmentInactiveFinish_T | _GEN_26);
  wire              _GEN_29 = segmentIdx != _maxSegIdx_T;
  wire              _GEN_30 = _GEN_28 & _GEN_29;
  wire              _GEN_31 = segmentInactiveFinish & _GEN_29;
  wire [3:0]        _io_exceptionInfo_valid_T_4 = {enqPtr_flag, enqPtr_value};
  wire              fofFixVlValid = state == 4'hD & fofBufferValid;
  wire              writebackValid =
    _io_exceptionInfo_valid_T & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5
    | fofFixVlValid;
  wire [8:0]        _GEN_32 =
    {instMicroOp_uop_exceptionVec_23,
     instMicroOp_uop_exceptionVec_21,
     instMicroOp_uop_exceptionVec_15,
     instMicroOp_uop_exceptionVec_13,
     instMicroOp_uop_exceptionVec_7,
     instMicroOp_uop_exceptionVec_6,
     instMicroOp_uop_exceptionVec_5,
     instMicroOp_uop_exceptionVec_4,
     instMicroOp_uop_exceptionVec_3};
  reg               io_uopwriteback_valid_REG;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_3;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_4;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_5;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_6;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_7;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_13;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_15;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_21;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_23;
  reg  [3:0]        io_uopwriteback_bits_r_uop_trigger;
  reg  [8:0]        io_uopwriteback_bits_r_uop_fuOpType;
  reg               io_uopwriteback_bits_r_uop_vecWen;
  reg               io_uopwriteback_bits_r_uop_v0Wen;
  reg               io_uopwriteback_bits_r_uop_vlWen;
  reg               io_uopwriteback_bits_r_uop_vpu_vma;
  reg               io_uopwriteback_bits_r_uop_vpu_vta;
  reg  [1:0]        io_uopwriteback_bits_r_uop_vpu_vsew;
  reg  [2:0]        io_uopwriteback_bits_r_uop_vpu_vlmul;
  reg               io_uopwriteback_bits_r_uop_vpu_vm;
  reg  [7:0]        io_uopwriteback_bits_r_uop_vpu_vstart;
  reg  [6:0]        io_uopwriteback_bits_r_uop_vpu_vuopIdx;
  reg  [127:0]      io_uopwriteback_bits_r_uop_vpu_vmask;
  reg  [7:0]        io_uopwriteback_bits_r_uop_vpu_vl;
  reg  [2:0]        io_uopwriteback_bits_r_uop_vpu_nf;
  reg  [1:0]        io_uopwriteback_bits_r_uop_vpu_veew;
  reg  [7:0]        io_uopwriteback_bits_r_uop_pdest;
  reg               io_uopwriteback_bits_r_uop_robIdx_flag;
  reg  [7:0]        io_uopwriteback_bits_r_uop_robIdx_value;
  reg  [127:0]      io_uopwriteback_bits_r_data;
  reg  [2:0]        io_uopwriteback_bits_r_vdIdxInField;
  wire              feedbackValid =
    _io_exceptionInfo_valid_T
    & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5;
  reg               io_feedback_valid_REG;
  reg               io_feedback_bits_r_sqIdx_flag;
  reg  [5:0]        io_feedback_bits_r_sqIdx_value;
  reg               io_feedback_bits_r_lqIdx_flag;
  reg  [6:0]        io_feedback_bits_r_lqIdx_value;
  wire [4:0]        uopFlowNum_segmentIndexFlowNum =
    {io_in_bits_uop_vpu_vlmul == 3'h0 | io_in_bits_uop_vpu_vlmul == 3'h1
       | io_in_bits_uop_vpu_vlmul == 3'h2 | io_in_bits_uop_vpu_vlmul == 3'h3,
     &io_in_bits_uop_vpu_vlmul,
     io_in_bits_uop_vpu_vlmul == 3'h6,
     io_in_bits_uop_vpu_vlmul == 3'h5,
     1'h0} >> io_in_bits_uop_vpu_vsew;
  wire              _uopFlowNum_T_157 = _emul_T_3 == 3'h5;
  wire              _uopFlowNum_T_158 = _emul_T_3 == 3'h6;
  wire [4:0]        _GEN_33 = {3'h0, io_in_bits_uop_vpu_veew};
  wire              _GEN_34 =
    _emul_T_3 == 3'h0 | _emul_T_3 == 3'h1 | _emul_T_3 == 3'h2 | _emul_T_3 == 3'h3;
  wire [255:0]      _srcMask_vlMask_T = 256'h1 << instMicroOp_vl;
  wire [255:0]      _srcMask_startMask_T = 256'h1 << instMicroOp_uop_vpu_vstart;
  wire [1:0]        realEw =
    instMicroOp_uop_fuOpType[5] ? instMicroOp_uop_vpu_vsew : instMicroOp_uop_vpu_veew;
  wire              _maskDataVec_maskDataVec_7_T = realEw == 2'h0;
  wire              _maskDataVec_maskDataVec_7_T_2 = realEw == 2'h1;
  wire              _maskDataVec_maskDataVec_7_T_4 = realEw == 2'h2;
  wire [15:0]       _maskDataVec_maskDataVec_0_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[15:0] : 16'h0;
  wire [7:0]        _GEN_35 =
    _maskDataVec_maskDataVec_0_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[7:0] : 8'h0);
  wire [3:0]        _GEN_36 =
    _GEN_35[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[3:0] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_1_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[31:16] : 16'h0;
  wire [7:0]        _GEN_37 =
    _maskDataVec_maskDataVec_1_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[15:8] : 8'h0);
  wire [3:0]        _GEN_38 =
    _GEN_37[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[7:4] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_2_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[47:32] : 16'h0;
  wire [7:0]        _GEN_39 =
    _maskDataVec_maskDataVec_2_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[23:16] : 8'h0);
  wire [3:0]        _GEN_40 =
    _GEN_39[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[11:8] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_3_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[63:48] : 16'h0;
  wire [7:0]        _GEN_41 =
    _maskDataVec_maskDataVec_3_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[31:24] : 8'h0);
  wire [3:0]        _GEN_42 =
    _GEN_41[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[15:12] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_4_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[79:64] : 16'h0;
  wire [7:0]        _GEN_43 =
    _maskDataVec_maskDataVec_4_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[39:32] : 8'h0);
  wire [3:0]        _GEN_44 =
    _GEN_43[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[19:16] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_5_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[95:80] : 16'h0;
  wire [7:0]        _GEN_45 =
    _maskDataVec_maskDataVec_5_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[47:40] : 8'h0);
  wire [3:0]        _GEN_46 =
    _GEN_45[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[23:20] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_6_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[111:96] : 16'h0;
  wire [7:0]        _GEN_47 =
    _maskDataVec_maskDataVec_6_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[55:48] : 8'h0);
  wire [3:0]        _GEN_48 =
    _GEN_47[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[27:24] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_7_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[127:112] : 16'h0;
  wire [7:0]        _GEN_49 =
    _maskDataVec_maskDataVec_7_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[63:56] : 8'h0);
  wire [3:0]        _GEN_50 =
    _GEN_49[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[31:28] : 4'h0);
  wire [7:0]        _GEN_51 =
    {{uopq_7_uop_vecWen},
     {uopq_6_uop_vecWen},
     {uopq_5_uop_vecWen},
     {uopq_4_uop_vecWen},
     {uopq_3_uop_vecWen},
     {uopq_2_uop_vecWen},
     {uopq_1_uop_vecWen},
     {uopq_0_uop_vecWen}};
  wire [7:0]        _GEN_52 =
    {{uopq_7_uop_v0Wen},
     {uopq_6_uop_v0Wen},
     {uopq_5_uop_v0Wen},
     {uopq_4_uop_v0Wen},
     {uopq_3_uop_v0Wen},
     {uopq_2_uop_v0Wen},
     {uopq_1_uop_v0Wen},
     {uopq_0_uop_v0Wen}};
  wire [7:0]        _GEN_53 =
    {{uopq_7_uop_vlWen},
     {uopq_6_uop_vlWen},
     {uopq_5_uop_vlWen},
     {uopq_4_uop_vlWen},
     {uopq_3_uop_vlWen},
     {uopq_2_uop_vlWen},
     {uopq_1_uop_vlWen},
     {uopq_0_uop_vlWen}};
  wire [7:0][15:0]  _GEN_54 =
    {{{_maskDataVec_maskDataVec_7_T_8[15:8],
       _GEN_49[7:4],
       _GEN_50[3:2],
       _GEN_50[1:0] | ((&realEw) ? instMicroOp_mask[15:14] : 2'h0)}},
     {{_maskDataVec_maskDataVec_6_T_8[15:8],
       _GEN_47[7:4],
       _GEN_48[3:2],
       _GEN_48[1:0] | ((&realEw) ? instMicroOp_mask[13:12] : 2'h0)}},
     {{_maskDataVec_maskDataVec_5_T_8[15:8],
       _GEN_45[7:4],
       _GEN_46[3:2],
       _GEN_46[1:0] | ((&realEw) ? instMicroOp_mask[11:10] : 2'h0)}},
     {{_maskDataVec_maskDataVec_4_T_8[15:8],
       _GEN_43[7:4],
       _GEN_44[3:2],
       _GEN_44[1:0] | ((&realEw) ? instMicroOp_mask[9:8] : 2'h0)}},
     {{_maskDataVec_maskDataVec_3_T_8[15:8],
       _GEN_41[7:4],
       _GEN_42[3:2],
       _GEN_42[1:0] | ((&realEw) ? instMicroOp_mask[7:6] : 2'h0)}},
     {{_maskDataVec_maskDataVec_2_T_8[15:8],
       _GEN_39[7:4],
       _GEN_40[3:2],
       _GEN_40[1:0] | ((&realEw) ? instMicroOp_mask[5:4] : 2'h0)}},
     {{_maskDataVec_maskDataVec_1_T_8[15:8],
       _GEN_37[7:4],
       _GEN_38[3:2],
       _GEN_38[1:0] | ((&realEw) ? instMicroOp_mask[3:2] : 2'h0)}},
     {{_maskDataVec_maskDataVec_0_T_8[15:8],
       _GEN_35[7:4],
       _GEN_36[3:2],
       _GEN_36[1:0] | ((&realEw) ? instMicroOp_mask[1:0] : 2'h0)}}};
  wire [7:0][7:0]   _GEN_55 =
    {{uopq_7_uop_pdest},
     {uopq_6_uop_pdest},
     {uopq_5_uop_pdest},
     {uopq_4_uop_pdest},
     {uopq_3_uop_pdest},
     {uopq_2_uop_pdest},
     {uopq_1_uop_pdest},
     {uopq_0_uop_pdest}};
  wire [7:0]        _GEN_56 =
    {{uopq_7_uop_sqIdx_flag},
     {uopq_6_uop_sqIdx_flag},
     {uopq_5_uop_sqIdx_flag},
     {uopq_4_uop_sqIdx_flag},
     {uopq_3_uop_sqIdx_flag},
     {uopq_2_uop_sqIdx_flag},
     {uopq_1_uop_sqIdx_flag},
     {uopq_0_uop_sqIdx_flag}};
  wire [7:0][5:0]   _GEN_57 =
    {{uopq_7_uop_sqIdx_value},
     {uopq_6_uop_sqIdx_value},
     {uopq_5_uop_sqIdx_value},
     {uopq_4_uop_sqIdx_value},
     {uopq_3_uop_sqIdx_value},
     {uopq_2_uop_sqIdx_value},
     {uopq_1_uop_sqIdx_value},
     {uopq_0_uop_sqIdx_value}};
  wire [7:0]        _GEN_58 =
    {{uopq_7_uop_lqIdx_flag},
     {uopq_6_uop_lqIdx_flag},
     {uopq_5_uop_lqIdx_flag},
     {uopq_4_uop_lqIdx_flag},
     {uopq_3_uop_lqIdx_flag},
     {uopq_2_uop_lqIdx_flag},
     {uopq_1_uop_lqIdx_flag},
     {uopq_0_uop_lqIdx_flag}};
  wire [7:0][6:0]   _GEN_59 =
    {{uopq_7_uop_lqIdx_value},
     {uopq_6_uop_lqIdx_value},
     {uopq_5_uop_lqIdx_value},
     {uopq_4_uop_lqIdx_value},
     {uopq_3_uop_lqIdx_value},
     {uopq_2_uop_lqIdx_value},
     {uopq_1_uop_lqIdx_value},
     {uopq_0_uop_lqIdx_value}};
  wire              _GEN_60 = _GEN_14 & enqPtr_value == 3'h0;
  wire              _GEN_61 = _GEN_14 & enqPtr_value == 3'h1;
  wire              _GEN_62 = _GEN_14 & enqPtr_value == 3'h2;
  wire              _GEN_63 = _GEN_14 & enqPtr_value == 3'h3;
  wire              _GEN_64 = _GEN_14 & enqPtr_value == 3'h4;
  wire              _GEN_65 = _GEN_14 & enqPtr_value == 3'h5;
  wire              _GEN_66 = _GEN_14 & enqPtr_value == 3'h6;
  wire              _GEN_67 = _GEN_14 & (&enqPtr_value);
  wire              canTriggerException = segmentIdx == 8'h0 | ~instMicroOp_isFof;
  wire              _GEN_68 = _GEN_2 & _GEN_19;
  wire [63:0]       _cacheData_T_33 =
    latchVaddr[3:0] == 4'h0 ? io_rdcache_resp_bits_data_delayed[63:0] : 64'h0;
  wire [55:0]       _GEN_69 =
    _cacheData_T_33[55:0]
    | (latchVaddr[3:0] == 4'h1 ? io_rdcache_resp_bits_data_delayed[63:8] : 56'h0);
  wire [47:0]       _GEN_70 =
    _GEN_69[47:0]
    | (latchVaddr[3:0] == 4'h2 ? io_rdcache_resp_bits_data_delayed[63:16] : 48'h0);
  wire [39:0]       _GEN_71 =
    _GEN_70[39:0]
    | (latchVaddr[3:0] == 4'h3 ? io_rdcache_resp_bits_data_delayed[63:24] : 40'h0);
  wire [31:0]       _GEN_72 =
    _GEN_71[31:0]
    | (latchVaddr[3:0] == 4'h4 ? io_rdcache_resp_bits_data_delayed[63:32] : 32'h0);
  wire [23:0]       _GEN_73 =
    _GEN_72[23:0]
    | (latchVaddr[3:0] == 4'h5 ? io_rdcache_resp_bits_data_delayed[63:40] : 24'h0);
  wire [15:0]       _GEN_74 =
    _GEN_73[15:0]
    | (latchVaddr[3:0] == 4'h6 ? io_rdcache_resp_bits_data_delayed[63:48] : 16'h0);
  wire [63:0]       _cacheData_T_56 =
    {_cacheData_T_33[63:56],
     _GEN_69[55:48],
     _GEN_70[47:40],
     _GEN_71[39:32],
     _GEN_72[31:24],
     _GEN_73[23:16],
     _GEN_74[15:8],
     _GEN_74[7:0]
       | (latchVaddr[3:0] == 4'h7 ? io_rdcache_resp_bits_data_delayed[63:56] : 8'h0)}
    | (latchVaddr[3:0] == 4'h8 ? io_rdcache_resp_bits_data_delayed[127:64] : 64'h0);
  wire [55:0]       _GEN_75 =
    _cacheData_T_56[55:0]
    | (latchVaddr[3:0] == 4'h9 ? io_rdcache_resp_bits_data_delayed[127:72] : 56'h0);
  wire [47:0]       _GEN_76 =
    _GEN_75[47:0]
    | (latchVaddr[3:0] == 4'hA ? io_rdcache_resp_bits_data_delayed[127:80] : 48'h0);
  wire [39:0]       _GEN_77 =
    _GEN_76[39:0]
    | (latchVaddr[3:0] == 4'hB ? io_rdcache_resp_bits_data_delayed[127:88] : 40'h0);
  wire [31:0]       _GEN_78 =
    _GEN_77[31:0]
    | (latchVaddr[3:0] == 4'hC ? io_rdcache_resp_bits_data_delayed[127:96] : 32'h0);
  wire [23:0]       _GEN_79 =
    _GEN_78[23:0]
    | (latchVaddr[3:0] == 4'hD ? io_rdcache_resp_bits_data_delayed[127:104] : 24'h0);
  wire [15:0]       _GEN_80 =
    _GEN_79[15:0]
    | (latchVaddr[3:0] == 4'hE ? io_rdcache_resp_bits_data_delayed[127:112] : 16'h0);
  wire [127:0]      _shiftData_T_2 =
    io_rdcache_resp_bits_data_delayed >> {121'h0, latchVaddr[3:0], 3'h0};
  wire [63:0]       _pickData_T_8 =
    isMisalignReg
      ? (notCross16ByteReg ? _shiftData_T_2[63:0] : combinedData)
      : {_cacheData_T_56[63:56],
         _GEN_75[55:48],
         _GEN_76[47:40],
         _GEN_77[39:32],
         _GEN_78[31:24],
         _GEN_79[23:16],
         _GEN_80[15:8],
         _GEN_80[7:0]
           | ((&(latchVaddr[3:0])) ? io_rdcache_resp_bits_data_delayed[127:120] : 8'h0)};
  wire [63:0]       pickData =
    ((|(instMicroOp_alignedType[1:0])) ? 64'h0 : {56'h0, _pickData_T_8[7:0]})
    | (instMicroOp_alignedType[1:0] == 2'h1 ? {48'h0, _pickData_T_8[15:0]} : 64'h0)
    | (instMicroOp_alignedType[1:0] == 2'h2 ? {32'h0, _pickData_T_8[31:0]} : 64'h0)
    | ((&(instMicroOp_alignedType[1:0])) ? _pickData_T_8 : 64'h0);
  wire [127:0]      mergedData =
    ((|(instMicroOp_alignedType[1:0]))
       ? 128'h0
       : {(&_splitData_T) ? pickData[7:0] : _GEN_22[127:120],
          _splitData_T == 4'hE ? pickData[7:0] : _GEN_22[119:112],
          _splitData_T == 4'hD ? pickData[7:0] : _GEN_22[111:104],
          _splitData_T == 4'hC ? pickData[7:0] : _GEN_22[103:96],
          _splitData_T == 4'hB ? pickData[7:0] : _GEN_22[95:88],
          _splitData_T == 4'hA ? pickData[7:0] : _GEN_22[87:80],
          _splitData_T == 4'h9 ? pickData[7:0] : _GEN_22[79:72],
          _splitData_T == 4'h8 ? pickData[7:0] : _GEN_22[71:64],
          _splitData_T == 4'h7 ? pickData[7:0] : _GEN_22[63:56],
          _splitData_T == 4'h6 ? pickData[7:0] : _GEN_22[55:48],
          _splitData_T == 4'h5 ? pickData[7:0] : _GEN_22[47:40],
          _splitData_T == 4'h4 ? pickData[7:0] : _GEN_22[39:32],
          _splitData_T == 4'h3 ? pickData[7:0] : _GEN_22[31:24],
          _splitData_T == 4'h2 ? pickData[7:0] : _GEN_22[23:16],
          _splitData_T == 4'h1 ? pickData[7:0] : _GEN_22[15:8],
          _splitData_T == 4'h0 ? pickData[7:0] : _GEN_22[7:0]})
    | (instMicroOp_alignedType[1:0] == 2'h1
         ? {(&_splitData_T_65) ? pickData[15:0] : _GEN_22[127:112],
            _splitData_T_65 == 3'h6 ? pickData[15:0] : _GEN_22[111:96],
            _splitData_T_65 == 3'h5 ? pickData[15:0] : _GEN_22[95:80],
            _splitData_T_65 == 3'h4 ? pickData[15:0] : _GEN_22[79:64],
            _splitData_T_65 == 3'h3 ? pickData[15:0] : _GEN_22[63:48],
            _splitData_T_65 == 3'h2 ? pickData[15:0] : _GEN_22[47:32],
            _splitData_T_65 == 3'h1 ? pickData[15:0] : _GEN_22[31:16],
            _splitData_T_65 == 3'h0 ? pickData[15:0] : _GEN_22[15:0]}
         : 128'h0)
    | (instMicroOp_alignedType[1:0] == 2'h2
         ? {(&_splitData_T_98) ? pickData[31:0] : _GEN_22[127:96],
            _splitData_T_98 == 2'h2 ? pickData[31:0] : _GEN_22[95:64],
            _splitData_T_98 == 2'h1 ? pickData[31:0] : _GEN_22[63:32],
            _splitData_T_98 == 2'h0 ? pickData[31:0] : _GEN_22[31:0]}
         : 128'h0)
    | ((&(instMicroOp_alignedType[1:0]))
         ? {_splitData_T_119 ? pickData : _GEN_22[127:64],
            _splitData_T_119 ? _GEN_22[63:0] : pickData}
         : 128'h0);
  wire [7:0][6:0]   _GEN_81 =
    {{uopq_7_uop_vpu_vuopIdx},
     {uopq_6_uop_vpu_vuopIdx},
     {uopq_5_uop_vpu_vuopIdx},
     {uopq_4_uop_vpu_vuopIdx},
     {uopq_3_uop_vpu_vuopIdx},
     {uopq_2_uop_vpu_vuopIdx},
     {uopq_1_uop_vpu_vuopIdx},
     {uopq_0_uop_vpu_vuopIdx}};
  wire [6:0]        _GEN_82 = _GEN_81[deqPtr_value];
  wire [2:0]        _vdIdxInField_T_2 =
    io_in_bits_uop_fuOpType[5] ? instMicroOp_uop_vpu_vlmul : _issueEmul_T_3;
  wire [2:0]        vdIdxInField =
    {1'h0,
     {1'h0, _vdIdxInField_T_2 == 3'h1 & _GEN_82[0]}
       | (_vdIdxInField_T_2 == 3'h2 ? _GEN_82[1:0] : 2'h0)}
    | (_vdIdxInField_T_2 == 3'h3 ? _GEN_82[2:0] : 3'h0);
  always @(posedge clock) begin
    if (_GEN_13) begin
      instMicroOp_baseVaddr <= io_in_bits_src_0[63:0];
      instMicroOp_uop_fuOpType <= io_in_bits_uop_fuOpType;
      instMicroOp_uop_vpu_vma <= io_in_bits_uop_vpu_vma;
      instMicroOp_uop_vpu_vta <= io_in_bits_uop_vpu_vta;
      instMicroOp_uop_vpu_vsew <= io_in_bits_uop_vpu_vsew;
      instMicroOp_uop_vpu_vlmul <= io_in_bits_uop_vpu_vlmul;
      instMicroOp_uop_vpu_vm <= io_in_bits_uop_vpu_vm;
      instMicroOp_uop_vpu_vstart <= io_in_bits_uop_vpu_vstart;
      instMicroOp_uop_vpu_nf <= io_in_bits_uop_vpu_nf;
      instMicroOp_uop_vpu_veew <= io_in_bits_uop_vpu_veew;
      instMicroOp_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      instMicroOp_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      instMicroOp_mask <=
        (instMicroOp_uop_vpu_vm
           ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
           : io_in_bits_src_3) & 128'(_srcMask_vlMask_T[127:0] - 128'h1)
        & ~(128'(_srcMask_startMask_T[127:0] - 128'h1));
      instMicroOp_alignedType <=
        {1'h0,
         io_in_bits_uop_fuOpType[5] ? io_in_bits_uop_vpu_vsew : io_in_bits_uop_vpu_veew};
      instMicroOp_vl <= io_in_bits_src_4[7:0];
      instMicroOp_uopFlowNumMask <=
        8'({3'h0,
            (io_in_bits_uop_fuOpType[6:5] == 2'h0
               ? {_GEN_34, &_emul_T_3, _uopFlowNum_T_158, _uopFlowNum_T_157, 1'h0}
                 >> _GEN_33
               : 5'h0)
              | (io_in_bits_uop_fuOpType[6:5] == 2'h2
                   ? {_GEN_34, &_emul_T_3, _uopFlowNum_T_158, _uopFlowNum_T_157, 1'h0}
                     >> _GEN_33
                   : 5'h0)
              | (io_in_bits_uop_fuOpType[6:5] == 2'h1
                   ? uopFlowNum_segmentIndexFlowNum
                   : 5'h0)
              | ((&(io_in_bits_uop_fuOpType[6:5]))
                   ? uopFlowNum_segmentIndexFlowNum
                   : 5'h0)} - 8'h1);
      instMicroOp_isVSegLoad <= io_in_bits_uop_fuType[33];
      instMicroOp_isVSegStore <= io_in_bits_uop_fuType[34];
      instMicroOp_isFof <= _instMicroOp_isFof_T & io_in_bits_uop_fuType[33];
    end
    if (_GEN_2) begin
      instMicroOp_uop_exceptionVec_3 <=
        ~(|_segmentTrigger_tdataVec_io_toLoadStore_triggerAction) & canTriggerException;
      instMicroOp_uop_exceptionVec_4 <=
        isMisalignWire & instMicroOp_isVSegLoad & canTriggerException & _pmp_T_4[0];
      instMicroOp_uop_exceptionVec_5 <=
        (instMicroOp_uop_exceptionVec_5 | _pmp_T_4[3] | _pmp_T_4[0])
        & instMicroOp_isVSegLoad & canTriggerException;
      instMicroOp_uop_exceptionVec_6 <=
        isMisalignWire & instMicroOp_isVSegStore & canTriggerException & _pmp_T_4[0];
      instMicroOp_uop_exceptionVec_7 <=
        (instMicroOp_uop_exceptionVec_7 | _pmp_T_4[2] | _pmp_T_4[0])
        & instMicroOp_isVSegStore & canTriggerException;
      instMicroOp_uop_exceptionVec_13 <=
        instMicroOp_uop_exceptionVec_13 & instMicroOp_isVSegLoad & canTriggerException;
      instMicroOp_uop_exceptionVec_15 <=
        instMicroOp_uop_exceptionVec_15 & instMicroOp_isVSegStore & canTriggerException;
      instMicroOp_uop_exceptionVec_21 <=
        instMicroOp_uop_exceptionVec_21 & instMicroOp_isVSegLoad & canTriggerException;
      instMicroOp_uop_exceptionVec_23 <=
        instMicroOp_uop_exceptionVec_23 & instMicroOp_isVSegStore & canTriggerException;
    end
    else begin
      instMicroOp_uop_exceptionVec_3 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_3;
      instMicroOp_uop_exceptionVec_4 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_4;
      if (_GEN_18) begin
        instMicroOp_uop_exceptionVec_5 <= io_dtlb_resp_bits_excp_0_af_ld;
        instMicroOp_uop_exceptionVec_7 <= io_dtlb_resp_bits_excp_0_af_st;
        instMicroOp_uop_exceptionVec_13 <= io_dtlb_resp_bits_excp_0_pf_ld;
        instMicroOp_uop_exceptionVec_15 <= io_dtlb_resp_bits_excp_0_pf_st;
        instMicroOp_uop_exceptionVec_21 <= io_dtlb_resp_bits_excp_0_gpf_ld;
        instMicroOp_uop_exceptionVec_23 <= io_dtlb_resp_bits_excp_0_gpf_st;
      end
      else begin
        instMicroOp_uop_exceptionVec_5 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_5;
        instMicroOp_uop_exceptionVec_7 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_7;
        instMicroOp_uop_exceptionVec_13 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_13;
        instMicroOp_uop_exceptionVec_15 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_15;
        instMicroOp_uop_exceptionVec_21 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_21;
        instMicroOp_uop_exceptionVec_23 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_23;
      end
      instMicroOp_uop_exceptionVec_6 <= ~_GEN_13 & instMicroOp_uop_exceptionVec_6;
    end
    if (_GEN_2 & (instMicroOp_uop_exceptionVec_3 | triggerDebugMode))
      instMicroOp_uop_trigger <= _segmentTrigger_tdataVec_io_toLoadStore_triggerAction;
    else if (_GEN_13)
      instMicroOp_uop_trigger <= 4'h0;
    if (_GEN_18 & ~io_dtlb_resp_bits_miss) begin
      instMicroOp_paddr <= io_dtlb_resp_bits_paddr_0;
      instMicroOp_exceptionVaddr <= io_dtlb_resp_bits_fullva;
      instMicroOp_exceptionGpaddr <= io_dtlb_resp_bits_gpaddr_0;
      instMicroOp_exceptionIsForVSnonLeafPTE <= io_dtlb_resp_bits_isForVSnonLeafPTE;
    end
    if (_GEN_2 & _GEN_19 & canTriggerException)
      instMicroOp_exceptionVstart <= segmentIdx;
    instMicroOp_exceptionVl_valid <=
      _GEN_68 & ~canTriggerException | ~_GEN_13 & instMicroOp_exceptionVl_valid;
    if (~_GEN_68 | canTriggerException) begin
      if (_GEN_13)
        instMicroOp_exceptionVl_bits <= io_in_bits_src_4[7:0];
    end
    else
      instMicroOp_exceptionVl_bits <= segmentIdx;
    if (_GEN_23 & splitPtr_value == 3'h0)
      data_0 <= mergedData;
    else if (_GEN_60)
      data_0 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h1)
      data_1 <= mergedData;
    else if (_GEN_61)
      data_1 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h2)
      data_2 <= mergedData;
    else if (_GEN_62)
      data_2 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h3)
      data_3 <= mergedData;
    else if (_GEN_63)
      data_3 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h4)
      data_4 <= mergedData;
    else if (_GEN_64)
      data_4 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h5)
      data_5 <= mergedData;
    else if (_GEN_65)
      data_5 <= io_in_bits_src_2;
    if (_GEN_23 & splitPtr_value == 3'h6)
      data_6 <= mergedData;
    else if (_GEN_66)
      data_6 <= io_in_bits_src_2;
    if (_GEN_23 & (&splitPtr_value))
      data_7 <= mergedData;
    else if (_GEN_67)
      data_7 <= io_in_bits_src_2;
    if (_GEN_60) begin
      uopq_0_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_0_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_0_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_0_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_0_uop_pdest <= io_in_bits_uop_pdest;
      uopq_0_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_0_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_0_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_0_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_0 <= io_in_bits_src_1;
    end
    if (_GEN_61) begin
      uopq_1_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_1_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_1_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_1_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_1_uop_pdest <= io_in_bits_uop_pdest;
      uopq_1_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_1_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_1_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_1_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_1 <= io_in_bits_src_1;
    end
    if (_GEN_62) begin
      uopq_2_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_2_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_2_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_2_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_2_uop_pdest <= io_in_bits_uop_pdest;
      uopq_2_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_2_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_2_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_2_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_2 <= io_in_bits_src_1;
    end
    if (_GEN_63) begin
      uopq_3_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_3_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_3_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_3_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_3_uop_pdest <= io_in_bits_uop_pdest;
      uopq_3_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_3_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_3_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_3_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_3 <= io_in_bits_src_1;
    end
    if (_GEN_64) begin
      uopq_4_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_4_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_4_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_4_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_4_uop_pdest <= io_in_bits_uop_pdest;
      uopq_4_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_4_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_4_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_4_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_4 <= io_in_bits_src_1;
    end
    if (_GEN_65) begin
      uopq_5_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_5_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_5_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_5_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_5_uop_pdest <= io_in_bits_uop_pdest;
      uopq_5_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_5_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_5_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_5_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_5 <= io_in_bits_src_1;
    end
    if (_GEN_66) begin
      uopq_6_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_6_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_6_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_6_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_6_uop_pdest <= io_in_bits_uop_pdest;
      uopq_6_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_6_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_6_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_6_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_6 <= io_in_bits_src_1;
    end
    if (_GEN_67) begin
      uopq_7_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_7_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_7_uop_vlWen <= io_in_bits_uop_vlWen;
      uopq_7_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_7_uop_pdest <= io_in_bits_uop_pdest;
      uopq_7_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_7_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_7_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_7_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      stride_7 <= io_in_bits_src_1;
    end
    io_uopwriteback_valid_REG <= writebackValid;
    if (writebackValid) begin
      io_uopwriteback_bits_r_uop_exceptionVec_3 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_3;
      io_uopwriteback_bits_r_uop_exceptionVec_4 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_4;
      io_uopwriteback_bits_r_uop_exceptionVec_5 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_5;
      io_uopwriteback_bits_r_uop_exceptionVec_6 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_6;
      io_uopwriteback_bits_r_uop_exceptionVec_7 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_7;
      io_uopwriteback_bits_r_uop_exceptionVec_13 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_13;
      io_uopwriteback_bits_r_uop_exceptionVec_15 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_15;
      io_uopwriteback_bits_r_uop_exceptionVec_21 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_21;
      io_uopwriteback_bits_r_uop_exceptionVec_23 <=
        ~fofFixVlValid & instMicroOp_uop_exceptionVec_23;
      io_uopwriteback_bits_r_uop_trigger <=
        fofFixVlValid ? 4'h0 : instMicroOp_uop_trigger;
      io_uopwriteback_bits_r_uop_fuOpType <=
        fofFixVlValid ? fofBuffer_fuOpType : instMicroOp_uop_fuOpType;
      io_uopwriteback_bits_r_uop_vecWen <=
        fofFixVlValid ? fofBuffer_vecWen : _GEN_51[deqPtr_value];
      io_uopwriteback_bits_r_uop_v0Wen <=
        fofFixVlValid ? fofBuffer_v0Wen : _GEN_52[deqPtr_value];
      io_uopwriteback_bits_r_uop_vlWen <=
        fofFixVlValid ? fofBuffer_vlWen : _GEN_53[deqPtr_value];
      io_uopwriteback_bits_r_uop_vpu_vma <=
        fofFixVlValid ? fofBuffer_vpu_vma : instMicroOp_uop_vpu_vma;
      io_uopwriteback_bits_r_uop_vpu_vta <=
        fofFixVlValid
          ? fofBuffer_vpu_vta
          : ~instMicroOp_exceptionVl_valid & instMicroOp_uop_vpu_vta;
      io_uopwriteback_bits_r_uop_vpu_vsew <=
        fofFixVlValid ? fofBuffer_vpu_vsew : instMicroOp_uop_vpu_vsew;
      io_uopwriteback_bits_r_uop_vpu_vlmul <=
        fofFixVlValid ? fofBuffer_vpu_vlmul : instMicroOp_uop_vpu_vlmul;
      io_uopwriteback_bits_r_uop_vpu_vm <=
        fofFixVlValid ? fofBuffer_vpu_vm : instMicroOp_uop_vpu_vm;
      io_uopwriteback_bits_r_uop_vpu_vstart <=
        fofFixVlValid
          ? fofBuffer_vpu_vstart
          : (|_GEN_32) | instMicroOp_uop_trigger == 4'h1
              ? instMicroOp_exceptionVstart
              : 8'h0;
      io_uopwriteback_bits_r_uop_vpu_vuopIdx <=
        fofFixVlValid ? fofBuffer_vpu_vuopIdx : _GEN_82;
      io_uopwriteback_bits_r_uop_vpu_vmask <=
        fofFixVlValid
          ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
          : {112'h0, _GEN_54[vdIdxInField]};
      io_uopwriteback_bits_r_uop_vpu_vl <=
        fofFixVlValid | instMicroOp_exceptionVl_valid
          ? instMicroOp_exceptionVl_bits
          : instMicroOp_vl;
      io_uopwriteback_bits_r_uop_vpu_nf <=
        fofFixVlValid ? fofBuffer_vpu_nf : instMicroOp_uop_vpu_nf;
      io_uopwriteback_bits_r_uop_vpu_veew <=
        fofFixVlValid ? fofBuffer_vpu_veew : instMicroOp_uop_vpu_veew;
      io_uopwriteback_bits_r_uop_pdest <=
        fofFixVlValid ? fofBuffer_pdest : _GEN_55[deqPtr_value];
      io_uopwriteback_bits_r_uop_robIdx_flag <=
        fofFixVlValid ? fofBuffer_robIdx_flag : instMicroOp_uop_robIdx_flag;
      io_uopwriteback_bits_r_uop_robIdx_value <=
        fofFixVlValid ? fofBuffer_robIdx_value : instMicroOp_uop_robIdx_value;
      io_uopwriteback_bits_r_data <=
        fofFixVlValid ? {120'h0, instMicroOp_exceptionVl_bits} : _GEN_21[deqPtr_value];
    end
    if (~writebackValid | fofFixVlValid) begin
    end
    else
      io_uopwriteback_bits_r_vdIdxInField <= vdIdxInField;
    io_feedback_valid_REG <= feedbackValid;
    if (feedbackValid) begin
      io_feedback_bits_r_sqIdx_flag <= _GEN_56[deqPtr_value];
      io_feedback_bits_r_sqIdx_value <= _GEN_57[deqPtr_value];
      io_feedback_bits_r_lqIdx_flag <= _GEN_58[deqPtr_value];
      io_feedback_bits_r_lqIdx_value <= _GEN_59[deqPtr_value];
    end
  end // always @(posedge)
  wire [3:0]        _enqPtr_new_ptr_T_1 = 4'({enqPtr_flag, enqPtr_value} + 4'h1);
  wire [2:0]        _issueUopFlowNumLog2_sewRealFlowLog2_T_3 =
    3'(3'(($signed(instMicroOp_uop_vpu_vlmul) > -3'sh1 ? 3'h0 : instMicroOp_uop_vpu_vlmul)
          - 3'h4) - _GEN_0);
  wire [7:0]        _splitPtrOffset_T_8 = 8'h1 << _emul_T_3;
  wire [7:0]        _splitPtrOffset_T_4 = 8'h1 << io_in_bits_uop_vpu_vlmul;
  wire [3:0]        _splitPtrNext_new_ptr_T_6 =
    4'({splitPtr_flag, splitPtr_value}
       + (io_in_bits_uop_fuOpType[5]
            ? ($signed(io_in_bits_uop_vpu_vlmul) < 3'sh0
                 ? 4'h1
                 : _splitPtrOffset_T_4[3:0])
            : $signed(_emul_T_3) < 3'sh0 ? 4'h1 : _splitPtrOffset_T_8[3:0]));
  wire [55:0]       _misalignLowData_T_15 =
    latchVaddr[3:0] == 4'h9 ? io_rdcache_resp_bits_data_delayed[127:72] : 56'h0;
  wire [47:0]       _GEN_83 =
    _misalignLowData_T_15[47:0]
    | (latchVaddr[3:0] == 4'hA ? io_rdcache_resp_bits_data_delayed[127:80] : 48'h0);
  wire [39:0]       _GEN_84 =
    _GEN_83[39:0]
    | (latchVaddr[3:0] == 4'hB ? io_rdcache_resp_bits_data_delayed[127:88] : 40'h0);
  wire [31:0]       _GEN_85 =
    _GEN_84[31:0]
    | (latchVaddr[3:0] == 4'hC ? io_rdcache_resp_bits_data_delayed[127:96] : 32'h0);
  wire [23:0]       _GEN_86 =
    _GEN_85[23:0]
    | (latchVaddr[3:0] == 4'hD ? io_rdcache_resp_bits_data_delayed[127:104] : 24'h0);
  wire [15:0]       _GEN_87 =
    _GEN_86[15:0]
    | (latchVaddr[3:0] == 4'hE ? io_rdcache_resp_bits_data_delayed[127:112] : 16'h0);
  wire              _GEN_88 = state == 4'h8;
  wire              _GEN_89 = _GEN_2 & isMisalignWire & ~_GEN_19;
  wire              _GEN_90 =
    _io_exceptionInfo_valid_T | _segmentInactiveFinish_T | _GEN_20;
  wire              _GEN_91 = _GEN_3 & _GEN_2;
  wire              _GEN_92 = stateNext == 4'hA;
  wire [3:0]        _GEN_93 = {deqPtr_flag, deqPtr_value};
  wire [7:0]        _GEN_94 =
    {5'h0,
     3'(3'(($signed(_issueEmul_T_3) > 3'sh0 ? 3'h0 : _issueEmul_T_3) - 3'h4) - _GEN)};
  wire              _GEN_95 = isEnqFixVlUop & ~fofBufferValid;
  wire [3:0]        _deqPtr_new_ptr_T_1 = 4'(_GEN_93 + 4'h1);
  wire [7:0]        _strideOffsetWire_T_2 =
    (_GEN_12
       ? 8'h0
       : _GEN_30
           ? _segmentIdxWire_T_2[7:0]
           : _GEN_31 ? _segmentIdxWire_T_2[7:0] : segmentIdx) >> _GEN_94;
  wire [7:0]        _strideOffset_T_2 = segmentIdx >> _GEN_94;
  wire [8:0]        _splitPtrNext_T_4 =
    _segmentIdxWire_T_2
    >> ((instMicroOp_uop_fuOpType[6:5] == 2'h0 | instMicroOp_uop_fuOpType[6:5] == 2'h2
           ? 3'(3'(($signed(_issueEmul_T_3) > -3'sh1 ? 3'h0 : _issueEmul_T_3) - 3'h4)
                - _GEN)
           : 3'h0)
        | (instMicroOp_uop_fuOpType[6:5] == 2'h1
             ? _issueUopFlowNumLog2_sewRealFlowLog2_T_3
             : 3'h0)
        | ((&(instMicroOp_uop_fuOpType[6:5]))
             ? _issueUopFlowNumLog2_sewRealFlowLog2_T_3
             : 3'h0));
  wire [3:0]        _splitPtrNext_new_ptr_T_1 = 4'(_GEN_93 + _splitPtrNext_T_4[3:0]);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      instMicroOpValid <= 1'h0;
      enqPtr_flag <= 1'h0;
      enqPtr_value <= 3'h0;
      deqPtr_flag <= 1'h0;
      deqPtr_value <= 3'h0;
      stridePtrReg_value <= 3'h0;
      segmentIdx <= 8'h0;
      fieldIdx <= 4'h0;
      segmentOffset <= 64'h0;
      splitPtr_flag <= 1'h0;
      splitPtr_value <= 3'h0;
      latchVaddr <= 50'h0;
      latchVaddrDup <= 50'h0;
      fofBuffer_fuOpType <= 9'h0;
      fofBuffer_vecWen <= 1'h0;
      fofBuffer_v0Wen <= 1'h0;
      fofBuffer_vlWen <= 1'h0;
      fofBuffer_vpu_vma <= 1'h0;
      fofBuffer_vpu_vta <= 1'h0;
      fofBuffer_vpu_vsew <= 2'h0;
      fofBuffer_vpu_vlmul <= 3'h0;
      fofBuffer_vpu_vm <= 1'h0;
      fofBuffer_vpu_vstart <= 8'h0;
      fofBuffer_vpu_vuopIdx <= 7'h0;
      fofBuffer_vpu_nf <= 3'h0;
      fofBuffer_vpu_veew <= 2'h0;
      fofBuffer_pdest <= 8'h0;
      fofBuffer_robIdx_flag <= 1'h0;
      fofBuffer_robIdx_value <= 8'h0;
      fofBufferValid <= 1'h0;
      state <= 4'h0;
      curPtr <= 1'h0;
      isMisalignReg <= 1'h0;
      notCross16ByteReg <= 1'h0;
      combinedData <= 64'h0;
      lowPagePaddr <= 48'h0;
      nextBaseVaddr_r <= 64'h0;
    end
    else begin
      instMicroOpValid <= (|stateNext) & (_GEN_13 | instMicroOpValid);
      if (_GEN_14) begin
        enqPtr_flag <= _enqPtr_new_ptr_T_1[3];
        enqPtr_value <= _enqPtr_new_ptr_T_1[2:0];
      end
      if (_io_exceptionInfo_valid_T
          & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5) begin
        deqPtr_flag <= _deqPtr_new_ptr_T_1[3];
        deqPtr_value <= _deqPtr_new_ptr_T_1[2:0];
      end
      stridePtrReg_value <=
        3'(deqPtr_value
           + (instMicroOp_uop_fuOpType[5] ? _strideOffsetWire_T_2[2:0] : 3'h0));
      if (_GEN_12 | _GEN_30 | _GEN_31) begin
        if (_GEN_12)
          segmentIdx <= 8'h0;
        else if (_GEN_30)
          segmentIdx <= _segmentIdxWire_T_2[7:0];
        else if (_GEN_31)
          segmentIdx <= _segmentIdxWire_T_2[7:0];
      end
      if (_GEN_12 | _GEN_27 | segmentInactiveFinish) begin
        if (_GEN_12)
          fieldIdx <= 4'h0;
        else if (_GEN_27) begin
          if (_fieldIdxWire_T)
            fieldIdx <= 4'h0;
          else
            fieldIdx <= _fieldIdxWire_T_1;
        end
        else if (segmentInactiveFinish)
          fieldIdx <= 4'h0;
      end
      if (_GEN_28 | segmentInactiveFinish)
        segmentOffset <=
          64'(segmentOffset
              + (instMicroOp_uop_fuOpType[6:5] == 2'h0
                   ? {57'h0, {3'h0, 4'(_GEN_6 + 4'h1)} << instMicroOp_uop_vpu_veew}
                   : _GEN_15[3'(deqPtr_value
                                + (instMicroOp_uop_fuOpType[5]
                                     ? _strideOffset_T_2[2:0]
                                     : 3'h0))][63:0]));
      else if (_GEN_13)
        segmentOffset <= 64'h0;
      if (_segmentInactiveFinish_T | _GEN_20
          & (fieldActiveWirteFinish | ~(|_GEN_1))) begin
        if (_fieldIdxWire_T | ~(|_GEN_1)) begin
          splitPtr_flag <= _splitPtrNext_new_ptr_T_1[3];
          splitPtr_value <= _splitPtrNext_new_ptr_T_1[2:0];
        end
        else begin
          splitPtr_flag <= _splitPtrNext_new_ptr_T_6[3];
          splitPtr_value <= _splitPtrNext_new_ptr_T_6[2:0];
        end
      end
      else if (_GEN_12) begin
        splitPtr_flag <= deqPtr_flag;
        splitPtr_value <= deqPtr_value;
      end
      if (_io_dtlb_req_valid_T & ~isMisalignReg) begin
        latchVaddr <= _vaddr_T[49:0];
        latchVaddrDup <= _vaddr_T[49:0];
      end
      if (fofFixVlValid) begin
        fofBuffer_fuOpType <= 9'h0;
        fofBuffer_vpu_vsew <= 2'h0;
        fofBuffer_vpu_vlmul <= 3'h0;
        fofBuffer_vpu_vstart <= 8'h0;
        fofBuffer_vpu_vuopIdx <= 7'h0;
        fofBuffer_vpu_nf <= 3'h0;
        fofBuffer_vpu_veew <= 2'h0;
        fofBuffer_pdest <= 8'h0;
        fofBuffer_robIdx_value <= 8'h0;
      end
      else if (_GEN_95) begin
        fofBuffer_fuOpType <= io_in_bits_uop_fuOpType;
        fofBuffer_vpu_vsew <= io_in_bits_uop_vpu_vsew;
        fofBuffer_vpu_vlmul <= io_in_bits_uop_vpu_vlmul;
        fofBuffer_vpu_vstart <= io_in_bits_uop_vpu_vstart;
        fofBuffer_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
        fofBuffer_vpu_nf <= io_in_bits_uop_vpu_nf;
        fofBuffer_vpu_veew <= io_in_bits_uop_vpu_veew;
        fofBuffer_pdest <= io_in_bits_uop_pdest;
        fofBuffer_robIdx_value <= io_in_bits_uop_robIdx_value;
      end
      fofBuffer_vecWen <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_vecWen : fofBuffer_vecWen);
      fofBuffer_v0Wen <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_v0Wen : fofBuffer_v0Wen);
      fofBuffer_vlWen <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_vlWen : fofBuffer_vlWen);
      fofBuffer_vpu_vma <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_vpu_vma : fofBuffer_vpu_vma);
      fofBuffer_vpu_vta <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_vpu_vta : fofBuffer_vpu_vta);
      fofBuffer_vpu_vm <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_vpu_vm : fofBuffer_vpu_vm);
      fofBuffer_robIdx_flag <=
        ~fofFixVlValid & (_GEN_95 ? io_in_bits_uop_robIdx_flag : fofBuffer_robIdx_flag);
      fofBufferValid <= ~fofFixVlValid & (_GEN_95 | fofBufferValid);
      state <= stateNext;
      curPtr <=
        ~_GEN_90
        & (instMicroOp_isVSegLoad
             ? _GEN_3 & _GEN_88 | curPtr
             : _GEN_91
                 ? ~curPtr
                 : ~(_GEN_91 & _GEN_92)
                   & (_GEN_3 & _segmentInactiveFinish_T_1 & _GEN_92 & _GEN_9 ^ curPtr));
      isMisalignReg <= ~_GEN_90 & (_GEN_89 | ~_GEN_13 & isMisalignReg);
      notCross16ByteReg <=
        ~_GEN_90 & (_GEN_89 ? notCross16ByteWire : ~_GEN_13 & notCross16ByteReg);
      if (_GEN_88 & (|_GEN_1)) begin
        if (curPtr)
          combinedData <=
            (latchVaddr[3:0] == 4'h9
               ? {io_rdcache_resp_bits_data_delayed[7:0], combinedData[55:0]}
               : 64'h0)
            | (latchVaddr[3:0] == 4'hA
                 ? {io_rdcache_resp_bits_data_delayed[15:0], combinedData[47:0]}
                 : 64'h0)
            | (latchVaddr[3:0] == 4'hB
                 ? {io_rdcache_resp_bits_data_delayed[23:0], combinedData[39:0]}
                 : 64'h0)
            | (latchVaddr[3:0] == 4'hC
                 ? {io_rdcache_resp_bits_data_delayed[31:0], combinedData[31:0]}
                 : 64'h0)
            | (latchVaddr[3:0] == 4'hD
                 ? {io_rdcache_resp_bits_data_delayed[39:0], combinedData[23:0]}
                 : 64'h0)
            | (latchVaddr[3:0] == 4'hE
                 ? {io_rdcache_resp_bits_data_delayed[47:0], combinedData[15:0]}
                 : 64'h0)
            | ((&(latchVaddr[3:0]))
                 ? {io_rdcache_resp_bits_data_delayed[55:0], combinedData[7:0]}
                 : 64'h0);
        else
          combinedData <=
            {8'h0,
             _misalignLowData_T_15[55:48],
             _GEN_83[47:40],
             _GEN_84[39:32],
             _GEN_85[31:24],
             _GEN_86[23:16],
             _GEN_87[15:8],
             _GEN_87[7:0]
               | ((&(latchVaddr[3:0]))
                    ? io_rdcache_resp_bits_data_delayed[127:120]
                    : 8'h0)};
      end
      if (_GEN_18 & ~io_dtlb_resp_bits_miss & isMisalignReg & ~notCross16ByteReg
          & ~curPtr)
        lowPagePaddr <= io_dtlb_resp_bits_paddr_0;
      if (stateNext == 4'h3)
        nextBaseVaddr_r <=
          64'(instMicroOp_baseVaddr
              + {53'h0,
                 {7'h0,
                  _GEN_12
                    ? 4'h0
                    : _GEN_27
                        ? (_fieldIdxWire_T ? 4'h0 : _fieldIdxWire_T_1)
                        : segmentInactiveFinish ? 4'h0 : fieldIdx}
                   << instMicroOp_alignedType});
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:529];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [9:0] i = 10'h0; i < 10'h212; i += 10'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        instMicroOp_baseVaddr = {_RANDOM[10'h0], _RANDOM[10'h1]};
        instMicroOp_uop_exceptionVec_3 = _RANDOM[10'h4][31];
        instMicroOp_uop_exceptionVec_4 = _RANDOM[10'h5][0];
        instMicroOp_uop_exceptionVec_5 = _RANDOM[10'h5][1];
        instMicroOp_uop_exceptionVec_6 = _RANDOM[10'h5][2];
        instMicroOp_uop_exceptionVec_7 = _RANDOM[10'h5][3];
        instMicroOp_uop_exceptionVec_13 = _RANDOM[10'h5][9];
        instMicroOp_uop_exceptionVec_15 = _RANDOM[10'h5][11];
        instMicroOp_uop_exceptionVec_21 = _RANDOM[10'h5][17];
        instMicroOp_uop_exceptionVec_23 = _RANDOM[10'h5][19];
        instMicroOp_uop_trigger = _RANDOM[10'h5][25:22];
        instMicroOp_uop_fuOpType = _RANDOM[10'h8][18:10];
        instMicroOp_uop_vpu_vma = _RANDOM[10'hA][12];
        instMicroOp_uop_vpu_vta = _RANDOM[10'hA][13];
        instMicroOp_uop_vpu_vsew = _RANDOM[10'hA][15:14];
        instMicroOp_uop_vpu_vlmul = _RANDOM[10'hA][18:16];
        instMicroOp_uop_vpu_vm = _RANDOM[10'hA][27];
        instMicroOp_uop_vpu_vstart = {_RANDOM[10'hA][31:28], _RANDOM[10'hB][3:0]};
        instMicroOp_uop_vpu_nf = _RANDOM[10'h10][2:0];
        instMicroOp_uop_vpu_veew = _RANDOM[10'h10][4:3];
        instMicroOp_uop_robIdx_flag = _RANDOM[10'h14][12];
        instMicroOp_uop_robIdx_value = _RANDOM[10'h14][20:13];
        instMicroOp_paddr = {_RANDOM[10'h28][31:13], _RANDOM[10'h29][28:0]};
        instMicroOp_mask =
          {_RANDOM[10'h29][31:29],
           _RANDOM[10'h2A],
           _RANDOM[10'h2B],
           _RANDOM[10'h2C],
           _RANDOM[10'h2D][28:0]};
        instMicroOp_alignedType = _RANDOM[10'h2D][31:29];
        instMicroOp_vl = _RANDOM[10'h2E][7:0];
        instMicroOp_uopFlowNumMask = _RANDOM[10'h2E][23:16];
        instMicroOp_isVSegLoad = _RANDOM[10'h2E][24];
        instMicroOp_isVSegStore = _RANDOM[10'h2E][25];
        instMicroOp_exceptionVaddr =
          {_RANDOM[10'h2F][31:2], _RANDOM[10'h30], _RANDOM[10'h31][1:0]};
        instMicroOp_exceptionGpaddr =
          {_RANDOM[10'h31][31:2], _RANDOM[10'h32], _RANDOM[10'h33][1:0]};
        instMicroOp_exceptionIsForVSnonLeafPTE = _RANDOM[10'h33][2];
        instMicroOp_exceptionVstart = _RANDOM[10'h33][13:6];
        instMicroOp_exceptionVl_valid = _RANDOM[10'h33][14];
        instMicroOp_exceptionVl_bits = _RANDOM[10'h33][22:15];
        instMicroOp_isFof = _RANDOM[10'h33][23];
        instMicroOpValid = _RANDOM[10'h33][24];
        data_0 =
          {_RANDOM[10'h33][31:25],
           _RANDOM[10'h34],
           _RANDOM[10'h35],
           _RANDOM[10'h36],
           _RANDOM[10'h37][24:0]};
        data_1 =
          {_RANDOM[10'h37][31:25],
           _RANDOM[10'h38],
           _RANDOM[10'h39],
           _RANDOM[10'h3A],
           _RANDOM[10'h3B][24:0]};
        data_2 =
          {_RANDOM[10'h3B][31:25],
           _RANDOM[10'h3C],
           _RANDOM[10'h3D],
           _RANDOM[10'h3E],
           _RANDOM[10'h3F][24:0]};
        data_3 =
          {_RANDOM[10'h3F][31:25],
           _RANDOM[10'h40],
           _RANDOM[10'h41],
           _RANDOM[10'h42],
           _RANDOM[10'h43][24:0]};
        data_4 =
          {_RANDOM[10'h43][31:25],
           _RANDOM[10'h44],
           _RANDOM[10'h45],
           _RANDOM[10'h46],
           _RANDOM[10'h47][24:0]};
        data_5 =
          {_RANDOM[10'h47][31:25],
           _RANDOM[10'h48],
           _RANDOM[10'h49],
           _RANDOM[10'h4A],
           _RANDOM[10'h4B][24:0]};
        data_6 =
          {_RANDOM[10'h4B][31:25],
           _RANDOM[10'h4C],
           _RANDOM[10'h4D],
           _RANDOM[10'h4E],
           _RANDOM[10'h4F][24:0]};
        data_7 =
          {_RANDOM[10'h4F][31:25],
           _RANDOM[10'h50],
           _RANDOM[10'h51],
           _RANDOM[10'h52],
           _RANDOM[10'h53][24:0]};
        uopq_0_uop_vecWen = _RANDOM[10'h5A][14];
        uopq_0_uop_v0Wen = _RANDOM[10'h5A][15];
        uopq_0_uop_vlWen = _RANDOM[10'h5A][16];
        uopq_0_uop_vpu_vuopIdx = _RANDOM[10'h5D][15:9];
        uopq_0_uop_pdest = _RANDOM[10'h65][24:17];
        uopq_0_uop_lqIdx_flag = _RANDOM[10'h79][16];
        uopq_0_uop_lqIdx_value = _RANDOM[10'h79][23:17];
        uopq_0_uop_sqIdx_flag = _RANDOM[10'h79][24];
        uopq_0_uop_sqIdx_value = _RANDOM[10'h79][30:25];
        uopq_1_uop_vecWen = _RANDOM[10'h80][27];
        uopq_1_uop_v0Wen = _RANDOM[10'h80][28];
        uopq_1_uop_vlWen = _RANDOM[10'h80][29];
        uopq_1_uop_vpu_vuopIdx = _RANDOM[10'h83][28:22];
        uopq_1_uop_pdest = {_RANDOM[10'h8B][31:30], _RANDOM[10'h8C][5:0]};
        uopq_1_uop_lqIdx_flag = _RANDOM[10'h9F][29];
        uopq_1_uop_lqIdx_value = {_RANDOM[10'h9F][31:30], _RANDOM[10'hA0][4:0]};
        uopq_1_uop_sqIdx_flag = _RANDOM[10'hA0][5];
        uopq_1_uop_sqIdx_value = _RANDOM[10'hA0][11:6];
        uopq_2_uop_vecWen = _RANDOM[10'hA7][8];
        uopq_2_uop_v0Wen = _RANDOM[10'hA7][9];
        uopq_2_uop_vlWen = _RANDOM[10'hA7][10];
        uopq_2_uop_vpu_vuopIdx = _RANDOM[10'hAA][9:3];
        uopq_2_uop_pdest = _RANDOM[10'hB2][18:11];
        uopq_2_uop_lqIdx_flag = _RANDOM[10'hC6][10];
        uopq_2_uop_lqIdx_value = _RANDOM[10'hC6][17:11];
        uopq_2_uop_sqIdx_flag = _RANDOM[10'hC6][18];
        uopq_2_uop_sqIdx_value = _RANDOM[10'hC6][24:19];
        uopq_3_uop_vecWen = _RANDOM[10'hCD][21];
        uopq_3_uop_v0Wen = _RANDOM[10'hCD][22];
        uopq_3_uop_vlWen = _RANDOM[10'hCD][23];
        uopq_3_uop_vpu_vuopIdx = _RANDOM[10'hD0][22:16];
        uopq_3_uop_pdest = _RANDOM[10'hD8][31:24];
        uopq_3_uop_lqIdx_flag = _RANDOM[10'hEC][23];
        uopq_3_uop_lqIdx_value = _RANDOM[10'hEC][30:24];
        uopq_3_uop_sqIdx_flag = _RANDOM[10'hEC][31];
        uopq_3_uop_sqIdx_value = _RANDOM[10'hED][5:0];
        uopq_4_uop_vecWen = _RANDOM[10'hF4][2];
        uopq_4_uop_v0Wen = _RANDOM[10'hF4][3];
        uopq_4_uop_vlWen = _RANDOM[10'hF4][4];
        uopq_4_uop_vpu_vuopIdx = {_RANDOM[10'hF6][31:29], _RANDOM[10'hF7][3:0]};
        uopq_4_uop_pdest = _RANDOM[10'hFF][12:5];
        uopq_4_uop_lqIdx_flag = _RANDOM[10'h113][4];
        uopq_4_uop_lqIdx_value = _RANDOM[10'h113][11:5];
        uopq_4_uop_sqIdx_flag = _RANDOM[10'h113][12];
        uopq_4_uop_sqIdx_value = _RANDOM[10'h113][18:13];
        uopq_5_uop_vecWen = _RANDOM[10'h11A][15];
        uopq_5_uop_v0Wen = _RANDOM[10'h11A][16];
        uopq_5_uop_vlWen = _RANDOM[10'h11A][17];
        uopq_5_uop_vpu_vuopIdx = _RANDOM[10'h11D][16:10];
        uopq_5_uop_pdest = _RANDOM[10'h125][25:18];
        uopq_5_uop_lqIdx_flag = _RANDOM[10'h139][17];
        uopq_5_uop_lqIdx_value = _RANDOM[10'h139][24:18];
        uopq_5_uop_sqIdx_flag = _RANDOM[10'h139][25];
        uopq_5_uop_sqIdx_value = _RANDOM[10'h139][31:26];
        uopq_6_uop_vecWen = _RANDOM[10'h140][28];
        uopq_6_uop_v0Wen = _RANDOM[10'h140][29];
        uopq_6_uop_vlWen = _RANDOM[10'h140][30];
        uopq_6_uop_vpu_vuopIdx = _RANDOM[10'h143][29:23];
        uopq_6_uop_pdest = {_RANDOM[10'h14B][31], _RANDOM[10'h14C][6:0]};
        uopq_6_uop_lqIdx_flag = _RANDOM[10'h15F][30];
        uopq_6_uop_lqIdx_value = {_RANDOM[10'h15F][31], _RANDOM[10'h160][5:0]};
        uopq_6_uop_sqIdx_flag = _RANDOM[10'h160][6];
        uopq_6_uop_sqIdx_value = _RANDOM[10'h160][12:7];
        uopq_7_uop_vecWen = _RANDOM[10'h167][9];
        uopq_7_uop_v0Wen = _RANDOM[10'h167][10];
        uopq_7_uop_vlWen = _RANDOM[10'h167][11];
        uopq_7_uop_vpu_vuopIdx = _RANDOM[10'h16A][10:4];
        uopq_7_uop_pdest = _RANDOM[10'h172][19:12];
        uopq_7_uop_lqIdx_flag = _RANDOM[10'h186][11];
        uopq_7_uop_lqIdx_value = _RANDOM[10'h186][18:12];
        uopq_7_uop_sqIdx_flag = _RANDOM[10'h186][19];
        uopq_7_uop_sqIdx_value = _RANDOM[10'h186][25:20];
        stride_0 =
          {_RANDOM[10'h187][31:1],
           _RANDOM[10'h188],
           _RANDOM[10'h189],
           _RANDOM[10'h18A],
           _RANDOM[10'h18B][0]};
        stride_1 =
          {_RANDOM[10'h18B][31:1],
           _RANDOM[10'h18C],
           _RANDOM[10'h18D],
           _RANDOM[10'h18E],
           _RANDOM[10'h18F][0]};
        stride_2 =
          {_RANDOM[10'h18F][31:1],
           _RANDOM[10'h190],
           _RANDOM[10'h191],
           _RANDOM[10'h192],
           _RANDOM[10'h193][0]};
        stride_3 =
          {_RANDOM[10'h193][31:1],
           _RANDOM[10'h194],
           _RANDOM[10'h195],
           _RANDOM[10'h196],
           _RANDOM[10'h197][0]};
        stride_4 =
          {_RANDOM[10'h197][31:1],
           _RANDOM[10'h198],
           _RANDOM[10'h199],
           _RANDOM[10'h19A],
           _RANDOM[10'h19B][0]};
        stride_5 =
          {_RANDOM[10'h19B][31:1],
           _RANDOM[10'h19C],
           _RANDOM[10'h19D],
           _RANDOM[10'h19E],
           _RANDOM[10'h19F][0]};
        stride_6 =
          {_RANDOM[10'h19F][31:1],
           _RANDOM[10'h1A0],
           _RANDOM[10'h1A1],
           _RANDOM[10'h1A2],
           _RANDOM[10'h1A3][0]};
        stride_7 =
          {_RANDOM[10'h1A3][31:1],
           _RANDOM[10'h1A4],
           _RANDOM[10'h1A5],
           _RANDOM[10'h1A6],
           _RANDOM[10'h1A7][0]};
        enqPtr_flag = _RANDOM[10'h1A7][9];
        enqPtr_value = _RANDOM[10'h1A7][12:10];
        deqPtr_flag = _RANDOM[10'h1A7][13];
        deqPtr_value = _RANDOM[10'h1A7][16:14];
        stridePtrReg_value = _RANDOM[10'h1A7][20:18];
        segmentIdx = _RANDOM[10'h1A7][28:21];
        fieldIdx = {_RANDOM[10'h1A7][31:29], _RANDOM[10'h1A8][0]};
        segmentOffset = {_RANDOM[10'h1A8][31:1], _RANDOM[10'h1A9], _RANDOM[10'h1AA][0]};
        splitPtr_flag = _RANDOM[10'h1AA][1];
        splitPtr_value = _RANDOM[10'h1AA][4:2];
        latchVaddr = {_RANDOM[10'h1AA][31:5], _RANDOM[10'h1AB][22:0]};
        latchVaddrDup =
          {_RANDOM[10'h1AB][31:23], _RANDOM[10'h1AC], _RANDOM[10'h1AD][8:0]};
        fofBuffer_fuOpType = _RANDOM[10'h1B3][27:19];
        fofBuffer_vecWen = _RANDOM[10'h1B3][30];
        fofBuffer_v0Wen = _RANDOM[10'h1B3][31];
        fofBuffer_vlWen = _RANDOM[10'h1B4][0];
        fofBuffer_vpu_vma = _RANDOM[10'h1B5][21];
        fofBuffer_vpu_vta = _RANDOM[10'h1B5][22];
        fofBuffer_vpu_vsew = _RANDOM[10'h1B5][24:23];
        fofBuffer_vpu_vlmul = _RANDOM[10'h1B5][27:25];
        fofBuffer_vpu_vm = _RANDOM[10'h1B6][4];
        fofBuffer_vpu_vstart = _RANDOM[10'h1B6][12:5];
        fofBuffer_vpu_vuopIdx = _RANDOM[10'h1B6][31:25];
        fofBuffer_vpu_nf = _RANDOM[10'h1BB][11:9];
        fofBuffer_vpu_veew = _RANDOM[10'h1BB][13:12];
        fofBuffer_pdest = _RANDOM[10'h1BF][8:1];
        fofBuffer_robIdx_flag = _RANDOM[10'h1BF][21];
        fofBuffer_robIdx_value = _RANDOM[10'h1BF][29:22];
        fofBufferValid = _RANDOM[10'h1D3][22];
        state = _RANDOM[10'h1D3][26:23];
        curPtr = _RANDOM[10'h1D3][27];
        isMisalignReg = _RANDOM[10'h1D3][28];
        notCross16ByteReg = _RANDOM[10'h1D3][29];
        combinedData =
          {_RANDOM[10'h1D3][31:30], _RANDOM[10'h1D4], _RANDOM[10'h1D5][29:0]};
        lowPagePaddr =
          {_RANDOM[10'h1D5][31:30], _RANDOM[10'h1D6], _RANDOM[10'h1D7][13:0]};
        nextBaseVaddr_r =
          {_RANDOM[10'h1DC][31:2], _RANDOM[10'h1DD], _RANDOM[10'h1DE][1:0]};
        io_uopwriteback_valid_REG = _RANDOM[10'h1DE][2];
        io_uopwriteback_bits_r_uop_exceptionVec_3 = _RANDOM[10'h1E1][2];
        io_uopwriteback_bits_r_uop_exceptionVec_4 = _RANDOM[10'h1E1][3];
        io_uopwriteback_bits_r_uop_exceptionVec_5 = _RANDOM[10'h1E1][4];
        io_uopwriteback_bits_r_uop_exceptionVec_6 = _RANDOM[10'h1E1][5];
        io_uopwriteback_bits_r_uop_exceptionVec_7 = _RANDOM[10'h1E1][6];
        io_uopwriteback_bits_r_uop_exceptionVec_13 = _RANDOM[10'h1E1][12];
        io_uopwriteback_bits_r_uop_exceptionVec_15 = _RANDOM[10'h1E1][14];
        io_uopwriteback_bits_r_uop_exceptionVec_21 = _RANDOM[10'h1E1][20];
        io_uopwriteback_bits_r_uop_exceptionVec_23 = _RANDOM[10'h1E1][22];
        io_uopwriteback_bits_r_uop_trigger = _RANDOM[10'h1E1][28:25];
        io_uopwriteback_bits_r_uop_fuOpType = _RANDOM[10'h1E4][21:13];
        io_uopwriteback_bits_r_uop_vecWen = _RANDOM[10'h1E4][24];
        io_uopwriteback_bits_r_uop_v0Wen = _RANDOM[10'h1E4][25];
        io_uopwriteback_bits_r_uop_vlWen = _RANDOM[10'h1E4][26];
        io_uopwriteback_bits_r_uop_vpu_vma = _RANDOM[10'h1E6][15];
        io_uopwriteback_bits_r_uop_vpu_vta = _RANDOM[10'h1E6][16];
        io_uopwriteback_bits_r_uop_vpu_vsew = _RANDOM[10'h1E6][18:17];
        io_uopwriteback_bits_r_uop_vpu_vlmul = _RANDOM[10'h1E6][21:19];
        io_uopwriteback_bits_r_uop_vpu_vm = _RANDOM[10'h1E6][30];
        io_uopwriteback_bits_r_uop_vpu_vstart =
          {_RANDOM[10'h1E6][31], _RANDOM[10'h1E7][6:0]};
        io_uopwriteback_bits_r_uop_vpu_vuopIdx = _RANDOM[10'h1E7][25:19];
        io_uopwriteback_bits_r_uop_vpu_vmask =
          {_RANDOM[10'h1E7][31:27],
           _RANDOM[10'h1E8],
           _RANDOM[10'h1E9],
           _RANDOM[10'h1EA],
           _RANDOM[10'h1EB][26:0]};
        io_uopwriteback_bits_r_uop_vpu_vl =
          {_RANDOM[10'h1EB][31:27], _RANDOM[10'h1EC][2:0]};
        io_uopwriteback_bits_r_uop_vpu_nf = _RANDOM[10'h1EC][5:3];
        io_uopwriteback_bits_r_uop_vpu_veew = _RANDOM[10'h1EC][7:6];
        io_uopwriteback_bits_r_uop_pdest =
          {_RANDOM[10'h1EF][31:27], _RANDOM[10'h1F0][2:0]};
        io_uopwriteback_bits_r_uop_robIdx_flag = _RANDOM[10'h1F0][15];
        io_uopwriteback_bits_r_uop_robIdx_value = _RANDOM[10'h1F0][23:16];
        io_uopwriteback_bits_r_data =
          {_RANDOM[10'h204][31:16],
           _RANDOM[10'h205],
           _RANDOM[10'h206],
           _RANDOM[10'h207],
           _RANDOM[10'h208][15:0]};
        io_uopwriteback_bits_r_vdIdxInField = _RANDOM[10'h20C][21:19];
        io_feedback_valid_REG = _RANDOM[10'h20F][28];
        io_feedback_bits_r_sqIdx_flag = _RANDOM[10'h210][19];
        io_feedback_bits_r_sqIdx_value = _RANDOM[10'h210][25:20];
        io_feedback_bits_r_lqIdx_flag = _RANDOM[10'h210][26];
        io_feedback_bits_r_lqIdx_value = {_RANDOM[10'h210][31:27], _RANDOM[10'h211][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        instMicroOpValid = 1'h0;
        enqPtr_flag = 1'h0;
        enqPtr_value = 3'h0;
        deqPtr_flag = 1'h0;
        deqPtr_value = 3'h0;
        stridePtrReg_value = 3'h0;
        segmentIdx = 8'h0;
        fieldIdx = 4'h0;
        segmentOffset = 64'h0;
        splitPtr_flag = 1'h0;
        splitPtr_value = 3'h0;
        latchVaddr = 50'h0;
        latchVaddrDup = 50'h0;
        fofBuffer_fuOpType = 9'h0;
        fofBuffer_vecWen = 1'h0;
        fofBuffer_v0Wen = 1'h0;
        fofBuffer_vlWen = 1'h0;
        fofBuffer_vpu_vma = 1'h0;
        fofBuffer_vpu_vta = 1'h0;
        fofBuffer_vpu_vsew = 2'h0;
        fofBuffer_vpu_vlmul = 3'h0;
        fofBuffer_vpu_vm = 1'h0;
        fofBuffer_vpu_vstart = 8'h0;
        fofBuffer_vpu_vuopIdx = 7'h0;
        fofBuffer_vpu_nf = 3'h0;
        fofBuffer_vpu_veew = 2'h0;
        fofBuffer_pdest = 8'h0;
        fofBuffer_robIdx_flag = 1'h0;
        fofBuffer_robIdx_value = 8'h0;
        fofBufferValid = 1'h0;
        state = 4'h0;
        curPtr = 1'h0;
        isMisalignReg = 1'h0;
        notCross16ByteReg = 1'h0;
        combinedData = 64'h0;
        lowPagePaddr = 48'h0;
        nextBaseVaddr_r = 64'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VSegmentTrigger segmentTrigger (
    .tdataVec_io_fromCsrTrigger_tdataVec_0_matchType
      (io_fromCsrTrigger_tdataVec_0_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_select
      (io_fromCsrTrigger_tdataVec_0_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_timing
      (io_fromCsrTrigger_tdataVec_0_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_action
      (io_fromCsrTrigger_tdataVec_0_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_chain     (io_fromCsrTrigger_tdataVec_0_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_store     (io_fromCsrTrigger_tdataVec_0_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_load      (io_fromCsrTrigger_tdataVec_0_load),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_tdata2
      (io_fromCsrTrigger_tdataVec_0_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_matchType
      (io_fromCsrTrigger_tdataVec_1_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_select
      (io_fromCsrTrigger_tdataVec_1_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_timing
      (io_fromCsrTrigger_tdataVec_1_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_action
      (io_fromCsrTrigger_tdataVec_1_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_chain     (io_fromCsrTrigger_tdataVec_1_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_store     (io_fromCsrTrigger_tdataVec_1_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_load      (io_fromCsrTrigger_tdataVec_1_load),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_tdata2
      (io_fromCsrTrigger_tdataVec_1_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_matchType
      (io_fromCsrTrigger_tdataVec_2_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_select
      (io_fromCsrTrigger_tdataVec_2_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_timing
      (io_fromCsrTrigger_tdataVec_2_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_action
      (io_fromCsrTrigger_tdataVec_2_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_chain     (io_fromCsrTrigger_tdataVec_2_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_store     (io_fromCsrTrigger_tdataVec_2_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_load      (io_fromCsrTrigger_tdataVec_2_load),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_tdata2
      (io_fromCsrTrigger_tdataVec_2_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_matchType
      (io_fromCsrTrigger_tdataVec_3_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_select
      (io_fromCsrTrigger_tdataVec_3_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_timing
      (io_fromCsrTrigger_tdataVec_3_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_action
      (io_fromCsrTrigger_tdataVec_3_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_chain     (io_fromCsrTrigger_tdataVec_3_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_store     (io_fromCsrTrigger_tdataVec_3_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_load      (io_fromCsrTrigger_tdataVec_3_load),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_tdata2
      (io_fromCsrTrigger_tdataVec_3_tdata2),
    .tdataVec_io_fromCsrTrigger_tEnableVec_0         (io_fromCsrTrigger_tEnableVec_0),
    .tdataVec_io_fromCsrTrigger_tEnableVec_1         (io_fromCsrTrigger_tEnableVec_1),
    .tdataVec_io_fromCsrTrigger_tEnableVec_2         (io_fromCsrTrigger_tEnableVec_2),
    .tdataVec_io_fromCsrTrigger_tEnableVec_3         (io_fromCsrTrigger_tEnableVec_3),
    .tdataVec_io_fromCsrTrigger_debugMode            (io_fromCsrTrigger_debugMode),
    .tdataVec_io_fromCsrTrigger_triggerCanRaiseBpExp
      (io_fromCsrTrigger_triggerCanRaiseBpExp),
    .tdataVec_io_fromLoadStore_vaddr                 (dcacheReqVaddr),
    .tdataVec_io_toLoadStore_triggerAction
      (_segmentTrigger_tdataVec_io_toLoadStore_triggerAction),
    .tdataVec_io_memType                             (instMicroOp_isVSegLoad)
  );
  NewPipelineConnectPipe_31 VSegmentUnitPipelineConnect (
    .clock                (clock),
    .reset                (reset),
    .io_in_ready          (_VSegmentUnitPipelineConnect_io_in_ready),
    .io_in_valid          (sbufferOut_valid),
    .io_in_bits_vaddr
      (isMisalignReg
         ? (notCross16ByteReg
              ? {latchVaddr[49:4], 4'h0}
              : curPtr ? 50'({latchVaddr[49:3], 3'h0} + 50'h8) : {latchVaddr[49:3], 3'h0})
         : latchVaddr),
    .io_in_bits_data
      (isMisalignReg
         ? (notCross16ByteReg
              ? notCross16ByteData[127:0]
              : curPtr
                  ? {1'h0, _Cross16ByteData_T_1[254:128]}
                  : _Cross16ByteData_T_1[127:0])
         : flowData),
    .io_in_bits_mask
      (~isMisalignReg | notCross16ByteReg
         ? wmask[15:0]
         : curPtr ? Cross16ByteMask[31:16] : Cross16ByteMask[15:0]),
    .io_in_bits_addr
      (isMisalignReg
         ? (notCross16ByteReg
              ? {instMicroOp_paddr[47:4], 4'h0}
              : {curPtr ? instMicroOp_paddr[47:3] : lowPagePaddr[47:3], 3'h0})
         : instMicroOp_paddr),
    .io_in_bits_vecValid  (_segmentInactiveFinish_T_1 & (|_GEN_1)),
    .io_out_ready         (io_sbuffer_ready),
    .io_out_valid         (_VSegmentUnitPipelineConnect_io_out_valid),
    .io_out_bits_vaddr    (io_sbuffer_bits_vaddr),
    .io_out_bits_data     (io_sbuffer_bits_data),
    .io_out_bits_mask     (io_sbuffer_bits_mask),
    .io_out_bits_addr     (io_sbuffer_bits_addr),
    .io_out_bits_vecValid (io_sbuffer_bits_vecValid),
    .io_rightOutFire      (io_sbuffer_ready & _VSegmentUnitPipelineConnect_io_out_valid)
  );
  assign io_uopwriteback_valid = io_uopwriteback_valid_REG;
  assign io_uopwriteback_bits_uop_exceptionVec_3 =
    io_uopwriteback_bits_r_uop_exceptionVec_3;
  assign io_uopwriteback_bits_uop_exceptionVec_4 =
    io_uopwriteback_bits_r_uop_exceptionVec_4;
  assign io_uopwriteback_bits_uop_exceptionVec_5 =
    io_uopwriteback_bits_r_uop_exceptionVec_5;
  assign io_uopwriteback_bits_uop_exceptionVec_6 =
    io_uopwriteback_bits_r_uop_exceptionVec_6;
  assign io_uopwriteback_bits_uop_exceptionVec_7 =
    io_uopwriteback_bits_r_uop_exceptionVec_7;
  assign io_uopwriteback_bits_uop_exceptionVec_13 =
    io_uopwriteback_bits_r_uop_exceptionVec_13;
  assign io_uopwriteback_bits_uop_exceptionVec_15 =
    io_uopwriteback_bits_r_uop_exceptionVec_15;
  assign io_uopwriteback_bits_uop_exceptionVec_21 =
    io_uopwriteback_bits_r_uop_exceptionVec_21;
  assign io_uopwriteback_bits_uop_exceptionVec_23 =
    io_uopwriteback_bits_r_uop_exceptionVec_23;
  assign io_uopwriteback_bits_uop_trigger = io_uopwriteback_bits_r_uop_trigger;
  assign io_uopwriteback_bits_uop_fuOpType = io_uopwriteback_bits_r_uop_fuOpType;
  assign io_uopwriteback_bits_uop_vecWen = io_uopwriteback_bits_r_uop_vecWen;
  assign io_uopwriteback_bits_uop_v0Wen = io_uopwriteback_bits_r_uop_v0Wen;
  assign io_uopwriteback_bits_uop_vlWen = io_uopwriteback_bits_r_uop_vlWen;
  assign io_uopwriteback_bits_uop_vpu_vma = io_uopwriteback_bits_r_uop_vpu_vma;
  assign io_uopwriteback_bits_uop_vpu_vta = io_uopwriteback_bits_r_uop_vpu_vta;
  assign io_uopwriteback_bits_uop_vpu_vsew = io_uopwriteback_bits_r_uop_vpu_vsew;
  assign io_uopwriteback_bits_uop_vpu_vlmul = io_uopwriteback_bits_r_uop_vpu_vlmul;
  assign io_uopwriteback_bits_uop_vpu_vm = io_uopwriteback_bits_r_uop_vpu_vm;
  assign io_uopwriteback_bits_uop_vpu_vstart = io_uopwriteback_bits_r_uop_vpu_vstart;
  assign io_uopwriteback_bits_uop_vpu_vuopIdx = io_uopwriteback_bits_r_uop_vpu_vuopIdx;
  assign io_uopwriteback_bits_uop_vpu_vmask = io_uopwriteback_bits_r_uop_vpu_vmask;
  assign io_uopwriteback_bits_uop_vpu_vl = io_uopwriteback_bits_r_uop_vpu_vl;
  assign io_uopwriteback_bits_uop_vpu_nf = io_uopwriteback_bits_r_uop_vpu_nf;
  assign io_uopwriteback_bits_uop_vpu_veew = io_uopwriteback_bits_r_uop_vpu_veew;
  assign io_uopwriteback_bits_uop_pdest = io_uopwriteback_bits_r_uop_pdest;
  assign io_uopwriteback_bits_uop_robIdx_flag = io_uopwriteback_bits_r_uop_robIdx_flag;
  assign io_uopwriteback_bits_uop_robIdx_value = io_uopwriteback_bits_r_uop_robIdx_value;
  assign io_uopwriteback_bits_data = io_uopwriteback_bits_r_data;
  assign io_uopwriteback_bits_vdIdxInField = io_uopwriteback_bits_r_vdIdxInField;
  assign io_rdcache_req_valid = io_rdcache_req_valid_0;
  assign io_rdcache_req_bits_vaddr = dcacheReqVaddr;
  assign io_rdcache_req_bits_vaddr_dup =
    isMisalignReg
      ? {curPtr ? 47'(latchVaddrDup[49:3] + 47'h1) : latchVaddrDup[49:3], 3'h0}
      : latchVaddrDup;
  assign io_rdcache_is128Req = notCross16ByteReg;
  assign io_rdcache_s1_paddr_dup_lsu = dcacheReqPaddr;
  assign io_rdcache_s1_paddr_dup_dcache = dcacheReqPaddr;
  assign io_sbuffer_valid = _VSegmentUnitPipelineConnect_io_out_valid;
  assign io_dtlb_req_valid = _io_dtlb_req_valid_T & (|_GEN_1);
  assign io_dtlb_req_bits_vaddr = tlbReqVaddr[49:0];
  assign io_dtlb_req_bits_fullva = tlbReqVaddr;
  assign io_dtlb_req_bits_cmd = {2'h0, ~instMicroOp_isVSegLoad};
  assign io_dtlb_req_bits_debug_robIdx_flag = instMicroOp_uop_robIdx_flag;
  assign io_dtlb_req_bits_debug_robIdx_value = instMicroOp_uop_robIdx_value;
  assign io_flush_sbuffer_valid = ~io_flush_sbuffer_empty & state == 4'h1;
  assign io_feedback_valid = io_feedback_valid_REG;
  assign io_feedback_bits_sqIdx_flag = io_feedback_bits_r_sqIdx_flag;
  assign io_feedback_bits_sqIdx_value = io_feedback_bits_r_sqIdx_value;
  assign io_feedback_bits_lqIdx_flag = io_feedback_bits_r_lqIdx_flag;
  assign io_feedback_bits_lqIdx_value = io_feedback_bits_r_lqIdx_value;
  assign io_exceptionInfo_valid =
    _io_exceptionInfo_valid_T & (|_GEN_32)
    & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5;
  assign io_exceptionInfo_bits_vaddr = instMicroOp_exceptionVaddr;
  assign io_exceptionInfo_bits_gpaddr = instMicroOp_exceptionGpaddr[49:0];
  assign io_exceptionInfo_bits_isForVSnonLeafPTE = instMicroOp_exceptionIsForVSnonLeafPTE;
endmodule

