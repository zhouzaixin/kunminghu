// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Arbiter2_L2TLBImp_Anon_1(
  input         io_in_0_valid,
  input  [37:0] io_in_0_bits_resp_entry_tag,
  input  [13:0] io_in_0_bits_resp_entry_vmid,
  input         io_in_0_bits_resp_entry_n,
  input  [1:0]  io_in_0_bits_resp_entry_pbmt,
  input  [37:0] io_in_0_bits_resp_entry_ppn,
  input         io_in_0_bits_resp_entry_perm_d,
  input         io_in_0_bits_resp_entry_perm_a,
  input         io_in_0_bits_resp_entry_perm_g,
  input         io_in_0_bits_resp_entry_perm_u,
  input         io_in_0_bits_resp_entry_perm_x,
  input         io_in_0_bits_resp_entry_perm_w,
  input         io_in_0_bits_resp_entry_perm_r,
  input  [1:0]  io_in_0_bits_resp_entry_level,
  input         io_in_0_bits_resp_gpf,
  input  [2:0]  io_in_0_bits_id,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [37:0] io_in_1_bits_resp_entry_tag,
  input  [13:0] io_in_1_bits_resp_entry_vmid,
  input         io_in_1_bits_resp_entry_n,
  input  [1:0]  io_in_1_bits_resp_entry_pbmt,
  input  [37:0] io_in_1_bits_resp_entry_ppn,
  input         io_in_1_bits_resp_entry_perm_d,
  input         io_in_1_bits_resp_entry_perm_a,
  input         io_in_1_bits_resp_entry_perm_g,
  input         io_in_1_bits_resp_entry_perm_u,
  input         io_in_1_bits_resp_entry_perm_x,
  input         io_in_1_bits_resp_entry_perm_w,
  input         io_in_1_bits_resp_entry_perm_r,
  input  [1:0]  io_in_1_bits_resp_entry_level,
  input         io_in_1_bits_resp_gpf,
  input         io_in_1_bits_resp_gaf,
  input  [2:0]  io_in_1_bits_id,
  output        io_out_valid,
  output [37:0] io_out_bits_resp_entry_tag,
  output [13:0] io_out_bits_resp_entry_vmid,
  output        io_out_bits_resp_entry_n,
  output [1:0]  io_out_bits_resp_entry_pbmt,
  output [37:0] io_out_bits_resp_entry_ppn,
  output        io_out_bits_resp_entry_perm_d,
  output        io_out_bits_resp_entry_perm_a,
  output        io_out_bits_resp_entry_perm_g,
  output        io_out_bits_resp_entry_perm_u,
  output        io_out_bits_resp_entry_perm_x,
  output        io_out_bits_resp_entry_perm_w,
  output        io_out_bits_resp_entry_perm_r,
  output [1:0]  io_out_bits_resp_entry_level,
  output        io_out_bits_resp_gpf,
  output        io_out_bits_resp_gaf,
  output [2:0]  io_out_bits_id
);

  assign io_in_1_ready = ~io_in_0_valid;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_resp_entry_tag =
    io_in_0_valid ? io_in_0_bits_resp_entry_tag : io_in_1_bits_resp_entry_tag;
  assign io_out_bits_resp_entry_vmid =
    io_in_0_valid ? io_in_0_bits_resp_entry_vmid : io_in_1_bits_resp_entry_vmid;
  assign io_out_bits_resp_entry_n =
    io_in_0_valid ? io_in_0_bits_resp_entry_n : io_in_1_bits_resp_entry_n;
  assign io_out_bits_resp_entry_pbmt =
    io_in_0_valid ? io_in_0_bits_resp_entry_pbmt : io_in_1_bits_resp_entry_pbmt;
  assign io_out_bits_resp_entry_ppn =
    io_in_0_valid ? io_in_0_bits_resp_entry_ppn : io_in_1_bits_resp_entry_ppn;
  assign io_out_bits_resp_entry_perm_d =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_d : io_in_1_bits_resp_entry_perm_d;
  assign io_out_bits_resp_entry_perm_a =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_a : io_in_1_bits_resp_entry_perm_a;
  assign io_out_bits_resp_entry_perm_g =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_g : io_in_1_bits_resp_entry_perm_g;
  assign io_out_bits_resp_entry_perm_u =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_u : io_in_1_bits_resp_entry_perm_u;
  assign io_out_bits_resp_entry_perm_x =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_x : io_in_1_bits_resp_entry_perm_x;
  assign io_out_bits_resp_entry_perm_w =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_w : io_in_1_bits_resp_entry_perm_w;
  assign io_out_bits_resp_entry_perm_r =
    io_in_0_valid ? io_in_0_bits_resp_entry_perm_r : io_in_1_bits_resp_entry_perm_r;
  assign io_out_bits_resp_entry_level =
    io_in_0_valid ? io_in_0_bits_resp_entry_level : io_in_1_bits_resp_entry_level;
  assign io_out_bits_resp_gpf =
    io_in_0_valid ? io_in_0_bits_resp_gpf : io_in_1_bits_resp_gpf;
  assign io_out_bits_resp_gaf = ~io_in_0_valid & io_in_1_bits_resp_gaf;
  assign io_out_bits_id = io_in_0_valid ? io_in_0_bits_id : io_in_1_bits_id;
endmodule

