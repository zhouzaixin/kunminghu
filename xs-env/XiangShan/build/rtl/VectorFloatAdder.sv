// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VectorFloatAdder(
  input          clock,
  input          io_fire,
  input  [63:0]  io_fp_a,
  input  [63:0]  io_fp_b,
  input  [63:0]  io_widen_a,
  input  [63:0]  io_widen_b,
  input  [3:0]   io_mask,
  input          io_uop_idx,
  input  [2:0]   io_round_mode,
  input  [1:0]   io_fp_format,
  input          io_opb_widening,
  input          io_res_widening,
  input  [4:0]   io_op_code,
  input  [7:0]   io_maskForReduction,
  input          io_is_vfwredosum,
  input  [2:0]   io_is_fold,
  input  [127:0] io_vs2_fold,
  output [63:0]  io_fp_result,
  output [19:0]  io_fflags
);

  wire [15:0] _U_F16_3_io_fp_c;
  wire [4:0]  _U_F16_3_io_fflags;
  wire [15:0] _U_F16_1_io_fp_c;
  wire [4:0]  _U_F16_1_io_fflags;
  wire [63:0] _U_F64_Widen_0_io_fp_c;
  wire [4:0]  _U_F64_Widen_0_io_fflags;
  wire [31:0] _U_F32_Mixed_1_io_fp_c;
  wire [4:0]  _U_F32_Mixed_1_io_fflags;
  wire [31:0] _U_F32_Mixed_0_io_fp_c;
  wire [4:0]  _U_F32_Mixed_0_io_fflags;
  wire [31:0] _U_Widen_Fotmat_32_fold_io_widen_a_f32_0;
  wire [63:0] _U_Widen_Fotmat_64_fold_io_widen_a_f64;
  wire [31:0] _U_Widen_Fotmat_io_widen_a_f32_0;
  wire [31:0] _U_Widen_Fotmat_io_widen_b_f32_0;
  wire [31:0] _U_Widen_Fotmat_io_widen_a_f32_1;
  wire [31:0] _U_Widen_Fotmat_io_widen_b_f32_1;
  wire [63:0] _U_Widen_Fotmat_io_widen_a_f64;
  wire [63:0] _U_Widen_Fotmat_io_widen_b_f64;
  wire [1:0]  _fp_format_T = 2'(io_fp_format - 2'h1);
  wire [31:0] _f32_0_fp_a_T_13 =
    (io_is_fold[0] ? io_vs2_fold[95:64] : 32'h0)
    | (io_is_fold[1] ? io_vs2_fold[63:32] : 32'h0);
  wire        _U_F32_Mixed_1_io_maskForReduction_T = _fp_format_T == 2'h1;
  reg  [1:0]  fp_format_reg;
  wire        res_is_f16 = fp_format_reg == 2'h1;
  wire        res_is_f32 = fp_format_reg == 2'h2;
  always @(posedge clock) begin
    if (io_fire)
      fp_format_reg <= io_fp_format;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        fp_format_reg = _RANDOM[/*Zero width*/ 1'b0][2:1];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FloatAdderWidenFormat U_Widen_Fotmat (
    .io_widen_a       (io_widen_a),
    .io_widen_b       (io_widen_b),
    .io_uop_idx       (io_uop_idx),
    .io_widen_a_f32_0 (_U_Widen_Fotmat_io_widen_a_f32_0),
    .io_widen_b_f32_0 (_U_Widen_Fotmat_io_widen_b_f32_0),
    .io_widen_a_f32_1 (_U_Widen_Fotmat_io_widen_a_f32_1),
    .io_widen_b_f32_1 (_U_Widen_Fotmat_io_widen_b_f32_1),
    .io_widen_a_f64   (_U_Widen_Fotmat_io_widen_a_f64),
    .io_widen_b_f64   (_U_Widen_Fotmat_io_widen_b_f64)
  );
  FloatAdderWidenFormat U_Widen_Fotmat_64_fold (
    .io_widen_a       (io_vs2_fold[127:64]),
    .io_widen_b       (64'h0),
    .io_uop_idx       (1'h0),
    .io_widen_a_f32_0 (/* unused */),
    .io_widen_b_f32_0 (/* unused */),
    .io_widen_a_f32_1 (/* unused */),
    .io_widen_b_f32_1 (/* unused */),
    .io_widen_a_f64   (_U_Widen_Fotmat_64_fold_io_widen_a_f64),
    .io_widen_b_f64   (/* unused */)
  );
  FloatAdderWidenFormat U_Widen_Fotmat_32_fold (
    .io_widen_a       ({32'h0, io_vs2_fold[63:32]}),
    .io_widen_b       (64'h0),
    .io_uop_idx       (1'h0),
    .io_widen_a_f32_0 (_U_Widen_Fotmat_32_fold_io_widen_a_f32_0),
    .io_widen_b_f32_0 (/* unused */),
    .io_widen_a_f32_1 (/* unused */),
    .io_widen_b_f32_1 (/* unused */),
    .io_widen_a_f64   (/* unused */),
    .io_widen_b_f64   (/* unused */)
  );
  FloatAdderF32WidenF16MixedPipeline U_F32_Mixed_0 (
    .clock               (clock),
    .io_fire             (io_fire),
    .io_fp_a
      ({_f32_0_fp_a_T_13[31:16],
        _f32_0_fp_a_T_13[15:0] | (io_is_fold[2] ? io_vs2_fold[31:16] : 16'h0)}
       | ((|io_is_fold) ? 32'h0 : io_fp_a[31:0])),
    .io_fp_b             (io_fp_b[31:0]),
    .io_widen_a
      (io_is_fold[1]
         ? _U_Widen_Fotmat_32_fold_io_widen_a_f32_0
         : _U_Widen_Fotmat_io_widen_a_f32_0),
    .io_widen_b          (_U_Widen_Fotmat_io_widen_b_f32_0),
    .io_fp_c             (_U_F32_Mixed_0_io_fp_c),
    .io_is_sub           (io_op_code[0]),
    .io_mask             (io_mask[0]),
    .io_round_mode       (io_round_mode),
    .io_fflags           (_U_F32_Mixed_0_io_fflags),
    .io_fp_format        (_fp_format_T),
    .io_opb_widening     (io_opb_widening),
    .io_res_widening     (io_res_widening),
    .io_op_code          (io_op_code),
    .io_maskForReduction ({io_maskForReduction[4], io_maskForReduction[0]}),
    .io_is_vfwredosum    (io_is_vfwredosum)
  );
  FloatAdderF32WidenF16MixedPipeline U_F32_Mixed_1 (
    .clock               (clock),
    .io_fire             (io_fire),
    .io_fp_a
      ((io_is_fold[0] ? io_vs2_fold[127:96] : 32'h0)
       | ((|io_is_fold) ? 32'h0 : io_fp_a[63:32])),
    .io_fp_b             (io_fp_b[63:32]),
    .io_widen_a          (_U_Widen_Fotmat_io_widen_a_f32_1),
    .io_widen_b          (_U_Widen_Fotmat_io_widen_b_f32_1),
    .io_fp_c             (_U_F32_Mixed_1_io_fp_c),
    .io_is_sub           (io_op_code[0]),
    .io_mask             (_U_F32_Mixed_1_io_maskForReduction_T ? io_mask[1] : io_mask[2]),
    .io_round_mode       (io_round_mode),
    .io_fflags           (_U_F32_Mixed_1_io_fflags),
    .io_fp_format        (_fp_format_T),
    .io_opb_widening     (io_opb_widening),
    .io_res_widening     (io_res_widening),
    .io_op_code          (io_op_code),
    .io_maskForReduction
      (_U_F32_Mixed_1_io_maskForReduction_T
         ? {io_maskForReduction[5], io_maskForReduction[1]}
         : {io_maskForReduction[6], io_maskForReduction[2]}),
    .io_is_vfwredosum    (io_is_vfwredosum)
  );
  FloatAdderF64WidenPipeline U_F64_Widen_0 (
    .clock               (clock),
    .io_fire             (io_fire),
    .io_fp_a             (io_is_fold[0] ? io_vs2_fold[127:64] : io_fp_a),
    .io_fp_b             (io_fp_b),
    .io_widen_a
      (io_is_fold[0]
         ? _U_Widen_Fotmat_64_fold_io_widen_a_f64
         : _U_Widen_Fotmat_io_widen_a_f64),
    .io_widen_b          (_U_Widen_Fotmat_io_widen_b_f64),
    .io_fp_c             (_U_F64_Widen_0_io_fp_c),
    .io_mask             (io_mask[0]),
    .io_is_sub           (io_op_code[0]),
    .io_round_mode       (io_round_mode),
    .io_fflags           (_U_F64_Widen_0_io_fflags),
    .io_opb_widening     (io_opb_widening),
    .io_res_widening     (io_res_widening),
    .io_op_code          (io_op_code),
    .io_maskForReduction ({io_maskForReduction[4], io_maskForReduction[0]}),
    .io_is_vfwredosum    (io_is_vfwredosum)
  );
  FloatAdderF16Pipeline U_F16_1 (
    .clock               (clock),
    .io_fire             (io_fire),
    .io_fp_a
      (io_is_fold[1]
         ? io_vs2_fold[63:48]
         : io_is_fold[0] ? io_vs2_fold[95:80] : io_fp_a[31:16]),
    .io_fp_b             (io_fp_b[31:16]),
    .io_fp_c             (_U_F16_1_io_fp_c),
    .io_is_sub           (io_op_code[0]),
    .io_mask             (io_mask[1]),
    .io_round_mode       (io_round_mode),
    .io_fflags           (_U_F16_1_io_fflags),
    .io_op_code          (io_op_code),
    .io_maskForReduction ({io_maskForReduction[5], io_maskForReduction[1]})
  );
  FloatAdderF16Pipeline U_F16_3 (
    .clock               (clock),
    .io_fire             (io_fire),
    .io_fp_a             (io_is_fold[0] ? io_vs2_fold[127:112] : io_fp_a[63:48]),
    .io_fp_b             (io_fp_b[63:48]),
    .io_fp_c             (_U_F16_3_io_fp_c),
    .io_is_sub           (io_op_code[0]),
    .io_mask             (io_mask[3]),
    .io_round_mode       (io_round_mode),
    .io_fflags           (_U_F16_3_io_fflags),
    .io_op_code          (io_op_code),
    .io_maskForReduction ({io_maskForReduction[7], io_maskForReduction[3]})
  );
  assign io_fp_result =
    (res_is_f16
       ? {_U_F16_3_io_fp_c,
          _U_F32_Mixed_1_io_fp_c[15:0],
          _U_F16_1_io_fp_c,
          _U_F32_Mixed_0_io_fp_c[15:0]}
       : 64'h0) | (res_is_f32 ? {_U_F32_Mixed_1_io_fp_c, _U_F32_Mixed_0_io_fp_c} : 64'h0)
    | ((&fp_format_reg) ? _U_F64_Widen_0_io_fp_c : 64'h0);
  assign io_fflags =
    {{5{res_is_f16}} & _U_F16_3_io_fflags,
     {5{res_is_f16}} & _U_F32_Mixed_1_io_fflags,
     {5{~(&fp_format_reg)}}
       & (res_is_f32 ? _U_F32_Mixed_1_io_fflags : _U_F16_1_io_fflags),
     (&fp_format_reg) ? _U_F64_Widen_0_io_fflags : _U_F32_Mixed_0_io_fflags};
endmodule

