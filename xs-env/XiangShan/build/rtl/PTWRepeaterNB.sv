// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PTWRepeaterNB(
  input         clock,
  input         reset,
  input         io_sfence_valid,
  input         io_csr_satp_changed,
  input         io_csr_vsatp_changed,
  input         io_csr_hgatp_changed,
  output        io_tlb_req_0_ready,
  input         io_tlb_req_0_valid,
  input  [37:0] io_tlb_req_0_bits_vpn,
  input  [1:0]  io_tlb_req_0_bits_s2xlate,
  input         io_tlb_resp_ready,
  output        io_tlb_resp_valid,
  output [1:0]  io_tlb_resp_bits_s2xlate,
  output [34:0] io_tlb_resp_bits_s1_entry_tag,
  output [15:0] io_tlb_resp_bits_s1_entry_asid,
  output [13:0] io_tlb_resp_bits_s1_entry_vmid,
  output        io_tlb_resp_bits_s1_entry_n,
  output [1:0]  io_tlb_resp_bits_s1_entry_pbmt,
  output        io_tlb_resp_bits_s1_entry_perm_d,
  output        io_tlb_resp_bits_s1_entry_perm_a,
  output        io_tlb_resp_bits_s1_entry_perm_g,
  output        io_tlb_resp_bits_s1_entry_perm_u,
  output        io_tlb_resp_bits_s1_entry_perm_x,
  output        io_tlb_resp_bits_s1_entry_perm_w,
  output        io_tlb_resp_bits_s1_entry_perm_r,
  output [1:0]  io_tlb_resp_bits_s1_entry_level,
  output        io_tlb_resp_bits_s1_entry_v,
  output [40:0] io_tlb_resp_bits_s1_entry_ppn,
  output [2:0]  io_tlb_resp_bits_s1_addr_low,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_0,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_1,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_2,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_3,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_4,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_5,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_6,
  output [2:0]  io_tlb_resp_bits_s1_ppn_low_7,
  output        io_tlb_resp_bits_s1_valididx_0,
  output        io_tlb_resp_bits_s1_valididx_1,
  output        io_tlb_resp_bits_s1_valididx_2,
  output        io_tlb_resp_bits_s1_valididx_3,
  output        io_tlb_resp_bits_s1_valididx_4,
  output        io_tlb_resp_bits_s1_valididx_5,
  output        io_tlb_resp_bits_s1_valididx_6,
  output        io_tlb_resp_bits_s1_valididx_7,
  output        io_tlb_resp_bits_s1_pteidx_0,
  output        io_tlb_resp_bits_s1_pteidx_1,
  output        io_tlb_resp_bits_s1_pteidx_2,
  output        io_tlb_resp_bits_s1_pteidx_3,
  output        io_tlb_resp_bits_s1_pteidx_4,
  output        io_tlb_resp_bits_s1_pteidx_5,
  output        io_tlb_resp_bits_s1_pteidx_6,
  output        io_tlb_resp_bits_s1_pteidx_7,
  output        io_tlb_resp_bits_s1_pf,
  output        io_tlb_resp_bits_s1_af,
  output [37:0] io_tlb_resp_bits_s2_entry_tag,
  output [13:0] io_tlb_resp_bits_s2_entry_vmid,
  output        io_tlb_resp_bits_s2_entry_n,
  output [1:0]  io_tlb_resp_bits_s2_entry_pbmt,
  output [37:0] io_tlb_resp_bits_s2_entry_ppn,
  output        io_tlb_resp_bits_s2_entry_perm_d,
  output        io_tlb_resp_bits_s2_entry_perm_a,
  output        io_tlb_resp_bits_s2_entry_perm_g,
  output        io_tlb_resp_bits_s2_entry_perm_u,
  output        io_tlb_resp_bits_s2_entry_perm_x,
  output        io_tlb_resp_bits_s2_entry_perm_w,
  output        io_tlb_resp_bits_s2_entry_perm_r,
  output [1:0]  io_tlb_resp_bits_s2_entry_level,
  output        io_tlb_resp_bits_s2_gpf,
  output        io_tlb_resp_bits_s2_gaf,
  input         io_ptw_req_0_ready,
  output        io_ptw_req_0_valid,
  output [37:0] io_ptw_req_0_bits_vpn,
  output [1:0]  io_ptw_req_0_bits_s2xlate,
  output        io_ptw_resp_ready,
  input         io_ptw_resp_valid,
  input  [1:0]  io_ptw_resp_bits_s2xlate,
  input  [34:0] io_ptw_resp_bits_s1_entry_tag,
  input  [15:0] io_ptw_resp_bits_s1_entry_asid,
  input  [13:0] io_ptw_resp_bits_s1_entry_vmid,
  input         io_ptw_resp_bits_s1_entry_n,
  input  [1:0]  io_ptw_resp_bits_s1_entry_pbmt,
  input         io_ptw_resp_bits_s1_entry_perm_d,
  input         io_ptw_resp_bits_s1_entry_perm_a,
  input         io_ptw_resp_bits_s1_entry_perm_g,
  input         io_ptw_resp_bits_s1_entry_perm_u,
  input         io_ptw_resp_bits_s1_entry_perm_x,
  input         io_ptw_resp_bits_s1_entry_perm_w,
  input         io_ptw_resp_bits_s1_entry_perm_r,
  input  [1:0]  io_ptw_resp_bits_s1_entry_level,
  input         io_ptw_resp_bits_s1_entry_v,
  input  [40:0] io_ptw_resp_bits_s1_entry_ppn,
  input  [2:0]  io_ptw_resp_bits_s1_addr_low,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_0,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_1,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_2,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_3,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_4,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_5,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_6,
  input  [2:0]  io_ptw_resp_bits_s1_ppn_low_7,
  input         io_ptw_resp_bits_s1_valididx_0,
  input         io_ptw_resp_bits_s1_valididx_1,
  input         io_ptw_resp_bits_s1_valididx_2,
  input         io_ptw_resp_bits_s1_valididx_3,
  input         io_ptw_resp_bits_s1_valididx_4,
  input         io_ptw_resp_bits_s1_valididx_5,
  input         io_ptw_resp_bits_s1_valididx_6,
  input         io_ptw_resp_bits_s1_valididx_7,
  input         io_ptw_resp_bits_s1_pteidx_0,
  input         io_ptw_resp_bits_s1_pteidx_1,
  input         io_ptw_resp_bits_s1_pteidx_2,
  input         io_ptw_resp_bits_s1_pteidx_3,
  input         io_ptw_resp_bits_s1_pteidx_4,
  input         io_ptw_resp_bits_s1_pteidx_5,
  input         io_ptw_resp_bits_s1_pteidx_6,
  input         io_ptw_resp_bits_s1_pteidx_7,
  input         io_ptw_resp_bits_s1_pf,
  input         io_ptw_resp_bits_s1_af,
  input  [37:0] io_ptw_resp_bits_s2_entry_tag,
  input  [13:0] io_ptw_resp_bits_s2_entry_vmid,
  input         io_ptw_resp_bits_s2_entry_n,
  input  [1:0]  io_ptw_resp_bits_s2_entry_pbmt,
  input  [37:0] io_ptw_resp_bits_s2_entry_ppn,
  input         io_ptw_resp_bits_s2_entry_perm_d,
  input         io_ptw_resp_bits_s2_entry_perm_a,
  input         io_ptw_resp_bits_s2_entry_perm_g,
  input         io_ptw_resp_bits_s2_entry_perm_u,
  input         io_ptw_resp_bits_s2_entry_perm_x,
  input         io_ptw_resp_bits_s2_entry_perm_w,
  input         io_ptw_resp_bits_s2_entry_perm_r,
  input  [1:0]  io_ptw_resp_bits_s2_entry_level,
  input         io_ptw_resp_bits_s2_gpf,
  input         io_ptw_resp_bits_s2_gaf
);

  reg         recv;
  reg         sent;
  wire        _delay_io_out;
  wire        _sent_T = ~sent & io_tlb_req_0_valid;
  reg  [37:0] req_vpn;
  reg  [1:0]  req_s2xlate;
  wire        _recv_T = ~recv & io_ptw_resp_valid;
  reg  [1:0]  resp_s2xlate;
  reg  [34:0] resp_s1_entry_tag;
  reg  [15:0] resp_s1_entry_asid;
  reg  [13:0] resp_s1_entry_vmid;
  reg         resp_s1_entry_n;
  reg  [1:0]  resp_s1_entry_pbmt;
  reg         resp_s1_entry_perm_d;
  reg         resp_s1_entry_perm_a;
  reg         resp_s1_entry_perm_g;
  reg         resp_s1_entry_perm_u;
  reg         resp_s1_entry_perm_x;
  reg         resp_s1_entry_perm_w;
  reg         resp_s1_entry_perm_r;
  reg  [1:0]  resp_s1_entry_level;
  reg         resp_s1_entry_v;
  reg  [40:0] resp_s1_entry_ppn;
  reg  [2:0]  resp_s1_addr_low;
  reg  [2:0]  resp_s1_ppn_low_0;
  reg  [2:0]  resp_s1_ppn_low_1;
  reg  [2:0]  resp_s1_ppn_low_2;
  reg  [2:0]  resp_s1_ppn_low_3;
  reg  [2:0]  resp_s1_ppn_low_4;
  reg  [2:0]  resp_s1_ppn_low_5;
  reg  [2:0]  resp_s1_ppn_low_6;
  reg  [2:0]  resp_s1_ppn_low_7;
  reg         resp_s1_valididx_0;
  reg         resp_s1_valididx_1;
  reg         resp_s1_valididx_2;
  reg         resp_s1_valididx_3;
  reg         resp_s1_valididx_4;
  reg         resp_s1_valididx_5;
  reg         resp_s1_valididx_6;
  reg         resp_s1_valididx_7;
  reg         resp_s1_pteidx_0;
  reg         resp_s1_pteidx_1;
  reg         resp_s1_pteidx_2;
  reg         resp_s1_pteidx_3;
  reg         resp_s1_pteidx_4;
  reg         resp_s1_pteidx_5;
  reg         resp_s1_pteidx_6;
  reg         resp_s1_pteidx_7;
  reg         resp_s1_pf;
  reg         resp_s1_af;
  reg  [37:0] resp_s2_entry_tag;
  reg  [13:0] resp_s2_entry_vmid;
  reg         resp_s2_entry_n;
  reg  [1:0]  resp_s2_entry_pbmt;
  reg  [37:0] resp_s2_entry_ppn;
  reg         resp_s2_entry_perm_d;
  reg         resp_s2_entry_perm_a;
  reg         resp_s2_entry_perm_g;
  reg         resp_s2_entry_perm_u;
  reg         resp_s2_entry_perm_x;
  reg         resp_s2_entry_perm_w;
  reg         resp_s2_entry_perm_r;
  reg  [1:0]  resp_s2_entry_level;
  reg         resp_s2_gpf;
  reg         resp_s2_gaf;
  always @(posedge clock) begin
    if (_sent_T) begin
      req_vpn <= io_tlb_req_0_bits_vpn;
      req_s2xlate <= io_tlb_req_0_bits_s2xlate;
    end
    if (_recv_T) begin
      resp_s2xlate <= io_ptw_resp_bits_s2xlate;
      resp_s1_entry_tag <= io_ptw_resp_bits_s1_entry_tag;
      resp_s1_entry_asid <= io_ptw_resp_bits_s1_entry_asid;
      resp_s1_entry_vmid <= io_ptw_resp_bits_s1_entry_vmid;
      resp_s1_entry_n <= io_ptw_resp_bits_s1_entry_n;
      resp_s1_entry_pbmt <= io_ptw_resp_bits_s1_entry_pbmt;
      resp_s1_entry_perm_d <= io_ptw_resp_bits_s1_entry_perm_d;
      resp_s1_entry_perm_a <= io_ptw_resp_bits_s1_entry_perm_a;
      resp_s1_entry_perm_g <= io_ptw_resp_bits_s1_entry_perm_g;
      resp_s1_entry_perm_u <= io_ptw_resp_bits_s1_entry_perm_u;
      resp_s1_entry_perm_x <= io_ptw_resp_bits_s1_entry_perm_x;
      resp_s1_entry_perm_w <= io_ptw_resp_bits_s1_entry_perm_w;
      resp_s1_entry_perm_r <= io_ptw_resp_bits_s1_entry_perm_r;
      resp_s1_entry_level <= io_ptw_resp_bits_s1_entry_level;
      resp_s1_entry_v <= io_ptw_resp_bits_s1_entry_v;
      resp_s1_entry_ppn <= io_ptw_resp_bits_s1_entry_ppn;
      resp_s1_addr_low <= io_ptw_resp_bits_s1_addr_low;
      resp_s1_ppn_low_0 <= io_ptw_resp_bits_s1_ppn_low_0;
      resp_s1_ppn_low_1 <= io_ptw_resp_bits_s1_ppn_low_1;
      resp_s1_ppn_low_2 <= io_ptw_resp_bits_s1_ppn_low_2;
      resp_s1_ppn_low_3 <= io_ptw_resp_bits_s1_ppn_low_3;
      resp_s1_ppn_low_4 <= io_ptw_resp_bits_s1_ppn_low_4;
      resp_s1_ppn_low_5 <= io_ptw_resp_bits_s1_ppn_low_5;
      resp_s1_ppn_low_6 <= io_ptw_resp_bits_s1_ppn_low_6;
      resp_s1_ppn_low_7 <= io_ptw_resp_bits_s1_ppn_low_7;
      resp_s1_valididx_0 <= io_ptw_resp_bits_s1_valididx_0;
      resp_s1_valididx_1 <= io_ptw_resp_bits_s1_valididx_1;
      resp_s1_valididx_2 <= io_ptw_resp_bits_s1_valididx_2;
      resp_s1_valididx_3 <= io_ptw_resp_bits_s1_valididx_3;
      resp_s1_valididx_4 <= io_ptw_resp_bits_s1_valididx_4;
      resp_s1_valididx_5 <= io_ptw_resp_bits_s1_valididx_5;
      resp_s1_valididx_6 <= io_ptw_resp_bits_s1_valididx_6;
      resp_s1_valididx_7 <= io_ptw_resp_bits_s1_valididx_7;
      resp_s1_pteidx_0 <= io_ptw_resp_bits_s1_pteidx_0;
      resp_s1_pteidx_1 <= io_ptw_resp_bits_s1_pteidx_1;
      resp_s1_pteidx_2 <= io_ptw_resp_bits_s1_pteidx_2;
      resp_s1_pteidx_3 <= io_ptw_resp_bits_s1_pteidx_3;
      resp_s1_pteidx_4 <= io_ptw_resp_bits_s1_pteidx_4;
      resp_s1_pteidx_5 <= io_ptw_resp_bits_s1_pteidx_5;
      resp_s1_pteidx_6 <= io_ptw_resp_bits_s1_pteidx_6;
      resp_s1_pteidx_7 <= io_ptw_resp_bits_s1_pteidx_7;
      resp_s1_pf <= io_ptw_resp_bits_s1_pf;
      resp_s1_af <= io_ptw_resp_bits_s1_af;
      resp_s2_entry_tag <= io_ptw_resp_bits_s2_entry_tag;
      resp_s2_entry_vmid <= io_ptw_resp_bits_s2_entry_vmid;
      resp_s2_entry_n <= io_ptw_resp_bits_s2_entry_n;
      resp_s2_entry_pbmt <= io_ptw_resp_bits_s2_entry_pbmt;
      resp_s2_entry_ppn <= io_ptw_resp_bits_s2_entry_ppn;
      resp_s2_entry_perm_d <= io_ptw_resp_bits_s2_entry_perm_d;
      resp_s2_entry_perm_a <= io_ptw_resp_bits_s2_entry_perm_a;
      resp_s2_entry_perm_g <= io_ptw_resp_bits_s2_entry_perm_g;
      resp_s2_entry_perm_u <= io_ptw_resp_bits_s2_entry_perm_u;
      resp_s2_entry_perm_x <= io_ptw_resp_bits_s2_entry_perm_x;
      resp_s2_entry_perm_w <= io_ptw_resp_bits_s2_entry_perm_w;
      resp_s2_entry_perm_r <= io_ptw_resp_bits_s2_entry_perm_r;
      resp_s2_entry_level <= io_ptw_resp_bits_s2_entry_level;
      resp_s2_gpf <= io_ptw_resp_bits_s2_gpf;
      resp_s2_gaf <= io_ptw_resp_bits_s2_gaf;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sent <= 1'h0;
      recv <= 1'h0;
    end
    else begin
      sent <= ~(io_ptw_req_0_ready & sent | _delay_io_out) & (_sent_T | sent);
      recv <= ~(io_tlb_resp_ready & recv | _delay_io_out) & (_recv_T | recv);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:10];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_vpn = {_RANDOM[4'h0], _RANDOM[4'h1][5:0]};
        req_s2xlate = _RANDOM[4'h1][7:6];
        sent = _RANDOM[4'h1][8];
        resp_s2xlate = _RANDOM[4'h1][10:9];
        resp_s1_entry_tag = {_RANDOM[4'h1][31:11], _RANDOM[4'h2][13:0]};
        resp_s1_entry_asid = _RANDOM[4'h2][29:14];
        resp_s1_entry_vmid = {_RANDOM[4'h2][31:30], _RANDOM[4'h3][11:0]};
        resp_s1_entry_n = _RANDOM[4'h3][12];
        resp_s1_entry_pbmt = _RANDOM[4'h3][14:13];
        resp_s1_entry_perm_d = _RANDOM[4'h3][15];
        resp_s1_entry_perm_a = _RANDOM[4'h3][16];
        resp_s1_entry_perm_g = _RANDOM[4'h3][17];
        resp_s1_entry_perm_u = _RANDOM[4'h3][18];
        resp_s1_entry_perm_x = _RANDOM[4'h3][19];
        resp_s1_entry_perm_w = _RANDOM[4'h3][20];
        resp_s1_entry_perm_r = _RANDOM[4'h3][21];
        resp_s1_entry_level = _RANDOM[4'h3][23:22];
        resp_s1_entry_v = _RANDOM[4'h3][25];
        resp_s1_entry_ppn = {_RANDOM[4'h3][31:26], _RANDOM[4'h4], _RANDOM[4'h5][2:0]};
        resp_s1_addr_low = _RANDOM[4'h5][5:3];
        resp_s1_ppn_low_0 = _RANDOM[4'h5][8:6];
        resp_s1_ppn_low_1 = _RANDOM[4'h5][11:9];
        resp_s1_ppn_low_2 = _RANDOM[4'h5][14:12];
        resp_s1_ppn_low_3 = _RANDOM[4'h5][17:15];
        resp_s1_ppn_low_4 = _RANDOM[4'h5][20:18];
        resp_s1_ppn_low_5 = _RANDOM[4'h5][23:21];
        resp_s1_ppn_low_6 = _RANDOM[4'h5][26:24];
        resp_s1_ppn_low_7 = _RANDOM[4'h5][29:27];
        resp_s1_valididx_0 = _RANDOM[4'h5][30];
        resp_s1_valididx_1 = _RANDOM[4'h5][31];
        resp_s1_valididx_2 = _RANDOM[4'h6][0];
        resp_s1_valididx_3 = _RANDOM[4'h6][1];
        resp_s1_valididx_4 = _RANDOM[4'h6][2];
        resp_s1_valididx_5 = _RANDOM[4'h6][3];
        resp_s1_valididx_6 = _RANDOM[4'h6][4];
        resp_s1_valididx_7 = _RANDOM[4'h6][5];
        resp_s1_pteidx_0 = _RANDOM[4'h6][6];
        resp_s1_pteidx_1 = _RANDOM[4'h6][7];
        resp_s1_pteidx_2 = _RANDOM[4'h6][8];
        resp_s1_pteidx_3 = _RANDOM[4'h6][9];
        resp_s1_pteidx_4 = _RANDOM[4'h6][10];
        resp_s1_pteidx_5 = _RANDOM[4'h6][11];
        resp_s1_pteidx_6 = _RANDOM[4'h6][12];
        resp_s1_pteidx_7 = _RANDOM[4'h6][13];
        resp_s1_pf = _RANDOM[4'h6][14];
        resp_s1_af = _RANDOM[4'h6][15];
        resp_s2_entry_tag = {_RANDOM[4'h6][31:16], _RANDOM[4'h7][21:0]};
        resp_s2_entry_vmid = _RANDOM[4'h8][19:6];
        resp_s2_entry_n = _RANDOM[4'h8][20];
        resp_s2_entry_pbmt = _RANDOM[4'h8][22:21];
        resp_s2_entry_ppn = {_RANDOM[4'h8][31:23], _RANDOM[4'h9][28:0]};
        resp_s2_entry_perm_d = _RANDOM[4'h9][29];
        resp_s2_entry_perm_a = _RANDOM[4'h9][30];
        resp_s2_entry_perm_g = _RANDOM[4'h9][31];
        resp_s2_entry_perm_u = _RANDOM[4'hA][0];
        resp_s2_entry_perm_x = _RANDOM[4'hA][1];
        resp_s2_entry_perm_w = _RANDOM[4'hA][2];
        resp_s2_entry_perm_r = _RANDOM[4'hA][3];
        resp_s2_entry_level = _RANDOM[4'hA][5:4];
        resp_s2_gpf = _RANDOM[4'hA][8];
        resp_s2_gaf = _RANDOM[4'hA][9];
        recv = _RANDOM[4'hA][10];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        sent = 1'h0;
        recv = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DelayN_1 delay (
    .clock  (clock),
    .io_in
      (io_sfence_valid | io_csr_satp_changed | io_csr_vsatp_changed
       | io_csr_hgatp_changed),
    .io_out (_delay_io_out)
  );
  assign io_tlb_req_0_ready = ~sent;
  assign io_tlb_resp_valid = recv;
  assign io_tlb_resp_bits_s2xlate = resp_s2xlate;
  assign io_tlb_resp_bits_s1_entry_tag = resp_s1_entry_tag;
  assign io_tlb_resp_bits_s1_entry_asid = resp_s1_entry_asid;
  assign io_tlb_resp_bits_s1_entry_vmid = resp_s1_entry_vmid;
  assign io_tlb_resp_bits_s1_entry_n = resp_s1_entry_n;
  assign io_tlb_resp_bits_s1_entry_pbmt = resp_s1_entry_pbmt;
  assign io_tlb_resp_bits_s1_entry_perm_d = resp_s1_entry_perm_d;
  assign io_tlb_resp_bits_s1_entry_perm_a = resp_s1_entry_perm_a;
  assign io_tlb_resp_bits_s1_entry_perm_g = resp_s1_entry_perm_g;
  assign io_tlb_resp_bits_s1_entry_perm_u = resp_s1_entry_perm_u;
  assign io_tlb_resp_bits_s1_entry_perm_x = resp_s1_entry_perm_x;
  assign io_tlb_resp_bits_s1_entry_perm_w = resp_s1_entry_perm_w;
  assign io_tlb_resp_bits_s1_entry_perm_r = resp_s1_entry_perm_r;
  assign io_tlb_resp_bits_s1_entry_level = resp_s1_entry_level;
  assign io_tlb_resp_bits_s1_entry_v = resp_s1_entry_v;
  assign io_tlb_resp_bits_s1_entry_ppn = resp_s1_entry_ppn;
  assign io_tlb_resp_bits_s1_addr_low = resp_s1_addr_low;
  assign io_tlb_resp_bits_s1_ppn_low_0 = resp_s1_ppn_low_0;
  assign io_tlb_resp_bits_s1_ppn_low_1 = resp_s1_ppn_low_1;
  assign io_tlb_resp_bits_s1_ppn_low_2 = resp_s1_ppn_low_2;
  assign io_tlb_resp_bits_s1_ppn_low_3 = resp_s1_ppn_low_3;
  assign io_tlb_resp_bits_s1_ppn_low_4 = resp_s1_ppn_low_4;
  assign io_tlb_resp_bits_s1_ppn_low_5 = resp_s1_ppn_low_5;
  assign io_tlb_resp_bits_s1_ppn_low_6 = resp_s1_ppn_low_6;
  assign io_tlb_resp_bits_s1_ppn_low_7 = resp_s1_ppn_low_7;
  assign io_tlb_resp_bits_s1_valididx_0 = resp_s1_valididx_0;
  assign io_tlb_resp_bits_s1_valididx_1 = resp_s1_valididx_1;
  assign io_tlb_resp_bits_s1_valididx_2 = resp_s1_valididx_2;
  assign io_tlb_resp_bits_s1_valididx_3 = resp_s1_valididx_3;
  assign io_tlb_resp_bits_s1_valididx_4 = resp_s1_valididx_4;
  assign io_tlb_resp_bits_s1_valididx_5 = resp_s1_valididx_5;
  assign io_tlb_resp_bits_s1_valididx_6 = resp_s1_valididx_6;
  assign io_tlb_resp_bits_s1_valididx_7 = resp_s1_valididx_7;
  assign io_tlb_resp_bits_s1_pteidx_0 = resp_s1_pteidx_0;
  assign io_tlb_resp_bits_s1_pteidx_1 = resp_s1_pteidx_1;
  assign io_tlb_resp_bits_s1_pteidx_2 = resp_s1_pteidx_2;
  assign io_tlb_resp_bits_s1_pteidx_3 = resp_s1_pteidx_3;
  assign io_tlb_resp_bits_s1_pteidx_4 = resp_s1_pteidx_4;
  assign io_tlb_resp_bits_s1_pteidx_5 = resp_s1_pteidx_5;
  assign io_tlb_resp_bits_s1_pteidx_6 = resp_s1_pteidx_6;
  assign io_tlb_resp_bits_s1_pteidx_7 = resp_s1_pteidx_7;
  assign io_tlb_resp_bits_s1_pf = resp_s1_pf;
  assign io_tlb_resp_bits_s1_af = resp_s1_af;
  assign io_tlb_resp_bits_s2_entry_tag = resp_s2_entry_tag;
  assign io_tlb_resp_bits_s2_entry_vmid = resp_s2_entry_vmid;
  assign io_tlb_resp_bits_s2_entry_n = resp_s2_entry_n;
  assign io_tlb_resp_bits_s2_entry_pbmt = resp_s2_entry_pbmt;
  assign io_tlb_resp_bits_s2_entry_ppn = resp_s2_entry_ppn;
  assign io_tlb_resp_bits_s2_entry_perm_d = resp_s2_entry_perm_d;
  assign io_tlb_resp_bits_s2_entry_perm_a = resp_s2_entry_perm_a;
  assign io_tlb_resp_bits_s2_entry_perm_g = resp_s2_entry_perm_g;
  assign io_tlb_resp_bits_s2_entry_perm_u = resp_s2_entry_perm_u;
  assign io_tlb_resp_bits_s2_entry_perm_x = resp_s2_entry_perm_x;
  assign io_tlb_resp_bits_s2_entry_perm_w = resp_s2_entry_perm_w;
  assign io_tlb_resp_bits_s2_entry_perm_r = resp_s2_entry_perm_r;
  assign io_tlb_resp_bits_s2_entry_level = resp_s2_entry_level;
  assign io_tlb_resp_bits_s2_gpf = resp_s2_gpf;
  assign io_tlb_resp_bits_s2_gaf = resp_s2_gaf;
  assign io_ptw_req_0_valid = sent;
  assign io_ptw_req_0_bits_vpn = req_vpn;
  assign io_ptw_req_0_bits_s2xlate = req_s2xlate;
  assign io_ptw_resp_ready = ~recv;
endmodule

