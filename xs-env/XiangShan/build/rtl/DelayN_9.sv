// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayN_9(
  input         clock,
  input         io_in_valid,
  input         io_in_bits_rs1,
  input         io_in_bits_rs2,
  input  [49:0] io_in_bits_addr,
  input  [15:0] io_in_bits_id,
  input         io_in_bits_flushPipe,
  input         io_in_bits_hv,
  input         io_in_bits_hg,
  output        io_out_valid,
  output        io_out_bits_rs1,
  output        io_out_bits_rs2,
  output [49:0] io_out_bits_addr,
  output [15:0] io_out_bits_id,
  output        io_out_bits_flushPipe,
  output        io_out_bits_hv,
  output        io_out_bits_hg
);

  reg        REG_valid;
  reg        REG_bits_rs1;
  reg        REG_bits_rs2;
  reg [49:0] REG_bits_addr;
  reg [15:0] REG_bits_id;
  reg        REG_bits_flushPipe;
  reg        REG_bits_hv;
  reg        REG_bits_hg;
  reg        REG_1_valid;
  reg        REG_1_bits_rs1;
  reg        REG_1_bits_rs2;
  reg [49:0] REG_1_bits_addr;
  reg [15:0] REG_1_bits_id;
  reg        REG_1_bits_flushPipe;
  reg        REG_1_bits_hv;
  reg        REG_1_bits_hg;
  always @(posedge clock) begin
    REG_valid <= io_in_valid;
    REG_bits_rs1 <= io_in_bits_rs1;
    REG_bits_rs2 <= io_in_bits_rs2;
    REG_bits_addr <= io_in_bits_addr;
    REG_bits_id <= io_in_bits_id;
    REG_bits_flushPipe <= io_in_bits_flushPipe;
    REG_bits_hv <= io_in_bits_hv;
    REG_bits_hg <= io_in_bits_hg;
    REG_1_valid <= REG_valid;
    REG_1_bits_rs1 <= REG_bits_rs1;
    REG_1_bits_rs2 <= REG_bits_rs2;
    REG_1_bits_addr <= REG_bits_addr;
    REG_1_bits_id <= REG_bits_id;
    REG_1_bits_flushPipe <= REG_bits_flushPipe;
    REG_1_bits_hv <= REG_bits_hv;
    REG_1_bits_hg <= REG_bits_hg;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_valid = _RANDOM[3'h0][0];
        REG_bits_rs1 = _RANDOM[3'h0][1];
        REG_bits_rs2 = _RANDOM[3'h0][2];
        REG_bits_addr = {_RANDOM[3'h0][31:3], _RANDOM[3'h1][20:0]};
        REG_bits_id = {_RANDOM[3'h1][31:21], _RANDOM[3'h2][4:0]};
        REG_bits_flushPipe = _RANDOM[3'h2][5];
        REG_bits_hv = _RANDOM[3'h2][6];
        REG_bits_hg = _RANDOM[3'h2][7];
        REG_1_valid = _RANDOM[3'h2][8];
        REG_1_bits_rs1 = _RANDOM[3'h2][9];
        REG_1_bits_rs2 = _RANDOM[3'h2][10];
        REG_1_bits_addr = {_RANDOM[3'h2][31:11], _RANDOM[3'h3][28:0]};
        REG_1_bits_id = {_RANDOM[3'h3][31:29], _RANDOM[3'h4][12:0]};
        REG_1_bits_flushPipe = _RANDOM[3'h4][13];
        REG_1_bits_hv = _RANDOM[3'h4][14];
        REG_1_bits_hg = _RANDOM[3'h4][15];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = REG_1_valid;
  assign io_out_bits_rs1 = REG_1_bits_rs1;
  assign io_out_bits_rs2 = REG_1_bits_rs2;
  assign io_out_bits_addr = REG_1_bits_addr;
  assign io_out_bits_id = REG_1_bits_id;
  assign io_out_bits_flushPipe = REG_1_bits_flushPipe;
  assign io_out_bits_hv = REG_1_bits_hv;
  assign io_out_bits_hg = REG_1_bits_hg;
endmodule

