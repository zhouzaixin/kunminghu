// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MLevelPermitModule(
  input         io_in_csrAccess_wen,
  input  [11:0] io_in_csrAccess_addr,
  input  [1:0]  io_in_privState_PRVM,
  input         io_in_privState_V,
  input         io_in_status_tvm,
  input         io_in_status_mstatusFSOff,
  input         io_in_status_vsstatusFSOff,
  input         io_in_status_mstatusVSOff,
  input         io_in_status_vsstatusVSOff,
  input  [31:0] io_in_xcounteren_mcounteren,
  input  [63:0] io_in_xenvcfg_menvcfg,
  input         io_in_xstateen_mstateen0_C,
  input         io_in_xstateen_mstateen0_SE0,
  input         io_in_xstateen_mstateen0_ENVCFG,
  input         io_in_xstateen_mstateen0_CSRIND,
  input         io_in_xstateen_mstateen0_AIA,
  input         io_in_xstateen_mstateen0_IMSIC,
  input         io_in_xstateen_mstateen0_CONTEXT,
  input         io_in_aia_mvienSEIE,
  output        io_out_mLevelPermit_EX_II,
  output        io_out_hasLegalWriteFcsr,
  output        io_out_hasLegalWriteVcsr
);

  wire        csrIsFp =
    io_in_csrAccess_addr == 12'h1 | io_in_csrAccess_addr == 12'h2
    | io_in_csrAccess_addr == 12'h3;
  wire        _csrIsWritableVec_T = io_in_csrAccess_addr == 12'h8;
  wire        _csrIsWritableVec_T_1 = io_in_csrAccess_addr == 12'h9;
  wire        _csrIsWritableVec_T_2 = io_in_csrAccess_addr == 12'hA;
  wire        _csrIsWritableVec_T_3 = io_in_csrAccess_addr == 12'hF;
  wire        fsEffectiveOff =
    io_in_status_mstatusFSOff & ~io_in_privState_V
    | (io_in_status_mstatusFSOff | io_in_status_vsstatusFSOff) & io_in_privState_V;
  wire        vsEffectiveOff =
    io_in_status_mstatusVSOff & ~io_in_privState_V
    | (io_in_status_mstatusVSOff | io_in_status_vsstatusVSOff) & io_in_privState_V;
  wire        rwStimecmp_EX_II_v_PrvmIsM = &io_in_privState_PRVM;
  wire        rwStimecmp_EX_II_isModeM = rwStimecmp_EX_II_v_PrvmIsM;
  wire [31:0] _accessHPM_EX_II_T_2 =
    io_in_xcounteren_mcounteren >> io_in_csrAccess_addr[4:0];
  wire        PrvmIsS = io_in_privState_PRVM == 2'h1;
  wire        rwSatp_EX_II_isModeHS = ~io_in_privState_V & PrvmIsS;
  wire        csrIsStopei = io_in_csrAccess_addr == 12'h15C;
  assign io_out_mLevelPermit_EX_II =
    (&(io_in_csrAccess_addr[11:10])) & io_in_csrAccess_wen | csrIsFp & fsEffectiveOff
    | (_csrIsWritableVec_T | _csrIsWritableVec_T_1 | _csrIsWritableVec_T_2
       | _csrIsWritableVec_T_3 | io_in_csrAccess_addr == 12'hC21) & vsEffectiveOff
    | ~rwStimecmp_EX_II_isModeM
    & (~(io_in_xcounteren_mcounteren[1]) | ~(io_in_xenvcfg_menvcfg[63]))
    & (io_in_csrAccess_addr == 12'h24D | io_in_csrAccess_addr == 12'h14D)
    | io_in_csrAccess_addr > 12'hBFF & io_in_csrAccess_addr < 12'hC20
    & ~rwStimecmp_EX_II_isModeM & ~(_accessHPM_EX_II_T_2[0]) | rwSatp_EX_II_isModeHS
    & io_in_status_tvm
    & (io_in_csrAccess_addr == 12'h180 | io_in_csrAccess_addr == 12'h680)
    | rwSatp_EX_II_isModeHS & io_in_aia_mvienSEIE & csrIsStopei
    | (io_in_csrAccess_addr == 12'h60C | io_in_csrAccess_addr == 12'h10C)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_SE0
    | (io_in_csrAccess_addr == 12'h60A | io_in_csrAccess_addr == 12'h10A)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_ENVCFG
    | (io_in_csrAccess_addr[11:3] == 9'h150 | io_in_csrAccess_addr[11:3] == 9'h128)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_CSRIND
    | (io_in_csrAccess_addr == 12'h608 | io_in_csrAccess_addr == 12'h609
       | io_in_csrAccess_addr == 12'h646 | io_in_csrAccess_addr == 12'h647
       | io_in_csrAccess_addr == 12'hEB0 | io_in_csrAccess_addr == 12'hDB0)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_AIA
    | (csrIsStopei | io_in_csrAccess_addr == 12'h25C) & ~rwStimecmp_EX_II_isModeM
    & ~io_in_xstateen_mstateen0_IMSIC
    | (io_in_csrAccess_addr == 12'h6A8 | io_in_csrAccess_addr == 12'h5A8)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_CONTEXT
    | ((|(io_in_csrAccess_addr[11:10])) & io_in_csrAccess_addr[9:8] == 2'h2
       & (&(io_in_csrAccess_addr[7:6])) | (|(io_in_csrAccess_addr[11:10]))
       & io_in_csrAccess_addr[9:8] == 2'h1 & (&(io_in_csrAccess_addr[7:6]))
       | io_in_csrAccess_addr[11:8] == 4'h8 | io_in_csrAccess_addr[11:6] == 6'h33)
    & ~rwStimecmp_EX_II_isModeM & ~io_in_xstateen_mstateen0_C;
  assign io_out_hasLegalWriteFcsr = io_in_csrAccess_wen & csrIsFp & ~fsEffectiveOff;
  assign io_out_hasLegalWriteVcsr =
    io_in_csrAccess_wen
    & (_csrIsWritableVec_T | _csrIsWritableVec_T_1 | _csrIsWritableVec_T_2
       | _csrIsWritableVec_T_3) & ~vsEffectiveOff;
endmodule

