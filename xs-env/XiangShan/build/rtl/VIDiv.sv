// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VIDiv(
  input          clock,
  input          reset,
  input          io_flush_valid,
  input          io_flush_bits_robIdx_flag,
  input  [7:0]   io_flush_bits_robIdx_value,
  input          io_flush_bits_level,
  output         io_in_ready,
  input          io_in_valid,
  input  [8:0]   io_in_bits_ctrl_fuOpType,
  input          io_in_bits_ctrl_robIdx_flag,
  input  [7:0]   io_in_bits_ctrl_robIdx_value,
  input  [7:0]   io_in_bits_ctrl_pdest,
  input          io_in_bits_ctrl_vecWen,
  input          io_in_bits_ctrl_v0Wen,
  input          io_in_bits_ctrl_vpu_vma,
  input          io_in_bits_ctrl_vpu_vta,
  input  [1:0]   io_in_bits_ctrl_vpu_vsew,
  input          io_in_bits_ctrl_vpu_vm,
  input  [7:0]   io_in_bits_ctrl_vpu_vstart,
  input  [6:0]   io_in_bits_ctrl_vpu_vuopIdx,
  input          io_in_bits_ctrl_vpu_isNarrow,
  input          io_in_bits_ctrl_vpu_isDstMask,
  input  [7:0]   io_in_bits_data_src_4,
  input  [127:0] io_in_bits_data_src_3,
  input  [127:0] io_in_bits_data_src_2,
  input  [127:0] io_in_bits_data_src_1,
  input  [127:0] io_in_bits_data_src_0,
  input          io_out_ready,
  output         io_out_valid,
  output         io_out_bits_ctrl_robIdx_flag,
  output [7:0]   io_out_bits_ctrl_robIdx_value,
  output [7:0]   io_out_bits_ctrl_pdest,
  output         io_out_bits_ctrl_vecWen,
  output         io_out_bits_ctrl_v0Wen,
  output [127:0] io_out_bits_res_data
);

  wire [127:0] _mgu_io_out_vd;
  wire         _vidiv_io_div_in_ready;
  wire         _vidiv_io_div_out_valid;
  wire [127:0] _vidiv_io_div_out_q_v;
  wire [127:0] _vidiv_io_div_out_rem_v;
  wire         _io_out_bits_perfDebugInfo_T = _vidiv_io_div_in_ready & io_in_valid;
  reg  [8:0]   outCtrl_r_fuOpType;
  reg          outCtrl_r_robIdx_flag;
  reg  [7:0]   outCtrl_r_robIdx_value;
  reg          outCtrl_r_vpu_vma;
  reg          outCtrl_r_vpu_vta;
  reg  [1:0]   outCtrl_r_vpu_vsew;
  reg          outCtrl_r_vpu_vm;
  reg  [7:0]   outCtrl_r_vpu_vstart;
  reg  [6:0]   outCtrl_r_vpu_vuopIdx;
  reg          outCtrl_r_vpu_isNarrow;
  reg          outCtrl_r_vpu_isDstMask;
  wire [8:0]   outCtrl_fuOpType =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_fuOpType : outCtrl_r_fuOpType;
  reg  [7:0]   outData_r_src_4;
  reg  [127:0] outData_r_src_3;
  reg  [127:0] outData_r_src_2;
  wire [7:0]   outData_src_4 =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_4 : outData_r_src_4;
  wire [127:0] outData_src_2 =
    _io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_2 : outData_r_src_2;
  reg          io_out_bits_ctrl_robIdx_r_flag;
  reg  [7:0]   io_out_bits_ctrl_robIdx_r_value;
  reg  [7:0]   io_out_bits_ctrl_pdest_r;
  reg          io_out_bits_ctrl_vecWen_r;
  reg          io_out_bits_ctrl_v0Wen_r;
  wire         _GEN = _vidiv_io_div_in_ready | _io_out_bits_perfDebugInfo_T;
  wire         thisRobIdx_flag =
    _GEN ? io_in_bits_ctrl_robIdx_flag : outCtrl_r_robIdx_flag;
  wire [7:0]   thisRobIdx_value =
    _GEN ? io_in_bits_ctrl_robIdx_value : outCtrl_r_robIdx_value;
  always @(posedge clock) begin
    if (_io_out_bits_perfDebugInfo_T) begin
      outCtrl_r_fuOpType <= io_in_bits_ctrl_fuOpType;
      outCtrl_r_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      outCtrl_r_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      outCtrl_r_vpu_vma <= io_in_bits_ctrl_vpu_vma;
      outCtrl_r_vpu_vta <= io_in_bits_ctrl_vpu_vta;
      outCtrl_r_vpu_vsew <= io_in_bits_ctrl_vpu_vsew;
      outCtrl_r_vpu_vm <= io_in_bits_ctrl_vpu_vm;
      outCtrl_r_vpu_vstart <= io_in_bits_ctrl_vpu_vstart;
      outCtrl_r_vpu_vuopIdx <= io_in_bits_ctrl_vpu_vuopIdx;
      outCtrl_r_vpu_isNarrow <= io_in_bits_ctrl_vpu_isNarrow;
      outCtrl_r_vpu_isDstMask <= io_in_bits_ctrl_vpu_isDstMask;
      outData_r_src_4 <= io_in_bits_data_src_4;
      outData_r_src_3 <= io_in_bits_data_src_3;
      outData_r_src_2 <= io_in_bits_data_src_2;
      io_out_bits_ctrl_robIdx_r_flag <= io_in_bits_ctrl_robIdx_flag;
      io_out_bits_ctrl_robIdx_r_value <= io_in_bits_ctrl_robIdx_value;
      io_out_bits_ctrl_pdest_r <= io_in_bits_ctrl_pdest;
      io_out_bits_ctrl_vecWen_r <= io_in_bits_ctrl_vecWen;
      io_out_bits_ctrl_v0Wen_r <= io_in_bits_ctrl_v0Wen;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:27];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1C; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        outCtrl_r_fuOpType = _RANDOM[5'h0][8:0];
        outCtrl_r_robIdx_flag = _RANDOM[5'h0][9];
        outCtrl_r_robIdx_value = _RANDOM[5'h0][17:10];
        outCtrl_r_vpu_vma = _RANDOM[5'h0][29];
        outCtrl_r_vpu_vta = _RANDOM[5'h0][30];
        outCtrl_r_vpu_vsew = {_RANDOM[5'h0][31], _RANDOM[5'h1][0]};
        outCtrl_r_vpu_vm = _RANDOM[5'h1][12];
        outCtrl_r_vpu_vstart = _RANDOM[5'h1][20:13];
        outCtrl_r_vpu_vuopIdx = _RANDOM[5'h2][7:1];
        outCtrl_r_vpu_isNarrow = _RANDOM[5'h6][24];
        outCtrl_r_vpu_isDstMask = _RANDOM[5'h6][25];
        outData_r_src_4 = {_RANDOM[5'h6][31], _RANDOM[5'h7][6:0]};
        outData_r_src_3 =
          {_RANDOM[5'h7][31:7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB][6:0]};
        outData_r_src_2 =
          {_RANDOM[5'hB][31:7],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF][6:0]};
        io_out_bits_ctrl_robIdx_r_flag = _RANDOM[5'h1B][7];
        io_out_bits_ctrl_robIdx_r_value = _RANDOM[5'h1B][15:8];
        io_out_bits_ctrl_pdest_r = _RANDOM[5'h1B][23:16];
        io_out_bits_ctrl_vecWen_r = _RANDOM[5'h1B][24];
        io_out_bits_ctrl_v0Wen_r = _RANDOM[5'h1B][25];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VectorIdiv vidiv (
    .clock            (clock),
    .reset            (reset),
    .io_sew           (io_in_bits_ctrl_vpu_vsew),
    .io_sign          (io_in_bits_ctrl_fuOpType[0]),
    .io_dividend_v    (io_in_bits_data_src_1),
    .io_divisor_v     (io_in_bits_data_src_0),
    .io_flush
      (io_flush_valid
       & (io_flush_bits_level
          & {thisRobIdx_flag,
             thisRobIdx_value} == {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value}
          | thisRobIdx_flag ^ io_flush_bits_robIdx_flag
          ^ thisRobIdx_value > io_flush_bits_robIdx_value)),
    .io_div_in_valid  (io_in_valid),
    .io_div_in_ready  (_vidiv_io_div_in_ready),
    .io_div_out_ready (io_out_ready & _vidiv_io_div_out_valid),
    .io_div_out_valid (_vidiv_io_div_out_valid),
    .io_div_out_q_v   (_vidiv_io_div_out_q_v),
    .io_div_out_rem_v (_vidiv_io_div_out_rem_v)
  );
  Mgu mgu (
    .io_in_vd
      (outCtrl_fuOpType[1] ? _vidiv_io_div_out_q_v : _vidiv_io_div_out_rem_v),
    .io_in_oldVd        (outData_src_2),
    .io_in_mask
      (outCtrl_fuOpType == 9'h84 | outCtrl_fuOpType == 9'h86
         ? 128'h0
         : (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vm : outCtrl_r_vpu_vm)
             ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
             : _io_out_bits_perfDebugInfo_T ? io_in_bits_data_src_3 : outData_r_src_3),
    .io_in_info_ta
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vta : outCtrl_r_vpu_vta),
    .io_in_info_ma
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vma : outCtrl_r_vpu_vma),
    .io_in_info_vl      (outData_src_4),
    .io_in_info_vstart
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vstart : outCtrl_r_vpu_vstart),
    .io_in_info_eew
      (_io_out_bits_perfDebugInfo_T ? io_in_bits_ctrl_vpu_vsew : outCtrl_r_vpu_vsew),
    .io_in_info_vdIdx
      (_io_out_bits_perfDebugInfo_T
         ? io_in_bits_ctrl_vpu_vuopIdx[2:0]
         : outCtrl_r_vpu_vuopIdx[2:0]),
    .io_in_info_narrow
      (_io_out_bits_perfDebugInfo_T
         ? io_in_bits_ctrl_vpu_isNarrow
         : outCtrl_r_vpu_isNarrow),
    .io_in_info_dstMask
      (_io_out_bits_perfDebugInfo_T
         ? io_in_bits_ctrl_vpu_isDstMask
         : outCtrl_r_vpu_isDstMask),
    .io_out_vd          (_mgu_io_out_vd),
    .io_out_active      (/* unused */)
  );
  assign io_in_ready = _vidiv_io_div_in_ready;
  assign io_out_valid = _vidiv_io_div_out_valid;
  assign io_out_bits_ctrl_robIdx_flag = io_out_bits_ctrl_robIdx_r_flag;
  assign io_out_bits_ctrl_robIdx_value = io_out_bits_ctrl_robIdx_r_value;
  assign io_out_bits_ctrl_pdest = io_out_bits_ctrl_pdest_r;
  assign io_out_bits_ctrl_vecWen = io_out_bits_ctrl_vecWen_r;
  assign io_out_bits_ctrl_v0Wen = io_out_bits_ctrl_v0Wen_r;
  assign io_out_bits_res_data = outData_src_4 == 8'h0 ? outData_src_2 : _mgu_io_out_vd;
endmodule

