// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Prefetcher_1(
  input         clock,
  input         reset,
  input         io_req_ready,
  output        io_req_valid,
  output [30:0] io_req_bits_tag,
  output [10:0] io_req_bits_set,
  output        io_req_bits_needT,
  output [10:0] io_req_bits_source,
  output [3:0]  io_req_bits_pfSource,
  input         io_recv_addr_valid,
  input  [63:0] io_recv_addr_bits
);

  wire        _pipe_io_in_ready;
  wire        _pftQueue_io_deq_valid;
  wire [30:0] _pftQueue_io_deq_bits_tag;
  wire [10:0] _pftQueue_io_deq_bits_set;
  wire [3:0]  _pftQueue_io_deq_bits_pfSource;
  wire        _l1_pf_io_req_valid;
  wire [30:0] _l1_pf_io_req_bits_tag;
  wire [10:0] _l1_pf_io_req_bits_set;
  reg         l1_pf_io_recv_addr_v_last_REG;
  reg  [63:0] l1_pf_io_recv_addr_d;
  reg         l1_pf_io_recv_addr_v_last_REG_1;
  reg  [63:0] l1_pf_io_recv_addr_d_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      l1_pf_io_recv_addr_v_last_REG <= 1'h0;
      l1_pf_io_recv_addr_v_last_REG_1 <= 1'h0;
    end
    else begin
      l1_pf_io_recv_addr_v_last_REG <= io_recv_addr_valid;
      l1_pf_io_recv_addr_v_last_REG_1 <= l1_pf_io_recv_addr_v_last_REG;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_recv_addr_valid)
      l1_pf_io_recv_addr_d <= io_recv_addr_bits;
    if (l1_pf_io_recv_addr_v_last_REG)
      l1_pf_io_recv_addr_d_1 <= l1_pf_io_recv_addr_d;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        l1_pf_io_recv_addr_v_last_REG = _RANDOM[3'h0][0];
        l1_pf_io_recv_addr_d = {_RANDOM[3'h0][31:1], _RANDOM[3'h1], _RANDOM[3'h2][0]};
        l1_pf_io_recv_addr_v_last_REG_1 = _RANDOM[3'h2][1];
        l1_pf_io_recv_addr_d_1 = {_RANDOM[3'h2][31:2], _RANDOM[3'h3], _RANDOM[3'h4][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        l1_pf_io_recv_addr_v_last_REG = 1'h0;
        l1_pf_io_recv_addr_v_last_REG_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  PrefetchReceiver_1 l1_pf (
    .io_req_valid       (_l1_pf_io_req_valid),
    .io_req_bits_tag    (_l1_pf_io_req_bits_tag),
    .io_req_bits_set    (_l1_pf_io_req_bits_set),
    .io_recv_addr_valid (l1_pf_io_recv_addr_v_last_REG_1),
    .io_recv_addr_bits  (l1_pf_io_recv_addr_d_1)
  );
  PrefetchQueue_1 pftQueue (
    .clock                (clock),
    .reset                (reset),
    .io_enq_valid         (_l1_pf_io_req_valid),
    .io_enq_bits_tag      (_l1_pf_io_req_bits_tag),
    .io_enq_bits_set      (_l1_pf_io_req_bits_set),
    .io_deq_ready         (_pipe_io_in_ready),
    .io_deq_valid         (_pftQueue_io_deq_valid),
    .io_deq_bits_tag      (_pftQueue_io_deq_bits_tag),
    .io_deq_bits_set      (_pftQueue_io_deq_bits_set),
    .io_deq_bits_pfSource (_pftQueue_io_deq_bits_pfSource)
  );
  Pipeline_12 pipe (
    .clock                (clock),
    .reset                (reset),
    .io_in_ready          (_pipe_io_in_ready),
    .io_in_valid          (_pftQueue_io_deq_valid),
    .io_in_bits_tag       (_pftQueue_io_deq_bits_tag),
    .io_in_bits_set       (_pftQueue_io_deq_bits_set),
    .io_in_bits_pfSource  (_pftQueue_io_deq_bits_pfSource),
    .io_out_ready         (io_req_ready),
    .io_out_valid         (io_req_valid),
    .io_out_bits_tag      (io_req_bits_tag),
    .io_out_bits_set      (io_req_bits_set),
    .io_out_bits_needT    (io_req_bits_needT),
    .io_out_bits_source   (io_req_bits_source),
    .io_out_bits_pfSource (io_req_bits_pfSource)
  );
endmodule

