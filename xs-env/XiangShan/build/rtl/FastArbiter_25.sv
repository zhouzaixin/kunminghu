// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FastArbiter_25(
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [5:0]  io_in_0_bits_hartid,
  input  [31:0] io_in_0_bits_set,
  input  [3:0]  io_in_0_bits_way,
  input         io_in_0_bits_wmode,
  input  [41:0] io_in_0_bits_rawData_0,
  input  [41:0] io_in_0_bits_rawData_1,
  input  [41:0] io_in_0_bits_rawData_2,
  output        io_out_valid,
  output [5:0]  io_out_bits_hartid,
  output [31:0] io_out_bits_set,
  output [3:0]  io_out_bits_way,
  output        io_out_bits_wmode,
  output [41:0] io_out_bits_rawData_0,
  output [41:0] io_out_bits_rawData_1,
  output [41:0] io_out_bits_rawData_2
);

  assign io_in_0_ready = io_in_0_valid;
  assign io_out_valid = io_in_0_valid;
  assign io_out_bits_hartid = io_in_0_bits_hartid;
  assign io_out_bits_set = io_in_0_bits_set;
  assign io_out_bits_way = io_in_0_bits_way;
  assign io_out_bits_wmode = io_in_0_bits_wmode;
  assign io_out_bits_rawData_0 = io_in_0_bits_rawData_0;
  assign io_out_bits_rawData_1 = io_in_0_bits_rawData_1;
  assign io_out_bits_rawData_2 = io_in_0_bits_rawData_2;
endmodule

