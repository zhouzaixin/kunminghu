// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SMSTrainFilter(
  input         clock,
  input         reset,
  input         io_ld_in_0_valid,
  input  [49:0] io_ld_in_0_bits_uop_pc,
  input         io_ld_in_0_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_0_bits_uop_robIdx_value,
  input  [49:0] io_ld_in_0_bits_vaddr,
  input  [47:0] io_ld_in_0_bits_paddr,
  input         io_ld_in_1_valid,
  input  [49:0] io_ld_in_1_bits_uop_pc,
  input         io_ld_in_1_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_1_bits_uop_robIdx_value,
  input  [49:0] io_ld_in_1_bits_vaddr,
  input  [47:0] io_ld_in_1_bits_paddr,
  input         io_ld_in_2_valid,
  input  [49:0] io_ld_in_2_bits_uop_pc,
  input         io_ld_in_2_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_2_bits_uop_robIdx_value,
  input  [49:0] io_ld_in_2_bits_vaddr,
  input  [47:0] io_ld_in_2_bits_paddr,
  output        io_train_req_valid,
  output [49:0] io_train_req_bits_vaddr,
  output [47:0] io_train_req_bits_paddr,
  output [49:0] io_train_req_bits_pc
);

  reg  [49:0]      entries_0_vaddr;
  reg  [47:0]      entries_0_paddr;
  reg  [49:0]      entries_0_pc;
  reg  [49:0]      entries_1_vaddr;
  reg  [47:0]      entries_1_paddr;
  reg  [49:0]      entries_1_pc;
  reg  [49:0]      entries_2_vaddr;
  reg  [47:0]      entries_2_paddr;
  reg  [49:0]      entries_2_pc;
  reg  [49:0]      entries_3_vaddr;
  reg  [47:0]      entries_3_paddr;
  reg  [49:0]      entries_3_pc;
  reg  [49:0]      entries_4_vaddr;
  reg  [47:0]      entries_4_paddr;
  reg  [49:0]      entries_4_pc;
  reg  [49:0]      entries_5_vaddr;
  reg  [47:0]      entries_5_paddr;
  reg  [49:0]      entries_5_pc;
  reg  [49:0]      entries_6_vaddr;
  reg  [47:0]      entries_6_paddr;
  reg  [49:0]      entries_6_pc;
  reg  [49:0]      entries_7_vaddr;
  reg  [47:0]      entries_7_paddr;
  reg  [49:0]      entries_7_pc;
  reg              valids_0;
  reg              valids_1;
  reg              valids_2;
  reg              valids_3;
  reg              valids_4;
  reg              valids_5;
  reg              valids_6;
  reg              valids_7;
  reg              enqPtrExt_0_flag;
  reg  [2:0]       enqPtrExt_0_value;
  reg              enqPtrExt_1_flag;
  reg  [2:0]       enqPtrExt_1_value;
  reg              enqPtrExt_2_flag;
  reg  [2:0]       enqPtrExt_2_value;
  reg              enqPtrExt_3_flag;
  reg  [2:0]       enqPtrExt_3_value;
  reg              enqPtrExt_4_flag;
  reg  [2:0]       enqPtrExt_4_value;
  reg              deqPtrExt_flag;
  reg  [2:0]       deqPtrExt_value;
  reg              ld_reorder_res_0_1_0_valid;
  reg  [49:0]      ld_reorder_res_0_1_0_bits_uop_pc;
  reg              ld_reorder_res_0_1_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_0_bits_uop_robIdx_value;
  reg  [49:0]      ld_reorder_res_0_1_0_bits_vaddr;
  reg  [47:0]      ld_reorder_res_0_1_0_bits_paddr;
  reg              ld_reorder_res_0_1_1_valid;
  reg  [49:0]      ld_reorder_res_0_1_1_bits_uop_pc;
  reg              ld_reorder_res_0_1_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_1_bits_uop_robIdx_value;
  reg  [49:0]      ld_reorder_res_0_1_1_bits_vaddr;
  reg  [47:0]      ld_reorder_res_0_1_1_bits_paddr;
  reg              ld_reorder_res_0_1_2_valid;
  reg  [49:0]      ld_reorder_res_0_1_2_bits_uop_pc;
  reg              ld_reorder_res_0_1_2_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_2_bits_uop_robIdx_value;
  reg  [49:0]      ld_reorder_res_0_1_2_bits_vaddr;
  reg  [47:0]      ld_reorder_res_0_1_2_bits_paddr;
  reg              ld_reorder_res_1_2_0_valid;
  reg  [49:0]      ld_reorder_res_1_2_0_bits_uop_pc;
  reg              ld_reorder_res_1_2_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_1_2_0_bits_uop_robIdx_value;
  reg  [49:0]      ld_reorder_res_1_2_0_bits_vaddr;
  reg  [47:0]      ld_reorder_res_1_2_0_bits_paddr;
  reg              ld_reorder_res_1_2_1_valid;
  reg  [49:0]      ld_reorder_res_1_2_1_bits_uop_pc;
  reg              ld_reorder_res_1_2_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_1_2_1_bits_uop_robIdx_value;
  reg  [49:0]      ld_reorder_res_1_2_1_bits_vaddr;
  reg  [47:0]      ld_reorder_res_1_2_1_bits_paddr;
  reg              ld_reorder_res_1_2_2_valid;
  reg  [49:0]      ld_reorder_res_1_2_2_bits_uop_pc;
  reg  [49:0]      ld_reorder_res_1_2_2_bits_vaddr;
  reg  [47:0]      ld_reorder_res_1_2_2_bits_paddr;
  reg              ld_reorder_0_valid;
  reg  [49:0]      ld_reorder_0_bits_uop_pc;
  reg  [49:0]      ld_reorder_0_bits_vaddr;
  reg  [47:0]      ld_reorder_0_bits_paddr;
  reg              ld_reorder_1_valid;
  reg  [49:0]      ld_reorder_1_bits_uop_pc;
  reg  [49:0]      ld_reorder_1_bits_vaddr;
  reg  [47:0]      ld_reorder_1_bits_paddr;
  reg              ld_reorder_2_valid;
  reg  [49:0]      ld_reorder_2_bits_uop_pc;
  reg  [49:0]      ld_reorder_2_bits_vaddr;
  reg  [47:0]      ld_reorder_2_bits_paddr;
  wire             _GEN = deqPtrExt_value == 3'h0;
  wire [7:0]       _GEN_0 =
    {{valids_7},
     {valids_6},
     {valids_5},
     {valids_4},
     {valids_3},
     {valids_2},
     {valids_1},
     {_GEN & valids_0}};
  wire             io_train_req_valid_0 = _GEN_0[deqPtrExt_value];
  wire [7:0][49:0] _GEN_1 =
    {{entries_7_vaddr},
     {entries_6_vaddr},
     {entries_5_vaddr},
     {entries_4_vaddr},
     {entries_3_vaddr},
     {entries_2_vaddr},
     {entries_1_vaddr},
     {entries_0_vaddr}};
  wire [7:0][47:0] _GEN_2 =
    {{entries_7_paddr},
     {entries_6_paddr},
     {entries_5_paddr},
     {entries_4_paddr},
     {entries_3_paddr},
     {entries_2_paddr},
     {entries_1_paddr},
     {entries_0_paddr}};
  wire [7:0][49:0] _GEN_3 =
    {{entries_7_pc},
     {entries_6_pc},
     {entries_5_pc},
     {entries_4_pc},
     {entries_3_pc},
     {entries_2_pc},
     {entries_1_pc},
     {entries_0_pc}};
  wire [3:0]       _deqPtrExt_new_ptr_T_1 = 4'({deqPtrExt_flag, deqPtrExt_value} + 4'h1);
  wire             needAlloc_0 =
    ld_reorder_0_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]}} == 8'h0;
  wire             canAlloc_0 =
    needAlloc_0
    & (enqPtrExt_0_flag ^ deqPtrExt_flag ^ enqPtrExt_0_value >= deqPtrExt_value);
  wire             _GEN_4 = canAlloc_0 & enqPtrExt_0_value == 3'h0;
  wire             _GEN_5 = canAlloc_0 & enqPtrExt_0_value == 3'h1;
  wire             _GEN_6 = canAlloc_0 & enqPtrExt_0_value == 3'h2;
  wire             _GEN_7 = canAlloc_0 & enqPtrExt_0_value == 3'h3;
  wire             _GEN_8 = canAlloc_0 & enqPtrExt_0_value == 3'h4;
  wire             _GEN_9 = canAlloc_0 & enqPtrExt_0_value == 3'h5;
  wire             _GEN_10 = canAlloc_0 & enqPtrExt_0_value == 3'h6;
  wire             _GEN_11 = canAlloc_0 & (&enqPtrExt_0_value);
  wire             needAlloc_1 =
    ld_reorder_1_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]}} == 8'h0
    & ~(ld_reorder_0_valid
        & {ld_reorder_0_bits_vaddr[20:16] ^ ld_reorder_0_bits_vaddr[25:21]
             ^ ld_reorder_0_bits_vaddr[30:26],
           ld_reorder_0_bits_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                                ^ ld_reorder_1_bits_vaddr[25:21]
                                                ^ ld_reorder_1_bits_vaddr[30:26],
                                              ld_reorder_1_bits_vaddr[15:6]});
  wire [2:0]       _GEN_12 = {2'h0, needAlloc_0};
  wire [7:0]       _GEN_13 =
    {{enqPtrExt_0_flag},
     {enqPtrExt_0_flag},
     {enqPtrExt_0_flag},
     {enqPtrExt_4_flag},
     {enqPtrExt_3_flag},
     {enqPtrExt_2_flag},
     {enqPtrExt_1_flag},
     {enqPtrExt_0_flag}};
  wire [7:0][2:0]  _GEN_14 =
    {{enqPtrExt_0_value},
     {enqPtrExt_0_value},
     {enqPtrExt_0_value},
     {enqPtrExt_4_value},
     {enqPtrExt_3_value},
     {enqPtrExt_2_value},
     {enqPtrExt_1_value},
     {enqPtrExt_0_value}};
  wire             canAlloc_1 =
    needAlloc_1
    & (_GEN_13[_GEN_12] ^ deqPtrExt_flag ^ _GEN_14[_GEN_12] >= deqPtrExt_value);
  wire             _GEN_15 = _GEN_14[_GEN_12] == 3'h0;
  wire             _GEN_16 = _GEN_14[_GEN_12] == 3'h1;
  wire             _GEN_17 = _GEN_14[_GEN_12] == 3'h2;
  wire             _GEN_18 = _GEN_14[_GEN_12] == 3'h3;
  wire             _GEN_19 = _GEN_14[_GEN_12] == 3'h4;
  wire             _GEN_20 = _GEN_14[_GEN_12] == 3'h5;
  wire             _GEN_21 = _GEN_14[_GEN_12] == 3'h6;
  wire [2:0]       _GEN_22 = {1'h0, 2'({1'h0, needAlloc_0} + {1'h0, needAlloc_1})};
  wire             canAlloc_2 =
    ld_reorder_2_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]}} == 8'h0
    & {ld_reorder_0_valid
         & {ld_reorder_0_bits_vaddr[20:16] ^ ld_reorder_0_bits_vaddr[25:21]
              ^ ld_reorder_0_bits_vaddr[30:26],
            ld_reorder_0_bits_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                                 ^ ld_reorder_2_bits_vaddr[25:21]
                                                 ^ ld_reorder_2_bits_vaddr[30:26],
                                               ld_reorder_2_bits_vaddr[15:6]},
       ld_reorder_1_valid
         & {ld_reorder_1_bits_vaddr[20:16] ^ ld_reorder_1_bits_vaddr[25:21]
              ^ ld_reorder_1_bits_vaddr[30:26],
            ld_reorder_1_bits_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                                 ^ ld_reorder_2_bits_vaddr[25:21]
                                                 ^ ld_reorder_2_bits_vaddr[30:26],
                                               ld_reorder_2_bits_vaddr[15:6]}} == 2'h0
    & (_GEN_13[_GEN_22] ^ deqPtrExt_flag ^ _GEN_14[_GEN_22] >= deqPtrExt_value);
  wire             _GEN_23 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h0;
  wire             _GEN_24 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h1;
  wire             _GEN_25 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h2;
  wire             _GEN_26 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h3;
  wire             _GEN_27 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h4;
  wire             _GEN_28 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h5;
  wire             _GEN_29 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h6;
  wire             _GEN_30 = canAlloc_2 & (&_GEN_14[_GEN_22]);
  wire [3:0]       _GEN_31 =
    {1'h0, 3'({1'h0, 2'({1'h0, canAlloc_0} + {1'h0, canAlloc_1})} + {2'h0, canAlloc_2})};
  wire [3:0]       _enqPtrExt_0_new_ptr_T_1 =
    4'({enqPtrExt_0_flag, enqPtrExt_0_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_1_new_ptr_T_1 =
    4'({enqPtrExt_1_flag, enqPtrExt_1_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_2_new_ptr_T_1 =
    4'({enqPtrExt_2_flag, enqPtrExt_2_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_3_new_ptr_T_1 =
    4'({enqPtrExt_3_flag, enqPtrExt_3_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_4_new_ptr_T_1 =
    4'({enqPtrExt_4_flag, enqPtrExt_4_value} + _GEN_31);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      entries_0_vaddr <= 50'h0;
      entries_0_paddr <= 48'h0;
      entries_0_pc <= 50'h0;
      entries_1_vaddr <= 50'h0;
      entries_1_paddr <= 48'h0;
      entries_1_pc <= 50'h0;
      entries_2_vaddr <= 50'h0;
      entries_2_paddr <= 48'h0;
      entries_2_pc <= 50'h0;
      entries_3_vaddr <= 50'h0;
      entries_3_paddr <= 48'h0;
      entries_3_pc <= 50'h0;
      entries_4_vaddr <= 50'h0;
      entries_4_paddr <= 48'h0;
      entries_4_pc <= 50'h0;
      entries_5_vaddr <= 50'h0;
      entries_5_paddr <= 48'h0;
      entries_5_pc <= 50'h0;
      entries_6_vaddr <= 50'h0;
      entries_6_paddr <= 48'h0;
      entries_6_pc <= 50'h0;
      entries_7_vaddr <= 50'h0;
      entries_7_paddr <= 48'h0;
      entries_7_pc <= 50'h0;
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      valids_4 <= 1'h0;
      valids_5 <= 1'h0;
      valids_6 <= 1'h0;
      valids_7 <= 1'h0;
      enqPtrExt_0_flag <= 1'h0;
      enqPtrExt_0_value <= 3'h0;
      enqPtrExt_1_flag <= 1'h0;
      enqPtrExt_1_value <= 3'h1;
      enqPtrExt_2_flag <= 1'h0;
      enqPtrExt_2_value <= 3'h2;
      enqPtrExt_3_flag <= 1'h0;
      enqPtrExt_3_value <= 3'h3;
      enqPtrExt_4_flag <= 1'h0;
      enqPtrExt_4_value <= 3'h4;
      deqPtrExt_flag <= 1'h0;
      deqPtrExt_value <= 3'h0;
    end
    else begin
      if (_GEN_23) begin
        entries_0_vaddr <= ld_reorder_2_bits_vaddr;
        entries_0_paddr <= ld_reorder_2_bits_paddr;
        entries_0_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_15) begin
        entries_0_vaddr <= ld_reorder_1_bits_vaddr;
        entries_0_paddr <= ld_reorder_1_bits_paddr;
        entries_0_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_4) begin
        entries_0_vaddr <= ld_reorder_0_bits_vaddr;
        entries_0_paddr <= ld_reorder_0_bits_paddr;
        entries_0_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_24) begin
        entries_1_vaddr <= ld_reorder_2_bits_vaddr;
        entries_1_paddr <= ld_reorder_2_bits_paddr;
        entries_1_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_16) begin
        entries_1_vaddr <= ld_reorder_1_bits_vaddr;
        entries_1_paddr <= ld_reorder_1_bits_paddr;
        entries_1_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_5) begin
        entries_1_vaddr <= ld_reorder_0_bits_vaddr;
        entries_1_paddr <= ld_reorder_0_bits_paddr;
        entries_1_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_25) begin
        entries_2_vaddr <= ld_reorder_2_bits_vaddr;
        entries_2_paddr <= ld_reorder_2_bits_paddr;
        entries_2_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_17) begin
        entries_2_vaddr <= ld_reorder_1_bits_vaddr;
        entries_2_paddr <= ld_reorder_1_bits_paddr;
        entries_2_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_6) begin
        entries_2_vaddr <= ld_reorder_0_bits_vaddr;
        entries_2_paddr <= ld_reorder_0_bits_paddr;
        entries_2_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_26) begin
        entries_3_vaddr <= ld_reorder_2_bits_vaddr;
        entries_3_paddr <= ld_reorder_2_bits_paddr;
        entries_3_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_18) begin
        entries_3_vaddr <= ld_reorder_1_bits_vaddr;
        entries_3_paddr <= ld_reorder_1_bits_paddr;
        entries_3_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_7) begin
        entries_3_vaddr <= ld_reorder_0_bits_vaddr;
        entries_3_paddr <= ld_reorder_0_bits_paddr;
        entries_3_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_27) begin
        entries_4_vaddr <= ld_reorder_2_bits_vaddr;
        entries_4_paddr <= ld_reorder_2_bits_paddr;
        entries_4_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_19) begin
        entries_4_vaddr <= ld_reorder_1_bits_vaddr;
        entries_4_paddr <= ld_reorder_1_bits_paddr;
        entries_4_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_8) begin
        entries_4_vaddr <= ld_reorder_0_bits_vaddr;
        entries_4_paddr <= ld_reorder_0_bits_paddr;
        entries_4_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_28) begin
        entries_5_vaddr <= ld_reorder_2_bits_vaddr;
        entries_5_paddr <= ld_reorder_2_bits_paddr;
        entries_5_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_20) begin
        entries_5_vaddr <= ld_reorder_1_bits_vaddr;
        entries_5_paddr <= ld_reorder_1_bits_paddr;
        entries_5_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_9) begin
        entries_5_vaddr <= ld_reorder_0_bits_vaddr;
        entries_5_paddr <= ld_reorder_0_bits_paddr;
        entries_5_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_29) begin
        entries_6_vaddr <= ld_reorder_2_bits_vaddr;
        entries_6_paddr <= ld_reorder_2_bits_paddr;
        entries_6_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_21) begin
        entries_6_vaddr <= ld_reorder_1_bits_vaddr;
        entries_6_paddr <= ld_reorder_1_bits_paddr;
        entries_6_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_10) begin
        entries_6_vaddr <= ld_reorder_0_bits_vaddr;
        entries_6_paddr <= ld_reorder_0_bits_paddr;
        entries_6_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_30) begin
        entries_7_vaddr <= ld_reorder_2_bits_vaddr;
        entries_7_paddr <= ld_reorder_2_bits_paddr;
        entries_7_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & (&_GEN_14[_GEN_12])) begin
        entries_7_vaddr <= ld_reorder_1_bits_vaddr;
        entries_7_paddr <= ld_reorder_1_bits_paddr;
        entries_7_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_11) begin
        entries_7_vaddr <= ld_reorder_0_bits_vaddr;
        entries_7_paddr <= ld_reorder_0_bits_paddr;
        entries_7_pc <= ld_reorder_0_bits_uop_pc;
      end
      valids_0 <=
        ~(io_train_req_valid_0 & _GEN)
        & (_GEN_23 | (canAlloc_1 ? _GEN_15 | _GEN_4 | valids_0 : _GEN_4 | valids_0));
      valids_1 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h1)
        & (_GEN_24 | (canAlloc_1 ? _GEN_16 | _GEN_5 | valids_1 : _GEN_5 | valids_1));
      valids_2 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h2)
        & (_GEN_25 | (canAlloc_1 ? _GEN_17 | _GEN_6 | valids_2 : _GEN_6 | valids_2));
      valids_3 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h3)
        & (_GEN_26 | (canAlloc_1 ? _GEN_18 | _GEN_7 | valids_3 : _GEN_7 | valids_3));
      valids_4 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h4)
        & (_GEN_27 | (canAlloc_1 ? _GEN_19 | _GEN_8 | valids_4 : _GEN_8 | valids_4));
      valids_5 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h5)
        & (_GEN_28 | (canAlloc_1 ? _GEN_20 | _GEN_9 | valids_5 : _GEN_9 | valids_5));
      valids_6 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h6)
        & (_GEN_29 | (canAlloc_1 ? _GEN_21 | _GEN_10 | valids_6 : _GEN_10 | valids_6));
      valids_7 <=
        ~(io_train_req_valid_0 & (&deqPtrExt_value))
        & (_GEN_30
           | (canAlloc_1
                ? (&_GEN_14[_GEN_12]) | _GEN_11 | valids_7
                : _GEN_11 | valids_7));
      if (|{canAlloc_2, canAlloc_1, canAlloc_0}) begin
        enqPtrExt_0_flag <= _enqPtrExt_0_new_ptr_T_1[3];
        enqPtrExt_0_value <= _enqPtrExt_0_new_ptr_T_1[2:0];
        enqPtrExt_1_flag <= _enqPtrExt_1_new_ptr_T_1[3];
        enqPtrExt_1_value <= _enqPtrExt_1_new_ptr_T_1[2:0];
        enqPtrExt_2_flag <= _enqPtrExt_2_new_ptr_T_1[3];
        enqPtrExt_2_value <= _enqPtrExt_2_new_ptr_T_1[2:0];
        enqPtrExt_3_flag <= _enqPtrExt_3_new_ptr_T_1[3];
        enqPtrExt_3_value <= _enqPtrExt_3_new_ptr_T_1[2:0];
        enqPtrExt_4_flag <= _enqPtrExt_4_new_ptr_T_1[3];
        enqPtrExt_4_value <= _enqPtrExt_4_new_ptr_T_1[2:0];
      end
      if (io_train_req_valid_0) begin
        deqPtrExt_flag <= _deqPtrExt_new_ptr_T_1[3];
        deqPtrExt_value <= _deqPtrExt_new_ptr_T_1[2:0];
      end
    end
  end // always @(posedge, posedge)
  wire             ld_reorder_tmp_source_1_older =
    (&{io_ld_in_0_valid, io_ld_in_1_valid})
    & (io_ld_in_1_bits_uop_robIdx_flag ^ io_ld_in_0_bits_uop_robIdx_flag
       ^ io_ld_in_1_bits_uop_robIdx_value < io_ld_in_0_bits_uop_robIdx_value);
  wire             ld_reorder_tmp_1_source_1_older =
    (&{ld_reorder_res_0_1_1_valid, ld_reorder_res_0_1_2_valid})
    & (ld_reorder_res_0_1_2_bits_uop_robIdx_flag
       ^ ld_reorder_res_0_1_1_bits_uop_robIdx_flag
       ^ ld_reorder_res_0_1_2_bits_uop_robIdx_value < ld_reorder_res_0_1_1_bits_uop_robIdx_value);
  wire             ld_reorder_tmp_2_source_1_older =
    (&{ld_reorder_res_1_2_0_valid, ld_reorder_res_1_2_1_valid})
    & (ld_reorder_res_1_2_1_bits_uop_robIdx_flag
       ^ ld_reorder_res_1_2_0_bits_uop_robIdx_flag
       ^ ld_reorder_res_1_2_1_bits_uop_robIdx_value < ld_reorder_res_1_2_0_bits_uop_robIdx_value);
  always @(posedge clock) begin
    ld_reorder_res_0_1_0_valid <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_valid : io_ld_in_0_valid;
    ld_reorder_res_0_1_0_bits_uop_pc <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_uop_pc : io_ld_in_0_bits_uop_pc;
    ld_reorder_res_0_1_0_bits_uop_robIdx_flag <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_flag
        : io_ld_in_0_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_0_bits_uop_robIdx_value <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_value
        : io_ld_in_0_bits_uop_robIdx_value;
    ld_reorder_res_0_1_0_bits_vaddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_vaddr : io_ld_in_0_bits_vaddr;
    ld_reorder_res_0_1_0_bits_paddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_paddr : io_ld_in_0_bits_paddr;
    ld_reorder_res_0_1_1_valid <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_valid : io_ld_in_1_valid;
    ld_reorder_res_0_1_1_bits_uop_pc <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_uop_pc : io_ld_in_1_bits_uop_pc;
    ld_reorder_res_0_1_1_bits_uop_robIdx_flag <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_flag
        : io_ld_in_1_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_1_bits_uop_robIdx_value <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_value
        : io_ld_in_1_bits_uop_robIdx_value;
    ld_reorder_res_0_1_1_bits_vaddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_vaddr : io_ld_in_1_bits_vaddr;
    ld_reorder_res_0_1_1_bits_paddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_paddr : io_ld_in_1_bits_paddr;
    ld_reorder_res_0_1_2_valid <= io_ld_in_2_valid;
    ld_reorder_res_0_1_2_bits_uop_pc <= io_ld_in_2_bits_uop_pc;
    ld_reorder_res_0_1_2_bits_uop_robIdx_flag <= io_ld_in_2_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_2_bits_uop_robIdx_value <= io_ld_in_2_bits_uop_robIdx_value;
    ld_reorder_res_0_1_2_bits_vaddr <= io_ld_in_2_bits_vaddr;
    ld_reorder_res_0_1_2_bits_paddr <= io_ld_in_2_bits_paddr;
    ld_reorder_res_1_2_0_valid <= ld_reorder_res_0_1_0_valid;
    ld_reorder_res_1_2_0_bits_uop_pc <= ld_reorder_res_0_1_0_bits_uop_pc;
    ld_reorder_res_1_2_0_bits_uop_robIdx_flag <=
      ld_reorder_res_0_1_0_bits_uop_robIdx_flag;
    ld_reorder_res_1_2_0_bits_uop_robIdx_value <=
      ld_reorder_res_0_1_0_bits_uop_robIdx_value;
    ld_reorder_res_1_2_0_bits_vaddr <= ld_reorder_res_0_1_0_bits_vaddr;
    ld_reorder_res_1_2_0_bits_paddr <= ld_reorder_res_0_1_0_bits_paddr;
    ld_reorder_res_1_2_1_valid <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_valid
        : ld_reorder_res_0_1_1_valid;
    ld_reorder_res_1_2_1_bits_uop_pc <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_pc
        : ld_reorder_res_0_1_1_bits_uop_pc;
    ld_reorder_res_1_2_1_bits_uop_robIdx_flag <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_robIdx_flag
        : ld_reorder_res_0_1_1_bits_uop_robIdx_flag;
    ld_reorder_res_1_2_1_bits_uop_robIdx_value <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_robIdx_value
        : ld_reorder_res_0_1_1_bits_uop_robIdx_value;
    ld_reorder_res_1_2_1_bits_vaddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_vaddr
        : ld_reorder_res_0_1_1_bits_vaddr;
    ld_reorder_res_1_2_1_bits_paddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_paddr
        : ld_reorder_res_0_1_1_bits_paddr;
    ld_reorder_res_1_2_2_valid <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_valid
        : ld_reorder_res_0_1_2_valid;
    ld_reorder_res_1_2_2_bits_uop_pc <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_uop_pc
        : ld_reorder_res_0_1_2_bits_uop_pc;
    ld_reorder_res_1_2_2_bits_vaddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_vaddr
        : ld_reorder_res_0_1_2_bits_vaddr;
    ld_reorder_res_1_2_2_bits_paddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_paddr
        : ld_reorder_res_0_1_2_bits_paddr;
    ld_reorder_0_valid <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_valid
        : ld_reorder_res_1_2_0_valid;
    ld_reorder_0_bits_uop_pc <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_uop_pc
        : ld_reorder_res_1_2_0_bits_uop_pc;
    ld_reorder_0_bits_vaddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_vaddr
        : ld_reorder_res_1_2_0_bits_vaddr;
    ld_reorder_0_bits_paddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_paddr
        : ld_reorder_res_1_2_0_bits_paddr;
    ld_reorder_1_valid <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_valid
        : ld_reorder_res_1_2_1_valid;
    ld_reorder_1_bits_uop_pc <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_uop_pc
        : ld_reorder_res_1_2_1_bits_uop_pc;
    ld_reorder_1_bits_vaddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_vaddr
        : ld_reorder_res_1_2_1_bits_vaddr;
    ld_reorder_1_bits_paddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_paddr
        : ld_reorder_res_1_2_1_bits_paddr;
    ld_reorder_2_valid <= ld_reorder_res_1_2_2_valid;
    ld_reorder_2_bits_uop_pc <= ld_reorder_res_1_2_2_bits_uop_pc;
    ld_reorder_2_bits_vaddr <= ld_reorder_res_1_2_2_bits_vaddr;
    ld_reorder_2_bits_paddr <= ld_reorder_res_1_2_2_bits_paddr;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:570];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [9:0] i = 10'h0; i < 10'h23B; i += 10'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_vaddr = {_RANDOM[10'h0], _RANDOM[10'h1][17:0]};
        entries_0_paddr = {_RANDOM[10'h1][31:18], _RANDOM[10'h2], _RANDOM[10'h3][1:0]};
        entries_0_pc = {_RANDOM[10'h3][31:2], _RANDOM[10'h4][19:0]};
        entries_1_vaddr = {_RANDOM[10'h4][31:22], _RANDOM[10'h5], _RANDOM[10'h6][7:0]};
        entries_1_paddr = {_RANDOM[10'h6][31:8], _RANDOM[10'h7][23:0]};
        entries_1_pc = {_RANDOM[10'h7][31:24], _RANDOM[10'h8], _RANDOM[10'h9][9:0]};
        entries_2_vaddr = {_RANDOM[10'h9][31:12], _RANDOM[10'hA][29:0]};
        entries_2_paddr = {_RANDOM[10'hA][31:30], _RANDOM[10'hB], _RANDOM[10'hC][13:0]};
        entries_2_pc = {_RANDOM[10'hC][31:14], _RANDOM[10'hD]};
        entries_3_vaddr = {_RANDOM[10'hE][31:2], _RANDOM[10'hF][19:0]};
        entries_3_paddr = {_RANDOM[10'hF][31:20], _RANDOM[10'h10], _RANDOM[10'h11][3:0]};
        entries_3_pc = {_RANDOM[10'h11][31:4], _RANDOM[10'h12][21:0]};
        entries_4_vaddr = {_RANDOM[10'h12][31:24], _RANDOM[10'h13], _RANDOM[10'h14][9:0]};
        entries_4_paddr = {_RANDOM[10'h14][31:10], _RANDOM[10'h15][25:0]};
        entries_4_pc = {_RANDOM[10'h15][31:26], _RANDOM[10'h16], _RANDOM[10'h17][11:0]};
        entries_5_vaddr = {_RANDOM[10'h17][31:14], _RANDOM[10'h18]};
        entries_5_paddr = {_RANDOM[10'h19], _RANDOM[10'h1A][15:0]};
        entries_5_pc = {_RANDOM[10'h1A][31:16], _RANDOM[10'h1B], _RANDOM[10'h1C][1:0]};
        entries_6_vaddr = {_RANDOM[10'h1C][31:4], _RANDOM[10'h1D][21:0]};
        entries_6_paddr = {_RANDOM[10'h1D][31:22], _RANDOM[10'h1E], _RANDOM[10'h1F][5:0]};
        entries_6_pc = {_RANDOM[10'h1F][31:6], _RANDOM[10'h20][23:0]};
        entries_7_vaddr =
          {_RANDOM[10'h20][31:26], _RANDOM[10'h21], _RANDOM[10'h22][11:0]};
        entries_7_paddr = {_RANDOM[10'h22][31:12], _RANDOM[10'h23][27:0]};
        entries_7_pc = {_RANDOM[10'h23][31:28], _RANDOM[10'h24], _RANDOM[10'h25][13:0]};
        valids_0 = _RANDOM[10'h25][16];
        valids_1 = _RANDOM[10'h25][17];
        valids_2 = _RANDOM[10'h25][18];
        valids_3 = _RANDOM[10'h25][19];
        valids_4 = _RANDOM[10'h25][20];
        valids_5 = _RANDOM[10'h25][21];
        valids_6 = _RANDOM[10'h25][22];
        valids_7 = _RANDOM[10'h25][23];
        enqPtrExt_0_flag = _RANDOM[10'h25][24];
        enqPtrExt_0_value = _RANDOM[10'h25][27:25];
        enqPtrExt_1_flag = _RANDOM[10'h25][28];
        enqPtrExt_1_value = _RANDOM[10'h25][31:29];
        enqPtrExt_2_flag = _RANDOM[10'h26][0];
        enqPtrExt_2_value = _RANDOM[10'h26][3:1];
        enqPtrExt_3_flag = _RANDOM[10'h26][4];
        enqPtrExt_3_value = _RANDOM[10'h26][7:5];
        enqPtrExt_4_flag = _RANDOM[10'h26][8];
        enqPtrExt_4_value = _RANDOM[10'h26][11:9];
        deqPtrExt_flag = _RANDOM[10'h26][12];
        deqPtrExt_value = _RANDOM[10'h26][15:13];
        ld_reorder_res_0_1_0_valid = _RANDOM[10'h26][16];
        ld_reorder_res_0_1_0_bits_uop_pc =
          {_RANDOM[10'h27][31:17], _RANDOM[10'h28], _RANDOM[10'h29][2:0]};
        ld_reorder_res_0_1_0_bits_uop_robIdx_flag = _RANDOM[10'h38][29];
        ld_reorder_res_0_1_0_bits_uop_robIdx_value =
          {_RANDOM[10'h38][31:30], _RANDOM[10'h39][5:0]};
        ld_reorder_res_0_1_0_bits_vaddr =
          {_RANDOM[10'h4C][31:30], _RANDOM[10'h4D], _RANDOM[10'h4E][15:0]};
        ld_reorder_res_0_1_0_bits_paddr =
          {_RANDOM[10'h50][31:18], _RANDOM[10'h51], _RANDOM[10'h52][1:0]};
        ld_reorder_res_0_1_1_valid = _RANDOM[10'h63][17];
        ld_reorder_res_0_1_1_bits_uop_pc =
          {_RANDOM[10'h64][31:18], _RANDOM[10'h65], _RANDOM[10'h66][3:0]};
        ld_reorder_res_0_1_1_bits_uop_robIdx_flag = _RANDOM[10'h75][30];
        ld_reorder_res_0_1_1_bits_uop_robIdx_value =
          {_RANDOM[10'h75][31], _RANDOM[10'h76][6:0]};
        ld_reorder_res_0_1_1_bits_vaddr =
          {_RANDOM[10'h89][31], _RANDOM[10'h8A], _RANDOM[10'h8B][16:0]};
        ld_reorder_res_0_1_1_bits_paddr =
          {_RANDOM[10'h8D][31:19], _RANDOM[10'h8E], _RANDOM[10'h8F][2:0]};
        ld_reorder_res_0_1_2_valid = _RANDOM[10'hA0][18];
        ld_reorder_res_0_1_2_bits_uop_pc =
          {_RANDOM[10'hA1][31:19], _RANDOM[10'hA2], _RANDOM[10'hA3][4:0]};
        ld_reorder_res_0_1_2_bits_uop_robIdx_flag = _RANDOM[10'hB2][31];
        ld_reorder_res_0_1_2_bits_uop_robIdx_value = _RANDOM[10'hB3][7:0];
        ld_reorder_res_0_1_2_bits_vaddr = {_RANDOM[10'hC7], _RANDOM[10'hC8][17:0]};
        ld_reorder_res_0_1_2_bits_paddr =
          {_RANDOM[10'hCA][31:20], _RANDOM[10'hCB], _RANDOM[10'hCC][3:0]};
        ld_reorder_res_1_2_0_valid = _RANDOM[10'hDD][19];
        ld_reorder_res_1_2_0_bits_uop_pc =
          {_RANDOM[10'hDE][31:20], _RANDOM[10'hDF], _RANDOM[10'hE0][5:0]};
        ld_reorder_res_1_2_0_bits_uop_robIdx_flag = _RANDOM[10'hF0][0];
        ld_reorder_res_1_2_0_bits_uop_robIdx_value = _RANDOM[10'hF0][8:1];
        ld_reorder_res_1_2_0_bits_vaddr =
          {_RANDOM[10'h104][31:1], _RANDOM[10'h105][18:0]};
        ld_reorder_res_1_2_0_bits_paddr =
          {_RANDOM[10'h107][31:21], _RANDOM[10'h108], _RANDOM[10'h109][4:0]};
        ld_reorder_res_1_2_1_valid = _RANDOM[10'h11A][20];
        ld_reorder_res_1_2_1_bits_uop_pc =
          {_RANDOM[10'h11B][31:21], _RANDOM[10'h11C], _RANDOM[10'h11D][6:0]};
        ld_reorder_res_1_2_1_bits_uop_robIdx_flag = _RANDOM[10'h12D][1];
        ld_reorder_res_1_2_1_bits_uop_robIdx_value = _RANDOM[10'h12D][9:2];
        ld_reorder_res_1_2_1_bits_vaddr =
          {_RANDOM[10'h141][31:2], _RANDOM[10'h142][19:0]};
        ld_reorder_res_1_2_1_bits_paddr =
          {_RANDOM[10'h144][31:22], _RANDOM[10'h145], _RANDOM[10'h146][5:0]};
        ld_reorder_res_1_2_2_valid = _RANDOM[10'h157][21];
        ld_reorder_res_1_2_2_bits_uop_pc =
          {_RANDOM[10'h158][31:22], _RANDOM[10'h159], _RANDOM[10'h15A][7:0]};
        ld_reorder_res_1_2_2_bits_vaddr =
          {_RANDOM[10'h17E][31:3], _RANDOM[10'h17F][20:0]};
        ld_reorder_res_1_2_2_bits_paddr =
          {_RANDOM[10'h181][31:23], _RANDOM[10'h182], _RANDOM[10'h183][6:0]};
        ld_reorder_0_valid = _RANDOM[10'h194][22];
        ld_reorder_0_bits_uop_pc =
          {_RANDOM[10'h195][31:23], _RANDOM[10'h196], _RANDOM[10'h197][8:0]};
        ld_reorder_0_bits_vaddr = {_RANDOM[10'h1BB][31:4], _RANDOM[10'h1BC][21:0]};
        ld_reorder_0_bits_paddr =
          {_RANDOM[10'h1BE][31:24], _RANDOM[10'h1BF], _RANDOM[10'h1C0][7:0]};
        ld_reorder_1_valid = _RANDOM[10'h1D1][23];
        ld_reorder_1_bits_uop_pc =
          {_RANDOM[10'h1D2][31:24], _RANDOM[10'h1D3], _RANDOM[10'h1D4][9:0]};
        ld_reorder_1_bits_vaddr = {_RANDOM[10'h1F8][31:5], _RANDOM[10'h1F9][22:0]};
        ld_reorder_1_bits_paddr =
          {_RANDOM[10'h1FB][31:25], _RANDOM[10'h1FC], _RANDOM[10'h1FD][8:0]};
        ld_reorder_2_valid = _RANDOM[10'h20E][24];
        ld_reorder_2_bits_uop_pc =
          {_RANDOM[10'h20F][31:25], _RANDOM[10'h210], _RANDOM[10'h211][10:0]};
        ld_reorder_2_bits_vaddr = {_RANDOM[10'h235][31:6], _RANDOM[10'h236][23:0]};
        ld_reorder_2_bits_paddr =
          {_RANDOM[10'h238][31:26], _RANDOM[10'h239], _RANDOM[10'h23A][9:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        entries_0_vaddr = 50'h0;
        entries_0_paddr = 48'h0;
        entries_0_pc = 50'h0;
        entries_1_vaddr = 50'h0;
        entries_1_paddr = 48'h0;
        entries_1_pc = 50'h0;
        entries_2_vaddr = 50'h0;
        entries_2_paddr = 48'h0;
        entries_2_pc = 50'h0;
        entries_3_vaddr = 50'h0;
        entries_3_paddr = 48'h0;
        entries_3_pc = 50'h0;
        entries_4_vaddr = 50'h0;
        entries_4_paddr = 48'h0;
        entries_4_pc = 50'h0;
        entries_5_vaddr = 50'h0;
        entries_5_paddr = 48'h0;
        entries_5_pc = 50'h0;
        entries_6_vaddr = 50'h0;
        entries_6_paddr = 48'h0;
        entries_6_pc = 50'h0;
        entries_7_vaddr = 50'h0;
        entries_7_paddr = 48'h0;
        entries_7_pc = 50'h0;
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        valids_4 = 1'h0;
        valids_5 = 1'h0;
        valids_6 = 1'h0;
        valids_7 = 1'h0;
        enqPtrExt_0_flag = 1'h0;
        enqPtrExt_0_value = 3'h0;
        enqPtrExt_1_flag = 1'h0;
        enqPtrExt_1_value = 3'h1;
        enqPtrExt_2_flag = 1'h0;
        enqPtrExt_2_value = 3'h2;
        enqPtrExt_3_flag = 1'h0;
        enqPtrExt_3_value = 3'h3;
        enqPtrExt_4_flag = 1'h0;
        enqPtrExt_4_value = 3'h4;
        deqPtrExt_flag = 1'h0;
        deqPtrExt_value = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_train_req_valid = io_train_req_valid_0;
  assign io_train_req_bits_vaddr = _GEN_1[deqPtrExt_value];
  assign io_train_req_bits_paddr = _GEN_2[deqPtrExt_value];
  assign io_train_req_bits_pc = _GEN_3[deqPtrExt_value];
endmodule

