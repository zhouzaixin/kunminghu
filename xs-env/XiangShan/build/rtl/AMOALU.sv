// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AMOALU(
  input  [7:0]  io_mask,
  input  [4:0]  io_cmd,
  input  [63:0] io_lhs,
  input  [63:0] io_rhs,
  output [63:0] io_out
);

  wire        _logic_xor_T_1 = io_cmd == 5'hA;
  wire        logic_and = _logic_xor_T_1 | io_cmd == 5'hB;
  wire        logic_xor = io_cmd == 5'h9 | _logic_xor_T_1;
  wire [63:0] adder_out_mask = {32'hFFFFFFFF, io_mask[3], 31'h7FFFFFFF};
  wire [63:0] wmask =
    {{8{io_mask[7]}},
     {8{io_mask[6]}},
     {8{io_mask[5]}},
     {8{io_mask[4]}},
     {8{io_mask[3]}},
     {8{io_mask[2]}},
     {8{io_mask[1]}},
     {8{io_mask[0]}}};
  assign io_out =
    wmask
    & (io_cmd == 5'h8
         ? 64'((io_lhs & adder_out_mask) + (io_rhs & adder_out_mask))
         : logic_and | logic_xor
             ? (logic_and ? io_lhs & io_rhs : 64'h0)
               | (logic_xor ? io_lhs ^ io_rhs : 64'h0)
             : ((io_mask[4]
                   ? (io_lhs[63] == io_rhs[63]
                        ? io_lhs[63:32] < io_rhs[63:32] | io_lhs[63:32] == io_rhs[63:32]
                          & io_lhs[31:0] < io_rhs[31:0]
                        : io_cmd[1] ? io_rhs[63] : io_lhs[63])
                   : io_lhs[31] == io_rhs[31]
                       ? io_lhs[31:0] < io_rhs[31:0]
                       : io_cmd[1] ? io_rhs[31] : io_lhs[31])
                  ? io_cmd == 5'hC | io_cmd == 5'hE
                  : io_cmd == 5'hD | io_cmd == 5'hF)
                 ? io_lhs
                 : io_rhs) | ~wmask & io_lhs;
endmodule

