// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLDebugModuleOuter(
  input         clock,
  input         reset,
  output        auto_dmi_in_a_ready,
  input         auto_dmi_in_a_valid,
  input  [3:0]  auto_dmi_in_a_bits_opcode,
  input  [6:0]  auto_dmi_in_a_bits_address,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_d_ready,
  output        auto_dmi_in_d_valid,
  output [31:0] auto_dmi_in_d_bits_data,
  output        auto_int_out_0,
  output        io_ctrl_ndreset,
  output        io_ctrl_dmactive,
  input         io_ctrl_dmactiveAck,
  input         io_innerCtrl_ready,
  output        io_innerCtrl_valid,
  output        io_innerCtrl_bits_resumereq,
  output [9:0]  io_innerCtrl_bits_hartsel,
  output        io_innerCtrl_bits_ackhavereset,
  output        io_innerCtrl_bits_hrmask_0,
  input         io_hgDebugInt_0,
  output        io_hartResetReq_0
);

  wire       out_woready_9;
  wire       DMCONTROLWrData_setresethaltreq;
  wire       DMCONTROLWrData_clrresethaltreq;
  reg        DMCONTROLReg_haltreq;
  reg        DMCONTROLReg_hartreset;
  reg  [9:0] DMCONTROLReg_hartsello;
  reg        DMCONTROLReg_ndmreset;
  reg        DMCONTROLReg_dmactive;
  reg        hrmaskReg_0;
  wire       hrmaskNxt_0 =
    ~(~DMCONTROLReg_dmactive | out_woready_9 & DMCONTROLWrData_clrresethaltreq
      & ~(|DMCONTROLReg_hartsello))
    & (out_woready_9 & DMCONTROLWrData_setresethaltreq & ~(|DMCONTROLReg_hartsello)
       | hrmaskReg_0);
  wire       _out_T_3 =
    {auto_dmi_in_a_bits_address[4], auto_dmi_in_a_bits_address[2]} == 2'h0;
  assign DMCONTROLWrData_clrresethaltreq = auto_dmi_in_a_bits_data[2];
  assign DMCONTROLWrData_setresethaltreq = auto_dmi_in_a_bits_data[3];
  assign out_woready_9 =
    auto_dmi_in_a_valid & auto_dmi_in_d_ready & auto_dmi_in_a_bits_opcode != 4'h4
    & ~(auto_dmi_in_a_bits_address[3]) & _out_T_3;
  reg        debugIntRegs_0;
  reg        innerCtrlValidReg;
  reg        innerCtrlResumeReqReg;
  reg        innerCtrlAckHaveResetReg;
  wire       io_innerCtrl_valid_0 = out_woready_9 | innerCtrlValidReg;
  wire       io_innerCtrl_bits_resumereq_0 =
    out_woready_9 & auto_dmi_in_a_bits_data[30] | innerCtrlResumeReqReg;
  wire       io_innerCtrl_bits_ackhavereset_0 =
    out_woready_9 & auto_dmi_in_a_bits_data[28] | innerCtrlAckHaveResetReg;
  reg        hartResetReg_0;
  wire       DMCONTROLNxt_hartreset =
    DMCONTROLReg_dmactive
    & (out_woready_9 ? auto_dmi_in_a_bits_data[29] : DMCONTROLReg_hartreset);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      DMCONTROLReg_haltreq <= 1'h0;
      DMCONTROLReg_hartreset <= 1'h0;
      DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <= 1'h0;
      DMCONTROLReg_dmactive <= 1'h0;
      hrmaskReg_0 <= 1'h0;
      debugIntRegs_0 <= 1'h0;
      innerCtrlValidReg <= 1'h0;
      innerCtrlResumeReqReg <= 1'h0;
      innerCtrlAckHaveResetReg <= 1'h0;
      hartResetReg_0 <= 1'h0;
    end
    else begin
      DMCONTROLReg_haltreq <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[31] : DMCONTROLReg_haltreq);
      DMCONTROLReg_hartreset <= DMCONTROLNxt_hartreset;
      if (DMCONTROLReg_dmactive) begin
      end
      else
        DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[1] : DMCONTROLReg_ndmreset);
      if (out_woready_9)
        DMCONTROLReg_dmactive <= auto_dmi_in_a_bits_data[0];
      hrmaskReg_0 <= hrmaskNxt_0;
      debugIntRegs_0 <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[31] : debugIntRegs_0);
      innerCtrlValidReg <= io_innerCtrl_valid_0 & ~io_innerCtrl_ready;
      innerCtrlResumeReqReg <= io_innerCtrl_bits_resumereq_0 & ~io_innerCtrl_ready;
      innerCtrlAckHaveResetReg <= io_innerCtrl_bits_ackhavereset_0 & ~io_innerCtrl_ready;
      hartResetReg_0 <= DMCONTROLNxt_hartreset & ~(|DMCONTROLReg_hartsello);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        DMCONTROLReg_haltreq = _RANDOM[2'h0][0];
        DMCONTROLReg_hartreset = _RANDOM[2'h0][2];
        DMCONTROLReg_hartsello = _RANDOM[2'h0][15:6];
        DMCONTROLReg_ndmreset = _RANDOM[2'h0][30];
        DMCONTROLReg_dmactive = _RANDOM[2'h0][31];
        hrmaskReg_0 = _RANDOM[2'h2][0];
        debugIntRegs_0 = _RANDOM[2'h2][1];
        innerCtrlValidReg = _RANDOM[2'h2][2];
        innerCtrlResumeReqReg = _RANDOM[2'h2][3];
        innerCtrlAckHaveResetReg = _RANDOM[2'h2][4];
        hartResetReg_0 = _RANDOM[2'h2][5];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        DMCONTROLReg_haltreq = 1'h0;
        DMCONTROLReg_hartreset = 1'h0;
        DMCONTROLReg_hartsello = 10'h0;
        DMCONTROLReg_ndmreset = 1'h0;
        DMCONTROLReg_dmactive = 1'h0;
        hrmaskReg_0 = 1'h0;
        debugIntRegs_0 = 1'h0;
        innerCtrlValidReg = 1'h0;
        innerCtrlResumeReqReg = 1'h0;
        innerCtrlAckHaveResetReg = 1'h0;
        hartResetReg_0 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_data =
    ~_out_T_3 | auto_dmi_in_a_bits_address[3]
      ? 32'h0
      : {DMCONTROLReg_haltreq,
         1'h0,
         DMCONTROLReg_hartreset,
         27'h0,
         DMCONTROLReg_ndmreset,
         DMCONTROLReg_dmactive & io_ctrl_dmactiveAck};
  assign auto_int_out_0 = debugIntRegs_0 | io_hgDebugInt_0;
  assign io_ctrl_ndreset = DMCONTROLReg_ndmreset;
  assign io_ctrl_dmactive = DMCONTROLReg_dmactive;
  assign io_innerCtrl_valid = io_innerCtrl_valid_0;
  assign io_innerCtrl_bits_resumereq = io_innerCtrl_bits_resumereq_0;
  assign io_innerCtrl_bits_hartsel = DMCONTROLReg_hartsello;
  assign io_innerCtrl_bits_ackhavereset = io_innerCtrl_bits_ackhavereset_0;
  assign io_innerCtrl_bits_hrmask_0 = hrmaskNxt_0;
  assign io_hartResetReq_0 = hartResetReg_0;
endmodule

