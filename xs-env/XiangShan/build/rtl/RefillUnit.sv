// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RefillUnit(
  input          clock,
  input          reset,
  input          io_sinkD_valid,
  input  [3:0]   io_sinkD_bits_opcode,
  input  [1:0]   io_sinkD_bits_param,
  input  [2:0]   io_sinkD_bits_size,
  input  [7:0]   io_sinkD_bits_source,
  input  [3:0]   io_sinkD_bits_sink,
  input          io_sinkD_bits_echo_blockisdirty,
  input  [255:0] io_sinkD_bits_data,
  input          io_sinkD_bits_corrupt,
  input          io_sourceE_ready,
  output         io_sourceE_valid,
  output [3:0]   io_sourceE_bits_sink,
  output         io_refillBufWrite_valid,
  output [7:0]   io_refillBufWrite_bits_id,
  output [511:0] io_refillBufWrite_bits_data_data,
  output         io_resp_valid,
  output [7:0]   io_resp_mshrId,
  output [2:0]   io_resp_respInfo_opcode,
  output [2:0]   io_resp_respInfo_param,
  output         io_resp_respInfo_last,
  output         io_resp_respInfo_dirty,
  output         io_resp_respInfo_isHit,
  output         io_resp_respInfo_corrupt
);

  wire [12:0]  _r_beats1_decode_T = 13'h3F << io_sinkD_bits_size;
  wire         r_beats1 = io_sinkD_bits_opcode[0] & ~(_r_beats1_decode_T[5]);
  reg          r_counter;
  wire         last = r_counter | ~r_beats1;
  wire         _io_refillBufWrite_valid_T = io_sinkD_valid & io_sinkD_bits_opcode[0];
  reg  [255:0] grantDataBuf;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 1'h0;
      grantDataBuf <= 256'h0;
    end
    else begin
      if (io_sinkD_valid) begin
        if (r_counter)
          r_counter <= 1'(r_counter - 1'h1);
        else
          r_counter <= r_beats1;
      end
      if (_io_refillBufWrite_valid_T & ~r_counter)
        grantDataBuf <= io_sinkD_bits_data;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        r_counter = _RANDOM[4'h0][0];
        grantDataBuf =
          {_RANDOM[4'h0][31:1],
           _RANDOM[4'h1],
           _RANDOM[4'h2],
           _RANDOM[4'h3],
           _RANDOM[4'h4],
           _RANDOM[4'h5],
           _RANDOM[4'h6],
           _RANDOM[4'h7],
           _RANDOM[4'h8][0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 1'h0;
        grantDataBuf = 256'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue16_grantAckQEntry grantAckQ (
    .clock              (clock),
    .reset              (reset),
    .io_enq_valid
      ((io_sinkD_bits_opcode == 4'h4 | io_sinkD_bits_opcode == 4'h5) & io_sinkD_valid
       & ~r_counter),
    .io_enq_bits_source (io_sinkD_bits_source[6:0]),
    .io_enq_bits_sink   (io_sinkD_bits_sink),
    .io_deq_ready       (io_sourceE_ready),
    .io_deq_valid       (io_sourceE_valid),
    .io_deq_bits_sink   (io_sourceE_bits_sink)
  );
  assign io_refillBufWrite_valid = _io_refillBufWrite_valid_T & last;
  assign io_refillBufWrite_bits_id = io_sinkD_bits_source;
  assign io_refillBufWrite_bits_data_data = {io_sinkD_bits_data, grantDataBuf};
  assign io_resp_valid = (~r_counter | last) & io_sinkD_valid;
  assign io_resp_mshrId = io_sinkD_bits_source;
  assign io_resp_respInfo_opcode = io_sinkD_bits_opcode[2:0];
  assign io_resp_respInfo_param = {1'h0, io_sinkD_bits_param};
  assign io_resp_respInfo_last = last;
  assign io_resp_respInfo_dirty = io_sinkD_bits_echo_blockisdirty;
  assign io_resp_respInfo_isHit = 1'h1;
  assign io_resp_respInfo_corrupt = io_sinkD_bits_corrupt;
endmodule

