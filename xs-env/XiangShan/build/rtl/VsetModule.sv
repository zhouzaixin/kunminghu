// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VsetModule(
  input  [63:0] io_in_avl,
  input         io_in_vtype_illegal,
  input  [54:0] io_in_vtype_reserved,
  input         io_in_vtype_vma,
  input         io_in_vtype_vta,
  input  [2:0]  io_in_vtype_vsew,
  input  [2:0]  io_in_vtype_vlmul,
  input  [8:0]  io_in_func,
  output        io_out_vconfig_vtype_illegal,
  output        io_out_vconfig_vtype_vma,
  output        io_out_vconfig_vtype_vta,
  output [1:0]  io_out_vconfig_vtype_vsew,
  output [2:0]  io_out_vconfig_vtype_vlmul,
  output [7:0]  io_out_vconfig_vl,
  output [7:0]  io_out_vlmax
);

  wire [2:0]  log2Vsew = 3'({1'h0, io_in_vtype_vsew[1:0]} + 3'h3);
  wire [14:0] vlmax = 15'h1 << 3'(3'(io_in_vtype_vlmul - 3'h1) - log2Vsew);
  wire        illegal =
    io_in_vtype_vlmul == 3'h4 | io_in_vtype_vsew[2]
    | log2Vsew > (io_in_vtype_vlmul[2] ? 3'(io_in_vtype_vlmul - 3'h2) : 3'h6)
    | (|io_in_vtype_reserved) | io_in_vtype_illegal;
  wire [14:0] vlenDivVsew = 15'h1 << 3'(3'h7 - log2Vsew);
  assign io_out_vconfig_vtype_illegal = illegal;
  assign io_out_vconfig_vtype_vma = ~illegal & io_in_vtype_vma;
  assign io_out_vconfig_vtype_vta = ~illegal & io_in_vtype_vta;
  assign io_out_vconfig_vtype_vsew = illegal ? 2'h0 : io_in_vtype_vsew[1:0];
  assign io_out_vconfig_vtype_vlmul = illegal ? 3'h0 : io_in_vtype_vlmul;
  assign io_out_vconfig_vl =
    illegal
      ? 8'h0
      : (|(io_in_func[7:6])) & io_in_func[0] | io_in_avl > {49'h0, vlmax}
          ? vlmax[7:0]
          : io_in_avl[7:0];
  assign io_out_vlmax = vlmax >= vlenDivVsew ? vlmax[7:0] : vlenDivVsew[7:0];
endmodule

