// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLToAXI4_1(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [3:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [2:0]  auto_in_a_bits_source,
  input  [30:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [3:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [2:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_aw_ready,
  output        auto_out_aw_valid,
  output [2:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output [3:0]  auto_out_aw_bits_echo_tl_state_size,
  output [2:0]  auto_out_aw_bits_echo_tl_state_source,
  input         auto_out_w_ready,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
  output        auto_out_b_ready,
  input         auto_out_b_valid,
  input  [2:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [2:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
  output        auto_out_ar_valid,
  output [2:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output [3:0]  auto_out_ar_bits_echo_tl_state_size,
  output [2:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready,
  input         auto_out_r_valid,
  input  [2:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [2:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last
);

  reg             count_4;
  reg             count_3;
  reg             count_2;
  reg             count_1;
  reg             count;
  wire            _queue_arw_deq_q_io_enq_ready;
  wire            _queue_arw_deq_q_io_deq_valid;
  wire [2:0]      _queue_arw_deq_q_io_deq_bits_id;
  wire [30:0]     _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]      _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]      _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]      _queue_arw_deq_q_io_deq_bits_burst;
  wire            _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]      _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]      _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]      _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]      _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [2:0]      _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire            _queue_arw_deq_q_io_deq_bits_wen;
  wire            _nodeOut_w_deq_q_io_enq_ready;
  wire [7:0][2:0] _GEN = '{3'h0, 3'h0, 3'h0, 3'h4, 3'h3, 3'h2, 3'h1, 3'h0};
  wire [11:0]     _r_beats1_decode_T = 12'h1F << auto_in_a_bits_size;
  wire [1:0]      r_beats1 = auto_in_a_bits_opcode[2] ? 2'h0 : ~(_r_beats1_decode_T[4:3]);
  reg  [1:0]      r_counter;
  wire            a_first = r_counter == 2'h0;
  wire            a_last = r_counter == 2'h1 | r_beats1 == 2'h0;
  reg             doneAW;
  wire [17:0]     _out_arw_bits_len_T = 18'h7FF << auto_in_a_bits_size;
  wire [7:0]      _GEN_0 =
    {{count}, {count}, {count}, {count_4}, {count_3}, {count_2}, {count_1}, {count}};
  wire            stall = _GEN_0[auto_in_a_bits_source] & a_first;
  wire            _out_w_valid_T_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire            nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _out_w_valid_T_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire            out_arw_valid =
    ~stall & auto_in_a_valid
    & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg             r_holds_d;
  reg  [2:0]      b_delay;
  wire            r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire            nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire            nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire            nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg             r_first;
  reg             r_denied_r;
  wire            r_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [2:0]      d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire            d_last = ~r_wins | auto_out_r_bits_last;
  wire            _inc_T_4 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire            _dec_T_9 = auto_in_d_ready & nodeIn_d_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 2'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count <= 1'h0;
      count_1 <= 1'h0;
      count_2 <= 1'h0;
      count_3 <= 1'h0;
      count_4 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first)
          r_counter <= r_beats1;
        else
          r_counter <= 2'(r_counter - 2'h1);
        doneAW <= ~a_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count <=
        1'(1'(count + (_GEN[auto_in_a_bits_source] == 3'h0 & _inc_T_4))
           - (d_sel_shiftAmount == 3'h0 & d_last & _dec_T_9));
      count_1 <=
        1'(1'(count_1 + (_GEN[auto_in_a_bits_source] == 3'h1 & _inc_T_4))
           - (d_sel_shiftAmount == 3'h1 & d_last & _dec_T_9));
      count_2 <=
        1'(1'(count_2 + (_GEN[auto_in_a_bits_source] == 3'h2 & _inc_T_4))
           - (d_sel_shiftAmount == 3'h2 & d_last & _dec_T_9));
      count_3 <=
        1'(1'(count_3 + (_GEN[auto_in_a_bits_source] == 3'h3 & _inc_T_4))
           - (d_sel_shiftAmount == 3'h3 & d_last & _dec_T_9));
      count_4 <=
        1'(1'(count_4 + (_GEN[auto_in_a_bits_source] == 3'h4 & _inc_T_4))
           - (d_sel_shiftAmount == 3'h4 & d_last & _dec_T_9));
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= 3'(b_delay + 3'h1);
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        r_counter = _RANDOM[/*Zero width*/ 1'b0][1:0];
        doneAW = _RANDOM[/*Zero width*/ 1'b0][2];
        r_holds_d = _RANDOM[/*Zero width*/ 1'b0][3];
        b_delay = _RANDOM[/*Zero width*/ 1'b0][6:4];
        r_first = _RANDOM[/*Zero width*/ 1'b0][7];
        r_denied_r = _RANDOM[/*Zero width*/ 1'b0][8];
        count = _RANDOM[/*Zero width*/ 1'b0][9];
        count_1 = _RANDOM[/*Zero width*/ 1'b0][11];
        count_2 = _RANDOM[/*Zero width*/ 1'b0][13];
        count_3 = _RANDOM[/*Zero width*/ 1'b0][15];
        count_4 = _RANDOM[/*Zero width*/ 1'b0][17];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 2'h0;
        doneAW = 1'h0;
        r_holds_d = 1'h0;
        r_first = 1'h1;
        count = 1'h0;
        count_1 = 1'h0;
        count_2 = 1'h0;
        count_3 = 1'h0;
        count_4 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_AXI4BundleW_1 nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_enq_valid
      (~stall & auto_in_a_valid & ~(auto_in_a_bits_opcode[2]) & _out_w_valid_T_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (a_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue1_AXI4BundleARW_1 queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (_GEN[auto_in_a_bits_source]),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_out_arw_bits_len_T[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 3'h2 ? 3'h3 : auto_in_a_bits_size),
    .io_enq_bits_echo_tl_state_size   ({1'h0, auto_in_a_bits_size}),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = {3'h0, r_wins};
  assign auto_in_d_bits_size =
    r_wins
      ? auto_out_r_bits_echo_tl_state_size[2:0]
      : auto_out_b_bits_echo_tl_state_size[2:0];
  assign auto_in_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  assign auto_in_d_bits_denied = r_wins ? r_denied : (|auto_out_b_bits_resp);
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = r_wins & ((|auto_out_r_bits_resp) | r_denied);
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

