// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module r4_qds_cg(
  input        a0_i,
  input        a2_i,
  input        a3_i,
  input        a4_i,
  output [6:0] m_neg_1_o,
  output [6:0] m_neg_0_o,
  output [6:0] m_pos_1_o,
  output [6:0] m_pos_2_o
);

  wire [2:0] a2_a3_a4 = {a2_i, a3_i, a4_i};
  wire       _m_pos_2_o_T_1 = a2_a3_a4 == 3'h0;
  wire       _m_pos_2_o_T_4 = a2_a3_a4 == 3'h1;
  wire       _m_pos_2_o_T_7 = a2_a3_a4 == 3'h2;
  wire       _m_pos_2_o_T_10 = a2_a3_a4 == 3'h3;
  wire       _m_pos_2_o_T_13 = a2_a3_a4 == 3'h4;
  wire       _m_pos_2_o_T_16 = a2_a3_a4 == 3'h5;
  wire       _m_pos_2_o_T_19 = a2_a3_a4 == 3'h6;
  assign m_neg_1_o =
    (~a0_i & _m_pos_2_o_T_1 ? 7'hD : 7'h0) | (~a0_i & _m_pos_2_o_T_4 ? 7'hE : 7'h0)
    | {2'h0, ~a0_i & _m_pos_2_o_T_7, 4'h0} | (~a0_i & _m_pos_2_o_T_10 ? 7'h11 : 7'h0)
    | (~a0_i & _m_pos_2_o_T_13 ? 7'h12 : 7'h0) | (~a0_i & _m_pos_2_o_T_16 ? 7'h14 : 7'h0)
    | (~a0_i & _m_pos_2_o_T_19 ? 7'h16 : 7'h0) | (~a0_i & (&a2_a3_a4) ? 7'h17 : 7'h0)
    | (a0_i ? 7'h17 : 7'h0);
  assign m_neg_0_o =
    (~a0_i & _m_pos_2_o_T_4 ? 7'h5 : 7'h0) | (~a0_i & _m_pos_2_o_T_7 ? 7'h6 : 7'h0)
    | (~a0_i & _m_pos_2_o_T_10 ? 7'h6 : 7'h0) | (~a0_i & _m_pos_2_o_T_13 ? 7'h6 : 7'h0)
    | {3'h0,
       ~a0_i & _m_pos_2_o_T_16 | ~a0_i & _m_pos_2_o_T_19 | ~a0_i & (&a2_a3_a4) | a0_i,
       ~a0_i & _m_pos_2_o_T_1,
       2'h0};
  assign m_pos_1_o =
    (~a0_i & _m_pos_2_o_T_1 | ~a0_i & _m_pos_2_o_T_4 | ~a0_i & _m_pos_2_o_T_7 | ~a0_i
     & _m_pos_2_o_T_10
       ? 7'h7C
       : 7'h0) | (~a0_i & _m_pos_2_o_T_13 ? 7'h7A : 7'h0)
    | (~a0_i & _m_pos_2_o_T_16 ? 7'h7A : 7'h0) | (~a0_i & _m_pos_2_o_T_19 ? 7'h78 : 7'h0)
    | (~a0_i & (&a2_a3_a4) ? 7'h78 : 7'h0) | (a0_i ? 7'h78 : 7'h0);
  assign m_pos_2_o =
    (~a0_i & _m_pos_2_o_T_1 ? 7'h74 : 7'h0) | (~a0_i & _m_pos_2_o_T_4 ? 7'h72 : 7'h0)
    | (~a0_i & _m_pos_2_o_T_7 ? 7'h70 : 7'h0) | (~a0_i & _m_pos_2_o_T_10 ? 7'h70 : 7'h0)
    | (~a0_i & _m_pos_2_o_T_13 ? 7'h6E : 7'h0) | (~a0_i & _m_pos_2_o_T_16 ? 7'h6C : 7'h0)
    | (~a0_i & _m_pos_2_o_T_19 ? 7'h6C : 7'h0) | (~a0_i & (&a2_a3_a4) ? 7'h6A : 7'h0)
    | (a0_i ? 7'h6A : 7'h0);
endmodule

