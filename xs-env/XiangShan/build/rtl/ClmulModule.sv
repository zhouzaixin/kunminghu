// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ClmulModule(
  input         clock,
  input  [63:0] io_src_0,
  input  [63:0] io_src_1,
  input  [8:0]  io_func,
  input         io_regEnable,
  output [63:0] io_out
);

  reg  [8:0]   funcReg;
  reg  [127:0] mul3_0;
  reg  [127:0] mul3_1;
  reg  [127:0] mul3_2;
  reg  [127:0] mul3_3;
  reg  [127:0] mul3_4;
  reg  [127:0] mul3_5;
  reg  [127:0] mul3_6;
  reg  [127:0] mul3_7;
  wire [127:0] res =
    mul3_0 ^ mul3_1 ^ mul3_2 ^ mul3_3 ^ mul3_4 ^ mul3_5 ^ mul3_6 ^ mul3_7;
  always @(posedge clock) begin
    if (io_regEnable) begin
      funcReg <= io_func;
      mul3_0 <=
        {64'h0, io_src_0[0] ? io_src_1 : 64'h0}
        ^ {63'h0, io_src_0[1] ? {io_src_1, 1'h0} : 65'h0}
        ^ {62'h0, io_src_0[2] ? {io_src_1, 2'h0} : 66'h0}
        ^ {61'h0, io_src_0[3] ? {io_src_1, 3'h0} : 67'h0}
        ^ {60'h0, io_src_0[4] ? {io_src_1, 4'h0} : 68'h0}
        ^ {59'h0, io_src_0[5] ? {io_src_1, 5'h0} : 69'h0}
        ^ {58'h0, io_src_0[6] ? {io_src_1, 6'h0} : 70'h0}
        ^ {57'h0, io_src_0[7] ? {io_src_1, 7'h0} : 71'h0};
      mul3_1 <=
        {56'h0, io_src_0[8] ? {io_src_1, 8'h0} : 72'h0}
        ^ {55'h0, io_src_0[9] ? {io_src_1, 9'h0} : 73'h0}
        ^ {54'h0, io_src_0[10] ? {io_src_1, 10'h0} : 74'h0}
        ^ {53'h0, io_src_0[11] ? {io_src_1, 11'h0} : 75'h0}
        ^ {52'h0, io_src_0[12] ? {io_src_1, 12'h0} : 76'h0}
        ^ {51'h0, io_src_0[13] ? {io_src_1, 13'h0} : 77'h0}
        ^ {50'h0, io_src_0[14] ? {io_src_1, 14'h0} : 78'h0}
        ^ {49'h0, io_src_0[15] ? {io_src_1, 15'h0} : 79'h0};
      mul3_2 <=
        {48'h0, io_src_0[16] ? {io_src_1, 16'h0} : 80'h0}
        ^ {47'h0, io_src_0[17] ? {io_src_1, 17'h0} : 81'h0}
        ^ {46'h0, io_src_0[18] ? {io_src_1, 18'h0} : 82'h0}
        ^ {45'h0, io_src_0[19] ? {io_src_1, 19'h0} : 83'h0}
        ^ {44'h0, io_src_0[20] ? {io_src_1, 20'h0} : 84'h0}
        ^ {43'h0, io_src_0[21] ? {io_src_1, 21'h0} : 85'h0}
        ^ {42'h0, io_src_0[22] ? {io_src_1, 22'h0} : 86'h0}
        ^ {41'h0, io_src_0[23] ? {io_src_1, 23'h0} : 87'h0};
      mul3_3 <=
        {40'h0, io_src_0[24] ? {io_src_1, 24'h0} : 88'h0}
        ^ {39'h0, io_src_0[25] ? {io_src_1, 25'h0} : 89'h0}
        ^ {38'h0, io_src_0[26] ? {io_src_1, 26'h0} : 90'h0}
        ^ {37'h0, io_src_0[27] ? {io_src_1, 27'h0} : 91'h0}
        ^ {36'h0, io_src_0[28] ? {io_src_1, 28'h0} : 92'h0}
        ^ {35'h0, io_src_0[29] ? {io_src_1, 29'h0} : 93'h0}
        ^ {34'h0, io_src_0[30] ? {io_src_1, 30'h0} : 94'h0}
        ^ {33'h0, io_src_0[31] ? {io_src_1, 31'h0} : 95'h0};
      mul3_4 <=
        {32'h0, io_src_0[32] ? {io_src_1, 32'h0} : 96'h0}
        ^ {31'h0, io_src_0[33] ? {io_src_1, 33'h0} : 97'h0}
        ^ {30'h0, io_src_0[34] ? {io_src_1, 34'h0} : 98'h0}
        ^ {29'h0, io_src_0[35] ? {io_src_1, 35'h0} : 99'h0}
        ^ {28'h0, io_src_0[36] ? {io_src_1, 36'h0} : 100'h0}
        ^ {27'h0, io_src_0[37] ? {io_src_1, 37'h0} : 101'h0}
        ^ {26'h0, io_src_0[38] ? {io_src_1, 38'h0} : 102'h0}
        ^ {25'h0, io_src_0[39] ? {io_src_1, 39'h0} : 103'h0};
      mul3_5 <=
        {24'h0, io_src_0[40] ? {io_src_1, 40'h0} : 104'h0}
        ^ {23'h0, io_src_0[41] ? {io_src_1, 41'h0} : 105'h0}
        ^ {22'h0, io_src_0[42] ? {io_src_1, 42'h0} : 106'h0}
        ^ {21'h0, io_src_0[43] ? {io_src_1, 43'h0} : 107'h0}
        ^ {20'h0, io_src_0[44] ? {io_src_1, 44'h0} : 108'h0}
        ^ {19'h0, io_src_0[45] ? {io_src_1, 45'h0} : 109'h0}
        ^ {18'h0, io_src_0[46] ? {io_src_1, 46'h0} : 110'h0}
        ^ {17'h0, io_src_0[47] ? {io_src_1, 47'h0} : 111'h0};
      mul3_6 <=
        {16'h0, io_src_0[48] ? {io_src_1, 48'h0} : 112'h0}
        ^ {15'h0, io_src_0[49] ? {io_src_1, 49'h0} : 113'h0}
        ^ {14'h0, io_src_0[50] ? {io_src_1, 50'h0} : 114'h0}
        ^ {13'h0, io_src_0[51] ? {io_src_1, 51'h0} : 115'h0}
        ^ {12'h0, io_src_0[52] ? {io_src_1, 52'h0} : 116'h0}
        ^ {11'h0, io_src_0[53] ? {io_src_1, 53'h0} : 117'h0}
        ^ {10'h0, io_src_0[54] ? {io_src_1, 54'h0} : 118'h0}
        ^ {9'h0, io_src_0[55] ? {io_src_1, 55'h0} : 119'h0};
      mul3_7 <=
        {8'h0, io_src_0[56] ? {io_src_1, 56'h0} : 120'h0}
        ^ {7'h0, io_src_0[57] ? {io_src_1, 57'h0} : 121'h0}
        ^ {6'h0, io_src_0[58] ? {io_src_1, 58'h0} : 122'h0}
        ^ {5'h0, io_src_0[59] ? {io_src_1, 59'h0} : 123'h0}
        ^ {4'h0, io_src_0[60] ? {io_src_1, 60'h0} : 124'h0}
        ^ {3'h0, io_src_0[61] ? {io_src_1, 61'h0} : 125'h0}
        ^ {2'h0, io_src_0[62] ? {io_src_1, 62'h0} : 126'h0}
        ^ {1'h0, io_src_0[63] ? {io_src_1, 63'h0} : 127'h0};
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:32];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h21; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        funcReg = _RANDOM[6'h0][8:0];
        mul3_0 =
          {_RANDOM[6'h0][31:9],
           _RANDOM[6'h1],
           _RANDOM[6'h2],
           _RANDOM[6'h3],
           _RANDOM[6'h4][8:0]};
        mul3_1 =
          {_RANDOM[6'h4][31:9],
           _RANDOM[6'h5],
           _RANDOM[6'h6],
           _RANDOM[6'h7],
           _RANDOM[6'h8][8:0]};
        mul3_2 =
          {_RANDOM[6'h8][31:9],
           _RANDOM[6'h9],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC][8:0]};
        mul3_3 =
          {_RANDOM[6'hC][31:9],
           _RANDOM[6'hD],
           _RANDOM[6'hE],
           _RANDOM[6'hF],
           _RANDOM[6'h10][8:0]};
        mul3_4 =
          {_RANDOM[6'h10][31:9],
           _RANDOM[6'h11],
           _RANDOM[6'h12],
           _RANDOM[6'h13],
           _RANDOM[6'h14][8:0]};
        mul3_5 =
          {_RANDOM[6'h14][31:9],
           _RANDOM[6'h15],
           _RANDOM[6'h16],
           _RANDOM[6'h17],
           _RANDOM[6'h18][8:0]};
        mul3_6 =
          {_RANDOM[6'h18][31:9],
           _RANDOM[6'h19],
           _RANDOM[6'h1A],
           _RANDOM[6'h1B],
           _RANDOM[6'h1C][8:0]};
        mul3_7 =
          {_RANDOM[6'h1C][31:9],
           _RANDOM[6'h1D],
           _RANDOM[6'h1E],
           _RANDOM[6'h1F],
           _RANDOM[6'h20][8:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out =
    funcReg == 9'h2 ? res[126:63] : funcReg == 9'h1 ? res[127:64] : res[63:0];
endmodule

