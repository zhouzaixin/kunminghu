// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VirtualLevelPermitModule(
  input         io_in_csrAccess_wen,
  input  [11:0] io_in_csrAccess_addr,
  input  [1:0]  io_in_privState_PRVM,
  input         io_in_privState_V,
  input         io_in_status_vtvm,
  input  [5:0]  io_in_status_vgein,
  input  [31:0] io_in_xcounteren_hcounteren,
  input  [31:0] io_in_xcounteren_scounteren,
  input  [63:0] io_in_xenvcfg_henvcfg,
  input         io_in_xstateen_hstateen0_C,
  input         io_in_xstateen_hstateen0_SE0,
  input         io_in_xstateen_hstateen0_ENVCFG,
  input         io_in_xstateen_hstateen0_CSRIND,
  input         io_in_xstateen_hstateen0_AIA,
  input         io_in_xstateen_hstateen0_IMSIC,
  input         io_in_xstateen_hstateen0_CONTEXT,
  input         io_in_xstateen_sstateen0_C,
  input         io_in_aia_hvictlVTI,
  output        io_out_virtualLevelPermit_EX_II,
  output        io_out_virtualLevelPermit_EX_VI
);

  wire        PrvmIsS = io_in_privState_PRVM == 2'h1;
  wire        rwSatp_EX_VI_isModeVS = io_in_privState_V & PrvmIsS;
  wire        rwVStopei_EX_II_v_PrvmIsM = &io_in_privState_PRVM;
  wire        rwVStopei_EX_II_isModeM = rwVStopei_EX_II_v_PrvmIsM;
  wire        rwVStopei_EX_II_isModeHS = ~io_in_privState_V & PrvmIsS;
  wire        _rwStopei_EX_VI_T_2 = io_in_status_vgein == 6'h0;
  wire        _rwStopei_EX_VI_T_3 = io_in_status_vgein > 6'h5;
  wire        csrIsStopei = io_in_csrAccess_addr == 12'h15C;
  wire [31:0] _GEN = {27'h0, io_in_csrAccess_addr[4:0]};
  wire [31:0] _accessHPM_EX_VI_T_4 = io_in_xcounteren_hcounteren >> _GEN;
  wire        PrvmIsU = io_in_privState_PRVM == 2'h0;
  wire        accessHPM_EX_VI_isModeVU = io_in_privState_V & PrvmIsU;
  wire [31:0] _accessHPM_EX_VI_T_7 = io_in_xcounteren_scounteren >> _GEN;
  wire        csrIsUCustom =
    io_in_csrAccess_addr[11:8] == 4'h8 | io_in_csrAccess_addr[11:6] == 6'h33;
  assign io_out_virtualLevelPermit_EX_II =
    (rwVStopei_EX_II_isModeM | rwVStopei_EX_II_isModeHS) & io_in_csrAccess_addr == 12'h25C
    & (_rwStopei_EX_VI_T_2 | _rwStopei_EX_VI_T_3);
  assign io_out_virtualLevelPermit_EX_VI =
    rwSatp_EX_VI_isModeVS & io_in_status_vtvm & io_in_csrAccess_addr == 12'h180
    | rwSatp_EX_VI_isModeVS & csrIsStopei & (_rwStopei_EX_VI_T_2 | _rwStopei_EX_VI_T_3)
    | rwSatp_EX_VI_isModeVS & io_in_aia_hvictlVTI
    & (io_in_csrAccess_addr == 12'h144 | io_in_csrAccess_addr == 12'h104)
    | rwSatp_EX_VI_isModeVS & io_in_csrAccess_addr == 12'h14D
    & (~(io_in_xcounteren_hcounteren[1]) | ~(io_in_xenvcfg_henvcfg[63])
       | io_in_csrAccess_wen & io_in_aia_hvictlVTI) | io_in_csrAccess_addr > 12'hBFF
    & io_in_csrAccess_addr < 12'hC20
    & (rwSatp_EX_VI_isModeVS & ~(_accessHPM_EX_VI_T_4[0]) | accessHPM_EX_VI_isModeVU
       & (~(_accessHPM_EX_VI_T_4[0]) | ~(_accessHPM_EX_VI_T_7[0])))
    | io_in_csrAccess_addr == 12'h10C & io_in_privState_V & ~io_in_xstateen_hstateen0_SE0
    | io_in_csrAccess_addr == 12'h10A & io_in_privState_V
    & ~io_in_xstateen_hstateen0_ENVCFG | io_in_csrAccess_addr[11:3] == 9'h150
    & io_in_privState_V & ~io_in_xstateen_hstateen0_CSRIND
    | io_in_csrAccess_addr == 12'hDB0 & io_in_privState_V & ~io_in_xstateen_hstateen0_AIA
    | csrIsStopei & io_in_privState_V & ~io_in_xstateen_hstateen0_IMSIC
    | io_in_csrAccess_addr == 12'h5A8 & io_in_privState_V
    & ~io_in_xstateen_hstateen0_CONTEXT
    | ((|(io_in_csrAccess_addr[11:10])) & io_in_csrAccess_addr[9:8] == 2'h1
       & (&(io_in_csrAccess_addr[7:6])) | csrIsUCustom) & io_in_privState_V
    & ~io_in_xstateen_hstateen0_C | csrIsUCustom & accessHPM_EX_VI_isModeVU
    & io_in_xstateen_hstateen0_C & ~io_in_xstateen_sstateen0_C;
endmodule

