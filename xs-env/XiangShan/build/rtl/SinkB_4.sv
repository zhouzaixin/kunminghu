// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SinkB_4(
  output         io_b_ready,
  input          io_b_valid,
  input  [2:0]   io_b_bits_opcode,
  input  [1:0]   io_b_bits_param,
  input  [2:0]   io_b_bits_size,
  input  [3:0]   io_b_bits_source,
  input  [47:0]  io_b_bits_address,
  input  [31:0]  io_b_bits_mask,
  input  [255:0] io_b_bits_data,
  input          io_alloc_ready,
  output         io_alloc_valid,
  output [2:0]   io_alloc_bits_opcode,
  output [2:0]   io_alloc_bits_param,
  output [2:0]   io_alloc_bits_size,
  output [10:0]  io_alloc_bits_source,
  output [10:0]  io_alloc_bits_set,
  output [30:0]  io_alloc_bits_tag,
  output [5:0]   io_alloc_bits_off,
  output [31:0]  io_alloc_bits_mask,
  output         io_alloc_bits_needProbeAckData
);

  assign io_b_ready = io_alloc_ready;
  assign io_alloc_valid = io_b_valid;
  assign io_alloc_bits_opcode = io_b_bits_opcode;
  assign io_alloc_bits_param = {1'h0, io_b_bits_param};
  assign io_alloc_bits_size = io_b_bits_size;
  assign io_alloc_bits_source = {7'h0, io_b_bits_source};
  assign io_alloc_bits_set = io_b_bits_address[16:6];
  assign io_alloc_bits_tag = io_b_bits_address[47:17];
  assign io_alloc_bits_off = io_b_bits_address[5:0];
  assign io_alloc_bits_mask = io_b_bits_mask;
  assign io_alloc_bits_needProbeAckData = io_b_bits_data[0];
endmodule

