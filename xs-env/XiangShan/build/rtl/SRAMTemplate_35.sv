// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_35(
  input         clock,
  input         reset,
  output        io_r_req_ready,
  input         io_r_req_valid,
  input  [7:0]  io_r_req_bits_setIdx,
  output        io_r_resp_data_0,
  output        io_r_resp_data_1,
  output        io_r_resp_data_2,
  output        io_r_resp_data_3,
  output        io_r_resp_data_4,
  output        io_r_resp_data_5,
  output        io_r_resp_data_6,
  output        io_r_resp_data_7,
  output        io_r_resp_data_8,
  output        io_r_resp_data_9,
  output        io_r_resp_data_10,
  output        io_r_resp_data_11,
  output        io_r_resp_data_12,
  output        io_r_resp_data_13,
  output        io_r_resp_data_14,
  output        io_r_resp_data_15,
  input         io_w_req_valid,
  input  [7:0]  io_w_req_bits_setIdx,
  input         io_w_req_bits_data_0,
  input         io_w_req_bits_data_1,
  input         io_w_req_bits_data_2,
  input         io_w_req_bits_data_3,
  input         io_w_req_bits_data_4,
  input         io_w_req_bits_data_5,
  input         io_w_req_bits_data_6,
  input         io_w_req_bits_data_7,
  input         io_w_req_bits_data_8,
  input         io_w_req_bits_data_9,
  input         io_w_req_bits_data_10,
  input         io_w_req_bits_data_11,
  input         io_w_req_bits_data_12,
  input         io_w_req_bits_data_13,
  input         io_w_req_bits_data_14,
  input         io_w_req_bits_data_15,
  input  [15:0] io_w_req_bits_waymask,
  input         extra_reset
);

  wire [7:0]  setIdx;
  wire        realRen;
  wire        wen;
  wire        _ClockGate_Q;
  wire [15:0] _array_RW0_rdata;
  reg         _resetState;
  reg  [7:0]  _resetSet;
  assign wen = io_w_req_valid | _resetState;
  assign realRen = io_r_req_valid & ~wen;
  assign setIdx = _resetState ? _resetSet : io_w_req_bits_setIdx;
  reg         rdata_last_REG;
  reg         rdata_hold_data_0;
  reg         rdata_hold_data_1;
  reg         rdata_hold_data_2;
  reg         rdata_hold_data_3;
  reg         rdata_hold_data_4;
  reg         rdata_hold_data_5;
  reg         rdata_hold_data_6;
  reg         rdata_hold_data_7;
  reg         rdata_hold_data_8;
  reg         rdata_hold_data_9;
  reg         rdata_hold_data_10;
  reg         rdata_hold_data_11;
  reg         rdata_hold_data_12;
  reg         rdata_hold_data_13;
  reg         rdata_hold_data_14;
  reg         rdata_hold_data_15;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      _resetState <= 1'h1;
      _resetSet <= 8'h0;
      rdata_last_REG <= 1'h0;
    end
    else begin
      _resetState <= extra_reset | ~(_resetState & (&_resetSet)) & _resetState;
      if (_resetState)
        _resetSet <= 8'(_resetSet + 8'h1);
      rdata_last_REG <= realRen;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (rdata_last_REG) begin
      rdata_hold_data_0 <= _array_RW0_rdata[0];
      rdata_hold_data_1 <= _array_RW0_rdata[1];
      rdata_hold_data_2 <= _array_RW0_rdata[2];
      rdata_hold_data_3 <= _array_RW0_rdata[3];
      rdata_hold_data_4 <= _array_RW0_rdata[4];
      rdata_hold_data_5 <= _array_RW0_rdata[5];
      rdata_hold_data_6 <= _array_RW0_rdata[6];
      rdata_hold_data_7 <= _array_RW0_rdata[7];
      rdata_hold_data_8 <= _array_RW0_rdata[8];
      rdata_hold_data_9 <= _array_RW0_rdata[9];
      rdata_hold_data_10 <= _array_RW0_rdata[10];
      rdata_hold_data_11 <= _array_RW0_rdata[11];
      rdata_hold_data_12 <= _array_RW0_rdata[12];
      rdata_hold_data_13 <= _array_RW0_rdata[13];
      rdata_hold_data_14 <= _array_RW0_rdata[14];
      rdata_hold_data_15 <= _array_RW0_rdata[15];
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:33];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h22; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        _resetState = _RANDOM[6'h0][0];
        _resetSet = _RANDOM[6'h0][8:1];
        rdata_last_REG = _RANDOM[6'h21][10];
        rdata_hold_data_0 = _RANDOM[6'h21][11];
        rdata_hold_data_1 = _RANDOM[6'h21][12];
        rdata_hold_data_2 = _RANDOM[6'h21][13];
        rdata_hold_data_3 = _RANDOM[6'h21][14];
        rdata_hold_data_4 = _RANDOM[6'h21][15];
        rdata_hold_data_5 = _RANDOM[6'h21][16];
        rdata_hold_data_6 = _RANDOM[6'h21][17];
        rdata_hold_data_7 = _RANDOM[6'h21][18];
        rdata_hold_data_8 = _RANDOM[6'h21][19];
        rdata_hold_data_9 = _RANDOM[6'h21][20];
        rdata_hold_data_10 = _RANDOM[6'h21][21];
        rdata_hold_data_11 = _RANDOM[6'h21][22];
        rdata_hold_data_12 = _RANDOM[6'h21][23];
        rdata_hold_data_13 = _RANDOM[6'h21][24];
        rdata_hold_data_14 = _RANDOM[6'h21][25];
        rdata_hold_data_15 = _RANDOM[6'h21][26];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        _resetState = 1'h1;
        _resetSet = 8'h0;
        rdata_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_2 array (
    .RW0_addr  (wen ? setIdx : io_r_req_bits_setIdx),
    .RW0_en    (realRen | wen),
    .RW0_clk   (_ClockGate_Q),
    .RW0_wmode (wen),
    .RW0_wdata
      ({~_resetState & io_w_req_bits_data_15,
        ~_resetState & io_w_req_bits_data_14,
        ~_resetState & io_w_req_bits_data_13,
        ~_resetState & io_w_req_bits_data_12,
        ~_resetState & io_w_req_bits_data_11,
        ~_resetState & io_w_req_bits_data_10,
        ~_resetState & io_w_req_bits_data_9,
        ~_resetState & io_w_req_bits_data_8,
        ~_resetState & io_w_req_bits_data_7,
        ~_resetState & io_w_req_bits_data_6,
        ~_resetState & io_w_req_bits_data_5,
        ~_resetState & io_w_req_bits_data_4,
        ~_resetState & io_w_req_bits_data_3,
        ~_resetState & io_w_req_bits_data_2,
        ~_resetState & io_w_req_bits_data_1,
        ~_resetState & io_w_req_bits_data_0}),
    .RW0_rdata (_array_RW0_rdata),
    .RW0_wmask (_resetState ? 16'hFFFF : io_w_req_bits_waymask)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (io_r_req_valid | wen),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  assign io_r_req_ready = ~_resetState & ~wen;
  assign io_r_resp_data_0 = rdata_last_REG ? _array_RW0_rdata[0] : rdata_hold_data_0;
  assign io_r_resp_data_1 = rdata_last_REG ? _array_RW0_rdata[1] : rdata_hold_data_1;
  assign io_r_resp_data_2 = rdata_last_REG ? _array_RW0_rdata[2] : rdata_hold_data_2;
  assign io_r_resp_data_3 = rdata_last_REG ? _array_RW0_rdata[3] : rdata_hold_data_3;
  assign io_r_resp_data_4 = rdata_last_REG ? _array_RW0_rdata[4] : rdata_hold_data_4;
  assign io_r_resp_data_5 = rdata_last_REG ? _array_RW0_rdata[5] : rdata_hold_data_5;
  assign io_r_resp_data_6 = rdata_last_REG ? _array_RW0_rdata[6] : rdata_hold_data_6;
  assign io_r_resp_data_7 = rdata_last_REG ? _array_RW0_rdata[7] : rdata_hold_data_7;
  assign io_r_resp_data_8 = rdata_last_REG ? _array_RW0_rdata[8] : rdata_hold_data_8;
  assign io_r_resp_data_9 = rdata_last_REG ? _array_RW0_rdata[9] : rdata_hold_data_9;
  assign io_r_resp_data_10 = rdata_last_REG ? _array_RW0_rdata[10] : rdata_hold_data_10;
  assign io_r_resp_data_11 = rdata_last_REG ? _array_RW0_rdata[11] : rdata_hold_data_11;
  assign io_r_resp_data_12 = rdata_last_REG ? _array_RW0_rdata[12] : rdata_hold_data_12;
  assign io_r_resp_data_13 = rdata_last_REG ? _array_RW0_rdata[13] : rdata_hold_data_13;
  assign io_r_resp_data_14 = rdata_last_REG ? _array_RW0_rdata[14] : rdata_hold_data_14;
  assign io_r_resp_data_15 = rdata_last_REG ? _array_RW0_rdata[15] : rdata_hold_data_15;
endmodule

