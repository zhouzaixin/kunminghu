// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MaxPeriodFibonacciLFSR(
  input  clock,
  input  reset,
  output io_out_0,
  output io_out_1,
  output io_out_2,
  output io_out_3,
  output io_out_4,
  output io_out_5,
  output io_out_6,
  output io_out_7,
  output io_out_8,
  output io_out_9,
  output io_out_10,
  output io_out_11,
  output io_out_12,
  output io_out_13,
  output io_out_14
);

  reg state_0;
  reg state_1;
  reg state_2;
  reg state_3;
  reg state_4;
  reg state_5;
  reg state_6;
  reg state_7;
  reg state_8;
  reg state_9;
  reg state_10;
  reg state_11;
  reg state_12;
  reg state_13;
  reg state_14;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      state_0 <= 1'h1;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h0;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
      state_8 <= 1'h0;
      state_9 <= 1'h0;
      state_10 <= 1'h0;
      state_11 <= 1'h0;
      state_12 <= 1'h0;
      state_13 <= 1'h0;
      state_14 <= 1'h0;
    end
    else begin
      state_0 <= state_14 ^ state_13;
      state_1 <= state_0;
      state_2 <= state_1;
      state_3 <= state_2;
      state_4 <= state_3;
      state_5 <= state_4;
      state_6 <= state_5;
      state_7 <= state_6;
      state_8 <= state_7;
      state_9 <= state_8;
      state_10 <= state_9;
      state_11 <= state_10;
      state_12 <= state_11;
      state_13 <= state_12;
      state_14 <= state_13;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        state_0 = _RANDOM[/*Zero width*/ 1'b0][0];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        state_2 = _RANDOM[/*Zero width*/ 1'b0][2];
        state_3 = _RANDOM[/*Zero width*/ 1'b0][3];
        state_4 = _RANDOM[/*Zero width*/ 1'b0][4];
        state_5 = _RANDOM[/*Zero width*/ 1'b0][5];
        state_6 = _RANDOM[/*Zero width*/ 1'b0][6];
        state_7 = _RANDOM[/*Zero width*/ 1'b0][7];
        state_8 = _RANDOM[/*Zero width*/ 1'b0][8];
        state_9 = _RANDOM[/*Zero width*/ 1'b0][9];
        state_10 = _RANDOM[/*Zero width*/ 1'b0][10];
        state_11 = _RANDOM[/*Zero width*/ 1'b0][11];
        state_12 = _RANDOM[/*Zero width*/ 1'b0][12];
        state_13 = _RANDOM[/*Zero width*/ 1'b0][13];
        state_14 = _RANDOM[/*Zero width*/ 1'b0][14];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        state_0 = 1'h1;
        state_1 = 1'h0;
        state_2 = 1'h0;
        state_3 = 1'h0;
        state_4 = 1'h0;
        state_5 = 1'h0;
        state_6 = 1'h0;
        state_7 = 1'h0;
        state_8 = 1'h0;
        state_9 = 1'h0;
        state_10 = 1'h0;
        state_11 = 1'h0;
        state_12 = 1'h0;
        state_13 = 1'h0;
        state_14 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_0 = state_0;
  assign io_out_1 = state_1;
  assign io_out_2 = state_2;
  assign io_out_3 = state_3;
  assign io_out_4 = state_4;
  assign io_out_5 = state_5;
  assign io_out_6 = state_6;
  assign io_out_7 = state_7;
  assign io_out_8 = state_8;
  assign io_out_9 = state_9;
  assign io_out_10 = state_10;
  assign io_out_11 = state_11;
  assign io_out_12 = state_12;
  assign io_out_13 = state_13;
  assign io_out_14 = state_14;
endmodule

