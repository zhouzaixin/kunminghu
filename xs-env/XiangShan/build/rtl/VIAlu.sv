// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VIAlu(
  input          clock,
  input          reset,
  input          io_in_valid,
  input  [5:0]   io_in_bits_opcode_op,
  input          io_in_bits_info_vm,
  input          io_in_bits_info_ma,
  input          io_in_bits_info_ta,
  input  [2:0]   io_in_bits_info_vlmul,
  input  [7:0]   io_in_bits_info_vl,
  input  [6:0]   io_in_bits_info_vstart,
  input  [5:0]   io_in_bits_info_uopIdx,
  input  [3:0]   io_in_bits_srcType_0,
  input  [3:0]   io_in_bits_vdType,
  input  [127:0] io_in_bits_vs1,
  input  [127:0] io_in_bits_vs2,
  input  [127:0] io_in_bits_old_vd,
  input  [127:0] io_in_bits_mask,
  output [127:0] io_out_bits_vd
);

  wire [127:0] _vMaskAlu_io_out_vd;
  wire [127:0] _vReduAlu_io_out_vd;
  reg  [63:0]  vs2Ext;
  reg  [5:0]   opcodeS1_op;
  reg          validS1;
  reg  [5:0]   opcodeS2_op;
  reg  [63:0]  vs2ExtS2;
  always @(posedge clock) begin
    if (io_in_valid) begin
      vs2Ext <=
        (io_in_bits_vdType[1:0] == 2'h0
           ? {{56{io_in_bits_vs2[7]}}, io_in_bits_vs2[7:0]}
           : 64'h0)
        | (io_in_bits_vdType[1:0] == 2'h1
             ? {{48{io_in_bits_vs2[15]}}, io_in_bits_vs2[15:0]}
             : 64'h0)
        | (io_in_bits_vdType[1:0] == 2'h2
             ? {{32{io_in_bits_vs2[31]}}, io_in_bits_vs2[31:0]}
             : 64'h0) | ((&(io_in_bits_vdType[1:0])) ? io_in_bits_vs2[63:0] : 64'h0);
      opcodeS1_op <= io_in_bits_opcode_op;
    end
    validS1 <= io_in_valid;
    if (validS1) begin
      opcodeS2_op <= opcodeS1_op;
      vs2ExtS2 <= vs2Ext;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        vs2Ext = {_RANDOM[3'h0], _RANDOM[3'h1]};
        opcodeS1_op = _RANDOM[3'h2][5:0];
        validS1 = _RANDOM[3'h2][6];
        opcodeS2_op = _RANDOM[3'h2][12:7];
        vs2ExtS2 = {_RANDOM[3'h2][31:13], _RANDOM[3'h3], _RANDOM[3'h4][12:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Reduction vReduAlu (
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (io_in_valid),
    .io_in_bits_opcode_op   (io_in_bits_opcode_op),
    .io_in_bits_info_vm     (io_in_bits_info_vm),
    .io_in_bits_info_ta     (io_in_bits_info_ta),
    .io_in_bits_info_vlmul  (io_in_bits_info_vlmul),
    .io_in_bits_info_vl     (io_in_bits_info_vl),
    .io_in_bits_info_uopIdx (io_in_bits_info_uopIdx),
    .io_in_bits_srcType_0   (io_in_bits_srcType_0),
    .io_in_bits_vdType      (io_in_bits_vdType),
    .io_in_bits_vs1         (io_in_bits_vs1),
    .io_in_bits_vs2         (io_in_bits_vs2),
    .io_in_bits_old_vd      (io_in_bits_old_vd),
    .io_in_bits_mask        (io_in_bits_mask),
    .io_out_vd              (_vReduAlu_io_out_vd)
  );
  VMask vMaskAlu (
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (io_in_valid),
    .io_in_bits_opcode_op   (io_in_bits_opcode_op),
    .io_in_bits_info_vm     (io_in_bits_info_vm),
    .io_in_bits_info_ma     (io_in_bits_info_ma),
    .io_in_bits_info_ta     (io_in_bits_info_ta),
    .io_in_bits_info_vl     (io_in_bits_info_vl),
    .io_in_bits_info_vstart (io_in_bits_info_vstart),
    .io_in_bits_info_uopIdx (io_in_bits_info_uopIdx),
    .io_in_bits_vdType      (io_in_bits_vdType),
    .io_in_bits_vs1         (io_in_bits_vs1),
    .io_in_bits_vs2         (io_in_bits_vs2),
    .io_in_bits_old_vd      (io_in_bits_old_vd),
    .io_in_bits_mask        (io_in_bits_mask),
    .io_out_vd              (_vMaskAlu_io_out_vd)
  );
  assign io_out_bits_vd =
    opcodeS2_op == 6'h2F
      ? {64'h0, vs2ExtS2}
      : opcodeS2_op > 6'h20 & opcodeS2_op < 6'h27
          ? _vReduAlu_io_out_vd
          : _vMaskAlu_io_out_vd;
endmodule

