// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ExeUnit(
  input         clock,
  input         reset,
  input         io_flush_valid,
  input         io_flush_bits_robIdx_flag,
  input  [7:0]  io_flush_bits_robIdx_value,
  input         io_flush_bits_level,
  input         io_in_valid,
  input  [34:0] io_in_bits_fuType,
  input  [8:0]  io_in_bits_fuOpType,
  input  [63:0] io_in_bits_src_0,
  input  [63:0] io_in_bits_src_1,
  input         io_in_bits_robIdx_flag,
  input  [7:0]  io_in_bits_robIdx_value,
  input  [7:0]  io_in_bits_pdest,
  input         io_in_bits_rfWen,
  output        io_out_valid,
  output [63:0] io_out_bits_data_0,
  output [63:0] io_out_bits_data_1,
  output [7:0]  io_out_bits_pdest,
  output        io_out_bits_robIdx_flag,
  output [7:0]  io_out_bits_robIdx_value,
  output        io_out_bits_intWen
);

  wire        _in1ToN_io_out_0_valid;
  wire [8:0]  _in1ToN_io_out_0_bits_fuOpType;
  wire        _in1ToN_io_out_1_valid;
  wire [8:0]  _in1ToN_io_out_1_bits_fuOpType;
  wire        _in1ToN_io_out_2_valid;
  wire [8:0]  _in1ToN_io_out_2_bits_fuOpType;
  wire        _ClockGate_1_Q;
  wire        _ClockGate_Q;
  wire        _Bku_io_out_valid;
  wire        _Bku_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]  _Bku_io_out_bits_ctrl_robIdx_value;
  wire [7:0]  _Bku_io_out_bits_ctrl_pdest;
  wire        _Bku_io_out_bits_ctrl_rfWen;
  wire [63:0] _Bku_io_out_bits_res_data;
  wire        _Mul_io_out_valid;
  wire        _Mul_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]  _Mul_io_out_bits_ctrl_robIdx_value;
  wire [7:0]  _Mul_io_out_bits_ctrl_pdest;
  wire        _Mul_io_out_bits_ctrl_rfWen;
  wire [63:0] _Mul_io_out_bits_res_data;
  wire        _Alu_io_out_valid;
  wire        _Alu_io_out_bits_ctrl_robIdx_flag;
  wire [7:0]  _Alu_io_out_bits_ctrl_robIdx_value;
  wire [7:0]  _Alu_io_out_bits_ctrl_pdest;
  wire        _Alu_io_out_bits_ctrl_rfWen;
  wire [63:0] _Alu_io_out_bits_res_data;
  reg         fuVld_en_reg_1;
  reg         fuVldVec_1;
  reg         fuVldVec_2;
  wire        fuVld_en_1 = _in1ToN_io_out_1_valid | fuVldVec_1 | fuVldVec_2;
  reg         fuVld_en_reg_2;
  reg         fuVldVec_1_1;
  reg         fuVldVec_2_1;
  wire        fuVld_en_2 = _in1ToN_io_out_2_valid | fuVldVec_1_1 | fuVldVec_2_1;
  reg         inPipe_2_1;
  reg         inPipe_2_2;
  reg         inPipe_1_1_robIdx_flag;
  reg  [7:0]  inPipe_1_1_robIdx_value;
  reg  [7:0]  inPipe_1_1_pdest;
  reg         inPipe_1_1_rfWen;
  reg         inPipe_1_2_robIdx_flag;
  reg  [7:0]  inPipe_1_2_robIdx_value;
  reg  [7:0]  inPipe_1_2_pdest;
  reg         inPipe_1_2_rfWen;
  wire [63:0] io_out_bits_data_1_0 =
    (_Alu_io_out_valid ? _Alu_io_out_bits_res_data : 64'h0)
    | (_Mul_io_out_valid ? _Mul_io_out_bits_res_data : 64'h0)
    | (_Bku_io_out_valid ? _Bku_io_out_bits_res_data : 64'h0);
  wire [8:0]  _inPipe_flushVec_flushItself_T_10 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      fuVld_en_reg_1 <= 1'h0;
      fuVldVec_1 <= 1'h0;
      fuVldVec_2 <= 1'h0;
      fuVld_en_reg_2 <= 1'h0;
      fuVldVec_1_1 <= 1'h0;
      fuVldVec_2_1 <= 1'h0;
      inPipe_2_1 <= 1'h0;
      inPipe_2_2 <= 1'h0;
    end
    else begin
      fuVld_en_reg_1 <= fuVld_en_1;
      fuVldVec_1 <= _in1ToN_io_out_1_valid;
      fuVldVec_2 <= fuVldVec_1;
      fuVld_en_reg_2 <= fuVld_en_2;
      fuVldVec_1_1 <= _in1ToN_io_out_2_valid;
      fuVldVec_2_1 <= fuVldVec_1_1;
      inPipe_2_1 <=
        io_in_valid
        & ~(io_in_valid & io_flush_valid
            & (io_flush_bits_level
               & {io_in_bits_robIdx_flag,
                  io_in_bits_robIdx_value} == _inPipe_flushVec_flushItself_T_10
               | io_in_bits_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ io_in_bits_robIdx_value > io_flush_bits_robIdx_value));
      inPipe_2_2 <=
        inPipe_2_1
        & ~(inPipe_2_1 & io_flush_valid
            & (io_flush_bits_level
               & {inPipe_1_1_robIdx_flag,
                  inPipe_1_1_robIdx_value} == _inPipe_flushVec_flushItself_T_10
               | inPipe_1_1_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ inPipe_1_1_robIdx_value > io_flush_bits_robIdx_value));
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    inPipe_1_1_robIdx_flag <= io_in_bits_robIdx_flag;
    inPipe_1_1_robIdx_value <= io_in_bits_robIdx_value;
    inPipe_1_1_pdest <= io_in_bits_pdest;
    inPipe_1_1_rfWen <= io_in_bits_rfWen;
    inPipe_1_2_robIdx_flag <= inPipe_1_1_robIdx_flag;
    inPipe_1_2_robIdx_value <= inPipe_1_1_robIdx_value;
    inPipe_1_2_pdest <= inPipe_1_1_pdest;
    inPipe_1_2_rfWen <= inPipe_1_1_rfWen;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:35];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h24; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        fuVld_en_reg_1 = _RANDOM[6'h0][2];
        fuVldVec_1 = _RANDOM[6'h0][4];
        fuVldVec_2 = _RANDOM[6'h0][5];
        fuVld_en_reg_2 = _RANDOM[6'h0][6];
        fuVldVec_1_1 = _RANDOM[6'h0][8];
        fuVldVec_2_1 = _RANDOM[6'h0][9];
        inPipe_2_1 = _RANDOM[6'h0][11];
        inPipe_2_2 = _RANDOM[6'h0][12];
        inPipe_1_1_robIdx_flag = _RANDOM[6'h7][25];
        inPipe_1_1_robIdx_value = {_RANDOM[6'h7][31:26], _RANDOM[6'h8][1:0]};
        inPipe_1_1_pdest = _RANDOM[6'h8][14:7];
        inPipe_1_1_rfWen = _RANDOM[6'h8][15];
        inPipe_1_2_robIdx_flag = _RANDOM[6'h22][23];
        inPipe_1_2_robIdx_value = _RANDOM[6'h22][31:24];
        inPipe_1_2_pdest = _RANDOM[6'h23][12:5];
        inPipe_1_2_rfWen = _RANDOM[6'h23][13];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        fuVld_en_reg_1 = 1'h0;
        fuVldVec_1 = 1'h0;
        fuVldVec_2 = 1'h0;
        fuVld_en_reg_2 = 1'h0;
        fuVldVec_1_1 = 1'h0;
        fuVldVec_2_1 = 1'h0;
        inPipe_2_1 = 1'h0;
        inPipe_2_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Alu Alu (
    .io_in_valid                        (_in1ToN_io_out_0_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_0_bits_fuOpType),
    .io_in_bits_ctrlPipe_0_robIdx_flag  (io_in_bits_robIdx_flag),
    .io_in_bits_ctrlPipe_0_robIdx_value (io_in_bits_robIdx_value),
    .io_in_bits_ctrlPipe_0_pdest        (io_in_bits_pdest),
    .io_in_bits_ctrlPipe_0_rfWen        (io_in_bits_rfWen),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (_Alu_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (_Alu_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (_Alu_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest             (_Alu_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_rfWen             (_Alu_io_out_bits_ctrl_rfWen),
    .io_out_bits_res_data               (_Alu_io_out_bits_res_data)
  );
  MulUnit Mul (
    .clock                              (_ClockGate_Q),
    .reset                              (reset),
    .io_in_valid                        (_in1ToN_io_out_1_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_1_bits_fuOpType),
    .io_in_bits_ctrlPipe_2_robIdx_flag  (inPipe_1_2_robIdx_flag),
    .io_in_bits_ctrlPipe_2_robIdx_value (inPipe_1_2_robIdx_value),
    .io_in_bits_ctrlPipe_2_pdest        (inPipe_1_2_pdest),
    .io_in_bits_ctrlPipe_2_rfWen        (inPipe_1_2_rfWen),
    .io_in_bits_validPipe_0             (io_in_valid),
    .io_in_bits_validPipe_1             (inPipe_2_1),
    .io_in_bits_validPipe_2             (inPipe_2_2),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (_Mul_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (_Mul_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (_Mul_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest             (_Mul_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_rfWen             (_Mul_io_out_bits_ctrl_rfWen),
    .io_out_bits_res_data               (_Mul_io_out_bits_res_data)
  );
  Bku Bku (
    .clock                              (_ClockGate_1_Q),
    .reset                              (reset),
    .io_in_valid                        (_in1ToN_io_out_2_valid),
    .io_in_bits_ctrl_fuOpType           (_in1ToN_io_out_2_bits_fuOpType),
    .io_in_bits_ctrlPipe_2_robIdx_flag  (inPipe_1_2_robIdx_flag),
    .io_in_bits_ctrlPipe_2_robIdx_value (inPipe_1_2_robIdx_value),
    .io_in_bits_ctrlPipe_2_pdest        (inPipe_1_2_pdest),
    .io_in_bits_ctrlPipe_2_rfWen        (inPipe_1_2_rfWen),
    .io_in_bits_validPipe_0             (io_in_valid),
    .io_in_bits_validPipe_1             (inPipe_2_1),
    .io_in_bits_validPipe_2             (inPipe_2_2),
    .io_in_bits_data_src_1              (io_in_bits_src_1),
    .io_in_bits_data_src_0              (io_in_bits_src_0),
    .io_out_valid                       (_Bku_io_out_valid),
    .io_out_bits_ctrl_robIdx_flag       (_Bku_io_out_bits_ctrl_robIdx_flag),
    .io_out_bits_ctrl_robIdx_value      (_Bku_io_out_bits_ctrl_robIdx_value),
    .io_out_bits_ctrl_pdest             (_Bku_io_out_bits_ctrl_pdest),
    .io_out_bits_ctrl_rfWen             (_Bku_io_out_bits_ctrl_rfWen),
    .io_out_bits_res_data               (_Bku_io_out_bits_res_data)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (fuVld_en_1 | fuVld_en_reg_1),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (fuVld_en_2 | fuVld_en_reg_2),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  Dispatcher in1ToN (
    .io_in_valid            (io_in_valid),
    .io_in_bits_fuType      (io_in_bits_fuType),
    .io_in_bits_fuOpType    (io_in_bits_fuOpType),
    .io_out_0_valid         (_in1ToN_io_out_0_valid),
    .io_out_0_bits_fuOpType (_in1ToN_io_out_0_bits_fuOpType),
    .io_out_1_valid         (_in1ToN_io_out_1_valid),
    .io_out_1_bits_fuOpType (_in1ToN_io_out_1_bits_fuOpType),
    .io_out_2_valid         (_in1ToN_io_out_2_valid),
    .io_out_2_bits_fuOpType (_in1ToN_io_out_2_bits_fuOpType)
  );
  assign io_out_valid = |{_Alu_io_out_valid, _Mul_io_out_valid, _Bku_io_out_valid};
  assign io_out_bits_data_0 = io_out_bits_data_1_0;
  assign io_out_bits_data_1 = io_out_bits_data_1_0;
  assign io_out_bits_pdest =
    (_Alu_io_out_valid ? _Alu_io_out_bits_ctrl_pdest : 8'h0)
    | (_Mul_io_out_valid ? _Mul_io_out_bits_ctrl_pdest : 8'h0)
    | (_Bku_io_out_valid ? _Bku_io_out_bits_ctrl_pdest : 8'h0);
  assign io_out_bits_robIdx_flag =
    _Alu_io_out_valid & _Alu_io_out_bits_ctrl_robIdx_flag | _Mul_io_out_valid
    & _Mul_io_out_bits_ctrl_robIdx_flag | _Bku_io_out_valid
    & _Bku_io_out_bits_ctrl_robIdx_flag;
  assign io_out_bits_robIdx_value =
    (_Alu_io_out_valid ? _Alu_io_out_bits_ctrl_robIdx_value : 8'h0)
    | (_Mul_io_out_valid ? _Mul_io_out_bits_ctrl_robIdx_value : 8'h0)
    | (_Bku_io_out_valid ? _Bku_io_out_bits_ctrl_robIdx_value : 8'h0);
  assign io_out_bits_intWen =
    _Alu_io_out_valid & _Alu_io_out_bits_ctrl_rfWen | _Mul_io_out_valid
    & _Mul_io_out_bits_ctrl_rfWen | _Bku_io_out_valid & _Bku_io_out_bits_ctrl_rfWen;
endmodule

