// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PrefetcherMonitor(
  input  clock,
  input  reset,
  input  io_timely_total_prefetch,
  input  io_timely_late_hit_prefetch,
  input  io_timely_late_miss_prefetch,
  input  io_validity_good_prefetch,
  input  io_validity_bad_prefetch,
  output io_pf_ctrl_enable,
  output io_pf_ctrl_confidence
);

  reg         enable;
  reg         confidence;
  reg  [10:0] total_prefetch_cnt;
  reg  [10:0] late_hit_prefetch_cnt;
  reg  [10:0] late_miss_prefetch_cnt;
  reg  [10:0] good_prefetch_cnt;
  reg  [10:0] bad_prefetch_cnt;
  reg  [17:0] back_off_cnt;
  reg  [18:0] low_conf_cnt;
  wire        timely_reset =
    total_prefetch_cnt == 11'h3E8 | late_hit_prefetch_cnt > 11'h3E7;
  wire        validity_reset = 11'(good_prefetch_cnt + bad_prefetch_cnt) == 11'h3E8;
  wire        back_off_reset = back_off_cnt == 18'h186A0;
  wire        conf_reset = low_conf_cnt == 19'h30D40;
  wire        trigger_disable = validity_reset & bad_prefetch_cnt > 11'h383;
  wire        _enable_T = back_off_reset | enable;
  wire        _confidence_T = conf_reset | confidence;
  wire        _GEN = timely_reset & late_hit_prefetch_cnt > 11'h383 | trigger_disable;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      enable <= 1'h1;
      confidence <= 1'h1;
      total_prefetch_cnt <= 11'h0;
      late_hit_prefetch_cnt <= 11'h0;
      late_miss_prefetch_cnt <= 11'h0;
      good_prefetch_cnt <= 11'h0;
      bad_prefetch_cnt <= 11'h0;
      back_off_cnt <= 18'h0;
      low_conf_cnt <= 19'h0;
    end
    else begin
      if (timely_reset & late_miss_prefetch_cnt > 11'hC7) begin
        enable <= ~trigger_disable & _enable_T;
        confidence <= ~trigger_disable & _confidence_T;
      end
      else begin
        enable <= ~_GEN & _enable_T;
        confidence <= ~_GEN & _confidence_T;
      end
      if (timely_reset) begin
        total_prefetch_cnt <= 11'h0;
        late_hit_prefetch_cnt <= 11'h0;
        late_miss_prefetch_cnt <= 11'h0;
      end
      else begin
        total_prefetch_cnt <= 11'(total_prefetch_cnt + {10'h0, io_timely_total_prefetch});
        late_hit_prefetch_cnt <=
          11'(late_hit_prefetch_cnt + {10'h0, io_timely_late_hit_prefetch});
        late_miss_prefetch_cnt <=
          11'(late_miss_prefetch_cnt + {10'h0, io_timely_late_miss_prefetch});
      end
      if (validity_reset) begin
        good_prefetch_cnt <= 11'h0;
        bad_prefetch_cnt <= 11'h0;
      end
      else begin
        good_prefetch_cnt <= 11'(good_prefetch_cnt + {10'h0, io_validity_good_prefetch});
        bad_prefetch_cnt <= 11'(bad_prefetch_cnt + {10'h0, io_validity_bad_prefetch});
      end
      if (back_off_reset)
        back_off_cnt <= 18'h0;
      else
        back_off_cnt <= 18'(back_off_cnt + {17'h0, ~enable});
      if (conf_reset)
        low_conf_cnt <= 19'h0;
      else
        low_conf_cnt <= 19'(low_conf_cnt + {18'h0, ~confidence});
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        enable = _RANDOM[3'h0][11];
        confidence = _RANDOM[3'h0][12];
        total_prefetch_cnt = _RANDOM[3'h0][23:13];
        late_hit_prefetch_cnt = {_RANDOM[3'h0][31:24], _RANDOM[3'h1][2:0]};
        late_miss_prefetch_cnt = _RANDOM[3'h1][13:3];
        good_prefetch_cnt = _RANDOM[3'h2][24:14];
        bad_prefetch_cnt = {_RANDOM[3'h2][31:25], _RANDOM[3'h3][3:0]};
        back_off_cnt = _RANDOM[3'h3][21:4];
        low_conf_cnt = {_RANDOM[3'h3][31:22], _RANDOM[3'h4][8:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        enable = 1'h1;
        confidence = 1'h1;
        total_prefetch_cnt = 11'h0;
        late_hit_prefetch_cnt = 11'h0;
        late_miss_prefetch_cnt = 11'h0;
        good_prefetch_cnt = 11'h0;
        bad_prefetch_cnt = 11'h0;
        back_off_cnt = 18'h0;
        low_conf_cnt = 19'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_pf_ctrl_enable = enable;
  assign io_pf_ctrl_confidence = confidence;
endmodule

