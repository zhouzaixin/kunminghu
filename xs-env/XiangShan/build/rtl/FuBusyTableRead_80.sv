// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FuBusyTableRead_80(
  input  [4:0]  io_in_fuBusyTable,
  input  [34:0] io_in_fuTypeRegVec_0,
  input  [34:0] io_in_fuTypeRegVec_1,
  input  [34:0] io_in_fuTypeRegVec_2,
  input  [34:0] io_in_fuTypeRegVec_3,
  input  [34:0] io_in_fuTypeRegVec_4,
  input  [34:0] io_in_fuTypeRegVec_5,
  input  [34:0] io_in_fuTypeRegVec_6,
  input  [34:0] io_in_fuTypeRegVec_7,
  input  [34:0] io_in_fuTypeRegVec_8,
  input  [34:0] io_in_fuTypeRegVec_9,
  input  [34:0] io_in_fuTypeRegVec_10,
  input  [34:0] io_in_fuTypeRegVec_11,
  input  [34:0] io_in_fuTypeRegVec_12,
  input  [34:0] io_in_fuTypeRegVec_13,
  input  [34:0] io_in_fuTypeRegVec_14,
  input  [34:0] io_in_fuTypeRegVec_15,
  output [15:0] io_out_fuBusyTableMask
);

  assign io_out_fuBusyTableMask =
    (io_in_fuBusyTable[2]
       ? {io_in_fuTypeRegVec_15[19],
          io_in_fuTypeRegVec_14[19],
          io_in_fuTypeRegVec_13[19],
          io_in_fuTypeRegVec_12[19],
          io_in_fuTypeRegVec_11[19],
          io_in_fuTypeRegVec_10[19],
          io_in_fuTypeRegVec_9[19],
          io_in_fuTypeRegVec_8[19],
          io_in_fuTypeRegVec_7[19],
          io_in_fuTypeRegVec_6[19],
          io_in_fuTypeRegVec_5[19],
          io_in_fuTypeRegVec_4[19],
          io_in_fuTypeRegVec_3[19],
          io_in_fuTypeRegVec_2[19],
          io_in_fuTypeRegVec_1[19],
          io_in_fuTypeRegVec_0[19]}
       : 16'h0)
    | (io_in_fuBusyTable[4]
         ? {io_in_fuTypeRegVec_15[25],
            io_in_fuTypeRegVec_14[25],
            io_in_fuTypeRegVec_13[25],
            io_in_fuTypeRegVec_12[25],
            io_in_fuTypeRegVec_11[25],
            io_in_fuTypeRegVec_10[25],
            io_in_fuTypeRegVec_9[25],
            io_in_fuTypeRegVec_8[25],
            io_in_fuTypeRegVec_7[25],
            io_in_fuTypeRegVec_6[25],
            io_in_fuTypeRegVec_5[25],
            io_in_fuTypeRegVec_4[25],
            io_in_fuTypeRegVec_3[25],
            io_in_fuTypeRegVec_2[25],
            io_in_fuTypeRegVec_1[25],
            io_in_fuTypeRegVec_0[25]}
         : 16'h0);
endmodule

