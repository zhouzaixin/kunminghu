// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module EnqPolicy_18(
  input  [7:0] io_canEnq,
  output       io_enqSelOHVec_0_valid,
  output [7:0] io_enqSelOHVec_0_bits,
  output       io_enqSelOHVec_1_valid,
  output [7:0] io_enqSelOHVec_1_bits
);

  assign io_enqSelOHVec_0_valid = |io_canEnq;
  assign io_enqSelOHVec_0_bits =
    {io_canEnq[7]
       & {io_canEnq[0],
          io_canEnq[1],
          io_canEnq[2],
          io_canEnq[3],
          io_canEnq[4],
          io_canEnq[5],
          io_canEnq[6]} == 7'h0,
     io_canEnq[6]
       & {io_canEnq[0],
          io_canEnq[1],
          io_canEnq[2],
          io_canEnq[3],
          io_canEnq[4],
          io_canEnq[5]} == 6'h0,
     io_canEnq[5]
       & {io_canEnq[0], io_canEnq[1], io_canEnq[2], io_canEnq[3], io_canEnq[4]} == 5'h0,
     io_canEnq[4] & {io_canEnq[0], io_canEnq[1], io_canEnq[2], io_canEnq[3]} == 4'h0,
     io_canEnq[3] & {io_canEnq[0], io_canEnq[1], io_canEnq[2]} == 3'h0,
     io_canEnq[2] & {io_canEnq[0], io_canEnq[1]} == 2'h0,
     io_canEnq[1] & ~(io_canEnq[0]),
     io_canEnq[0]};
  assign io_enqSelOHVec_1_valid =
    io_canEnq[0] & (|(io_canEnq[7:1])) | io_canEnq[1] & (|(io_canEnq[7:2])) | io_canEnq[2]
    & (|(io_canEnq[7:3])) | io_canEnq[3] & (|(io_canEnq[7:4])) | io_canEnq[4]
    & (|(io_canEnq[7:5])) | io_canEnq[5] & (|(io_canEnq[7:6])) | io_canEnq[6]
    & io_canEnq[7];
  assign io_enqSelOHVec_1_bits =
    {io_canEnq[7],
     io_canEnq[6] & ~(io_canEnq[7]),
     io_canEnq[5] & io_canEnq[7:6] == 2'h0,
     io_canEnq[4] & io_canEnq[7:5] == 3'h0,
     io_canEnq[3] & io_canEnq[7:4] == 4'h0,
     io_canEnq[2] & io_canEnq[7:3] == 5'h0,
     io_canEnq[1] & io_canEnq[7:2] == 6'h0,
     io_canEnq[0] & io_canEnq[7:1] == 7'h0};
endmodule

